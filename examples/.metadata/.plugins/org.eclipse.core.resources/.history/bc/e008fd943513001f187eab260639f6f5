
17_2_adc_dma_single_channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dbc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003050  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf94  0800bf94  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf94  0800bf94  0001bf94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf9c  0800bf9c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf9c  0800bf9c  0001bf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfa0  0800bfa0  0001bfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800bfa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000003f8  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e12f  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a39  00000000  00000000  0002e20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bf8  00000000  00000000  00030c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000090e  00000000  00000000  00031840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000047a5  00000000  00000000  0003214e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000119de  00000000  00000000  000368f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d57fb  00000000  00000000  000482d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003698  00000000  00000000  0011dacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  00121164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f2c 	.word	0x08008f2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08008f2c 	.word	0x08008f2c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b970 	b.w	8000acc <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9e08      	ldr	r6, [sp, #32]
 800080a:	460d      	mov	r5, r1
 800080c:	4604      	mov	r4, r0
 800080e:	460f      	mov	r7, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14a      	bne.n	80008aa <__udivmoddi4+0xa6>
 8000814:	428a      	cmp	r2, r1
 8000816:	4694      	mov	ip, r2
 8000818:	d965      	bls.n	80008e6 <__udivmoddi4+0xe2>
 800081a:	fab2 f382 	clz	r3, r2
 800081e:	b143      	cbz	r3, 8000832 <__udivmoddi4+0x2e>
 8000820:	fa02 fc03 	lsl.w	ip, r2, r3
 8000824:	f1c3 0220 	rsb	r2, r3, #32
 8000828:	409f      	lsls	r7, r3
 800082a:	fa20 f202 	lsr.w	r2, r0, r2
 800082e:	4317      	orrs	r7, r2
 8000830:	409c      	lsls	r4, r3
 8000832:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000836:	fa1f f58c 	uxth.w	r5, ip
 800083a:	fbb7 f1fe 	udiv	r1, r7, lr
 800083e:	0c22      	lsrs	r2, r4, #16
 8000840:	fb0e 7711 	mls	r7, lr, r1, r7
 8000844:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000848:	fb01 f005 	mul.w	r0, r1, r5
 800084c:	4290      	cmp	r0, r2
 800084e:	d90a      	bls.n	8000866 <__udivmoddi4+0x62>
 8000850:	eb1c 0202 	adds.w	r2, ip, r2
 8000854:	f101 37ff 	add.w	r7, r1, #4294967295
 8000858:	f080 811c 	bcs.w	8000a94 <__udivmoddi4+0x290>
 800085c:	4290      	cmp	r0, r2
 800085e:	f240 8119 	bls.w	8000a94 <__udivmoddi4+0x290>
 8000862:	3902      	subs	r1, #2
 8000864:	4462      	add	r2, ip
 8000866:	1a12      	subs	r2, r2, r0
 8000868:	b2a4      	uxth	r4, r4
 800086a:	fbb2 f0fe 	udiv	r0, r2, lr
 800086e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000872:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000876:	fb00 f505 	mul.w	r5, r0, r5
 800087a:	42a5      	cmp	r5, r4
 800087c:	d90a      	bls.n	8000894 <__udivmoddi4+0x90>
 800087e:	eb1c 0404 	adds.w	r4, ip, r4
 8000882:	f100 32ff 	add.w	r2, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x294>
 800088a:	42a5      	cmp	r5, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x294>
 8000890:	4464      	add	r4, ip
 8000892:	3802      	subs	r0, #2
 8000894:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000898:	1b64      	subs	r4, r4, r5
 800089a:	2100      	movs	r1, #0
 800089c:	b11e      	cbz	r6, 80008a6 <__udivmoddi4+0xa2>
 800089e:	40dc      	lsrs	r4, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	e9c6 4300 	strd	r4, r3, [r6]
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0xbc>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	f000 80ed 	beq.w	8000a8e <__udivmoddi4+0x28a>
 80008b4:	2100      	movs	r1, #0
 80008b6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ba:	4608      	mov	r0, r1
 80008bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c0:	fab3 f183 	clz	r1, r3
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d149      	bne.n	800095c <__udivmoddi4+0x158>
 80008c8:	42ab      	cmp	r3, r5
 80008ca:	d302      	bcc.n	80008d2 <__udivmoddi4+0xce>
 80008cc:	4282      	cmp	r2, r0
 80008ce:	f200 80f8 	bhi.w	8000ac2 <__udivmoddi4+0x2be>
 80008d2:	1a84      	subs	r4, r0, r2
 80008d4:	eb65 0203 	sbc.w	r2, r5, r3
 80008d8:	2001      	movs	r0, #1
 80008da:	4617      	mov	r7, r2
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d0e2      	beq.n	80008a6 <__udivmoddi4+0xa2>
 80008e0:	e9c6 4700 	strd	r4, r7, [r6]
 80008e4:	e7df      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008e6:	b902      	cbnz	r2, 80008ea <__udivmoddi4+0xe6>
 80008e8:	deff      	udf	#255	; 0xff
 80008ea:	fab2 f382 	clz	r3, r2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f040 8090 	bne.w	8000a14 <__udivmoddi4+0x210>
 80008f4:	1a8a      	subs	r2, r1, r2
 80008f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fa:	fa1f fe8c 	uxth.w	lr, ip
 80008fe:	2101      	movs	r1, #1
 8000900:	fbb2 f5f7 	udiv	r5, r2, r7
 8000904:	fb07 2015 	mls	r0, r7, r5, r2
 8000908:	0c22      	lsrs	r2, r4, #16
 800090a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800090e:	fb0e f005 	mul.w	r0, lr, r5
 8000912:	4290      	cmp	r0, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x124>
 8000916:	eb1c 0202 	adds.w	r2, ip, r2
 800091a:	f105 38ff 	add.w	r8, r5, #4294967295
 800091e:	d202      	bcs.n	8000926 <__udivmoddi4+0x122>
 8000920:	4290      	cmp	r0, r2
 8000922:	f200 80cb 	bhi.w	8000abc <__udivmoddi4+0x2b8>
 8000926:	4645      	mov	r5, r8
 8000928:	1a12      	subs	r2, r2, r0
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000930:	fb07 2210 	mls	r2, r7, r0, r2
 8000934:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000938:	fb0e fe00 	mul.w	lr, lr, r0
 800093c:	45a6      	cmp	lr, r4
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x14e>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 32ff 	add.w	r2, r0, #4294967295
 8000948:	d202      	bcs.n	8000950 <__udivmoddi4+0x14c>
 800094a:	45a6      	cmp	lr, r4
 800094c:	f200 80bb 	bhi.w	8000ac6 <__udivmoddi4+0x2c2>
 8000950:	4610      	mov	r0, r2
 8000952:	eba4 040e 	sub.w	r4, r4, lr
 8000956:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800095a:	e79f      	b.n	800089c <__udivmoddi4+0x98>
 800095c:	f1c1 0720 	rsb	r7, r1, #32
 8000960:	408b      	lsls	r3, r1
 8000962:	fa22 fc07 	lsr.w	ip, r2, r7
 8000966:	ea4c 0c03 	orr.w	ip, ip, r3
 800096a:	fa05 f401 	lsl.w	r4, r5, r1
 800096e:	fa20 f307 	lsr.w	r3, r0, r7
 8000972:	40fd      	lsrs	r5, r7
 8000974:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000978:	4323      	orrs	r3, r4
 800097a:	fbb5 f8f9 	udiv	r8, r5, r9
 800097e:	fa1f fe8c 	uxth.w	lr, ip
 8000982:	fb09 5518 	mls	r5, r9, r8, r5
 8000986:	0c1c      	lsrs	r4, r3, #16
 8000988:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800098c:	fb08 f50e 	mul.w	r5, r8, lr
 8000990:	42a5      	cmp	r5, r4
 8000992:	fa02 f201 	lsl.w	r2, r2, r1
 8000996:	fa00 f001 	lsl.w	r0, r0, r1
 800099a:	d90b      	bls.n	80009b4 <__udivmoddi4+0x1b0>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a4:	f080 8088 	bcs.w	8000ab8 <__udivmoddi4+0x2b4>
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	f240 8085 	bls.w	8000ab8 <__udivmoddi4+0x2b4>
 80009ae:	f1a8 0802 	sub.w	r8, r8, #2
 80009b2:	4464      	add	r4, ip
 80009b4:	1b64      	subs	r4, r4, r5
 80009b6:	b29d      	uxth	r5, r3
 80009b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009bc:	fb09 4413 	mls	r4, r9, r3, r4
 80009c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009c8:	45a6      	cmp	lr, r4
 80009ca:	d908      	bls.n	80009de <__udivmoddi4+0x1da>
 80009cc:	eb1c 0404 	adds.w	r4, ip, r4
 80009d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009d4:	d26c      	bcs.n	8000ab0 <__udivmoddi4+0x2ac>
 80009d6:	45a6      	cmp	lr, r4
 80009d8:	d96a      	bls.n	8000ab0 <__udivmoddi4+0x2ac>
 80009da:	3b02      	subs	r3, #2
 80009dc:	4464      	add	r4, ip
 80009de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009e2:	fba3 9502 	umull	r9, r5, r3, r2
 80009e6:	eba4 040e 	sub.w	r4, r4, lr
 80009ea:	42ac      	cmp	r4, r5
 80009ec:	46c8      	mov	r8, r9
 80009ee:	46ae      	mov	lr, r5
 80009f0:	d356      	bcc.n	8000aa0 <__udivmoddi4+0x29c>
 80009f2:	d053      	beq.n	8000a9c <__udivmoddi4+0x298>
 80009f4:	b156      	cbz	r6, 8000a0c <__udivmoddi4+0x208>
 80009f6:	ebb0 0208 	subs.w	r2, r0, r8
 80009fa:	eb64 040e 	sbc.w	r4, r4, lr
 80009fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000a02:	40ca      	lsrs	r2, r1
 8000a04:	40cc      	lsrs	r4, r1
 8000a06:	4317      	orrs	r7, r2
 8000a08:	e9c6 7400 	strd	r7, r4, [r6]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a14:	f1c3 0120 	rsb	r1, r3, #32
 8000a18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a1c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a20:	fa25 f101 	lsr.w	r1, r5, r1
 8000a24:	409d      	lsls	r5, r3
 8000a26:	432a      	orrs	r2, r5
 8000a28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a34:	fb07 1510 	mls	r5, r7, r0, r1
 8000a38:	0c11      	lsrs	r1, r2, #16
 8000a3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a3e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a42:	428d      	cmp	r5, r1
 8000a44:	fa04 f403 	lsl.w	r4, r4, r3
 8000a48:	d908      	bls.n	8000a5c <__udivmoddi4+0x258>
 8000a4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a52:	d22f      	bcs.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a54:	428d      	cmp	r5, r1
 8000a56:	d92d      	bls.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	4461      	add	r1, ip
 8000a5c:	1b49      	subs	r1, r1, r5
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a64:	fb07 1115 	mls	r1, r7, r5, r1
 8000a68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a6c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a70:	4291      	cmp	r1, r2
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x282>
 8000a74:	eb1c 0202 	adds.w	r2, ip, r2
 8000a78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a7c:	d216      	bcs.n	8000aac <__udivmoddi4+0x2a8>
 8000a7e:	4291      	cmp	r1, r2
 8000a80:	d914      	bls.n	8000aac <__udivmoddi4+0x2a8>
 8000a82:	3d02      	subs	r5, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a52      	subs	r2, r2, r1
 8000a88:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a8c:	e738      	b.n	8000900 <__udivmoddi4+0xfc>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e708      	b.n	80008a6 <__udivmoddi4+0xa2>
 8000a94:	4639      	mov	r1, r7
 8000a96:	e6e6      	b.n	8000866 <__udivmoddi4+0x62>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x90>
 8000a9c:	4548      	cmp	r0, r9
 8000a9e:	d2a9      	bcs.n	80009f4 <__udivmoddi4+0x1f0>
 8000aa0:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	e7a3      	b.n	80009f4 <__udivmoddi4+0x1f0>
 8000aac:	4645      	mov	r5, r8
 8000aae:	e7ea      	b.n	8000a86 <__udivmoddi4+0x282>
 8000ab0:	462b      	mov	r3, r5
 8000ab2:	e794      	b.n	80009de <__udivmoddi4+0x1da>
 8000ab4:	4640      	mov	r0, r8
 8000ab6:	e7d1      	b.n	8000a5c <__udivmoddi4+0x258>
 8000ab8:	46d0      	mov	r8, sl
 8000aba:	e77b      	b.n	80009b4 <__udivmoddi4+0x1b0>
 8000abc:	3d02      	subs	r5, #2
 8000abe:	4462      	add	r2, ip
 8000ac0:	e732      	b.n	8000928 <__udivmoddi4+0x124>
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e70a      	b.n	80008dc <__udivmoddi4+0xd8>
 8000ac6:	4464      	add	r4, ip
 8000ac8:	3802      	subs	r0, #2
 8000aca:	e742      	b.n	8000952 <__udivmoddi4+0x14e>

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <lcd_ex_st7789_reginit>:
 * @brief  ST7789 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7789_reginit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8000ad4:	2011      	movs	r0, #17
 8000ad6:	f002 fc39 	bl	800334c <lcd_wr_regno>

    HAL_Delay(120);
 8000ada:	2078      	movs	r0, #120	; 0x78
 8000adc:	f004 faea 	bl	80050b4 <HAL_Delay>

    lcd_wr_regno(0x36);
 8000ae0:	2036      	movs	r0, #54	; 0x36
 8000ae2:	f002 fc33 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f002 fc1c 	bl	8003324 <lcd_wr_data>


    lcd_wr_regno(0x3A);
 8000aec:	203a      	movs	r0, #58	; 0x3a
 8000aee:	f002 fc2d 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0X05);
 8000af2:	2005      	movs	r0, #5
 8000af4:	f002 fc16 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8000af8:	20b2      	movs	r0, #178	; 0xb2
 8000afa:	f002 fc27 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8000afe:	200c      	movs	r0, #12
 8000b00:	f002 fc10 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8000b04:	200c      	movs	r0, #12
 8000b06:	f002 fc0d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f002 fc0a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x33);
 8000b10:	2033      	movs	r0, #51	; 0x33
 8000b12:	f002 fc07 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x33);
 8000b16:	2033      	movs	r0, #51	; 0x33
 8000b18:	f002 fc04 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8000b1c:	20b7      	movs	r0, #183	; 0xb7
 8000b1e:	f002 fc15 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x35);
 8000b22:	2035      	movs	r0, #53	; 0x35
 8000b24:	f002 fbfe 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 8000b28:	20bb      	movs	r0, #187	; 0xbb
 8000b2a:	f002 fc0f 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 8000b2e:	2032      	movs	r0, #50	; 0x32
 8000b30:	f002 fbf8 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8000b34:	20c0      	movs	r0, #192	; 0xc0
 8000b36:	f002 fc09 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8000b3a:	200c      	movs	r0, #12
 8000b3c:	f002 fbf2 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8000b40:	20c2      	movs	r0, #194	; 0xc2
 8000b42:	f002 fc03 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f002 fbec 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 8000b4c:	20c3      	movs	r0, #195	; 0xc3
 8000b4e:	f002 fbfd 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 8000b52:	2010      	movs	r0, #16
 8000b54:	f002 fbe6 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 8000b58:	20c4      	movs	r0, #196	; 0xc4
 8000b5a:	f002 fbf7 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 8000b5e:	2020      	movs	r0, #32
 8000b60:	f002 fbe0 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8000b64:	20c6      	movs	r0, #198	; 0xc6
 8000b66:	f002 fbf1 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x0f);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f002 fbda 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xD0);
 8000b70:	20d0      	movs	r0, #208	; 0xd0
 8000b72:	f002 fbeb 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xA4);
 8000b76:	20a4      	movs	r0, #164	; 0xa4
 8000b78:	f002 fbd4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA1);
 8000b7c:	20a1      	movs	r0, #161	; 0xa1
 8000b7e:	f002 fbd1 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 8000b82:	20e0      	movs	r0, #224	; 0xe0
 8000b84:	f002 fbe2 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8000b88:	20d0      	movs	r0, #208	; 0xd0
 8000b8a:	f002 fbcb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f002 fbc8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000b94:	2002      	movs	r0, #2
 8000b96:	f002 fbc5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x07);
 8000b9a:	2007      	movs	r0, #7
 8000b9c:	f002 fbc2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f002 fbbf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x28);
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f002 fbbc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x32);
 8000bac:	2032      	movs	r0, #50	; 0x32
 8000bae:	f002 fbb9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0X44);
 8000bb2:	2044      	movs	r0, #68	; 0x44
 8000bb4:	f002 fbb6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x42);
 8000bb8:	2042      	movs	r0, #66	; 0x42
 8000bba:	f002 fbb3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x06);
 8000bbe:	2006      	movs	r0, #6
 8000bc0:	f002 fbb0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8000bc4:	200e      	movs	r0, #14
 8000bc6:	f002 fbad 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x12);
 8000bca:	2012      	movs	r0, #18
 8000bcc:	f002 fbaa 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x14);
 8000bd0:	2014      	movs	r0, #20
 8000bd2:	f002 fba7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x17);
 8000bd6:	2017      	movs	r0, #23
 8000bd8:	f002 fba4 	bl	8003324 <lcd_wr_data>


    lcd_wr_regno(0XE1);  /* Set Gamma */
 8000bdc:	20e1      	movs	r0, #225	; 0xe1
 8000bde:	f002 fbb5 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8000be2:	20d0      	movs	r0, #208	; 0xd0
 8000be4:	f002 fb9e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f002 fb9b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f002 fb98 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x07);
 8000bf4:	2007      	movs	r0, #7
 8000bf6:	f002 fb95 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f002 fb92 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x28);
 8000c00:	2028      	movs	r0, #40	; 0x28
 8000c02:	f002 fb8f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x31);
 8000c06:	2031      	movs	r0, #49	; 0x31
 8000c08:	f002 fb8c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x54);
 8000c0c:	2054      	movs	r0, #84	; 0x54
 8000c0e:	f002 fb89 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x47);
 8000c12:	2047      	movs	r0, #71	; 0x47
 8000c14:	f002 fb86 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8000c18:	200e      	movs	r0, #14
 8000c1a:	f002 fb83 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1c);
 8000c1e:	201c      	movs	r0, #28
 8000c20:	f002 fb80 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x17);
 8000c24:	2017      	movs	r0, #23
 8000c26:	f002 fb7d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1b);
 8000c2a:	201b      	movs	r0, #27
 8000c2c:	f002 fb7a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1e);
 8000c30:	201e      	movs	r0, #30
 8000c32:	f002 fb77 	bl	8003324 <lcd_wr_data>


    lcd_wr_regno(0x2A);
 8000c36:	202a      	movs	r0, #42	; 0x2a
 8000c38:	f002 fb88 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f002 fb71 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f002 fb6e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f002 fb6b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xef);
 8000c4e:	20ef      	movs	r0, #239	; 0xef
 8000c50:	f002 fb68 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x2B);
 8000c54:	202b      	movs	r0, #43	; 0x2b
 8000c56:	f002 fb79 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f002 fb62 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f002 fb5f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f002 fb5c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8000c6c:	203f      	movs	r0, #63	; 0x3f
 8000c6e:	f002 fb59 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 8000c72:	2029      	movs	r0, #41	; 0x29
 8000c74:	f002 fb6a 	bl	800334c <lcd_wr_regno>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <lcd_ex_ili9341_reginit>:
 * @brief  ILI9341 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9341_reginit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 8000c80:	20cf      	movs	r0, #207	; 0xcf
 8000c82:	f002 fb63 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f002 fb4c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xC1);
 8000c8c:	20c1      	movs	r0, #193	; 0xc1
 8000c8e:	f002 fb49 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0X30);
 8000c92:	2030      	movs	r0, #48	; 0x30
 8000c94:	f002 fb46 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xED);
 8000c98:	20ed      	movs	r0, #237	; 0xed
 8000c9a:	f002 fb57 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x64);
 8000c9e:	2064      	movs	r0, #100	; 0x64
 8000ca0:	f002 fb40 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x03);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f002 fb3d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0X12);
 8000caa:	2012      	movs	r0, #18
 8000cac:	f002 fb3a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0X81);
 8000cb0:	2081      	movs	r0, #129	; 0x81
 8000cb2:	f002 fb37 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xE8);
 8000cb6:	20e8      	movs	r0, #232	; 0xe8
 8000cb8:	f002 fb48 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x85);
 8000cbc:	2085      	movs	r0, #133	; 0x85
 8000cbe:	f002 fb31 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x10);
 8000cc2:	2010      	movs	r0, #16
 8000cc4:	f002 fb2e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8000cc8:	207a      	movs	r0, #122	; 0x7a
 8000cca:	f002 fb2b 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xCB);
 8000cce:	20cb      	movs	r0, #203	; 0xcb
 8000cd0:	f002 fb3c 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x39);
 8000cd4:	2039      	movs	r0, #57	; 0x39
 8000cd6:	f002 fb25 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8000cda:	202c      	movs	r0, #44	; 0x2c
 8000cdc:	f002 fb22 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f002 fb1f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x34);
 8000ce6:	2034      	movs	r0, #52	; 0x34
 8000ce8:	f002 fb1c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000cec:	2002      	movs	r0, #2
 8000cee:	f002 fb19 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xF7);
 8000cf2:	20f7      	movs	r0, #247	; 0xf7
 8000cf4:	f002 fb2a 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x20);
 8000cf8:	2020      	movs	r0, #32
 8000cfa:	f002 fb13 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xEA);
 8000cfe:	20ea      	movs	r0, #234	; 0xea
 8000d00:	f002 fb24 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f002 fb0d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f002 fb0a 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 8000d10:	20c0      	movs	r0, #192	; 0xc0
 8000d12:	f002 fb1b 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 8000d16:	201b      	movs	r0, #27
 8000d18:	f002 fb04 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 8000d1c:	20c1      	movs	r0, #193	; 0xc1
 8000d1e:	f002 fb15 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 8000d22:	2001      	movs	r0, #1
 8000d24:	f002 fafe 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 8000d28:	20c5      	movs	r0, #197	; 0xc5
 8000d2a:	f002 fb0f 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 8000d2e:	2030      	movs	r0, #48	; 0x30
 8000d30:	f002 faf8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 8000d34:	2030      	movs	r0, #48	; 0x30
 8000d36:	f002 faf5 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 8000d3a:	20c7      	movs	r0, #199	; 0xc7
 8000d3c:	f002 fb06 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0XB7);
 8000d40:	20b7      	movs	r0, #183	; 0xb7
 8000d42:	f002 faef 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0x36); /*  Memory Access Control */
 8000d46:	2036      	movs	r0, #54	; 0x36
 8000d48:	f002 fb00 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x48);
 8000d4c:	2048      	movs	r0, #72	; 0x48
 8000d4e:	f002 fae9 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0x3A);
 8000d52:	203a      	movs	r0, #58	; 0x3a
 8000d54:	f002 fafa 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x55);
 8000d58:	2055      	movs	r0, #85	; 0x55
 8000d5a:	f002 fae3 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xB1);
 8000d5e:	20b1      	movs	r0, #177	; 0xb1
 8000d60:	f002 faf4 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f002 fadd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1A);
 8000d6a:	201a      	movs	r0, #26
 8000d6c:	f002 fada 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xB6); /*  Display Function Control */
 8000d70:	20b6      	movs	r0, #182	; 0xb6
 8000d72:	f002 faeb 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8000d76:	200a      	movs	r0, #10
 8000d78:	f002 fad4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8000d7c:	20a2      	movs	r0, #162	; 0xa2
 8000d7e:	f002 fad1 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
 8000d82:	20f2      	movs	r0, #242	; 0xf2
 8000d84:	f002 fae2 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f002 facb 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 8000d8e:	2026      	movs	r0, #38	; 0x26
 8000d90:	f002 fadc 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f002 fac5 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 8000d9a:	20e0      	movs	r0, #224	; 0xe0
 8000d9c:	f002 fad6 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8000da0:	200f      	movs	r0, #15
 8000da2:	f002 fabf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2A);
 8000da6:	202a      	movs	r0, #42	; 0x2a
 8000da8:	f002 fabc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x28);
 8000dac:	2028      	movs	r0, #40	; 0x28
 8000dae:	f002 fab9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x08);
 8000db2:	2008      	movs	r0, #8
 8000db4:	f002 fab6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0E);
 8000db8:	200e      	movs	r0, #14
 8000dba:	f002 fab3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x08);
 8000dbe:	2008      	movs	r0, #8
 8000dc0:	f002 fab0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x54);
 8000dc4:	2054      	movs	r0, #84	; 0x54
 8000dc6:	f002 faad 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0XA9);
 8000dca:	20a9      	movs	r0, #169	; 0xa9
 8000dcc:	f002 faaa 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x43);
 8000dd0:	2043      	movs	r0, #67	; 0x43
 8000dd2:	f002 faa7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0A);
 8000dd6:	200a      	movs	r0, #10
 8000dd8:	f002 faa4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000ddc:	200f      	movs	r0, #15
 8000dde:	f002 faa1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f002 fa9e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f002 fa9b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f002 fa98 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f002 fa95 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0XE1);    /* Set Gamma */
 8000dfa:	20e1      	movs	r0, #225	; 0xe1
 8000dfc:	f002 faa6 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f002 fa8f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x15);
 8000e06:	2015      	movs	r0, #21
 8000e08:	f002 fa8c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x17);
 8000e0c:	2017      	movs	r0, #23
 8000e0e:	f002 fa89 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x07);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f002 fa86 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x11);
 8000e18:	2011      	movs	r0, #17
 8000e1a:	f002 fa83 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x06);
 8000e1e:	2006      	movs	r0, #6
 8000e20:	f002 fa80 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2B);
 8000e24:	202b      	movs	r0, #43	; 0x2b
 8000e26:	f002 fa7d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x56);
 8000e2a:	2056      	movs	r0, #86	; 0x56
 8000e2c:	f002 fa7a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8000e30:	203c      	movs	r0, #60	; 0x3c
 8000e32:	f002 fa77 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x05);
 8000e36:	2005      	movs	r0, #5
 8000e38:	f002 fa74 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x10);
 8000e3c:	2010      	movs	r0, #16
 8000e3e:	f002 fa71 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000e42:	200f      	movs	r0, #15
 8000e44:	f002 fa6e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8000e48:	203f      	movs	r0, #63	; 0x3f
 8000e4a:	f002 fa6b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8000e4e:	203f      	movs	r0, #63	; 0x3f
 8000e50:	f002 fa68 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000e54:	200f      	movs	r0, #15
 8000e56:	f002 fa65 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0x2B);
 8000e5a:	202b      	movs	r0, #43	; 0x2b
 8000e5c:	f002 fa76 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f002 fa5f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f002 fa5c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f002 fa59 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8000e72:	203f      	movs	r0, #63	; 0x3f
 8000e74:	f002 fa56 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8000e78:	202a      	movs	r0, #42	; 0x2a
 8000e7a:	f002 fa67 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f002 fa50 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f002 fa4d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f002 fa4a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xef);
 8000e90:	20ef      	movs	r0, #239	; 0xef
 8000e92:	f002 fa47 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 8000e96:	2011      	movs	r0, #17
 8000e98:	f002 fa58 	bl	800334c <lcd_wr_regno>
    HAL_Delay(120);
 8000e9c:	2078      	movs	r0, #120	; 0x78
 8000e9e:	f004 f909 	bl	80050b4 <HAL_Delay>
    lcd_wr_regno(0x29); /* display on */
 8000ea2:	2029      	movs	r0, #41	; 0x29
 8000ea4:	f002 fa52 	bl	800334c <lcd_wr_regno>
 }
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <lcd_ex_nt35310_reginit>:
 * @brief  NT35310 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35310_reginit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 8000eb0:	20ed      	movs	r0, #237	; 0xed
 8000eb2:	f002 fa4b 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f002 fa34 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFE);
 8000ebc:	20fe      	movs	r0, #254	; 0xfe
 8000ebe:	f002 fa31 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xEE);
 8000ec2:	20ee      	movs	r0, #238	; 0xee
 8000ec4:	f002 fa42 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xDE);
 8000ec8:	20de      	movs	r0, #222	; 0xde
 8000eca:	f002 fa2b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x21);
 8000ece:	2021      	movs	r0, #33	; 0x21
 8000ed0:	f002 fa28 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF1);
 8000ed4:	20f1      	movs	r0, #241	; 0xf1
 8000ed6:	f002 fa39 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f002 fa22 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xDF);
 8000ee0:	20df      	movs	r0, #223	; 0xdf
 8000ee2:	f002 fa33 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x10);
 8000ee6:	2010      	movs	r0, #16
 8000ee8:	f002 fa1c 	bl	8003324 <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8000eec:	20c4      	movs	r0, #196	; 0xc4
 8000eee:	f002 fa2d 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 8000ef2:	208f      	movs	r0, #143	; 0x8f
 8000ef4:	f002 fa16 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8000ef8:	20c6      	movs	r0, #198	; 0xc6
 8000efa:	f002 fa27 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f002 fa10 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8000f04:	20e2      	movs	r0, #226	; 0xe2
 8000f06:	f002 fa0d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8000f0a:	20e2      	movs	r0, #226	; 0xe2
 8000f0c:	f002 fa0a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8000f10:	20e2      	movs	r0, #226	; 0xe2
 8000f12:	f002 fa07 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xBF);
 8000f16:	20bf      	movs	r0, #191	; 0xbf
 8000f18:	f002 fa18 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8000f1c:	20aa      	movs	r0, #170	; 0xaa
 8000f1e:	f002 fa01 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB0);
 8000f22:	20b0      	movs	r0, #176	; 0xb0
 8000f24:	f002 fa12 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x0D);
 8000f28:	200d      	movs	r0, #13
 8000f2a:	f002 f9fb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f002 f9f8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8000f34:	200d      	movs	r0, #13
 8000f36:	f002 f9f5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f002 f9f2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x11);
 8000f40:	2011      	movs	r0, #17
 8000f42:	f002 f9ef 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f002 f9ec 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x19);
 8000f4c:	2019      	movs	r0, #25
 8000f4e:	f002 f9e9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f002 f9e6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x21);
 8000f58:	2021      	movs	r0, #33	; 0x21
 8000f5a:	f002 f9e3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f002 f9e0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2D);
 8000f64:	202d      	movs	r0, #45	; 0x2d
 8000f66:	f002 f9dd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f002 f9da 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3D);
 8000f70:	203d      	movs	r0, #61	; 0x3d
 8000f72:	f002 f9d7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f002 f9d4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8000f7c:	205d      	movs	r0, #93	; 0x5d
 8000f7e:	f002 f9d1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f002 f9ce 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8000f88:	205d      	movs	r0, #93	; 0x5d
 8000f8a:	f002 f9cb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f002 f9c8 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB1);
 8000f94:	20b1      	movs	r0, #177	; 0xb1
 8000f96:	f002 f9d9 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x80);
 8000f9a:	2080      	movs	r0, #128	; 0x80
 8000f9c:	f002 f9c2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f002 f9bf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8000fa6:	208b      	movs	r0, #139	; 0x8b
 8000fa8:	f002 f9bc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f002 f9b9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x96);
 8000fb2:	2096      	movs	r0, #150	; 0x96
 8000fb4:	f002 f9b6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f002 f9b3 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8000fbe:	20b2      	movs	r0, #178	; 0xb2
 8000fc0:	f002 f9c4 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f002 f9ad 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f002 f9aa 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f002 f9a7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f002 f9a4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x03);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f002 f9a1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f002 f99e 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB3);
 8000fe8:	20b3      	movs	r0, #179	; 0xb3
 8000fea:	f002 f9af 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f002 f998 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f002 f995 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f002 f992 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001000:	2000      	movs	r0, #0
 8001002:	f002 f98f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001006:	2000      	movs	r0, #0
 8001008:	f002 f98c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800100c:	2000      	movs	r0, #0
 800100e:	f002 f989 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001012:	2000      	movs	r0, #0
 8001014:	f002 f986 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001018:	2000      	movs	r0, #0
 800101a:	f002 f983 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800101e:	2000      	movs	r0, #0
 8001020:	f002 f980 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001024:	2000      	movs	r0, #0
 8001026:	f002 f97d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800102a:	2000      	movs	r0, #0
 800102c:	f002 f97a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001030:	2000      	movs	r0, #0
 8001032:	f002 f977 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001036:	2000      	movs	r0, #0
 8001038:	f002 f974 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800103c:	2000      	movs	r0, #0
 800103e:	f002 f971 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001042:	2000      	movs	r0, #0
 8001044:	f002 f96e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001048:	2000      	movs	r0, #0
 800104a:	f002 f96b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800104e:	2000      	movs	r0, #0
 8001050:	f002 f968 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f002 f965 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800105a:	2000      	movs	r0, #0
 800105c:	f002 f962 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001060:	2000      	movs	r0, #0
 8001062:	f002 f95f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001066:	2000      	movs	r0, #0
 8001068:	f002 f95c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800106c:	2000      	movs	r0, #0
 800106e:	f002 f959 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001072:	2000      	movs	r0, #0
 8001074:	f002 f956 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001078:	2000      	movs	r0, #0
 800107a:	f002 f953 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 800107e:	20b4      	movs	r0, #180	; 0xb4
 8001080:	f002 f964 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x8B);
 8001084:	208b      	movs	r0, #139	; 0x8b
 8001086:	f002 f94d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800108a:	2000      	movs	r0, #0
 800108c:	f002 f94a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x96);
 8001090:	2096      	movs	r0, #150	; 0x96
 8001092:	f002 f947 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001096:	2000      	movs	r0, #0
 8001098:	f002 f944 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA1);
 800109c:	20a1      	movs	r0, #161	; 0xa1
 800109e:	f002 f941 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f002 f93e 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB5);
 80010a8:	20b5      	movs	r0, #181	; 0xb5
 80010aa:	f002 f94f 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x02);
 80010ae:	2002      	movs	r0, #2
 80010b0:	f002 f938 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f002 f935 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x03);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f002 f932 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f002 f92f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x04);
 80010c6:	2004      	movs	r0, #4
 80010c8:	f002 f92c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f002 f929 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB6);
 80010d2:	20b6      	movs	r0, #182	; 0xb6
 80010d4:	f002 f93a 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 80010d8:	2000      	movs	r0, #0
 80010da:	f002 f923 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010de:	2000      	movs	r0, #0
 80010e0:	f002 f920 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 80010e4:	20b7      	movs	r0, #183	; 0xb7
 80010e6:	f002 f931 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f002 f91a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f002 f917 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3F);
 80010f6:	203f      	movs	r0, #63	; 0x3f
 80010f8:	f002 f914 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f002 f911 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x5E);
 8001102:	205e      	movs	r0, #94	; 0x5e
 8001104:	f002 f90e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f002 f90b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x64);
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f002 f908 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001114:	2000      	movs	r0, #0
 8001116:	f002 f905 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x8C);
 800111a:	208c      	movs	r0, #140	; 0x8c
 800111c:	f002 f902 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001120:	2000      	movs	r0, #0
 8001122:	f002 f8ff 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xAC);
 8001126:	20ac      	movs	r0, #172	; 0xac
 8001128:	f002 f8fc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800112c:	2000      	movs	r0, #0
 800112e:	f002 f8f9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8001132:	20dc      	movs	r0, #220	; 0xdc
 8001134:	f002 f8f6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001138:	2000      	movs	r0, #0
 800113a:	f002 f8f3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x70);
 800113e:	2070      	movs	r0, #112	; 0x70
 8001140:	f002 f8f0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001144:	2000      	movs	r0, #0
 8001146:	f002 f8ed 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x90);
 800114a:	2090      	movs	r0, #144	; 0x90
 800114c:	f002 f8ea 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001150:	2000      	movs	r0, #0
 8001152:	f002 f8e7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xEB);
 8001156:	20eb      	movs	r0, #235	; 0xeb
 8001158:	f002 f8e4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800115c:	2000      	movs	r0, #0
 800115e:	f002 f8e1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8001162:	20dc      	movs	r0, #220	; 0xdc
 8001164:	f002 f8de 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f002 f8db 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB8);
 800116e:	20b8      	movs	r0, #184	; 0xb8
 8001170:	f002 f8ec 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001174:	2000      	movs	r0, #0
 8001176:	f002 f8d5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800117a:	2000      	movs	r0, #0
 800117c:	f002 f8d2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001180:	2000      	movs	r0, #0
 8001182:	f002 f8cf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001186:	2000      	movs	r0, #0
 8001188:	f002 f8cc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f002 f8c9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001192:	2000      	movs	r0, #0
 8001194:	f002 f8c6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001198:	2000      	movs	r0, #0
 800119a:	f002 f8c3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800119e:	2000      	movs	r0, #0
 80011a0:	f002 f8c0 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xBA);
 80011a4:	20ba      	movs	r0, #186	; 0xba
 80011a6:	f002 f8d1 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x24);
 80011aa:	2024      	movs	r0, #36	; 0x24
 80011ac:	f002 f8ba 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f002 f8b7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f002 f8b4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011bc:	2000      	movs	r0, #0
 80011be:	f002 f8b1 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 80011c2:	20c1      	movs	r0, #193	; 0xc1
 80011c4:	f002 f8c2 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x20);
 80011c8:	2020      	movs	r0, #32
 80011ca:	f002 f8ab 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f002 f8a8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x54);
 80011d4:	2054      	movs	r0, #84	; 0x54
 80011d6:	f002 f8a5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011da:	2000      	movs	r0, #0
 80011dc:	f002 f8a2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFF);
 80011e0:	20ff      	movs	r0, #255	; 0xff
 80011e2:	f002 f89f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f002 f89c 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 80011ec:	20c2      	movs	r0, #194	; 0xc2
 80011ee:	f002 f8ad 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x0A);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f002 f896 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f002 f893 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x04);
 80011fe:	2004      	movs	r0, #4
 8001200:	f002 f890 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001204:	2000      	movs	r0, #0
 8001206:	f002 f88d 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC3);
 800120a:	20c3      	movs	r0, #195	; 0xc3
 800120c:	f002 f89e 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8001210:	203c      	movs	r0, #60	; 0x3c
 8001212:	f002 f887 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001216:	2000      	movs	r0, #0
 8001218:	f002 f884 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3A);
 800121c:	203a      	movs	r0, #58	; 0x3a
 800121e:	f002 f881 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001222:	2000      	movs	r0, #0
 8001224:	f002 f87e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x39);
 8001228:	2039      	movs	r0, #57	; 0x39
 800122a:	f002 f87b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800122e:	2000      	movs	r0, #0
 8001230:	f002 f878 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x37);
 8001234:	2037      	movs	r0, #55	; 0x37
 8001236:	f002 f875 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800123a:	2000      	movs	r0, #0
 800123c:	f002 f872 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001240:	203c      	movs	r0, #60	; 0x3c
 8001242:	f002 f86f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001246:	2000      	movs	r0, #0
 8001248:	f002 f86c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x36);
 800124c:	2036      	movs	r0, #54	; 0x36
 800124e:	f002 f869 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001252:	2000      	movs	r0, #0
 8001254:	f002 f866 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x32);
 8001258:	2032      	movs	r0, #50	; 0x32
 800125a:	f002 f863 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800125e:	2000      	movs	r0, #0
 8001260:	f002 f860 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2F);
 8001264:	202f      	movs	r0, #47	; 0x2f
 8001266:	f002 f85d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800126a:	2000      	movs	r0, #0
 800126c:	f002 f85a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001270:	202c      	movs	r0, #44	; 0x2c
 8001272:	f002 f857 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001276:	2000      	movs	r0, #0
 8001278:	f002 f854 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x29);
 800127c:	2029      	movs	r0, #41	; 0x29
 800127e:	f002 f851 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001282:	2000      	movs	r0, #0
 8001284:	f002 f84e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x26);
 8001288:	2026      	movs	r0, #38	; 0x26
 800128a:	f002 f84b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800128e:	2000      	movs	r0, #0
 8001290:	f002 f848 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x24);
 8001294:	2024      	movs	r0, #36	; 0x24
 8001296:	f002 f845 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800129a:	2000      	movs	r0, #0
 800129c:	f002 f842 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x24);
 80012a0:	2024      	movs	r0, #36	; 0x24
 80012a2:	f002 f83f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f002 f83c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x23);
 80012ac:	2023      	movs	r0, #35	; 0x23
 80012ae:	f002 f839 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f002 f836 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80012b8:	203c      	movs	r0, #60	; 0x3c
 80012ba:	f002 f833 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012be:	2000      	movs	r0, #0
 80012c0:	f002 f830 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x36);
 80012c4:	2036      	movs	r0, #54	; 0x36
 80012c6:	f002 f82d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f002 f82a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x32);
 80012d0:	2032      	movs	r0, #50	; 0x32
 80012d2:	f002 f827 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f002 f824 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2F);
 80012dc:	202f      	movs	r0, #47	; 0x2f
 80012de:	f002 f821 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f002 f81e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2C);
 80012e8:	202c      	movs	r0, #44	; 0x2c
 80012ea:	f002 f81b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f002 f818 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x29);
 80012f4:	2029      	movs	r0, #41	; 0x29
 80012f6:	f002 f815 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f002 f812 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x26);
 8001300:	2026      	movs	r0, #38	; 0x26
 8001302:	f002 f80f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001306:	2000      	movs	r0, #0
 8001308:	f002 f80c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x24);
 800130c:	2024      	movs	r0, #36	; 0x24
 800130e:	f002 f809 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001312:	2000      	movs	r0, #0
 8001314:	f002 f806 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x24);
 8001318:	2024      	movs	r0, #36	; 0x24
 800131a:	f002 f803 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800131e:	2000      	movs	r0, #0
 8001320:	f002 f800 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x23);
 8001324:	2023      	movs	r0, #35	; 0x23
 8001326:	f001 fffd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800132a:	2000      	movs	r0, #0
 800132c:	f001 fffa 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC4);
 8001330:	20c4      	movs	r0, #196	; 0xc4
 8001332:	f002 f80b 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x62);
 8001336:	2062      	movs	r0, #98	; 0x62
 8001338:	f001 fff4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800133c:	2000      	movs	r0, #0
 800133e:	f001 fff1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x05);
 8001342:	2005      	movs	r0, #5
 8001344:	f001 ffee 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001348:	2000      	movs	r0, #0
 800134a:	f001 ffeb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x84);
 800134e:	2084      	movs	r0, #132	; 0x84
 8001350:	f001 ffe8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001354:	2000      	movs	r0, #0
 8001356:	f001 ffe5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xF0);
 800135a:	20f0      	movs	r0, #240	; 0xf0
 800135c:	f001 ffe2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001360:	2000      	movs	r0, #0
 8001362:	f001 ffdf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x18);
 8001366:	2018      	movs	r0, #24
 8001368:	f001 ffdc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800136c:	2000      	movs	r0, #0
 800136e:	f001 ffd9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA4);
 8001372:	20a4      	movs	r0, #164	; 0xa4
 8001374:	f001 ffd6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f001 ffd3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x18);
 800137e:	2018      	movs	r0, #24
 8001380:	f001 ffd0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001384:	2000      	movs	r0, #0
 8001386:	f001 ffcd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x50);
 800138a:	2050      	movs	r0, #80	; 0x50
 800138c:	f001 ffca 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001390:	2000      	movs	r0, #0
 8001392:	f001 ffc7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8001396:	200c      	movs	r0, #12
 8001398:	f001 ffc4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800139c:	2000      	movs	r0, #0
 800139e:	f001 ffc1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x17);
 80013a2:	2017      	movs	r0, #23
 80013a4:	f001 ffbe 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f001 ffbb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x95);
 80013ae:	2095      	movs	r0, #149	; 0x95
 80013b0:	f001 ffb8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f001 ffb5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80013ba:	20f3      	movs	r0, #243	; 0xf3
 80013bc:	f001 ffb2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f001 ffaf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xE6);
 80013c6:	20e6      	movs	r0, #230	; 0xe6
 80013c8:	f001 ffac 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f001 ffa9 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 80013d2:	20c5      	movs	r0, #197	; 0xc5
 80013d4:	f001 ffba 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x32);
 80013d8:	2032      	movs	r0, #50	; 0x32
 80013da:	f001 ffa3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013de:	2000      	movs	r0, #0
 80013e0:	f001 ffa0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x44);
 80013e4:	2044      	movs	r0, #68	; 0x44
 80013e6:	f001 ff9d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f001 ff9a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x65);
 80013f0:	2065      	movs	r0, #101	; 0x65
 80013f2:	f001 ff97 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f001 ff94 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x76);
 80013fc:	2076      	movs	r0, #118	; 0x76
 80013fe:	f001 ff91 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001402:	2000      	movs	r0, #0
 8001404:	f001 ff8e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001408:	2088      	movs	r0, #136	; 0x88
 800140a:	f001 ff8b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800140e:	2000      	movs	r0, #0
 8001410:	f001 ff88 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8001414:	20c6      	movs	r0, #198	; 0xc6
 8001416:	f001 ff99 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x20);
 800141a:	2020      	movs	r0, #32
 800141c:	f001 ff82 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001420:	2000      	movs	r0, #0
 8001422:	f001 ff7f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x17);
 8001426:	2017      	movs	r0, #23
 8001428:	f001 ff7c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800142c:	2000      	movs	r0, #0
 800142e:	f001 ff79 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8001432:	2001      	movs	r0, #1
 8001434:	f001 ff76 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001438:	2000      	movs	r0, #0
 800143a:	f001 ff73 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC7);
 800143e:	20c7      	movs	r0, #199	; 0xc7
 8001440:	f001 ff84 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001444:	2000      	movs	r0, #0
 8001446:	f001 ff6d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800144a:	2000      	movs	r0, #0
 800144c:	f001 ff6a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001450:	2000      	movs	r0, #0
 8001452:	f001 ff67 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001456:	2000      	movs	r0, #0
 8001458:	f001 ff64 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC8);
 800145c:	20c8      	movs	r0, #200	; 0xc8
 800145e:	f001 ff75 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001462:	2000      	movs	r0, #0
 8001464:	f001 ff5e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001468:	2000      	movs	r0, #0
 800146a:	f001 ff5b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800146e:	2000      	movs	r0, #0
 8001470:	f001 ff58 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001474:	2000      	movs	r0, #0
 8001476:	f001 ff55 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC9);
 800147a:	20c9      	movs	r0, #201	; 0xc9
 800147c:	f001 ff66 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001480:	2000      	movs	r0, #0
 8001482:	f001 ff4f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001486:	2000      	movs	r0, #0
 8001488:	f001 ff4c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800148c:	2000      	movs	r0, #0
 800148e:	f001 ff49 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001492:	2000      	movs	r0, #0
 8001494:	f001 ff46 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001498:	2000      	movs	r0, #0
 800149a:	f001 ff43 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800149e:	2000      	movs	r0, #0
 80014a0:	f001 ff40 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f001 ff3d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f001 ff3a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f001 ff37 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f001 ff34 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014bc:	2000      	movs	r0, #0
 80014be:	f001 ff31 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f001 ff2e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f001 ff2b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f001 ff28 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f001 ff25 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014da:	2000      	movs	r0, #0
 80014dc:	f001 ff22 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 80014e0:	20e0      	movs	r0, #224	; 0xe0
 80014e2:	f001 ff33 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x16);
 80014e6:	2016      	movs	r0, #22
 80014e8:	f001 ff1c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f001 ff19 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1C);
 80014f2:	201c      	movs	r0, #28
 80014f4:	f001 ff16 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014f8:	2000      	movs	r0, #0
 80014fa:	f001 ff13 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x21);
 80014fe:	2021      	movs	r0, #33	; 0x21
 8001500:	f001 ff10 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001504:	2000      	movs	r0, #0
 8001506:	f001 ff0d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x36);
 800150a:	2036      	movs	r0, #54	; 0x36
 800150c:	f001 ff0a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001510:	2000      	movs	r0, #0
 8001512:	f001 ff07 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x46);
 8001516:	2046      	movs	r0, #70	; 0x46
 8001518:	f001 ff04 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800151c:	2000      	movs	r0, #0
 800151e:	f001 ff01 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x52);
 8001522:	2052      	movs	r0, #82	; 0x52
 8001524:	f001 fefe 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001528:	2000      	movs	r0, #0
 800152a:	f001 fefb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x64);
 800152e:	2064      	movs	r0, #100	; 0x64
 8001530:	f001 fef8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001534:	2000      	movs	r0, #0
 8001536:	f001 fef5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x7A);
 800153a:	207a      	movs	r0, #122	; 0x7a
 800153c:	f001 fef2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001540:	2000      	movs	r0, #0
 8001542:	f001 feef 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8001546:	208b      	movs	r0, #139	; 0x8b
 8001548:	f001 feec 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800154c:	2000      	movs	r0, #0
 800154e:	f001 fee9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001552:	2099      	movs	r0, #153	; 0x99
 8001554:	f001 fee6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001558:	2000      	movs	r0, #0
 800155a:	f001 fee3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA8);
 800155e:	20a8      	movs	r0, #168	; 0xa8
 8001560:	f001 fee0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001564:	2000      	movs	r0, #0
 8001566:	f001 fedd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xB9);
 800156a:	20b9      	movs	r0, #185	; 0xb9
 800156c:	f001 feda 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001570:	2000      	movs	r0, #0
 8001572:	f001 fed7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001576:	20c4      	movs	r0, #196	; 0xc4
 8001578:	f001 fed4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800157c:	2000      	movs	r0, #0
 800157e:	f001 fed1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xCA);
 8001582:	20ca      	movs	r0, #202	; 0xca
 8001584:	f001 fece 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001588:	2000      	movs	r0, #0
 800158a:	f001 fecb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD2);
 800158e:	20d2      	movs	r0, #210	; 0xd2
 8001590:	f001 fec8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001594:	2000      	movs	r0, #0
 8001596:	f001 fec5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD9);
 800159a:	20d9      	movs	r0, #217	; 0xd9
 800159c:	f001 fec2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f001 febf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xE0);
 80015a6:	20e0      	movs	r0, #224	; 0xe0
 80015a8:	f001 febc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f001 feb9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80015b2:	20f3      	movs	r0, #243	; 0xf3
 80015b4:	f001 feb6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f001 feb3 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 80015be:	20e1      	movs	r0, #225	; 0xe1
 80015c0:	f001 fec4 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x16);
 80015c4:	2016      	movs	r0, #22
 80015c6:	f001 fead 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f001 feaa 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1C);
 80015d0:	201c      	movs	r0, #28
 80015d2:	f001 fea7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f001 fea4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x22);
 80015dc:	2022      	movs	r0, #34	; 0x22
 80015de:	f001 fea1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f001 fe9e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x36);
 80015e8:	2036      	movs	r0, #54	; 0x36
 80015ea:	f001 fe9b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f001 fe98 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x45);
 80015f4:	2045      	movs	r0, #69	; 0x45
 80015f6:	f001 fe95 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f001 fe92 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x52);
 8001600:	2052      	movs	r0, #82	; 0x52
 8001602:	f001 fe8f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001606:	2000      	movs	r0, #0
 8001608:	f001 fe8c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x64);
 800160c:	2064      	movs	r0, #100	; 0x64
 800160e:	f001 fe89 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001612:	2000      	movs	r0, #0
 8001614:	f001 fe86 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8001618:	207a      	movs	r0, #122	; 0x7a
 800161a:	f001 fe83 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800161e:	2000      	movs	r0, #0
 8001620:	f001 fe80 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8001624:	208b      	movs	r0, #139	; 0x8b
 8001626:	f001 fe7d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800162a:	2000      	movs	r0, #0
 800162c:	f001 fe7a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001630:	2099      	movs	r0, #153	; 0x99
 8001632:	f001 fe77 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001636:	2000      	movs	r0, #0
 8001638:	f001 fe74 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA8);
 800163c:	20a8      	movs	r0, #168	; 0xa8
 800163e:	f001 fe71 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001642:	2000      	movs	r0, #0
 8001644:	f001 fe6e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xB9);
 8001648:	20b9      	movs	r0, #185	; 0xb9
 800164a:	f001 fe6b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800164e:	2000      	movs	r0, #0
 8001650:	f001 fe68 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001654:	20c4      	movs	r0, #196	; 0xc4
 8001656:	f001 fe65 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800165a:	2000      	movs	r0, #0
 800165c:	f001 fe62 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xCA);
 8001660:	20ca      	movs	r0, #202	; 0xca
 8001662:	f001 fe5f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001666:	2000      	movs	r0, #0
 8001668:	f001 fe5c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD2);
 800166c:	20d2      	movs	r0, #210	; 0xd2
 800166e:	f001 fe59 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001672:	2000      	movs	r0, #0
 8001674:	f001 fe56 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD8);
 8001678:	20d8      	movs	r0, #216	; 0xd8
 800167a:	f001 fe53 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800167e:	2000      	movs	r0, #0
 8001680:	f001 fe50 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xE0);
 8001684:	20e0      	movs	r0, #224	; 0xe0
 8001686:	f001 fe4d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800168a:	2000      	movs	r0, #0
 800168c:	f001 fe4a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001690:	20f3      	movs	r0, #243	; 0xf3
 8001692:	f001 fe47 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001696:	2000      	movs	r0, #0
 8001698:	f001 fe44 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE2);
 800169c:	20e2      	movs	r0, #226	; 0xe2
 800169e:	f001 fe55 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x05);
 80016a2:	2005      	movs	r0, #5
 80016a4:	f001 fe3e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f001 fe3b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0B);
 80016ae:	200b      	movs	r0, #11
 80016b0:	f001 fe38 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f001 fe35 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1B);
 80016ba:	201b      	movs	r0, #27
 80016bc:	f001 fe32 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f001 fe2f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x34);
 80016c6:	2034      	movs	r0, #52	; 0x34
 80016c8:	f001 fe2c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f001 fe29 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x44);
 80016d2:	2044      	movs	r0, #68	; 0x44
 80016d4:	f001 fe26 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016d8:	2000      	movs	r0, #0
 80016da:	f001 fe23 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x4F);
 80016de:	204f      	movs	r0, #79	; 0x4f
 80016e0:	f001 fe20 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f001 fe1d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x61);
 80016ea:	2061      	movs	r0, #97	; 0x61
 80016ec:	f001 fe1a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f001 fe17 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x79);
 80016f6:	2079      	movs	r0, #121	; 0x79
 80016f8:	f001 fe14 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f001 fe11 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001702:	2088      	movs	r0, #136	; 0x88
 8001704:	f001 fe0e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001708:	2000      	movs	r0, #0
 800170a:	f001 fe0b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x97);
 800170e:	2097      	movs	r0, #151	; 0x97
 8001710:	f001 fe08 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001714:	2000      	movs	r0, #0
 8001716:	f001 fe05 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA6);
 800171a:	20a6      	movs	r0, #166	; 0xa6
 800171c:	f001 fe02 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001720:	2000      	movs	r0, #0
 8001722:	f001 fdff 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xB7);
 8001726:	20b7      	movs	r0, #183	; 0xb7
 8001728:	f001 fdfc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800172c:	2000      	movs	r0, #0
 800172e:	f001 fdf9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xC2);
 8001732:	20c2      	movs	r0, #194	; 0xc2
 8001734:	f001 fdf6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001738:	2000      	movs	r0, #0
 800173a:	f001 fdf3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xC7);
 800173e:	20c7      	movs	r0, #199	; 0xc7
 8001740:	f001 fdf0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001744:	2000      	movs	r0, #0
 8001746:	f001 fded 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD1);
 800174a:	20d1      	movs	r0, #209	; 0xd1
 800174c:	f001 fdea 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001750:	2000      	movs	r0, #0
 8001752:	f001 fde7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD6);
 8001756:	20d6      	movs	r0, #214	; 0xd6
 8001758:	f001 fde4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800175c:	2000      	movs	r0, #0
 800175e:	f001 fde1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xDD);
 8001762:	20dd      	movs	r0, #221	; 0xdd
 8001764:	f001 fdde 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001768:	2000      	movs	r0, #0
 800176a:	f001 fddb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800176e:	20f3      	movs	r0, #243	; 0xf3
 8001770:	f001 fdd8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001774:	2000      	movs	r0, #0
 8001776:	f001 fdd5 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xE3);
 800177a:	20e3      	movs	r0, #227	; 0xe3
 800177c:	f001 fde6 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x05);
 8001780:	2005      	movs	r0, #5
 8001782:	f001 fdcf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001786:	2000      	movs	r0, #0
 8001788:	f001 fdcc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA);
 800178c:	200a      	movs	r0, #10
 800178e:	f001 fdc9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001792:	2000      	movs	r0, #0
 8001794:	f001 fdc6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1C);
 8001798:	201c      	movs	r0, #28
 800179a:	f001 fdc3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800179e:	2000      	movs	r0, #0
 80017a0:	f001 fdc0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x33);
 80017a4:	2033      	movs	r0, #51	; 0x33
 80017a6:	f001 fdbd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f001 fdba 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x44);
 80017b0:	2044      	movs	r0, #68	; 0x44
 80017b2:	f001 fdb7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f001 fdb4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x50);
 80017bc:	2050      	movs	r0, #80	; 0x50
 80017be:	f001 fdb1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f001 fdae 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x62);
 80017c8:	2062      	movs	r0, #98	; 0x62
 80017ca:	f001 fdab 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f001 fda8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x78);
 80017d4:	2078      	movs	r0, #120	; 0x78
 80017d6:	f001 fda5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017da:	2000      	movs	r0, #0
 80017dc:	f001 fda2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x88);
 80017e0:	2088      	movs	r0, #136	; 0x88
 80017e2:	f001 fd9f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f001 fd9c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x97);
 80017ec:	2097      	movs	r0, #151	; 0x97
 80017ee:	f001 fd99 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f001 fd96 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA6);
 80017f8:	20a6      	movs	r0, #166	; 0xa6
 80017fa:	f001 fd93 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017fe:	2000      	movs	r0, #0
 8001800:	f001 fd90 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xB7);
 8001804:	20b7      	movs	r0, #183	; 0xb7
 8001806:	f001 fd8d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800180a:	2000      	movs	r0, #0
 800180c:	f001 fd8a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xC2);
 8001810:	20c2      	movs	r0, #194	; 0xc2
 8001812:	f001 fd87 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001816:	2000      	movs	r0, #0
 8001818:	f001 fd84 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xC7);
 800181c:	20c7      	movs	r0, #199	; 0xc7
 800181e:	f001 fd81 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001822:	2000      	movs	r0, #0
 8001824:	f001 fd7e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD1);
 8001828:	20d1      	movs	r0, #209	; 0xd1
 800182a:	f001 fd7b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800182e:	2000      	movs	r0, #0
 8001830:	f001 fd78 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD5);
 8001834:	20d5      	movs	r0, #213	; 0xd5
 8001836:	f001 fd75 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800183a:	2000      	movs	r0, #0
 800183c:	f001 fd72 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xDD);
 8001840:	20dd      	movs	r0, #221	; 0xdd
 8001842:	f001 fd6f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001846:	2000      	movs	r0, #0
 8001848:	f001 fd6c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800184c:	20f3      	movs	r0, #243	; 0xf3
 800184e:	f001 fd69 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001852:	2000      	movs	r0, #0
 8001854:	f001 fd66 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE4);
 8001858:	20e4      	movs	r0, #228	; 0xe4
 800185a:	f001 fd77 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);
 800185e:	2001      	movs	r0, #1
 8001860:	f001 fd60 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001864:	2000      	movs	r0, #0
 8001866:	f001 fd5d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 800186a:	2001      	movs	r0, #1
 800186c:	f001 fd5a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001870:	2000      	movs	r0, #0
 8001872:	f001 fd57 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x02);
 8001876:	2002      	movs	r0, #2
 8001878:	f001 fd54 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800187c:	2000      	movs	r0, #0
 800187e:	f001 fd51 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2A);
 8001882:	202a      	movs	r0, #42	; 0x2a
 8001884:	f001 fd4e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001888:	2000      	movs	r0, #0
 800188a:	f001 fd4b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3C);
 800188e:	203c      	movs	r0, #60	; 0x3c
 8001890:	f001 fd48 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001894:	2000      	movs	r0, #0
 8001896:	f001 fd45 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x4B);
 800189a:	204b      	movs	r0, #75	; 0x4b
 800189c:	f001 fd42 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f001 fd3f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x5D);
 80018a6:	205d      	movs	r0, #93	; 0x5d
 80018a8:	f001 fd3c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f001 fd39 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x74);
 80018b2:	2074      	movs	r0, #116	; 0x74
 80018b4:	f001 fd36 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f001 fd33 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x84);
 80018be:	2084      	movs	r0, #132	; 0x84
 80018c0:	f001 fd30 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f001 fd2d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x93);
 80018ca:	2093      	movs	r0, #147	; 0x93
 80018cc:	f001 fd2a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f001 fd27 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA2);
 80018d6:	20a2      	movs	r0, #162	; 0xa2
 80018d8:	f001 fd24 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018dc:	2000      	movs	r0, #0
 80018de:	f001 fd21 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xB3);
 80018e2:	20b3      	movs	r0, #179	; 0xb3
 80018e4:	f001 fd1e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f001 fd1b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xBE);
 80018ee:	20be      	movs	r0, #190	; 0xbe
 80018f0:	f001 fd18 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f001 fd15 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xC4);
 80018fa:	20c4      	movs	r0, #196	; 0xc4
 80018fc:	f001 fd12 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001900:	2000      	movs	r0, #0
 8001902:	f001 fd0f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xCD);
 8001906:	20cd      	movs	r0, #205	; 0xcd
 8001908:	f001 fd0c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800190c:	2000      	movs	r0, #0
 800190e:	f001 fd09 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD3);
 8001912:	20d3      	movs	r0, #211	; 0xd3
 8001914:	f001 fd06 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001918:	2000      	movs	r0, #0
 800191a:	f001 fd03 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xDD);
 800191e:	20dd      	movs	r0, #221	; 0xdd
 8001920:	f001 fd00 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001924:	2000      	movs	r0, #0
 8001926:	f001 fcfd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800192a:	20f3      	movs	r0, #243	; 0xf3
 800192c:	f001 fcfa 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001930:	2000      	movs	r0, #0
 8001932:	f001 fcf7 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xE5);
 8001936:	20e5      	movs	r0, #229	; 0xe5
 8001938:	f001 fd08 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 800193c:	2000      	movs	r0, #0
 800193e:	f001 fcf1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001942:	2000      	movs	r0, #0
 8001944:	f001 fcee 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001948:	2000      	movs	r0, #0
 800194a:	f001 fceb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800194e:	2000      	movs	r0, #0
 8001950:	f001 fce8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x02);
 8001954:	2002      	movs	r0, #2
 8001956:	f001 fce5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800195a:	2000      	movs	r0, #0
 800195c:	f001 fce2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001960:	2029      	movs	r0, #41	; 0x29
 8001962:	f001 fcdf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001966:	2000      	movs	r0, #0
 8001968:	f001 fcdc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x3C);
 800196c:	203c      	movs	r0, #60	; 0x3c
 800196e:	f001 fcd9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001972:	2000      	movs	r0, #0
 8001974:	f001 fcd6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x4B);
 8001978:	204b      	movs	r0, #75	; 0x4b
 800197a:	f001 fcd3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800197e:	2000      	movs	r0, #0
 8001980:	f001 fcd0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001984:	205d      	movs	r0, #93	; 0x5d
 8001986:	f001 fccd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800198a:	2000      	movs	r0, #0
 800198c:	f001 fcca 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x74);
 8001990:	2074      	movs	r0, #116	; 0x74
 8001992:	f001 fcc7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001996:	2000      	movs	r0, #0
 8001998:	f001 fcc4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x84);
 800199c:	2084      	movs	r0, #132	; 0x84
 800199e:	f001 fcc1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f001 fcbe 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x93);
 80019a8:	2093      	movs	r0, #147	; 0x93
 80019aa:	f001 fcbb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f001 fcb8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA2);
 80019b4:	20a2      	movs	r0, #162	; 0xa2
 80019b6:	f001 fcb5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f001 fcb2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xB3);
 80019c0:	20b3      	movs	r0, #179	; 0xb3
 80019c2:	f001 fcaf 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f001 fcac 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xBE);
 80019cc:	20be      	movs	r0, #190	; 0xbe
 80019ce:	f001 fca9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f001 fca6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xC4);
 80019d8:	20c4      	movs	r0, #196	; 0xc4
 80019da:	f001 fca3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019de:	2000      	movs	r0, #0
 80019e0:	f001 fca0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xCD);
 80019e4:	20cd      	movs	r0, #205	; 0xcd
 80019e6:	f001 fc9d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f001 fc9a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xD3);
 80019f0:	20d3      	movs	r0, #211	; 0xd3
 80019f2:	f001 fc97 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f001 fc94 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xDC);
 80019fc:	20dc      	movs	r0, #220	; 0xdc
 80019fe:	f001 fc91 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f001 fc8e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001a08:	20f3      	movs	r0, #243	; 0xf3
 8001a0a:	f001 fc8b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f001 fc88 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8001a14:	20e6      	movs	r0, #230	; 0xe6
 8001a16:	f001 fc99 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x11);
 8001a1a:	2011      	movs	r0, #17
 8001a1c:	f001 fc82 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f001 fc7f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x34);
 8001a26:	2034      	movs	r0, #52	; 0x34
 8001a28:	f001 fc7c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f001 fc79 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x56);
 8001a32:	2056      	movs	r0, #86	; 0x56
 8001a34:	f001 fc76 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f001 fc73 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x76);
 8001a3e:	2076      	movs	r0, #118	; 0x76
 8001a40:	f001 fc70 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f001 fc6d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x77);
 8001a4a:	2077      	movs	r0, #119	; 0x77
 8001a4c:	f001 fc6a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f001 fc67 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001a56:	2066      	movs	r0, #102	; 0x66
 8001a58:	f001 fc64 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f001 fc61 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001a62:	2088      	movs	r0, #136	; 0x88
 8001a64:	f001 fc5e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f001 fc5b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001a6e:	2099      	movs	r0, #153	; 0x99
 8001a70:	f001 fc58 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f001 fc55 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8001a7a:	20bb      	movs	r0, #187	; 0xbb
 8001a7c:	f001 fc52 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f001 fc4f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001a86:	2099      	movs	r0, #153	; 0x99
 8001a88:	f001 fc4c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f001 fc49 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001a92:	2066      	movs	r0, #102	; 0x66
 8001a94:	f001 fc46 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f001 fc43 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001a9e:	2055      	movs	r0, #85	; 0x55
 8001aa0:	f001 fc40 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f001 fc3d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001aaa:	2055      	movs	r0, #85	; 0x55
 8001aac:	f001 fc3a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f001 fc37 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x45);
 8001ab6:	2045      	movs	r0, #69	; 0x45
 8001ab8:	f001 fc34 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001abc:	2000      	movs	r0, #0
 8001abe:	f001 fc31 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x43);
 8001ac2:	2043      	movs	r0, #67	; 0x43
 8001ac4:	f001 fc2e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f001 fc2b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001ace:	2044      	movs	r0, #68	; 0x44
 8001ad0:	f001 fc28 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f001 fc25 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE7);
 8001ada:	20e7      	movs	r0, #231	; 0xe7
 8001adc:	f001 fc36 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x32);
 8001ae0:	2032      	movs	r0, #50	; 0x32
 8001ae2:	f001 fc1f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f001 fc1c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001aec:	2055      	movs	r0, #85	; 0x55
 8001aee:	f001 fc19 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f001 fc16 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x76);
 8001af8:	2076      	movs	r0, #118	; 0x76
 8001afa:	f001 fc13 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f001 fc10 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001b04:	2066      	movs	r0, #102	; 0x66
 8001b06:	f001 fc0d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f001 fc0a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x67);
 8001b10:	2067      	movs	r0, #103	; 0x67
 8001b12:	f001 fc07 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f001 fc04 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x67);
 8001b1c:	2067      	movs	r0, #103	; 0x67
 8001b1e:	f001 fc01 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f001 fbfe 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x87);
 8001b28:	2087      	movs	r0, #135	; 0x87
 8001b2a:	f001 fbfb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f001 fbf8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001b34:	2099      	movs	r0, #153	; 0x99
 8001b36:	f001 fbf5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f001 fbf2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8001b40:	20bb      	movs	r0, #187	; 0xbb
 8001b42:	f001 fbef 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f001 fbec 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001b4c:	2099      	movs	r0, #153	; 0x99
 8001b4e:	f001 fbe9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f001 fbe6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x77);
 8001b58:	2077      	movs	r0, #119	; 0x77
 8001b5a:	f001 fbe3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f001 fbe0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001b64:	2044      	movs	r0, #68	; 0x44
 8001b66:	f001 fbdd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f001 fbda 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x56);
 8001b70:	2056      	movs	r0, #86	; 0x56
 8001b72:	f001 fbd7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f001 fbd4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x23);
 8001b7c:	2023      	movs	r0, #35	; 0x23
 8001b7e:	f001 fbd1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f001 fbce 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x33);
 8001b88:	2033      	movs	r0, #51	; 0x33
 8001b8a:	f001 fbcb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f001 fbc8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x45);
 8001b94:	2045      	movs	r0, #69	; 0x45
 8001b96:	f001 fbc5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f001 fbc2 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8001ba0:	20e8      	movs	r0, #232	; 0xe8
 8001ba2:	f001 fbd3 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f001 fbbc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f001 fbb9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001bb2:	2099      	movs	r0, #153	; 0x99
 8001bb4:	f001 fbb6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f001 fbb3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x87);
 8001bbe:	2087      	movs	r0, #135	; 0x87
 8001bc0:	f001 fbb0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f001 fbad 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001bca:	2088      	movs	r0, #136	; 0x88
 8001bcc:	f001 fbaa 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f001 fba7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x77);
 8001bd6:	2077      	movs	r0, #119	; 0x77
 8001bd8:	f001 fba4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f001 fba1 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001be2:	2066      	movs	r0, #102	; 0x66
 8001be4:	f001 fb9e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f001 fb9b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001bee:	2088      	movs	r0, #136	; 0x88
 8001bf0:	f001 fb98 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f001 fb95 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xAA);
 8001bfa:	20aa      	movs	r0, #170	; 0xaa
 8001bfc:	f001 fb92 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f001 fb8f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8001c06:	20bb      	movs	r0, #187	; 0xbb
 8001c08:	f001 fb8c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f001 fb89 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001c12:	2099      	movs	r0, #153	; 0x99
 8001c14:	f001 fb86 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f001 fb83 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001c1e:	2066      	movs	r0, #102	; 0x66
 8001c20:	f001 fb80 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f001 fb7d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001c2a:	2055      	movs	r0, #85	; 0x55
 8001c2c:	f001 fb7a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f001 fb77 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001c36:	2055      	movs	r0, #85	; 0x55
 8001c38:	f001 fb74 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f001 fb71 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001c42:	2044      	movs	r0, #68	; 0x44
 8001c44:	f001 fb6e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f001 fb6b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001c4e:	2044      	movs	r0, #68	; 0x44
 8001c50:	f001 fb68 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f001 fb65 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001c5a:	2055      	movs	r0, #85	; 0x55
 8001c5c:	f001 fb62 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f001 fb5f 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE9);
 8001c66:	20e9      	movs	r0, #233	; 0xe9
 8001c68:	f001 fb70 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8001c6c:	20aa      	movs	r0, #170	; 0xaa
 8001c6e:	f001 fb59 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f001 fb56 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f001 fb53 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f001 fb50 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x00);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f001 fb61 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8001c8a:	20aa      	movs	r0, #170	; 0xaa
 8001c8c:	f001 fb4a 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xCF);
 8001c90:	20cf      	movs	r0, #207	; 0xcf
 8001c92:	f001 fb5b 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f001 fb44 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f001 fb41 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f001 fb3e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f001 fb3b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f001 fb38 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f001 fb35 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f001 fb32 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f001 fb2f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f001 fb2c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f001 fb29 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f001 fb26 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f001 fb23 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f001 fb20 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f001 fb1d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f001 fb1a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f001 fb17 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f001 fb14 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001cfc:	20f0      	movs	r0, #240	; 0xf0
 8001cfe:	f001 fb25 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f001 fb0e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x50);
 8001d08:	2050      	movs	r0, #80	; 0x50
 8001d0a:	f001 fb0b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f001 fb08 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f001 fb05 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f001 fb02 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF3);
 8001d20:	20f3      	movs	r0, #243	; 0xf3
 8001d22:	f001 fb13 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f001 fafc 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF9);
 8001d2c:	20f9      	movs	r0, #249	; 0xf9
 8001d2e:	f001 fb0d 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x06);
 8001d32:	2006      	movs	r0, #6
 8001d34:	f001 faf6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001d38:	2010      	movs	r0, #16
 8001d3a:	f001 faf3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001d3e:	2029      	movs	r0, #41	; 0x29
 8001d40:	f001 faf0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f001 faed 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8001d4a:	203a      	movs	r0, #58	; 0x3a
 8001d4c:	f001 fafe 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 8001d50:	2055      	movs	r0, #85	; 0x55
 8001d52:	f001 fae7 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x11);
 8001d56:	2011      	movs	r0, #17
 8001d58:	f001 faf8 	bl	800334c <lcd_wr_regno>
    HAL_Delay(100);
 8001d5c:	2064      	movs	r0, #100	; 0x64
 8001d5e:	f003 f9a9 	bl	80050b4 <HAL_Delay>
    lcd_wr_regno(0x29);
 8001d62:	2029      	movs	r0, #41	; 0x29
 8001d64:	f001 faf2 	bl	800334c <lcd_wr_regno>
    lcd_wr_regno(0x35);
 8001d68:	2035      	movs	r0, #53	; 0x35
 8001d6a:	f001 faef 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f001 fad8 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x51);
 8001d74:	2051      	movs	r0, #81	; 0x51
 8001d76:	f001 fae9 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8001d7a:	20ff      	movs	r0, #255	; 0xff
 8001d7c:	f001 fad2 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0x53);
 8001d80:	2053      	movs	r0, #83	; 0x53
 8001d82:	f001 fae3 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x2C);
 8001d86:	202c      	movs	r0, #44	; 0x2c
 8001d88:	f001 facc 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0x55);
 8001d8c:	2055      	movs	r0, #85	; 0x55
 8001d8e:	f001 fadd 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x82);
 8001d92:	2082      	movs	r0, #130	; 0x82
 8001d94:	f001 fac6 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0x2c);
 8001d98:	202c      	movs	r0, #44	; 0x2c
 8001d9a:	f001 fad7 	bl	800334c <lcd_wr_regno>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <lcd_ex_st7796_reginit>:
 * @brief  ST7796 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7796_reginit(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8001da6:	2011      	movs	r0, #17
 8001da8:	f001 fad0 	bl	800334c <lcd_wr_regno>

    HAL_Delay(120);
 8001dac:	2078      	movs	r0, #120	; 0x78
 8001dae:	f003 f981 	bl	80050b4 <HAL_Delay>

    lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
 8001db2:	2036      	movs	r0, #54	; 0x36
 8001db4:	f001 faca 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x48);
 8001db8:	2048      	movs	r0, #72	; 0x48
 8001dba:	f001 fab3 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8001dbe:	203a      	movs	r0, #58	; 0x3a
 8001dc0:	f001 fac4 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x55);
 8001dc4:	2055      	movs	r0, #85	; 0x55
 8001dc6:	f001 faad 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001dca:	20f0      	movs	r0, #240	; 0xf0
 8001dcc:	f001 fabe 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xC3);
 8001dd0:	20c3      	movs	r0, #195	; 0xc3
 8001dd2:	f001 faa7 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001dd6:	20f0      	movs	r0, #240	; 0xf0
 8001dd8:	f001 fab8 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x96);
 8001ddc:	2096      	movs	r0, #150	; 0x96
 8001dde:	f001 faa1 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8001de2:	20b4      	movs	r0, #180	; 0xb4
 8001de4:	f001 fab2 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f001 fa9b 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB6); /* Display Function Control */
 8001dee:	20b6      	movs	r0, #182	; 0xb6
 8001df0:	f001 faac 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8001df4:	200a      	movs	r0, #10
 8001df6:	f001 fa95 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001dfa:	20a2      	movs	r0, #162	; 0xa2
 8001dfc:	f001 fa92 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8001e00:	20b7      	movs	r0, #183	; 0xb7
 8001e02:	f001 faa3 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xC6);
 8001e06:	20c6      	movs	r0, #198	; 0xc6
 8001e08:	f001 fa8c 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB9);
 8001e0c:	20b9      	movs	r0, #185	; 0xb9
 8001e0e:	f001 fa9d 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x02);
 8001e12:	2002      	movs	r0, #2
 8001e14:	f001 fa86 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xE0);
 8001e18:	20e0      	movs	r0, #224	; 0xe0
 8001e1a:	f001 fa83 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8001e1e:	20c0      	movs	r0, #192	; 0xc0
 8001e20:	f001 fa94 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x80);
 8001e24:	2080      	movs	r0, #128	; 0x80
 8001e26:	f001 fa7d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x16);
 8001e2a:	2016      	movs	r0, #22
 8001e2c:	f001 fa7a 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 8001e30:	20c1      	movs	r0, #193	; 0xc1
 8001e32:	f001 fa8b 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x19);
 8001e36:	2019      	movs	r0, #25
 8001e38:	f001 fa74 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001e3c:	20c2      	movs	r0, #194	; 0xc2
 8001e3e:	f001 fa85 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xA7);
 8001e42:	20a7      	movs	r0, #167	; 0xa7
 8001e44:	f001 fa6e 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 8001e48:	20c5      	movs	r0, #197	; 0xc5
 8001e4a:	f001 fa7f 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x16);
 8001e4e:	2016      	movs	r0, #22
 8001e50:	f001 fa68 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8001e54:	20e8      	movs	r0, #232	; 0xe8
 8001e56:	f001 fa79 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x40);
 8001e5a:	2040      	movs	r0, #64	; 0x40
 8001e5c:	f001 fa62 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x8A);
 8001e60:	208a      	movs	r0, #138	; 0x8a
 8001e62:	f001 fa5f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f001 fa5c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f001 fa59 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001e72:	2029      	movs	r0, #41	; 0x29
 8001e74:	f001 fa56 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x19);
 8001e78:	2019      	movs	r0, #25
 8001e7a:	f001 fa53 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xA5);
 8001e7e:	20a5      	movs	r0, #165	; 0xa5
 8001e80:	f001 fa50 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x33);
 8001e84:	2033      	movs	r0, #51	; 0x33
 8001e86:	f001 fa4d 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8001e8a:	20e0      	movs	r0, #224	; 0xe0
 8001e8c:	f001 fa5e 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8001e90:	20f0      	movs	r0, #240	; 0xf0
 8001e92:	f001 fa47 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x07);
 8001e96:	2007      	movs	r0, #7
 8001e98:	f001 fa44 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8001e9c:	200d      	movs	r0, #13
 8001e9e:	f001 fa41 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x04);
 8001ea2:	2004      	movs	r0, #4
 8001ea4:	f001 fa3e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x05);
 8001ea8:	2005      	movs	r0, #5
 8001eaa:	f001 fa3b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001eae:	2014      	movs	r0, #20
 8001eb0:	f001 fa38 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x36);
 8001eb4:	2036      	movs	r0, #54	; 0x36
 8001eb6:	f001 fa35 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x54);
 8001eba:	2054      	movs	r0, #84	; 0x54
 8001ebc:	f001 fa32 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x4C);
 8001ec0:	204c      	movs	r0, #76	; 0x4c
 8001ec2:	f001 fa2f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x38);
 8001ec6:	2038      	movs	r0, #56	; 0x38
 8001ec8:	f001 fa2c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x13);
 8001ecc:	2013      	movs	r0, #19
 8001ece:	f001 fa29 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001ed2:	2014      	movs	r0, #20
 8001ed4:	f001 fa26 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2E);
 8001ed8:	202e      	movs	r0, #46	; 0x2e
 8001eda:	f001 fa23 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x34);
 8001ede:	2034      	movs	r0, #52	; 0x34
 8001ee0:	f001 fa20 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 8001ee4:	20e1      	movs	r0, #225	; 0xe1
 8001ee6:	f001 fa31 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8001eea:	20f0      	movs	r0, #240	; 0xf0
 8001eec:	f001 fa1a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001ef0:	2010      	movs	r0, #16
 8001ef2:	f001 fa17 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001ef6:	2014      	movs	r0, #20
 8001ef8:	f001 fa14 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0E);
 8001efc:	200e      	movs	r0, #14
 8001efe:	f001 fa11 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8001f02:	200c      	movs	r0, #12
 8001f04:	f001 fa0e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x08);
 8001f08:	2008      	movs	r0, #8
 8001f0a:	f001 fa0b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x35);
 8001f0e:	2035      	movs	r0, #53	; 0x35
 8001f10:	f001 fa08 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001f14:	2044      	movs	r0, #68	; 0x44
 8001f16:	f001 fa05 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x4C);
 8001f1a:	204c      	movs	r0, #76	; 0x4c
 8001f1c:	f001 fa02 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x26);
 8001f20:	2026      	movs	r0, #38	; 0x26
 8001f22:	f001 f9ff 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001f26:	2010      	movs	r0, #16
 8001f28:	f001 f9fc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x12);
 8001f2c:	2012      	movs	r0, #18
 8001f2e:	f001 f9f9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001f32:	202c      	movs	r0, #44	; 0x2c
 8001f34:	f001 f9f6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x32);
 8001f38:	2032      	movs	r0, #50	; 0x32
 8001f3a:	f001 f9f3 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001f3e:	20f0      	movs	r0, #240	; 0xf0
 8001f40:	f001 fa04 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8001f44:	203c      	movs	r0, #60	; 0x3c
 8001f46:	f001 f9ed 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001f4a:	20f0      	movs	r0, #240	; 0xf0
 8001f4c:	f001 f9fe 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x69);
 8001f50:	2069      	movs	r0, #105	; 0x69
 8001f52:	f001 f9e7 	bl	8003324 <lcd_wr_data>

    HAL_Delay(120);
 8001f56:	2078      	movs	r0, #120	; 0x78
 8001f58:	f003 f8ac 	bl	80050b4 <HAL_Delay>

    lcd_wr_regno(0x21);
 8001f5c:	2021      	movs	r0, #33	; 0x21
 8001f5e:	f001 f9f5 	bl	800334c <lcd_wr_regno>
    lcd_wr_regno(0x29);
 8001f62:	2029      	movs	r0, #41	; 0x29
 8001f64:	f001 f9f2 	bl	800334c <lcd_wr_regno>
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <lcd_ex_nt35510_reginit>:
 * @brief  NT35510 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35510_reginit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 8001f70:	2155      	movs	r1, #85	; 0x55
 8001f72:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001f76:	f001 f9fd 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8001f7a:	21aa      	movs	r1, #170	; 0xaa
 8001f7c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001f80:	f001 f9f8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8001f84:	2152      	movs	r1, #82	; 0x52
 8001f86:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001f8a:	f001 f9f3 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8001f8e:	2108      	movs	r1, #8
 8001f90:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001f94:	f001 f9ee 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 8001f98:	2101      	movs	r1, #1
 8001f9a:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001f9e:	f001 f9e9 	bl	8003374 <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 8001fa2:	210d      	movs	r1, #13
 8001fa4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001fa8:	f001 f9e4 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 8001fac:	210d      	movs	r1, #13
 8001fae:	f24b 0001 	movw	r0, #45057	; 0xb001
 8001fb2:	f001 f9df 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 8001fb6:	210d      	movs	r1, #13
 8001fb8:	f24b 0002 	movw	r0, #45058	; 0xb002
 8001fbc:	f001 f9da 	bl	8003374 <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 8001fc0:	2134      	movs	r1, #52	; 0x34
 8001fc2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001fc6:	f001 f9d5 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 8001fca:	2134      	movs	r1, #52	; 0x34
 8001fcc:	f24b 6001 	movw	r0, #46593	; 0xb601
 8001fd0:	f001 f9d0 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 8001fd4:	2134      	movs	r1, #52	; 0x34
 8001fd6:	f24b 6002 	movw	r0, #46594	; 0xb602
 8001fda:	f001 f9cb 	bl	8003374 <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 8001fde:	210d      	movs	r1, #13
 8001fe0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001fe4:	f001 f9c6 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 8001fe8:	210d      	movs	r1, #13
 8001fea:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001fee:	f001 f9c1 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 8001ff2:	210d      	movs	r1, #13
 8001ff4:	f24b 1002 	movw	r0, #45314	; 0xb102
 8001ff8:	f001 f9bc 	bl	8003374 <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 8001ffc:	2134      	movs	r1, #52	; 0x34
 8001ffe:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002002:	f001 f9b7 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 8002006:	2134      	movs	r1, #52	; 0x34
 8002008:	f24b 7001 	movw	r0, #46849	; 0xb701
 800200c:	f001 f9b2 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 8002010:	2134      	movs	r1, #52	; 0x34
 8002012:	f24b 7002 	movw	r0, #46850	; 0xb702
 8002016:	f001 f9ad 	bl	8003374 <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 800201a:	2100      	movs	r1, #0
 800201c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002020:	f001 f9a8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 8002024:	2100      	movs	r1, #0
 8002026:	f24b 2001 	movw	r0, #45569	; 0xb201
 800202a:	f001 f9a3 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 800202e:	2100      	movs	r1, #0
 8002030:	f24b 2002 	movw	r0, #45570	; 0xb202
 8002034:	f001 f99e 	bl	8003374 <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 8002038:	2124      	movs	r1, #36	; 0x24
 800203a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800203e:	f001 f999 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 8002042:	2124      	movs	r1, #36	; 0x24
 8002044:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002048:	f001 f994 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 800204c:	2124      	movs	r1, #36	; 0x24
 800204e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002052:	f001 f98f 	bl	8003374 <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 8002056:	2101      	movs	r1, #1
 8002058:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800205c:	f001 f98a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 8002060:	210f      	movs	r1, #15
 8002062:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8002066:	f001 f985 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 800206a:	210f      	movs	r1, #15
 800206c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8002070:	f001 f980 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 8002074:	210f      	movs	r1, #15
 8002076:	f24b 3002 	movw	r0, #45826	; 0xb302
 800207a:	f001 f97b 	bl	8003374 <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 800207e:	2134      	movs	r1, #52	; 0x34
 8002080:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8002084:	f001 f976 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 8002088:	2134      	movs	r1, #52	; 0x34
 800208a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800208e:	f001 f971 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 8002092:	2134      	movs	r1, #52	; 0x34
 8002094:	f64b 1002 	movw	r0, #47362	; 0xb902
 8002098:	f001 f96c 	bl	8003374 <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 800209c:	2108      	movs	r1, #8
 800209e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80020a2:	f001 f967 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 80020a6:	2108      	movs	r1, #8
 80020a8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80020ac:	f001 f962 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 80020b0:	2108      	movs	r1, #8
 80020b2:	f24b 5002 	movw	r0, #46338	; 0xb502
 80020b6:	f001 f95d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 80020ba:	2103      	movs	r1, #3
 80020bc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80020c0:	f001 f958 	bl	8003374 <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 80020c4:	2124      	movs	r1, #36	; 0x24
 80020c6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80020ca:	f001 f953 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 80020ce:	2124      	movs	r1, #36	; 0x24
 80020d0:	f64b 2001 	movw	r0, #47617	; 0xba01
 80020d4:	f001 f94e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 80020d8:	2124      	movs	r1, #36	; 0x24
 80020da:	f64b 2002 	movw	r0, #47618	; 0xba02
 80020de:	f001 f949 	bl	8003374 <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 80020e2:	2100      	movs	r1, #0
 80020e4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80020e8:	f001 f944 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 80020ec:	2178      	movs	r1, #120	; 0x78
 80020ee:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80020f2:	f001 f93f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 80020f6:	2100      	movs	r1, #0
 80020f8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80020fc:	f001 f93a 	bl	8003374 <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 8002100:	2100      	movs	r1, #0
 8002102:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8002106:	f001 f935 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 800210a:	2178      	movs	r1, #120	; 0x78
 800210c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8002110:	f001 f930 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 8002114:	2100      	movs	r1, #0
 8002116:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800211a:	f001 f92b 	bl	8003374 <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 800211e:	2100      	movs	r1, #0
 8002120:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8002124:	f001 f926 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 8002128:	2164      	movs	r1, #100	; 0x64
 800212a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800212e:	f001 f921 	bl	8003374 <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 8002132:	2100      	movs	r1, #0
 8002134:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8002138:	f001 f91c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 800213c:	2133      	movs	r1, #51	; 0x33
 800213e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8002142:	f001 f917 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 8002146:	2100      	movs	r1, #0
 8002148:	f24d 1002 	movw	r0, #53506	; 0xd102
 800214c:	f001 f912 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 8002150:	2134      	movs	r1, #52	; 0x34
 8002152:	f24d 1003 	movw	r0, #53507	; 0xd103
 8002156:	f001 f90d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 800215a:	2100      	movs	r1, #0
 800215c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8002160:	f001 f908 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 8002164:	213a      	movs	r1, #58	; 0x3a
 8002166:	f24d 1005 	movw	r0, #53509	; 0xd105
 800216a:	f001 f903 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 800216e:	2100      	movs	r1, #0
 8002170:	f24d 1006 	movw	r0, #53510	; 0xd106
 8002174:	f001 f8fe 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 8002178:	214a      	movs	r1, #74	; 0x4a
 800217a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800217e:	f001 f8f9 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 8002182:	2100      	movs	r1, #0
 8002184:	f24d 1008 	movw	r0, #53512	; 0xd108
 8002188:	f001 f8f4 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 800218c:	215c      	movs	r1, #92	; 0x5c
 800218e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8002192:	f001 f8ef 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 8002196:	2100      	movs	r1, #0
 8002198:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800219c:	f001 f8ea 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 80021a0:	2181      	movs	r1, #129	; 0x81
 80021a2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80021a6:	f001 f8e5 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 80021aa:	2100      	movs	r1, #0
 80021ac:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80021b0:	f001 f8e0 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 80021b4:	21a6      	movs	r1, #166	; 0xa6
 80021b6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80021ba:	f001 f8db 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 80021be:	2100      	movs	r1, #0
 80021c0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80021c4:	f001 f8d6 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 80021c8:	21e5      	movs	r1, #229	; 0xe5
 80021ca:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80021ce:	f001 f8d1 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 80021d2:	2101      	movs	r1, #1
 80021d4:	f24d 1010 	movw	r0, #53520	; 0xd110
 80021d8:	f001 f8cc 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 80021dc:	2113      	movs	r1, #19
 80021de:	f24d 1011 	movw	r0, #53521	; 0xd111
 80021e2:	f001 f8c7 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 80021e6:	2101      	movs	r1, #1
 80021e8:	f24d 1012 	movw	r0, #53522	; 0xd112
 80021ec:	f001 f8c2 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 80021f0:	2154      	movs	r1, #84	; 0x54
 80021f2:	f24d 1013 	movw	r0, #53523	; 0xd113
 80021f6:	f001 f8bd 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 80021fa:	2101      	movs	r1, #1
 80021fc:	f24d 1014 	movw	r0, #53524	; 0xd114
 8002200:	f001 f8b8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 8002204:	2182      	movs	r1, #130	; 0x82
 8002206:	f24d 1015 	movw	r0, #53525	; 0xd115
 800220a:	f001 f8b3 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 800220e:	2101      	movs	r1, #1
 8002210:	f24d 1016 	movw	r0, #53526	; 0xd116
 8002214:	f001 f8ae 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 8002218:	21ca      	movs	r1, #202	; 0xca
 800221a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800221e:	f001 f8a9 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 8002222:	2102      	movs	r1, #2
 8002224:	f24d 1018 	movw	r0, #53528	; 0xd118
 8002228:	f001 f8a4 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 800222c:	2100      	movs	r1, #0
 800222e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8002232:	f001 f89f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 8002236:	2102      	movs	r1, #2
 8002238:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800223c:	f001 f89a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 8002240:	2101      	movs	r1, #1
 8002242:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8002246:	f001 f895 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 800224a:	2102      	movs	r1, #2
 800224c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8002250:	f001 f890 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 8002254:	2134      	movs	r1, #52	; 0x34
 8002256:	f24d 101d 	movw	r0, #53533	; 0xd11d
 800225a:	f001 f88b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 800225e:	2102      	movs	r1, #2
 8002260:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8002264:	f001 f886 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 8002268:	2167      	movs	r1, #103	; 0x67
 800226a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800226e:	f001 f881 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 8002272:	2102      	movs	r1, #2
 8002274:	f24d 1020 	movw	r0, #53536	; 0xd120
 8002278:	f001 f87c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 800227c:	2184      	movs	r1, #132	; 0x84
 800227e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8002282:	f001 f877 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 8002286:	2102      	movs	r1, #2
 8002288:	f24d 1022 	movw	r0, #53538	; 0xd122
 800228c:	f001 f872 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 8002290:	21a4      	movs	r1, #164	; 0xa4
 8002292:	f24d 1023 	movw	r0, #53539	; 0xd123
 8002296:	f001 f86d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 800229a:	2102      	movs	r1, #2
 800229c:	f24d 1024 	movw	r0, #53540	; 0xd124
 80022a0:	f001 f868 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 80022a4:	21b7      	movs	r1, #183	; 0xb7
 80022a6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80022aa:	f001 f863 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 80022ae:	2102      	movs	r1, #2
 80022b0:	f24d 1026 	movw	r0, #53542	; 0xd126
 80022b4:	f001 f85e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 80022b8:	21cf      	movs	r1, #207	; 0xcf
 80022ba:	f24d 1027 	movw	r0, #53543	; 0xd127
 80022be:	f001 f859 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 80022c2:	2102      	movs	r1, #2
 80022c4:	f24d 1028 	movw	r0, #53544	; 0xd128
 80022c8:	f001 f854 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 80022cc:	21de      	movs	r1, #222	; 0xde
 80022ce:	f24d 1029 	movw	r0, #53545	; 0xd129
 80022d2:	f001 f84f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 80022d6:	2102      	movs	r1, #2
 80022d8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80022dc:	f001 f84a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 80022e0:	21f2      	movs	r1, #242	; 0xf2
 80022e2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80022e6:	f001 f845 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 80022ea:	2102      	movs	r1, #2
 80022ec:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80022f0:	f001 f840 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 80022f4:	21fe      	movs	r1, #254	; 0xfe
 80022f6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80022fa:	f001 f83b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 80022fe:	2103      	movs	r1, #3
 8002300:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8002304:	f001 f836 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 8002308:	2110      	movs	r1, #16
 800230a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800230e:	f001 f831 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 8002312:	2103      	movs	r1, #3
 8002314:	f24d 1030 	movw	r0, #53552	; 0xd130
 8002318:	f001 f82c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 800231c:	2133      	movs	r1, #51	; 0x33
 800231e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8002322:	f001 f827 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 8002326:	2103      	movs	r1, #3
 8002328:	f24d 1032 	movw	r0, #53554	; 0xd132
 800232c:	f001 f822 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 8002330:	216d      	movs	r1, #109	; 0x6d
 8002332:	f24d 1033 	movw	r0, #53555	; 0xd133
 8002336:	f001 f81d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 800233a:	2100      	movs	r1, #0
 800233c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8002340:	f001 f818 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 8002344:	2133      	movs	r1, #51	; 0x33
 8002346:	f24d 2001 	movw	r0, #53761	; 0xd201
 800234a:	f001 f813 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 800234e:	2100      	movs	r1, #0
 8002350:	f24d 2002 	movw	r0, #53762	; 0xd202
 8002354:	f001 f80e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 8002358:	2134      	movs	r1, #52	; 0x34
 800235a:	f24d 2003 	movw	r0, #53763	; 0xd203
 800235e:	f001 f809 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 8002362:	2100      	movs	r1, #0
 8002364:	f24d 2004 	movw	r0, #53764	; 0xd204
 8002368:	f001 f804 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 800236c:	213a      	movs	r1, #58	; 0x3a
 800236e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8002372:	f000 ffff 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 8002376:	2100      	movs	r1, #0
 8002378:	f24d 2006 	movw	r0, #53766	; 0xd206
 800237c:	f000 fffa 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 8002380:	214a      	movs	r1, #74	; 0x4a
 8002382:	f24d 2007 	movw	r0, #53767	; 0xd207
 8002386:	f000 fff5 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 800238a:	2100      	movs	r1, #0
 800238c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8002390:	f000 fff0 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 8002394:	215c      	movs	r1, #92	; 0x5c
 8002396:	f24d 2009 	movw	r0, #53769	; 0xd209
 800239a:	f000 ffeb 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 800239e:	2100      	movs	r1, #0
 80023a0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80023a4:	f000 ffe6 	bl	8003374 <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 80023a8:	2181      	movs	r1, #129	; 0x81
 80023aa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80023ae:	f000 ffe1 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 80023b2:	2100      	movs	r1, #0
 80023b4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80023b8:	f000 ffdc 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 80023bc:	21a6      	movs	r1, #166	; 0xa6
 80023be:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80023c2:	f000 ffd7 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 80023c6:	2100      	movs	r1, #0
 80023c8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80023cc:	f000 ffd2 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 80023d0:	21e5      	movs	r1, #229	; 0xe5
 80023d2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80023d6:	f000 ffcd 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 80023da:	2101      	movs	r1, #1
 80023dc:	f24d 2010 	movw	r0, #53776	; 0xd210
 80023e0:	f000 ffc8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 80023e4:	2113      	movs	r1, #19
 80023e6:	f24d 2011 	movw	r0, #53777	; 0xd211
 80023ea:	f000 ffc3 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 80023ee:	2101      	movs	r1, #1
 80023f0:	f24d 2012 	movw	r0, #53778	; 0xd212
 80023f4:	f000 ffbe 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 80023f8:	2154      	movs	r1, #84	; 0x54
 80023fa:	f24d 2013 	movw	r0, #53779	; 0xd213
 80023fe:	f000 ffb9 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 8002402:	2101      	movs	r1, #1
 8002404:	f24d 2014 	movw	r0, #53780	; 0xd214
 8002408:	f000 ffb4 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 800240c:	2182      	movs	r1, #130	; 0x82
 800240e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8002412:	f000 ffaf 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 8002416:	2101      	movs	r1, #1
 8002418:	f24d 2016 	movw	r0, #53782	; 0xd216
 800241c:	f000 ffaa 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 8002420:	21ca      	movs	r1, #202	; 0xca
 8002422:	f24d 2017 	movw	r0, #53783	; 0xd217
 8002426:	f000 ffa5 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 800242a:	2102      	movs	r1, #2
 800242c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8002430:	f000 ffa0 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 8002434:	2100      	movs	r1, #0
 8002436:	f24d 2019 	movw	r0, #53785	; 0xd219
 800243a:	f000 ff9b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 800243e:	2102      	movs	r1, #2
 8002440:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8002444:	f000 ff96 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 8002448:	2101      	movs	r1, #1
 800244a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800244e:	f000 ff91 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 8002452:	2102      	movs	r1, #2
 8002454:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8002458:	f000 ff8c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 800245c:	2134      	movs	r1, #52	; 0x34
 800245e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8002462:	f000 ff87 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 8002466:	2102      	movs	r1, #2
 8002468:	f24d 201e 	movw	r0, #53790	; 0xd21e
 800246c:	f000 ff82 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 8002470:	2167      	movs	r1, #103	; 0x67
 8002472:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8002476:	f000 ff7d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 800247a:	2102      	movs	r1, #2
 800247c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8002480:	f000 ff78 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 8002484:	2184      	movs	r1, #132	; 0x84
 8002486:	f24d 2021 	movw	r0, #53793	; 0xd221
 800248a:	f000 ff73 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 800248e:	2102      	movs	r1, #2
 8002490:	f24d 2022 	movw	r0, #53794	; 0xd222
 8002494:	f000 ff6e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 8002498:	21a4      	movs	r1, #164	; 0xa4
 800249a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800249e:	f000 ff69 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 80024a2:	2102      	movs	r1, #2
 80024a4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80024a8:	f000 ff64 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 80024ac:	21b7      	movs	r1, #183	; 0xb7
 80024ae:	f24d 2025 	movw	r0, #53797	; 0xd225
 80024b2:	f000 ff5f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 80024b6:	2102      	movs	r1, #2
 80024b8:	f24d 2026 	movw	r0, #53798	; 0xd226
 80024bc:	f000 ff5a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 80024c0:	21cf      	movs	r1, #207	; 0xcf
 80024c2:	f24d 2027 	movw	r0, #53799	; 0xd227
 80024c6:	f000 ff55 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 80024ca:	2102      	movs	r1, #2
 80024cc:	f24d 2028 	movw	r0, #53800	; 0xd228
 80024d0:	f000 ff50 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 80024d4:	21de      	movs	r1, #222	; 0xde
 80024d6:	f24d 2029 	movw	r0, #53801	; 0xd229
 80024da:	f000 ff4b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 80024de:	2102      	movs	r1, #2
 80024e0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80024e4:	f000 ff46 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 80024e8:	21f2      	movs	r1, #242	; 0xf2
 80024ea:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80024ee:	f000 ff41 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 80024f2:	2102      	movs	r1, #2
 80024f4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80024f8:	f000 ff3c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 80024fc:	21fe      	movs	r1, #254	; 0xfe
 80024fe:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8002502:	f000 ff37 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 8002506:	2103      	movs	r1, #3
 8002508:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800250c:	f000 ff32 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 8002510:	2110      	movs	r1, #16
 8002512:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8002516:	f000 ff2d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 800251a:	2103      	movs	r1, #3
 800251c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8002520:	f000 ff28 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 8002524:	2133      	movs	r1, #51	; 0x33
 8002526:	f24d 2031 	movw	r0, #53809	; 0xd231
 800252a:	f000 ff23 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 800252e:	2103      	movs	r1, #3
 8002530:	f24d 2032 	movw	r0, #53810	; 0xd232
 8002534:	f000 ff1e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 8002538:	216d      	movs	r1, #109	; 0x6d
 800253a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800253e:	f000 ff19 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 8002542:	2100      	movs	r1, #0
 8002544:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8002548:	f000 ff14 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 800254c:	2133      	movs	r1, #51	; 0x33
 800254e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8002552:	f000 ff0f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 8002556:	2100      	movs	r1, #0
 8002558:	f24d 3002 	movw	r0, #54018	; 0xd302
 800255c:	f000 ff0a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 8002560:	2134      	movs	r1, #52	; 0x34
 8002562:	f24d 3003 	movw	r0, #54019	; 0xd303
 8002566:	f000 ff05 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 800256a:	2100      	movs	r1, #0
 800256c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8002570:	f000 ff00 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 8002574:	213a      	movs	r1, #58	; 0x3a
 8002576:	f24d 3005 	movw	r0, #54021	; 0xd305
 800257a:	f000 fefb 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 800257e:	2100      	movs	r1, #0
 8002580:	f24d 3006 	movw	r0, #54022	; 0xd306
 8002584:	f000 fef6 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 8002588:	214a      	movs	r1, #74	; 0x4a
 800258a:	f24d 3007 	movw	r0, #54023	; 0xd307
 800258e:	f000 fef1 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 8002592:	2100      	movs	r1, #0
 8002594:	f24d 3008 	movw	r0, #54024	; 0xd308
 8002598:	f000 feec 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 800259c:	215c      	movs	r1, #92	; 0x5c
 800259e:	f24d 3009 	movw	r0, #54025	; 0xd309
 80025a2:	f000 fee7 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 80025a6:	2100      	movs	r1, #0
 80025a8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80025ac:	f000 fee2 	bl	8003374 <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 80025b0:	2181      	movs	r1, #129	; 0x81
 80025b2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80025b6:	f000 fedd 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 80025ba:	2100      	movs	r1, #0
 80025bc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80025c0:	f000 fed8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 80025c4:	21a6      	movs	r1, #166	; 0xa6
 80025c6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80025ca:	f000 fed3 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 80025ce:	2100      	movs	r1, #0
 80025d0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80025d4:	f000 fece 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 80025d8:	21e5      	movs	r1, #229	; 0xe5
 80025da:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80025de:	f000 fec9 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 80025e2:	2101      	movs	r1, #1
 80025e4:	f24d 3010 	movw	r0, #54032	; 0xd310
 80025e8:	f000 fec4 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 80025ec:	2113      	movs	r1, #19
 80025ee:	f24d 3011 	movw	r0, #54033	; 0xd311
 80025f2:	f000 febf 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 80025f6:	2101      	movs	r1, #1
 80025f8:	f24d 3012 	movw	r0, #54034	; 0xd312
 80025fc:	f000 feba 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 8002600:	2154      	movs	r1, #84	; 0x54
 8002602:	f24d 3013 	movw	r0, #54035	; 0xd313
 8002606:	f000 feb5 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 800260a:	2101      	movs	r1, #1
 800260c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8002610:	f000 feb0 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 8002614:	2182      	movs	r1, #130	; 0x82
 8002616:	f24d 3015 	movw	r0, #54037	; 0xd315
 800261a:	f000 feab 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 800261e:	2101      	movs	r1, #1
 8002620:	f24d 3016 	movw	r0, #54038	; 0xd316
 8002624:	f000 fea6 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 8002628:	21ca      	movs	r1, #202	; 0xca
 800262a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800262e:	f000 fea1 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 8002632:	2102      	movs	r1, #2
 8002634:	f24d 3018 	movw	r0, #54040	; 0xd318
 8002638:	f000 fe9c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 800263c:	2100      	movs	r1, #0
 800263e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8002642:	f000 fe97 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 8002646:	2102      	movs	r1, #2
 8002648:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800264c:	f000 fe92 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 8002650:	2101      	movs	r1, #1
 8002652:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8002656:	f000 fe8d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 800265a:	2102      	movs	r1, #2
 800265c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8002660:	f000 fe88 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 8002664:	2134      	movs	r1, #52	; 0x34
 8002666:	f24d 301d 	movw	r0, #54045	; 0xd31d
 800266a:	f000 fe83 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 800266e:	2102      	movs	r1, #2
 8002670:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8002674:	f000 fe7e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 8002678:	2167      	movs	r1, #103	; 0x67
 800267a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800267e:	f000 fe79 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 8002682:	2102      	movs	r1, #2
 8002684:	f24d 3020 	movw	r0, #54048	; 0xd320
 8002688:	f000 fe74 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 800268c:	2184      	movs	r1, #132	; 0x84
 800268e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8002692:	f000 fe6f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 8002696:	2102      	movs	r1, #2
 8002698:	f24d 3022 	movw	r0, #54050	; 0xd322
 800269c:	f000 fe6a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 80026a0:	21a4      	movs	r1, #164	; 0xa4
 80026a2:	f24d 3023 	movw	r0, #54051	; 0xd323
 80026a6:	f000 fe65 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 80026aa:	2102      	movs	r1, #2
 80026ac:	f24d 3024 	movw	r0, #54052	; 0xd324
 80026b0:	f000 fe60 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 80026b4:	21b7      	movs	r1, #183	; 0xb7
 80026b6:	f24d 3025 	movw	r0, #54053	; 0xd325
 80026ba:	f000 fe5b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 80026be:	2102      	movs	r1, #2
 80026c0:	f24d 3026 	movw	r0, #54054	; 0xd326
 80026c4:	f000 fe56 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 80026c8:	21cf      	movs	r1, #207	; 0xcf
 80026ca:	f24d 3027 	movw	r0, #54055	; 0xd327
 80026ce:	f000 fe51 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 80026d2:	2102      	movs	r1, #2
 80026d4:	f24d 3028 	movw	r0, #54056	; 0xd328
 80026d8:	f000 fe4c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 80026dc:	21de      	movs	r1, #222	; 0xde
 80026de:	f24d 3029 	movw	r0, #54057	; 0xd329
 80026e2:	f000 fe47 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 80026e6:	2102      	movs	r1, #2
 80026e8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80026ec:	f000 fe42 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 80026f0:	21f2      	movs	r1, #242	; 0xf2
 80026f2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80026f6:	f000 fe3d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 80026fa:	2102      	movs	r1, #2
 80026fc:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8002700:	f000 fe38 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 8002704:	21fe      	movs	r1, #254	; 0xfe
 8002706:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800270a:	f000 fe33 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 800270e:	2103      	movs	r1, #3
 8002710:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8002714:	f000 fe2e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 8002718:	2110      	movs	r1, #16
 800271a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800271e:	f000 fe29 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 8002722:	2103      	movs	r1, #3
 8002724:	f24d 3030 	movw	r0, #54064	; 0xd330
 8002728:	f000 fe24 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 800272c:	2133      	movs	r1, #51	; 0x33
 800272e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8002732:	f000 fe1f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 8002736:	2103      	movs	r1, #3
 8002738:	f24d 3032 	movw	r0, #54066	; 0xd332
 800273c:	f000 fe1a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 8002740:	216d      	movs	r1, #109	; 0x6d
 8002742:	f24d 3033 	movw	r0, #54067	; 0xd333
 8002746:	f000 fe15 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 800274a:	2100      	movs	r1, #0
 800274c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8002750:	f000 fe10 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 8002754:	2133      	movs	r1, #51	; 0x33
 8002756:	f24d 4001 	movw	r0, #54273	; 0xd401
 800275a:	f000 fe0b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 800275e:	2100      	movs	r1, #0
 8002760:	f24d 4002 	movw	r0, #54274	; 0xd402
 8002764:	f000 fe06 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 8002768:	2134      	movs	r1, #52	; 0x34
 800276a:	f24d 4003 	movw	r0, #54275	; 0xd403
 800276e:	f000 fe01 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 8002772:	2100      	movs	r1, #0
 8002774:	f24d 4004 	movw	r0, #54276	; 0xd404
 8002778:	f000 fdfc 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 800277c:	213a      	movs	r1, #58	; 0x3a
 800277e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8002782:	f000 fdf7 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 8002786:	2100      	movs	r1, #0
 8002788:	f24d 4006 	movw	r0, #54278	; 0xd406
 800278c:	f000 fdf2 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 8002790:	214a      	movs	r1, #74	; 0x4a
 8002792:	f24d 4007 	movw	r0, #54279	; 0xd407
 8002796:	f000 fded 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 800279a:	2100      	movs	r1, #0
 800279c:	f24d 4008 	movw	r0, #54280	; 0xd408
 80027a0:	f000 fde8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 80027a4:	215c      	movs	r1, #92	; 0x5c
 80027a6:	f24d 4009 	movw	r0, #54281	; 0xd409
 80027aa:	f000 fde3 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 80027ae:	2100      	movs	r1, #0
 80027b0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80027b4:	f000 fdde 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 80027b8:	2181      	movs	r1, #129	; 0x81
 80027ba:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80027be:	f000 fdd9 	bl	8003374 <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 80027c2:	2100      	movs	r1, #0
 80027c4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80027c8:	f000 fdd4 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 80027cc:	21a6      	movs	r1, #166	; 0xa6
 80027ce:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80027d2:	f000 fdcf 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 80027d6:	2100      	movs	r1, #0
 80027d8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80027dc:	f000 fdca 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 80027e0:	21e5      	movs	r1, #229	; 0xe5
 80027e2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80027e6:	f000 fdc5 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 80027ea:	2101      	movs	r1, #1
 80027ec:	f24d 4010 	movw	r0, #54288	; 0xd410
 80027f0:	f000 fdc0 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 80027f4:	2113      	movs	r1, #19
 80027f6:	f24d 4011 	movw	r0, #54289	; 0xd411
 80027fa:	f000 fdbb 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 80027fe:	2101      	movs	r1, #1
 8002800:	f24d 4012 	movw	r0, #54290	; 0xd412
 8002804:	f000 fdb6 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 8002808:	2154      	movs	r1, #84	; 0x54
 800280a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800280e:	f000 fdb1 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 8002812:	2101      	movs	r1, #1
 8002814:	f24d 4014 	movw	r0, #54292	; 0xd414
 8002818:	f000 fdac 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 800281c:	2182      	movs	r1, #130	; 0x82
 800281e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8002822:	f000 fda7 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 8002826:	2101      	movs	r1, #1
 8002828:	f24d 4016 	movw	r0, #54294	; 0xd416
 800282c:	f000 fda2 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 8002830:	21ca      	movs	r1, #202	; 0xca
 8002832:	f24d 4017 	movw	r0, #54295	; 0xd417
 8002836:	f000 fd9d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 800283a:	2102      	movs	r1, #2
 800283c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8002840:	f000 fd98 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 8002844:	2100      	movs	r1, #0
 8002846:	f24d 4019 	movw	r0, #54297	; 0xd419
 800284a:	f000 fd93 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 800284e:	2102      	movs	r1, #2
 8002850:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8002854:	f000 fd8e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 8002858:	2101      	movs	r1, #1
 800285a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800285e:	f000 fd89 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 8002862:	2102      	movs	r1, #2
 8002864:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8002868:	f000 fd84 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 800286c:	2134      	movs	r1, #52	; 0x34
 800286e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8002872:	f000 fd7f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 8002876:	2102      	movs	r1, #2
 8002878:	f24d 401e 	movw	r0, #54302	; 0xd41e
 800287c:	f000 fd7a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 8002880:	2167      	movs	r1, #103	; 0x67
 8002882:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8002886:	f000 fd75 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 800288a:	2102      	movs	r1, #2
 800288c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8002890:	f000 fd70 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 8002894:	2184      	movs	r1, #132	; 0x84
 8002896:	f24d 4021 	movw	r0, #54305	; 0xd421
 800289a:	f000 fd6b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 800289e:	2102      	movs	r1, #2
 80028a0:	f24d 4022 	movw	r0, #54306	; 0xd422
 80028a4:	f000 fd66 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 80028a8:	21a4      	movs	r1, #164	; 0xa4
 80028aa:	f24d 4023 	movw	r0, #54307	; 0xd423
 80028ae:	f000 fd61 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 80028b2:	2102      	movs	r1, #2
 80028b4:	f24d 4024 	movw	r0, #54308	; 0xd424
 80028b8:	f000 fd5c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 80028bc:	21b7      	movs	r1, #183	; 0xb7
 80028be:	f24d 4025 	movw	r0, #54309	; 0xd425
 80028c2:	f000 fd57 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 80028c6:	2102      	movs	r1, #2
 80028c8:	f24d 4026 	movw	r0, #54310	; 0xd426
 80028cc:	f000 fd52 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 80028d0:	21cf      	movs	r1, #207	; 0xcf
 80028d2:	f24d 4027 	movw	r0, #54311	; 0xd427
 80028d6:	f000 fd4d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 80028da:	2102      	movs	r1, #2
 80028dc:	f24d 4028 	movw	r0, #54312	; 0xd428
 80028e0:	f000 fd48 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 80028e4:	21de      	movs	r1, #222	; 0xde
 80028e6:	f24d 4029 	movw	r0, #54313	; 0xd429
 80028ea:	f000 fd43 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 80028ee:	2102      	movs	r1, #2
 80028f0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80028f4:	f000 fd3e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 80028f8:	21f2      	movs	r1, #242	; 0xf2
 80028fa:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80028fe:	f000 fd39 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 8002902:	2102      	movs	r1, #2
 8002904:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8002908:	f000 fd34 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 800290c:	21fe      	movs	r1, #254	; 0xfe
 800290e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8002912:	f000 fd2f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 8002916:	2103      	movs	r1, #3
 8002918:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800291c:	f000 fd2a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 8002920:	2110      	movs	r1, #16
 8002922:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8002926:	f000 fd25 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 800292a:	2103      	movs	r1, #3
 800292c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8002930:	f000 fd20 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 8002934:	2133      	movs	r1, #51	; 0x33
 8002936:	f24d 4031 	movw	r0, #54321	; 0xd431
 800293a:	f000 fd1b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 800293e:	2103      	movs	r1, #3
 8002940:	f24d 4032 	movw	r0, #54322	; 0xd432
 8002944:	f000 fd16 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 8002948:	216d      	movs	r1, #109	; 0x6d
 800294a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800294e:	f000 fd11 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 8002952:	2100      	movs	r1, #0
 8002954:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8002958:	f000 fd0c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 800295c:	2133      	movs	r1, #51	; 0x33
 800295e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8002962:	f000 fd07 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 8002966:	2100      	movs	r1, #0
 8002968:	f24d 5002 	movw	r0, #54530	; 0xd502
 800296c:	f000 fd02 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 8002970:	2134      	movs	r1, #52	; 0x34
 8002972:	f24d 5003 	movw	r0, #54531	; 0xd503
 8002976:	f000 fcfd 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 800297a:	2100      	movs	r1, #0
 800297c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8002980:	f000 fcf8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 8002984:	213a      	movs	r1, #58	; 0x3a
 8002986:	f24d 5005 	movw	r0, #54533	; 0xd505
 800298a:	f000 fcf3 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 800298e:	2100      	movs	r1, #0
 8002990:	f24d 5006 	movw	r0, #54534	; 0xd506
 8002994:	f000 fcee 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 8002998:	214a      	movs	r1, #74	; 0x4a
 800299a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800299e:	f000 fce9 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 80029a2:	2100      	movs	r1, #0
 80029a4:	f24d 5008 	movw	r0, #54536	; 0xd508
 80029a8:	f000 fce4 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 80029ac:	215c      	movs	r1, #92	; 0x5c
 80029ae:	f24d 5009 	movw	r0, #54537	; 0xd509
 80029b2:	f000 fcdf 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 80029b6:	2100      	movs	r1, #0
 80029b8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80029bc:	f000 fcda 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 80029c0:	2181      	movs	r1, #129	; 0x81
 80029c2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80029c6:	f000 fcd5 	bl	8003374 <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 80029ca:	2100      	movs	r1, #0
 80029cc:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80029d0:	f000 fcd0 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 80029d4:	21a6      	movs	r1, #166	; 0xa6
 80029d6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80029da:	f000 fccb 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 80029de:	2100      	movs	r1, #0
 80029e0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80029e4:	f000 fcc6 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 80029e8:	21e5      	movs	r1, #229	; 0xe5
 80029ea:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80029ee:	f000 fcc1 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 80029f2:	2101      	movs	r1, #1
 80029f4:	f24d 5010 	movw	r0, #54544	; 0xd510
 80029f8:	f000 fcbc 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 80029fc:	2113      	movs	r1, #19
 80029fe:	f24d 5011 	movw	r0, #54545	; 0xd511
 8002a02:	f000 fcb7 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 8002a06:	2101      	movs	r1, #1
 8002a08:	f24d 5012 	movw	r0, #54546	; 0xd512
 8002a0c:	f000 fcb2 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 8002a10:	2154      	movs	r1, #84	; 0x54
 8002a12:	f24d 5013 	movw	r0, #54547	; 0xd513
 8002a16:	f000 fcad 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8002a20:	f000 fca8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 8002a24:	2182      	movs	r1, #130	; 0x82
 8002a26:	f24d 5015 	movw	r0, #54549	; 0xd515
 8002a2a:	f000 fca3 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 8002a2e:	2101      	movs	r1, #1
 8002a30:	f24d 5016 	movw	r0, #54550	; 0xd516
 8002a34:	f000 fc9e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 8002a38:	21ca      	movs	r1, #202	; 0xca
 8002a3a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8002a3e:	f000 fc99 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 8002a42:	2102      	movs	r1, #2
 8002a44:	f24d 5018 	movw	r0, #54552	; 0xd518
 8002a48:	f000 fc94 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8002a52:	f000 fc8f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 8002a56:	2102      	movs	r1, #2
 8002a58:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8002a5c:	f000 fc8a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 8002a60:	2101      	movs	r1, #1
 8002a62:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8002a66:	f000 fc85 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8002a70:	f000 fc80 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 8002a74:	2134      	movs	r1, #52	; 0x34
 8002a76:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8002a7a:	f000 fc7b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 8002a7e:	2102      	movs	r1, #2
 8002a80:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8002a84:	f000 fc76 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 8002a88:	2167      	movs	r1, #103	; 0x67
 8002a8a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8002a8e:	f000 fc71 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 8002a92:	2102      	movs	r1, #2
 8002a94:	f24d 5020 	movw	r0, #54560	; 0xd520
 8002a98:	f000 fc6c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 8002a9c:	2184      	movs	r1, #132	; 0x84
 8002a9e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8002aa2:	f000 fc67 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	f24d 5022 	movw	r0, #54562	; 0xd522
 8002aac:	f000 fc62 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 8002ab0:	21a4      	movs	r1, #164	; 0xa4
 8002ab2:	f24d 5023 	movw	r0, #54563	; 0xd523
 8002ab6:	f000 fc5d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 8002aba:	2102      	movs	r1, #2
 8002abc:	f24d 5024 	movw	r0, #54564	; 0xd524
 8002ac0:	f000 fc58 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 8002ac4:	21b7      	movs	r1, #183	; 0xb7
 8002ac6:	f24d 5025 	movw	r0, #54565	; 0xd525
 8002aca:	f000 fc53 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8002ace:	2102      	movs	r1, #2
 8002ad0:	f24d 5026 	movw	r0, #54566	; 0xd526
 8002ad4:	f000 fc4e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 8002ad8:	21cf      	movs	r1, #207	; 0xcf
 8002ada:	f24d 5027 	movw	r0, #54567	; 0xd527
 8002ade:	f000 fc49 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	f24d 5028 	movw	r0, #54568	; 0xd528
 8002ae8:	f000 fc44 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 8002aec:	21de      	movs	r1, #222	; 0xde
 8002aee:	f24d 5029 	movw	r0, #54569	; 0xd529
 8002af2:	f000 fc3f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 8002af6:	2102      	movs	r1, #2
 8002af8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8002afc:	f000 fc3a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 8002b00:	21f2      	movs	r1, #242	; 0xf2
 8002b02:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8002b06:	f000 fc35 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8002b10:	f000 fc30 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 8002b14:	21fe      	movs	r1, #254	; 0xfe
 8002b16:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8002b1a:	f000 fc2b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 8002b1e:	2103      	movs	r1, #3
 8002b20:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8002b24:	f000 fc26 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 8002b28:	2110      	movs	r1, #16
 8002b2a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8002b2e:	f000 fc21 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 8002b32:	2103      	movs	r1, #3
 8002b34:	f24d 5030 	movw	r0, #54576	; 0xd530
 8002b38:	f000 fc1c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 8002b3c:	2133      	movs	r1, #51	; 0x33
 8002b3e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8002b42:	f000 fc17 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 8002b46:	2103      	movs	r1, #3
 8002b48:	f24d 5032 	movw	r0, #54578	; 0xd532
 8002b4c:	f000 fc12 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 8002b50:	216d      	movs	r1, #109	; 0x6d
 8002b52:	f24d 5033 	movw	r0, #54579	; 0xd533
 8002b56:	f000 fc0d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8002b60:	f000 fc08 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 8002b64:	2133      	movs	r1, #51	; 0x33
 8002b66:	f24d 6001 	movw	r0, #54785	; 0xd601
 8002b6a:	f000 fc03 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f24d 6002 	movw	r0, #54786	; 0xd602
 8002b74:	f000 fbfe 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 8002b78:	2134      	movs	r1, #52	; 0x34
 8002b7a:	f24d 6003 	movw	r0, #54787	; 0xd603
 8002b7e:	f000 fbf9 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 8002b82:	2100      	movs	r1, #0
 8002b84:	f24d 6004 	movw	r0, #54788	; 0xd604
 8002b88:	f000 fbf4 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 8002b8c:	213a      	movs	r1, #58	; 0x3a
 8002b8e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8002b92:	f000 fbef 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 8002b96:	2100      	movs	r1, #0
 8002b98:	f24d 6006 	movw	r0, #54790	; 0xd606
 8002b9c:	f000 fbea 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 8002ba0:	214a      	movs	r1, #74	; 0x4a
 8002ba2:	f24d 6007 	movw	r0, #54791	; 0xd607
 8002ba6:	f000 fbe5 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 8002baa:	2100      	movs	r1, #0
 8002bac:	f24d 6008 	movw	r0, #54792	; 0xd608
 8002bb0:	f000 fbe0 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 8002bb4:	215c      	movs	r1, #92	; 0x5c
 8002bb6:	f24d 6009 	movw	r0, #54793	; 0xd609
 8002bba:	f000 fbdb 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8002bc4:	f000 fbd6 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 8002bc8:	2181      	movs	r1, #129	; 0x81
 8002bca:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8002bce:	f000 fbd1 	bl	8003374 <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8002bd8:	f000 fbcc 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 8002bdc:	21a6      	movs	r1, #166	; 0xa6
 8002bde:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8002be2:	f000 fbc7 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 8002be6:	2100      	movs	r1, #0
 8002be8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8002bec:	f000 fbc2 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 8002bf0:	21e5      	movs	r1, #229	; 0xe5
 8002bf2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8002bf6:	f000 fbbd 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	f24d 6010 	movw	r0, #54800	; 0xd610
 8002c00:	f000 fbb8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 8002c04:	2113      	movs	r1, #19
 8002c06:	f24d 6011 	movw	r0, #54801	; 0xd611
 8002c0a:	f000 fbb3 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8002c0e:	2101      	movs	r1, #1
 8002c10:	f24d 6012 	movw	r0, #54802	; 0xd612
 8002c14:	f000 fbae 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 8002c18:	2154      	movs	r1, #84	; 0x54
 8002c1a:	f24d 6013 	movw	r0, #54803	; 0xd613
 8002c1e:	f000 fba9 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 8002c22:	2101      	movs	r1, #1
 8002c24:	f24d 6014 	movw	r0, #54804	; 0xd614
 8002c28:	f000 fba4 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 8002c2c:	2182      	movs	r1, #130	; 0x82
 8002c2e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8002c32:	f000 fb9f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 8002c36:	2101      	movs	r1, #1
 8002c38:	f24d 6016 	movw	r0, #54806	; 0xd616
 8002c3c:	f000 fb9a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 8002c40:	21ca      	movs	r1, #202	; 0xca
 8002c42:	f24d 6017 	movw	r0, #54807	; 0xd617
 8002c46:	f000 fb95 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8002c50:	f000 fb90 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 8002c54:	2100      	movs	r1, #0
 8002c56:	f24d 6019 	movw	r0, #54809	; 0xd619
 8002c5a:	f000 fb8b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 8002c5e:	2102      	movs	r1, #2
 8002c60:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8002c64:	f000 fb86 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 8002c68:	2101      	movs	r1, #1
 8002c6a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8002c6e:	f000 fb81 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 8002c72:	2102      	movs	r1, #2
 8002c74:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8002c78:	f000 fb7c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 8002c7c:	2134      	movs	r1, #52	; 0x34
 8002c7e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8002c82:	f000 fb77 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 8002c86:	2102      	movs	r1, #2
 8002c88:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8002c8c:	f000 fb72 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 8002c90:	2167      	movs	r1, #103	; 0x67
 8002c92:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8002c96:	f000 fb6d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 8002c9a:	2102      	movs	r1, #2
 8002c9c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8002ca0:	f000 fb68 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 8002ca4:	2184      	movs	r1, #132	; 0x84
 8002ca6:	f24d 6021 	movw	r0, #54817	; 0xd621
 8002caa:	f000 fb63 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 8002cae:	2102      	movs	r1, #2
 8002cb0:	f24d 6022 	movw	r0, #54818	; 0xd622
 8002cb4:	f000 fb5e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 8002cb8:	21a4      	movs	r1, #164	; 0xa4
 8002cba:	f24d 6023 	movw	r0, #54819	; 0xd623
 8002cbe:	f000 fb59 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	f24d 6024 	movw	r0, #54820	; 0xd624
 8002cc8:	f000 fb54 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 8002ccc:	21b7      	movs	r1, #183	; 0xb7
 8002cce:	f24d 6025 	movw	r0, #54821	; 0xd625
 8002cd2:	f000 fb4f 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	f24d 6026 	movw	r0, #54822	; 0xd626
 8002cdc:	f000 fb4a 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 8002ce0:	21cf      	movs	r1, #207	; 0xcf
 8002ce2:	f24d 6027 	movw	r0, #54823	; 0xd627
 8002ce6:	f000 fb45 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 8002cea:	2102      	movs	r1, #2
 8002cec:	f24d 6028 	movw	r0, #54824	; 0xd628
 8002cf0:	f000 fb40 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 8002cf4:	21de      	movs	r1, #222	; 0xde
 8002cf6:	f24d 6029 	movw	r0, #54825	; 0xd629
 8002cfa:	f000 fb3b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8002cfe:	2102      	movs	r1, #2
 8002d00:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8002d04:	f000 fb36 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 8002d08:	21f2      	movs	r1, #242	; 0xf2
 8002d0a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8002d0e:	f000 fb31 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 8002d12:	2102      	movs	r1, #2
 8002d14:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8002d18:	f000 fb2c 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 8002d1c:	21fe      	movs	r1, #254	; 0xfe
 8002d1e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8002d22:	f000 fb27 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 8002d26:	2103      	movs	r1, #3
 8002d28:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8002d2c:	f000 fb22 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 8002d30:	2110      	movs	r1, #16
 8002d32:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8002d36:	f000 fb1d 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8002d40:	f000 fb18 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 8002d44:	2133      	movs	r1, #51	; 0x33
 8002d46:	f24d 6031 	movw	r0, #54833	; 0xd631
 8002d4a:	f000 fb13 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 8002d4e:	2103      	movs	r1, #3
 8002d50:	f24d 6032 	movw	r0, #54834	; 0xd632
 8002d54:	f000 fb0e 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 8002d58:	216d      	movs	r1, #109	; 0x6d
 8002d5a:	f24d 6033 	movw	r0, #54835	; 0xd633
 8002d5e:	f000 fb09 	bl	8003374 <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 8002d62:	2155      	movs	r1, #85	; 0x55
 8002d64:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002d68:	f000 fb04 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8002d6c:	21aa      	movs	r1, #170	; 0xaa
 8002d6e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002d72:	f000 faff 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8002d76:	2152      	movs	r1, #82	; 0x52
 8002d78:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002d7c:	f000 fafa 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8002d80:	2108      	movs	r1, #8
 8002d82:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002d86:	f000 faf5 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002d90:	f000 faf0 	bl	8003374 <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 8002d94:	21cc      	movs	r1, #204	; 0xcc
 8002d96:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002d9a:	f000 faeb 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002da4:	f000 fae6 	bl	8003374 <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 8002da8:	2105      	movs	r1, #5
 8002daa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002dae:	f000 fae1 	bl	8003374 <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 8002db2:	2170      	movs	r1, #112	; 0x70
 8002db4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002db8:	f000 fadc 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 8002dbc:	2170      	movs	r1, #112	; 0x70
 8002dbe:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002dc2:	f000 fad7 	bl	8003374 <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002dcc:	f000 fad2 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002dd6:	f000 facd 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 8002dda:	2103      	movs	r1, #3
 8002ddc:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002de0:	f000 fac8 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 8002de4:	2103      	movs	r1, #3
 8002de6:	f64b 0003 	movw	r0, #47107	; 0xb803
 8002dea:	f000 fac3 	bl	8003374 <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8002dee:	2102      	movs	r1, #2
 8002df0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002df4:	f000 fabe 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 8002df8:	2100      	movs	r1, #0
 8002dfa:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8002dfe:	f000 fab9 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8002e02:	2100      	movs	r1, #0
 8002e04:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002e08:	f000 fab4 	bl	8003374 <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 8002e0c:	21d0      	movs	r1, #208	; 0xd0
 8002e0e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8002e12:	f000 faaf 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 8002e16:	2102      	movs	r1, #2
 8002e18:	f64c 1001 	movw	r0, #51457	; 0xc901
 8002e1c:	f000 faaa 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 8002e20:	2150      	movs	r1, #80	; 0x50
 8002e22:	f64c 1002 	movw	r0, #51458	; 0xc902
 8002e26:	f000 faa5 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 8002e2a:	2150      	movs	r1, #80	; 0x50
 8002e2c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8002e30:	f000 faa0 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 8002e34:	2150      	movs	r1, #80	; 0x50
 8002e36:	f64c 1004 	movw	r0, #51460	; 0xc904
 8002e3a:	f000 fa9b 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 8002e3e:	2100      	movs	r1, #0
 8002e40:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8002e44:	f000 fa96 	bl	8003374 <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8002e48:	2155      	movs	r1, #85	; 0x55
 8002e4a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8002e4e:	f000 fa91 	bl	8003374 <lcd_write_reg>
    lcd_wr_regno(0x1100);
 8002e52:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8002e56:	f000 fa79 	bl	800334c <lcd_wr_regno>
    HAL_Delay(12);
 8002e5a:	200c      	movs	r0, #12
 8002e5c:	f002 f92a 	bl	80050b4 <HAL_Delay>
    lcd_wr_regno(0x2900);
 8002e60:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8002e64:	f000 fa72 	bl	800334c <lcd_wr_regno>
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <lcd_ex_ili9806_reginit>:
 * @brief  ILI9806 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9806_reginit(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
 8002e70:	20ff      	movs	r0, #255	; 0xff
 8002e72:	f000 fa6b 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8002e76:	20ff      	movs	r0, #255	; 0xff
 8002e78:	f000 fa54 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x98);
 8002e7c:	2098      	movs	r0, #152	; 0x98
 8002e7e:	f000 fa51 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x06);
 8002e82:	2006      	movs	r0, #6
 8002e84:	f000 fa4e 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xBC); /* GIP 1 */
 8002e88:	20bc      	movs	r0, #188	; 0xbc
 8002e8a:	f000 fa5f 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f000 fa48 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8002e94:	200f      	movs	r0, #15
 8002e96:	f000 fa45 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x61);
 8002e9a:	2061      	movs	r0, #97	; 0x61
 8002e9c:	f000 fa42 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002ea0:	20ff      	movs	r0, #255	; 0xff
 8002ea2:	f000 fa3f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f000 fa3c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f000 fa39 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0B);
 8002eb2:	200b      	movs	r0, #11
 8002eb4:	f000 fa36 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x10);
 8002eb8:	2010      	movs	r0, #16
 8002eba:	f000 fa33 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x37);
 8002ebe:	2037      	movs	r0, #55	; 0x37
 8002ec0:	f000 fa30 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x63);
 8002ec4:	2063      	movs	r0, #99	; 0x63
 8002ec6:	f000 fa2d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002eca:	20ff      	movs	r0, #255	; 0xff
 8002ecc:	f000 fa2a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002ed0:	20ff      	movs	r0, #255	; 0xff
 8002ed2:	f000 fa27 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f000 fa24 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002edc:	2001      	movs	r0, #1
 8002ede:	f000 fa21 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f000 fa1e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f000 fa1b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002eee:	20ff      	movs	r0, #255	; 0xff
 8002ef0:	f000 fa18 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x52);
 8002ef4:	2052      	movs	r0, #82	; 0x52
 8002ef6:	f000 fa15 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002efa:	2001      	movs	r0, #1
 8002efc:	f000 fa12 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f000 fa0f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x40);
 8002f06:	2040      	movs	r0, #64	; 0x40
 8002f08:	f000 fa0c 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xBD); /* GIP 2 */
 8002f0c:	20bd      	movs	r0, #189	; 0xbd
 8002f0e:	f000 fa1d 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f000 fa06 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x23);
 8002f18:	2023      	movs	r0, #35	; 0x23
 8002f1a:	f000 fa03 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x45);
 8002f1e:	2045      	movs	r0, #69	; 0x45
 8002f20:	f000 fa00 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x67);
 8002f24:	2067      	movs	r0, #103	; 0x67
 8002f26:	f000 f9fd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f000 f9fa 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x23);
 8002f30:	2023      	movs	r0, #35	; 0x23
 8002f32:	f000 f9f7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x45);
 8002f36:	2045      	movs	r0, #69	; 0x45
 8002f38:	f000 f9f4 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x67);
 8002f3c:	2067      	movs	r0, #103	; 0x67
 8002f3e:	f000 f9f1 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* GIP 3 */
 8002f42:	20be      	movs	r0, #190	; 0xbe
 8002f44:	f000 fa02 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f000 f9eb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 f9e8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xAB);
 8002f54:	20ab      	movs	r0, #171	; 0xab
 8002f56:	f000 f9e5 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x60);
 8002f5a:	2060      	movs	r0, #96	; 0x60
 8002f5c:	f000 f9e2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002f60:	2022      	movs	r0, #34	; 0x22
 8002f62:	f000 f9df 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002f66:	2022      	movs	r0, #34	; 0x22
 8002f68:	f000 f9dc 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002f6c:	2022      	movs	r0, #34	; 0x22
 8002f6e:	f000 f9d9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002f72:	2022      	movs	r0, #34	; 0x22
 8002f74:	f000 f9d6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002f78:	2022      	movs	r0, #34	; 0x22
 8002f7a:	f000 f9d3 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xC7); /* VCOM Control */
 8002f7e:	20c7      	movs	r0, #199	; 0xc7
 8002f80:	f000 f9e4 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x36);
 8002f84:	2036      	movs	r0, #54	; 0x36
 8002f86:	f000 f9cd 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
 8002f8a:	20ed      	movs	r0, #237	; 0xed
 8002f8c:	f000 f9de 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x7F);
 8002f90:	207f      	movs	r0, #127	; 0x7f
 8002f92:	f000 f9c7 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8002f96:	200f      	movs	r0, #15
 8002f98:	f000 f9c4 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
 8002f9c:	20c0      	movs	r0, #192	; 0xc0
 8002f9e:	f000 f9d5 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8002fa2:	200f      	movs	r0, #15
 8002fa4:	f000 f9be 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0B);
 8002fa8:	200b      	movs	r0, #11
 8002faa:	f000 f9bb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* VGH 15V,VGLO-10V */
 8002fae:	200a      	movs	r0, #10
 8002fb0:	f000 f9b8 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
 8002fb4:	20fc      	movs	r0, #252	; 0xfc
 8002fb6:	f000 f9c9 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x08);
 8002fba:	2008      	movs	r0, #8
 8002fbc:	f000 f9b2 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0XDF);
 8002fc0:	20df      	movs	r0, #223	; 0xdf
 8002fc2:	f000 f9c3 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f000 f9ac 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f000 f9a9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f000 f9a6 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f000 f9a3 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f000 f9a0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x20);
 8002fe4:	2020      	movs	r0, #32
 8002fe6:	f000 f99d 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
 8002fea:	20f3      	movs	r0, #243	; 0xf3
 8002fec:	f000 f9ae 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x74);
 8002ff0:	2074      	movs	r0, #116	; 0x74
 8002ff2:	f000 f997 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Inversion Type */
 8002ff6:	20b4      	movs	r0, #180	; 0xb4
 8002ff8:	f000 f9a8 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02 */
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f000 f991 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 8003002:	2000      	movs	r0, #0
 8003004:	f000 f98e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 8003008:	2000      	movs	r0, #0
 800300a:	f000 f98b 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF7); /* Resolution Control */
 800300e:	20f7      	movs	r0, #247	; 0xf7
 8003010:	f000 f99c 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x82);  /* 480*800 */
 8003014:	2082      	movs	r0, #130	; 0x82
 8003016:	f000 f985 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB1); /* FRAME RATE Setting */
 800301a:	20b1      	movs	r0, #177	; 0xb1
 800301c:	f000 f996 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003020:	2000      	movs	r0, #0
 8003022:	f000 f97f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x13);
 8003026:	2013      	movs	r0, #19
 8003028:	f000 f97c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x13);
 800302c:	2013      	movs	r0, #19
 800302e:	f000 f979 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
 8003032:	20f2      	movs	r0, #242	; 0xf2
 8003034:	f000 f98a 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x80);
 8003038:	2080      	movs	r0, #128	; 0x80
 800303a:	f000 f973 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x04);
 800303e:	2004      	movs	r0, #4
 8003040:	f000 f970 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x40);
 8003044:	2040      	movs	r0, #64	; 0x40
 8003046:	f000 f96d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x28);
 800304a:	2028      	movs	r0, #40	; 0x28
 800304c:	f000 f96a 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
 8003050:	20c1      	movs	r0, #193	; 0xc1
 8003052:	f000 f97b 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x17);
 8003056:	2017      	movs	r0, #23
 8003058:	f000 f964 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMP */
 800305c:	2088      	movs	r0, #136	; 0x88
 800305e:	f000 f961 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMN */
 8003062:	2088      	movs	r0, #136	; 0x88
 8003064:	f000 f95e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x20);
 8003068:	2020      	movs	r0, #32
 800306a:	f000 f95b 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Positive Gamma Control */
 800306e:	20e0      	movs	r0, #224	; 0xe0
 8003070:	f000 f96c 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8003074:	2000      	movs	r0, #0
 8003076:	f000 f955 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P2 */
 800307a:	200a      	movs	r0, #10
 800307c:	f000 f952 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x12);  /* P3 */
 8003080:	2012      	movs	r0, #18
 8003082:	f000 f94f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x10);  /* P4 */
 8003086:	2010      	movs	r0, #16
 8003088:	f000 f94c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 800308c:	200e      	movs	r0, #14
 800308e:	f000 f949 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x20);  /* P6 */
 8003092:	2020      	movs	r0, #32
 8003094:	f000 f946 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xCC);  /* P7 */
 8003098:	20cc      	movs	r0, #204	; 0xcc
 800309a:	f000 f943 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x07);  /* P8 */
 800309e:	2007      	movs	r0, #7
 80030a0:	f000 f940 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 80030a4:	2006      	movs	r0, #6
 80030a6:	f000 f93d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P10 */
 80030aa:	200b      	movs	r0, #11
 80030ac:	f000 f93a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P11 */
 80030b0:	200e      	movs	r0, #14
 80030b2:	f000 f937 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P12 */
 80030b6:	200f      	movs	r0, #15
 80030b8:	f000 f934 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P13 */
 80030bc:	200d      	movs	r0, #13
 80030be:	f000 f931 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 80030c2:	2015      	movs	r0, #21
 80030c4:	f000 f92e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x10);  /* P15 */
 80030c8:	2010      	movs	r0, #16
 80030ca:	f000 f92b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 80030ce:	2000      	movs	r0, #0
 80030d0:	f000 f928 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xE1); /* Negative Gamma Correction */
 80030d4:	20e1      	movs	r0, #225	; 0xe1
 80030d6:	f000 f939 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 f922 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P2 */
 80030e0:	200b      	movs	r0, #11
 80030e2:	f000 f91f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x13);  /* P3 */
 80030e6:	2013      	movs	r0, #19
 80030e8:	f000 f91c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P4 */
 80030ec:	200d      	movs	r0, #13
 80030ee:	f000 f919 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 80030f2:	200e      	movs	r0, #14
 80030f4:	f000 f916 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1B);  /* P6 */
 80030f8:	201b      	movs	r0, #27
 80030fa:	f000 f913 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x71);  /* P7 */
 80030fe:	2071      	movs	r0, #113	; 0x71
 8003100:	f000 f910 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P8 */
 8003104:	2006      	movs	r0, #6
 8003106:	f000 f90d 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 800310a:	2006      	movs	r0, #6
 800310c:	f000 f90a 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P10 */
 8003110:	200a      	movs	r0, #10
 8003112:	f000 f907 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P11 */
 8003116:	200f      	movs	r0, #15
 8003118:	f000 f904 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P12 */
 800311c:	200e      	movs	r0, #14
 800311e:	f000 f901 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P13 */
 8003122:	200f      	movs	r0, #15
 8003124:	f000 f8fe 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 8003128:	2015      	movs	r0, #21
 800312a:	f000 f8fb 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x0C);  /* P15 */
 800312e:	200c      	movs	r0, #12
 8003130:	f000 f8f8 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 8003134:	2000      	movs	r0, #0
 8003136:	f000 f8f5 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x2a);
 800313a:	202a      	movs	r0, #42	; 0x2a
 800313c:	f000 f906 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003140:	2000      	movs	r0, #0
 8003142:	f000 f8ef 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003146:	2000      	movs	r0, #0
 8003148:	f000 f8ec 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);
 800314c:	2001      	movs	r0, #1
 800314e:	f000 f8e9 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xdf);
 8003152:	20df      	movs	r0, #223	; 0xdf
 8003154:	f000 f8e6 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x2b);
 8003158:	202b      	movs	r0, #43	; 0x2b
 800315a:	f000 f8f7 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);
 800315e:	2000      	movs	r0, #0
 8003160:	f000 f8e0 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003164:	2000      	movs	r0, #0
 8003166:	f000 f8dd 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x03);
 800316a:	2003      	movs	r0, #3
 800316c:	f000 f8da 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x1f);
 8003170:	201f      	movs	r0, #31
 8003172:	f000 f8d7 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x3A); /* Pixel Format */
 8003176:	203a      	movs	r0, #58	; 0x3a
 8003178:	f000 f8e8 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x55);
 800317c:	2055      	movs	r0, #85	; 0x55
 800317e:	f000 f8d1 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x36); /* Memory Access Control */
 8003182:	2036      	movs	r0, #54	; 0x36
 8003184:	f000 f8e2 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02-180 */
 8003188:	2000      	movs	r0, #0
 800318a:	f000 f8cb 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x11);
 800318e:	2011      	movs	r0, #17
 8003190:	f000 f8dc 	bl	800334c <lcd_wr_regno>
    HAL_Delay(120);
 8003194:	2078      	movs	r0, #120	; 0x78
 8003196:	f001 ff8d 	bl	80050b4 <HAL_Delay>
    lcd_wr_regno(0x29);
 800319a:	2029      	movs	r0, #41	; 0x29
 800319c:	f000 f8d6 	bl	800334c <lcd_wr_regno>
    HAL_Delay(20);
 80031a0:	2014      	movs	r0, #20
 80031a2:	f001 ff87 	bl	80050b4 <HAL_Delay>
    lcd_wr_regno(0x2C);
 80031a6:	202c      	movs	r0, #44	; 0x2c
 80031a8:	f000 f8d0 	bl	800334c <lcd_wr_regno>
}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <lcd_ex_ssd1963_reginit>:
 * @brief  SSD1963 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ssd1963_reginit(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 80031b4:	20e2      	movs	r0, #226	; 0xe2
 80031b6:	f000 f8c9 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* parameter 1 */
 80031ba:	201d      	movs	r0, #29
 80031bc:	f000 f8b2 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x02);  /* parameter 2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 80031c0:	2002      	movs	r0, #2
 80031c2:	f000 f8af 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x04);  /* parameter 3 Validate M and N values */
 80031c6:	2004      	movs	r0, #4
 80031c8:	f000 f8ac 	bl	8003324 <lcd_wr_data>
    HAL_Delay(1);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f001 ff71 	bl	80050b4 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 80031d2:	20e0      	movs	r0, #224	; 0xe0
 80031d4:	f000 f8ba 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 80031d8:	2001      	movs	r0, #1
 80031da:	f000 f8a3 	bl	8003324 <lcd_wr_data>
    HAL_Delay(10);
 80031de:	200a      	movs	r0, #10
 80031e0:	f001 ff68 	bl	80050b4 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 80031e4:	20e0      	movs	r0, #224	; 0xe0
 80031e6:	f000 f8b1 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 80031ea:	2003      	movs	r0, #3
 80031ec:	f000 f89a 	bl	8003324 <lcd_wr_data>
    HAL_Delay(12);
 80031f0:	200c      	movs	r0, #12
 80031f2:	f001 ff5f 	bl	80050b4 <HAL_Delay>
    lcd_wr_regno(0x01); /* soft reset */
 80031f6:	2001      	movs	r0, #1
 80031f8:	f000 f8a8 	bl	800334c <lcd_wr_regno>
    HAL_Delay(10);
 80031fc:	200a      	movs	r0, #10
 80031fe:	f001 ff59 	bl	80050b4 <HAL_Delay>

    lcd_wr_regno(0xE6); /* Set the pixel frequency,33Mhz */
 8003202:	20e6      	movs	r0, #230	; 0xe6
 8003204:	f000 f8a2 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x2F);
 8003208:	202f      	movs	r0, #47	; 0x2f
 800320a:	f000 f88b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFF);
 800320e:	20ff      	movs	r0, #255	; 0xff
 8003210:	f000 f888 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003214:	20ff      	movs	r0, #255	; 0xff
 8003216:	f000 f885 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB0); /* Setting LCD mode */
 800321a:	20b0      	movs	r0, #176	; 0xb0
 800321c:	f000 f896 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24 bit mode */
 8003220:	2020      	movs	r0, #32
 8003222:	f000 f87f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT pattern */
 8003226:	2000      	movs	r0, #0
 8003228:	f000 f87c 	bl	8003324 <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* Set the LCD horizontal pixels */
 800322c:	2003      	movs	r0, #3
 800322e:	f000 f879 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 8003232:	f240 301f 	movw	r0, #799	; 0x31f
 8003236:	f000 f875 	bl	8003324 <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* Set the LCD vertical pixels */
 800323a:	2001      	movs	r0, #1
 800323c:	f000 f872 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 8003240:	f240 10df 	movw	r0, #479	; 0x1df
 8003244:	f000 f86e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB sequence */
 8003248:	2000      	movs	r0, #0
 800324a:	f000 f86b 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 800324e:	20b4      	movs	r0, #180	; 0xb4
 8003250:	f000 f87c 	bl	800334c <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 8003254:	2004      	movs	r0, #4
 8003256:	f000 f865 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 800325a:	f240 401f 	movw	r0, #1055	; 0x41f
 800325e:	f000 f861 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 8003262:	2000      	movs	r0, #0
 8003264:	f000 f85e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 8003268:	202e      	movs	r0, #46	; 0x2e
 800326a:	f000 f85b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 800326e:	2000      	movs	r0, #0
 8003270:	f000 f858 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f000 f855 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f852 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f000 f84f 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 8003286:	20b6      	movs	r0, #182	; 0xb6
 8003288:	f000 f860 	bl	800334c <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 800328c:	2002      	movs	r0, #2
 800328e:	f000 f849 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 8003292:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8003296:	f000 f845 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 800329a:	2000      	movs	r0, #0
 800329c:	f000 f842 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 80032a0:	2017      	movs	r0, #23
 80032a2:	f000 f83f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 80032a6:	2015      	movs	r0, #21
 80032a8:	f000 f83c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f000 f839 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f000 f836 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xF0); /* Set the interface between SSD1963 and CPU to 16bit */
 80032b8:	20f0      	movs	r0, #240	; 0xf0
 80032ba:	f000 f847 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 80032be:	2003      	movs	r0, #3
 80032c0:	f000 f830 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0x29); /* Enable display */
 80032c4:	2029      	movs	r0, #41	; 0x29
 80032c6:	f000 f841 	bl	800334c <lcd_wr_regno>
    /* Setting the PWM output backlight is adjustable through the duty cycle */
    lcd_wr_regno(0xD0); /* Set the automatic white balance DBC */
 80032ca:	20d0      	movs	r0, #208	; 0xd0
 80032cc:	f000 f83e 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 80032d0:	2000      	movs	r0, #0
 80032d2:	f000 f827 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* Configure PWM output */
 80032d6:	20be      	movs	r0, #190	; 0xbe
 80032d8:	f000 f838 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1 Set the PWM frequency */
 80032dc:	2005      	movs	r0, #5
 80032de:	f000 f821 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2 Set the PWM duty cycle */
 80032e2:	20fe      	movs	r0, #254	; 0xfe
 80032e4:	f000 f81e 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3 set C */
 80032e8:	2001      	movs	r0, #1
 80032ea:	f000 f81b 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4 set D */
 80032ee:	2000      	movs	r0, #0
 80032f0:	f000 f818 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5 set E */
 80032f4:	2000      	movs	r0, #0
 80032f6:	f000 f815 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6 set F */
 80032fa:	2000      	movs	r0, #0
 80032fc:	f000 f812 	bl	8003324 <lcd_wr_data>

    lcd_wr_regno(0xB8); /* Set the GPIO configuration */
 8003300:	20b8      	movs	r0, #184	; 0xb8
 8003302:	f000 f823 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x03);  /* Two IO ports are set as output */
 8003306:	2003      	movs	r0, #3
 8003308:	f000 f80c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO uses normal IO functionality */
 800330c:	2001      	movs	r0, #1
 800330e:	f000 f809 	bl	8003324 <lcd_wr_data>
    lcd_wr_regno(0xBA);
 8003312:	20ba      	movs	r0, #186	; 0xba
 8003314:	f000 f81a 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0X01);  /* GPIO[1:0]=01, controls LCD orientation */
 8003318:	2001      	movs	r0, #1
 800331a:	f000 f803 	bl	8003324 <lcd_wr_data>
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <lcd_wr_data>:
 * @brief   LCD write data
 * @param   data: data to be written
 * @retval  None
 */
void lcd_wr_data(volatile uint16_t data)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	80fb      	strh	r3, [r7, #6]
    data = data;
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	b29b      	uxth	r3, r3
 8003332:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <lcd_wr_data+0x24>)
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	b292      	uxth	r2, r2
 800333a:	805a      	strh	r2, [r3, #2]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	600ffffe 	.word	0x600ffffe

0800334c <lcd_wr_regno>:
 * @brief   LCD write register number/address function
 * @param   regno: register number/address
 * @retval  None
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	80fb      	strh	r3, [r7, #6]
    regno = regno;
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	b29b      	uxth	r3, r3
 800335a:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <lcd_wr_regno+0x24>)
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	b292      	uxth	r2, r2
 8003362:	801a      	strh	r2, [r3, #0]

}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	600ffffe 	.word	0x600ffffe

08003374 <lcd_write_reg>:
 * @param   regno: register number/address
 * @param   data: data to be written
 * @retval  None
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	460a      	mov	r2, r1
 800337e:	80fb      	strh	r3, [r7, #6]
 8003380:	4613      	mov	r3, r2
 8003382:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 8003384:	4a05      	ldr	r2, [pc, #20]	; (800339c <lcd_write_reg+0x28>)
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = data;    /* Write in data */
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <lcd_write_reg+0x28>)
 800338c:	88bb      	ldrh	r3, [r7, #4]
 800338e:	8053      	strh	r3, [r2, #2]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	600ffffe 	.word	0x600ffffe

080033a0 <lcd_rd_data>:
 * @brief   LCD read register function
 * @param   None.
 * @retval  The data read
 */
static uint16_t lcd_rd_data(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
    volatile uint16_t ram;
    ram = LCD->LCD_RAM;
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <lcd_rd_data+0x20>)
 80033a8:	885b      	ldrh	r3, [r3, #2]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	80fb      	strh	r3, [r7, #6]
    return ram;
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	b29b      	uxth	r3, r3
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	600ffffe 	.word	0x600ffffe

080033c4 <lcd_write_ram_prepare>:
 * @brief   LCD ready to write GRAM
 * @param   None.
 * @retval  None.
 */
void lcd_write_ram_prepare(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <lcd_write_ram_prepare+0x18>)
 80033ca:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <lcd_write_ram_prepare+0x1c>)
 80033cc:	8912      	ldrh	r2, [r2, #8]
 80033ce:	801a      	strh	r2, [r3, #0]
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	600ffffe 	.word	0x600ffffe
 80033e0:	20000088 	.word	0x20000088

080033e4 <lcd_set_cursor>:
 * @brief   Sets the cursor position
 * @param   x,y: coordinate
 * @retval  None.
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	460a      	mov	r2, r1
 80033ee:	80fb      	strh	r3, [r7, #6]
 80033f0:	4613      	mov	r3, r2
 80033f2:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 80033f4:	4b65      	ldr	r3, [pc, #404]	; (800358c <lcd_set_cursor+0x1a8>)
 80033f6:	889b      	ldrh	r3, [r3, #4]
 80033f8:	f641 1263 	movw	r2, #6499	; 0x1963
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d167      	bne.n	80034d0 <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* In portrait mode, the x-coordinate needs to be transformed */
 8003400:	4b62      	ldr	r3, [pc, #392]	; (800358c <lcd_set_cursor+0x1a8>)
 8003402:	799b      	ldrb	r3, [r3, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11e      	bne.n	8003446 <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 8003408:	4b60      	ldr	r3, [pc, #384]	; (800358c <lcd_set_cursor+0x1a8>)
 800340a:	881a      	ldrh	r2, [r3, #0]
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <lcd_set_cursor+0x1a8>)
 8003418:	895b      	ldrh	r3, [r3, #10]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff96 	bl	800334c <lcd_wr_regno>
            lcd_wr_data(0);
 8003420:	2000      	movs	r0, #0
 8003422:	f7ff ff7f 	bl	8003324 <lcd_wr_data>
            lcd_wr_data(0);
 8003426:	2000      	movs	r0, #0
 8003428:	f7ff ff7c 	bl	8003324 <lcd_wr_data>
            lcd_wr_data(x >> 8);
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	b29b      	uxth	r3, r3
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ff76 	bl	8003324 <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	b29b      	uxth	r3, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ff70 	bl	8003324 <lcd_wr_data>
 8003444:	e021      	b.n	800348a <lcd_set_cursor+0xa6>
        }
        else                    /* landscape mode */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8003446:	4b51      	ldr	r3, [pc, #324]	; (800358c <lcd_set_cursor+0x1a8>)
 8003448:	895b      	ldrh	r3, [r3, #10]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff7e 	bl	800334c <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	b29b      	uxth	r3, r3
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff64 	bl	8003324 <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	b29b      	uxth	r3, r3
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff5e 	bl	8003324 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 8003468:	4b48      	ldr	r3, [pc, #288]	; (800358c <lcd_set_cursor+0x1a8>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	3b01      	subs	r3, #1
 800346e:	121b      	asrs	r3, r3, #8
 8003470:	b29b      	uxth	r3, r3
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff56 	bl	8003324 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8003478:	4b44      	ldr	r3, [pc, #272]	; (800358c <lcd_set_cursor+0x1a8>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	3b01      	subs	r3, #1
 800347e:	b29b      	uxth	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	b29b      	uxth	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff4d 	bl	8003324 <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 800348a:	4b40      	ldr	r3, [pc, #256]	; (800358c <lcd_set_cursor+0x1a8>)
 800348c:	899b      	ldrh	r3, [r3, #12]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ff5c 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8003494:	88bb      	ldrh	r3, [r7, #4]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	b29b      	uxth	r3, r3
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff42 	bl	8003324 <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 80034a0:	88bb      	ldrh	r3, [r7, #4]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff3c 	bl	8003324 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 80034ac:	4b37      	ldr	r3, [pc, #220]	; (800358c <lcd_set_cursor+0x1a8>)
 80034ae:	885b      	ldrh	r3, [r3, #2]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	121b      	asrs	r3, r3, #8
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff34 	bl	8003324 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <lcd_set_cursor+0x1a8>)
 80034be:	885b      	ldrh	r3, [r3, #2]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff2b 	bl	8003324 <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 80034ce:	e058      	b.n	8003582 <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0X5510)
 80034d0:	4b2e      	ldr	r3, [pc, #184]	; (800358c <lcd_set_cursor+0x1a8>)
 80034d2:	889b      	ldrh	r3, [r3, #4]
 80034d4:	f245 5210 	movw	r2, #21776	; 0x5510
 80034d8:	4293      	cmp	r3, r2
 80034da:	d130      	bne.n	800353e <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <lcd_set_cursor+0x1a8>)
 80034de:	895b      	ldrh	r3, [r3, #10]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff33 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff19 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 80034f2:	4b26      	ldr	r3, [pc, #152]	; (800358c <lcd_set_cursor+0x1a8>)
 80034f4:	895b      	ldrh	r3, [r3, #10]
 80034f6:	3301      	adds	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff26 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(x & 0XFF);
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	b29b      	uxth	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ff0c 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <lcd_set_cursor+0x1a8>)
 800350e:	899b      	ldrh	r3, [r3, #12]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff1b 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8003516:	88bb      	ldrh	r3, [r7, #4]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	b29b      	uxth	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff01 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <lcd_set_cursor+0x1a8>)
 8003524:	899b      	ldrh	r3, [r3, #12]
 8003526:	3301      	adds	r3, #1
 8003528:	b29b      	uxth	r3, r3
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff0e 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(y & 0XFF);
 8003530:	88bb      	ldrh	r3, [r7, #4]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	b29b      	uxth	r3, r3
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fef4 	bl	8003324 <lcd_wr_data>
}
 800353c:	e021      	b.n	8003582 <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <lcd_set_cursor+0x1a8>)
 8003540:	895b      	ldrh	r3, [r3, #10]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ff02 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	b29b      	uxth	r3, r3
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fee8 	bl	8003324 <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	b29b      	uxth	r3, r3
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fee2 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <lcd_set_cursor+0x1a8>)
 8003562:	899b      	ldrh	r3, [r3, #12]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fef1 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 800356a:	88bb      	ldrh	r3, [r7, #4]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	b29b      	uxth	r3, r3
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fed7 	bl	8003324 <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 8003576:	88bb      	ldrh	r3, [r7, #4]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	b29b      	uxth	r3, r3
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fed1 	bl	8003324 <lcd_wr_data>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000088 	.word	0x20000088

08003590 <lcd_scan_dir>:
 * @brief   Set the automatic scanning direction of LCD
 * @param   dir: 0 to 7, representing 8 directions (see lcd.h for definitions)
 * @retval  None.
 */
void lcd_scan_dir(uint8_t dir)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;

    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 80035a2:	4b9c      	ldr	r3, [pc, #624]	; (8003814 <lcd_scan_dir+0x284>)
 80035a4:	799b      	ldrb	r3, [r3, #6]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d105      	bne.n	80035b6 <lcd_scan_dir+0x26>
 80035aa:	4b9a      	ldr	r3, [pc, #616]	; (8003814 <lcd_scan_dir+0x284>)
 80035ac:	889b      	ldrh	r3, [r3, #4]
 80035ae:	f641 1263 	movw	r2, #6499	; 0x1963
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d109      	bne.n	80035ca <lcd_scan_dir+0x3a>
 80035b6:	4b97      	ldr	r3, [pc, #604]	; (8003814 <lcd_scan_dir+0x284>)
 80035b8:	799b      	ldrb	r3, [r3, #6]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d134      	bne.n	8003628 <lcd_scan_dir+0x98>
 80035be:	4b95      	ldr	r3, [pc, #596]	; (8003814 <lcd_scan_dir+0x284>)
 80035c0:	889b      	ldrh	r3, [r3, #4]
 80035c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d12e      	bne.n	8003628 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* Change of direction */
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b07      	cmp	r3, #7
 80035ce:	d82b      	bhi.n	8003628 <lcd_scan_dir+0x98>
 80035d0:	a201      	add	r2, pc, #4	; (adr r2, 80035d8 <lcd_scan_dir+0x48>)
 80035d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d6:	bf00      	nop
 80035d8:	080035f9 	.word	0x080035f9
 80035dc:	080035ff 	.word	0x080035ff
 80035e0:	08003605 	.word	0x08003605
 80035e4:	0800360b 	.word	0x0800360b
 80035e8:	08003611 	.word	0x08003611
 80035ec:	08003617 	.word	0x08003617
 80035f0:	0800361d 	.word	0x0800361d
 80035f4:	08003623 	.word	0x08003623
        {
            case L2R_U2D:
                dir = D2U_L2R;
 80035f8:	2306      	movs	r3, #6
 80035fa:	71fb      	strb	r3, [r7, #7]
                break;
 80035fc:	e014      	b.n	8003628 <lcd_scan_dir+0x98>

            case L2R_D2U:
                dir = D2U_R2L;
 80035fe:	2307      	movs	r3, #7
 8003600:	71fb      	strb	r3, [r7, #7]
                break;
 8003602:	e011      	b.n	8003628 <lcd_scan_dir+0x98>

            case R2L_U2D:
                dir = U2D_L2R;
 8003604:	2304      	movs	r3, #4
 8003606:	71fb      	strb	r3, [r7, #7]
                break;
 8003608:	e00e      	b.n	8003628 <lcd_scan_dir+0x98>

            case R2L_D2U:
                dir = U2D_R2L;
 800360a:	2305      	movs	r3, #5
 800360c:	71fb      	strb	r3, [r7, #7]
                break;
 800360e:	e00b      	b.n	8003628 <lcd_scan_dir+0x98>

            case U2D_L2R:
                dir = L2R_D2U;
 8003610:	2301      	movs	r3, #1
 8003612:	71fb      	strb	r3, [r7, #7]
                break;
 8003614:	e008      	b.n	8003628 <lcd_scan_dir+0x98>

            case U2D_R2L:
                dir = L2R_U2D;
 8003616:	2300      	movs	r3, #0
 8003618:	71fb      	strb	r3, [r7, #7]
                break;
 800361a:	e005      	b.n	8003628 <lcd_scan_dir+0x98>

            case D2U_L2R:
                dir = R2L_D2U;
 800361c:	2303      	movs	r3, #3
 800361e:	71fb      	strb	r3, [r7, #7]
                break;
 8003620:	e002      	b.n	8003628 <lcd_scan_dir+0x98>

            case D2U_R2L:
                dir = R2L_U2D;
 8003622:	2302      	movs	r3, #2
 8003624:	71fb      	strb	r3, [r7, #7]
                break;
 8003626:	bf00      	nop
        }
    }

    /* Set the value of 0X36/0X3600 register bit 5,6,7 according to the scan mode */
    switch (dir)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	2b07      	cmp	r3, #7
 800362c:	d835      	bhi.n	800369a <lcd_scan_dir+0x10a>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <lcd_scan_dir+0xa4>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	0800369b 	.word	0x0800369b
 8003638:	08003655 	.word	0x08003655
 800363c:	0800365f 	.word	0x0800365f
 8003640:	08003669 	.word	0x08003669
 8003644:	08003673 	.word	0x08003673
 8003648:	0800367d 	.word	0x0800367d
 800364c:	08003687 	.word	0x08003687
 8003650:	08003691 	.word	0x08003691
        case L2R_U2D:/* From left to right, from top to bottom */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* From left to right, from bottom to top */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8003654:	89fb      	ldrh	r3, [r7, #14]
 8003656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800365a:	81fb      	strh	r3, [r7, #14]
            break;
 800365c:	e01d      	b.n	800369a <lcd_scan_dir+0x10a>

        case R2L_U2D:/* From right to left, from top to bottom */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800365e:	89fb      	ldrh	r3, [r7, #14]
 8003660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003664:	81fb      	strh	r3, [r7, #14]
            break;
 8003666:	e018      	b.n	800369a <lcd_scan_dir+0x10a>

        case R2L_D2U:/* From right to left, from bottom to top */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8003668:	89fb      	ldrh	r3, [r7, #14]
 800366a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800366e:	81fb      	strh	r3, [r7, #14]
            break;
 8003670:	e013      	b.n	800369a <lcd_scan_dir+0x10a>

        case U2D_L2R:/* From top to bottom, left to right */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8003672:	89fb      	ldrh	r3, [r7, #14]
 8003674:	f043 0320 	orr.w	r3, r3, #32
 8003678:	81fb      	strh	r3, [r7, #14]
            break;
 800367a:	e00e      	b.n	800369a <lcd_scan_dir+0x10a>

        case U2D_R2L:/* From top to bottom, right to left */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 800367c:	89fb      	ldrh	r3, [r7, #14]
 800367e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003682:	81fb      	strh	r3, [r7, #14]
            break;
 8003684:	e009      	b.n	800369a <lcd_scan_dir+0x10a>

        case D2U_L2R:/* From bottom to top, left to right */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800368c:	81fb      	strh	r3, [r7, #14]
            break;
 800368e:	e004      	b.n	800369a <lcd_scan_dir+0x10a>

        case D2U_R2L:/* From bottom to top, right to left */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8003690:	89fb      	ldrh	r3, [r7, #14]
 8003692:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003696:	81fb      	strh	r3, [r7, #14]
            break;
 8003698:	bf00      	nop
    }

    if (lcddev.id == 0X5510)
 800369a:	4b5e      	ldr	r3, [pc, #376]	; (8003814 <lcd_scan_dir+0x284>)
 800369c:	889b      	ldrh	r3, [r3, #4]
 800369e:	f245 5210 	movw	r2, #21776	; 0x5510
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d103      	bne.n	80036ae <lcd_scan_dir+0x11e>
    {
        dirreg = 0X3600;    /* For 5510, there is a difference between the registers of the other driver ics */
 80036a6:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80036aa:	81bb      	strh	r3, [r7, #12]
 80036ac:	e001      	b.n	80036b2 <lcd_scan_dir+0x122>
    }
    else
    {
    	dirreg = 0X36;  /* For most driver ics, it is controlled by the 0X36 register */
 80036ae:	2336      	movs	r3, #54	; 0x36
 80036b0:	81bb      	strh	r3, [r7, #12]
    }

    /* 9341 & 7789 & 7796 to set the BGR bit */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 80036b2:	4b58      	ldr	r3, [pc, #352]	; (8003814 <lcd_scan_dir+0x284>)
 80036b4:	889b      	ldrh	r3, [r3, #4]
 80036b6:	f249 3241 	movw	r2, #37697	; 0x9341
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <lcd_scan_dir+0x146>
 80036be:	4b55      	ldr	r3, [pc, #340]	; (8003814 <lcd_scan_dir+0x284>)
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	f247 7289 	movw	r2, #30601	; 0x7789
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d005      	beq.n	80036d6 <lcd_scan_dir+0x146>
 80036ca:	4b52      	ldr	r3, [pc, #328]	; (8003814 <lcd_scan_dir+0x284>)
 80036cc:	889b      	ldrh	r3, [r3, #4]
 80036ce:	f247 7296 	movw	r2, #30614	; 0x7796
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d103      	bne.n	80036de <lcd_scan_dir+0x14e>
    {
        regval |= 0X08;
 80036d6:	89fb      	ldrh	r3, [r7, #14]
 80036d8:	f043 0308 	orr.w	r3, r3, #8
 80036dc:	81fb      	strh	r3, [r7, #14]
    }

    lcd_write_reg(dirreg, regval);
 80036de:	89fa      	ldrh	r2, [r7, #14]
 80036e0:	89bb      	ldrh	r3, [r7, #12]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fe45 	bl	8003374 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963 no coordinate manipulation */
 80036ea:	4b4a      	ldr	r3, [pc, #296]	; (8003814 <lcd_scan_dir+0x284>)
 80036ec:	889b      	ldrh	r3, [r3, #4]
 80036ee:	f641 1263 	movw	r2, #6499	; 0x1963
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d025      	beq.n	8003742 <lcd_scan_dir+0x1b2>
    {
        if (regval & 0X20)
 80036f6:	89fb      	ldrh	r3, [r7, #14]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <lcd_scan_dir+0x192>
        {
            if (lcddev.width < lcddev.height)   /* Swap X and Y */
 8003700:	4b44      	ldr	r3, [pc, #272]	; (8003814 <lcd_scan_dir+0x284>)
 8003702:	881a      	ldrh	r2, [r3, #0]
 8003704:	4b43      	ldr	r3, [pc, #268]	; (8003814 <lcd_scan_dir+0x284>)
 8003706:	885b      	ldrh	r3, [r3, #2]
 8003708:	429a      	cmp	r2, r3
 800370a:	d21a      	bcs.n	8003742 <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 800370c:	4b41      	ldr	r3, [pc, #260]	; (8003814 <lcd_scan_dir+0x284>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8003712:	4b40      	ldr	r3, [pc, #256]	; (8003814 <lcd_scan_dir+0x284>)
 8003714:	885a      	ldrh	r2, [r3, #2]
 8003716:	4b3f      	ldr	r3, [pc, #252]	; (8003814 <lcd_scan_dir+0x284>)
 8003718:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 800371a:	4a3e      	ldr	r2, [pc, #248]	; (8003814 <lcd_scan_dir+0x284>)
 800371c:	897b      	ldrh	r3, [r7, #10]
 800371e:	8053      	strh	r3, [r2, #2]
 8003720:	e00f      	b.n	8003742 <lcd_scan_dir+0x1b2>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* Swap X and Y */
 8003722:	4b3c      	ldr	r3, [pc, #240]	; (8003814 <lcd_scan_dir+0x284>)
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <lcd_scan_dir+0x284>)
 8003728:	885b      	ldrh	r3, [r3, #2]
 800372a:	429a      	cmp	r2, r3
 800372c:	d909      	bls.n	8003742 <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 800372e:	4b39      	ldr	r3, [pc, #228]	; (8003814 <lcd_scan_dir+0x284>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8003734:	4b37      	ldr	r3, [pc, #220]	; (8003814 <lcd_scan_dir+0x284>)
 8003736:	885a      	ldrh	r2, [r3, #2]
 8003738:	4b36      	ldr	r3, [pc, #216]	; (8003814 <lcd_scan_dir+0x284>)
 800373a:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 800373c:	4a35      	ldr	r2, [pc, #212]	; (8003814 <lcd_scan_dir+0x284>)
 800373e:	897b      	ldrh	r3, [r7, #10]
 8003740:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* Set the size of the display area (window) */
    if (lcddev.id == 0X5510)
 8003742:	4b34      	ldr	r3, [pc, #208]	; (8003814 <lcd_scan_dir+0x284>)
 8003744:	889b      	ldrh	r3, [r3, #4]
 8003746:	f245 5210 	movw	r2, #21776	; 0x5510
 800374a:	4293      	cmp	r3, r2
 800374c:	d164      	bne.n	8003818 <lcd_scan_dir+0x288>
    {
        lcd_wr_regno(lcddev.setxcmd);
 800374e:	4b31      	ldr	r3, [pc, #196]	; (8003814 <lcd_scan_dir+0x284>)
 8003750:	895b      	ldrh	r3, [r3, #10]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fdfa 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(0);
 8003758:	2000      	movs	r0, #0
 800375a:	f7ff fde3 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <lcd_scan_dir+0x284>)
 8003760:	895b      	ldrh	r3, [r3, #10]
 8003762:	3301      	adds	r3, #1
 8003764:	b29b      	uxth	r3, r3
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fdf0 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(0);
 800376c:	2000      	movs	r0, #0
 800376e:	f7ff fdd9 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 2);
 8003772:	4b28      	ldr	r3, [pc, #160]	; (8003814 <lcd_scan_dir+0x284>)
 8003774:	895b      	ldrh	r3, [r3, #10]
 8003776:	3302      	adds	r3, #2
 8003778:	b29b      	uxth	r3, r3
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fde6 	bl	800334c <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <lcd_scan_dir+0x284>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	3b01      	subs	r3, #1
 8003786:	121b      	asrs	r3, r3, #8
 8003788:	b29b      	uxth	r3, r3
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fdca 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 3);
 8003790:	4b20      	ldr	r3, [pc, #128]	; (8003814 <lcd_scan_dir+0x284>)
 8003792:	895b      	ldrh	r3, [r3, #10]
 8003794:	3303      	adds	r3, #3
 8003796:	b29b      	uxth	r3, r3
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fdd7 	bl	800334c <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <lcd_scan_dir+0x284>)
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fdba 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <lcd_scan_dir+0x284>)
 80037b2:	899b      	ldrh	r3, [r3, #12]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fdc9 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(0);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7ff fdb2 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 80037c0:	4b14      	ldr	r3, [pc, #80]	; (8003814 <lcd_scan_dir+0x284>)
 80037c2:	899b      	ldrh	r3, [r3, #12]
 80037c4:	3301      	adds	r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fdbf 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(0);
 80037ce:	2000      	movs	r0, #0
 80037d0:	f7ff fda8 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 2);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <lcd_scan_dir+0x284>)
 80037d6:	899b      	ldrh	r3, [r3, #12]
 80037d8:	3302      	adds	r3, #2
 80037da:	b29b      	uxth	r3, r3
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fdb5 	bl	800334c <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) >> 8);
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <lcd_scan_dir+0x284>)
 80037e4:	885b      	ldrh	r3, [r3, #2]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	121b      	asrs	r3, r3, #8
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fd99 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 3);
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <lcd_scan_dir+0x284>)
 80037f4:	899b      	ldrh	r3, [r3, #12]
 80037f6:	3303      	adds	r3, #3
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fda6 	bl	800334c <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <lcd_scan_dir+0x284>)
 8003802:	885b      	ldrh	r3, [r3, #2]
 8003804:	3b01      	subs	r3, #1
 8003806:	b29b      	uxth	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	b29b      	uxth	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fd89 	bl	8003324 <lcd_wr_data>
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 8003812:	e039      	b.n	8003888 <lcd_scan_dir+0x2f8>
 8003814:	20000088 	.word	0x20000088
        lcd_wr_regno(lcddev.setxcmd);
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <lcd_scan_dir+0x300>)
 800381a:	895b      	ldrh	r3, [r3, #10]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fd95 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(0);
 8003822:	2000      	movs	r0, #0
 8003824:	f7ff fd7e 	bl	8003324 <lcd_wr_data>
        lcd_wr_data(0);
 8003828:	2000      	movs	r0, #0
 800382a:	f7ff fd7b 	bl	8003324 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) >> 8);
 800382e:	4b18      	ldr	r3, [pc, #96]	; (8003890 <lcd_scan_dir+0x300>)
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	3b01      	subs	r3, #1
 8003834:	121b      	asrs	r3, r3, #8
 8003836:	b29b      	uxth	r3, r3
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fd73 	bl	8003324 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800383e:	4b14      	ldr	r3, [pc, #80]	; (8003890 <lcd_scan_dir+0x300>)
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	3b01      	subs	r3, #1
 8003844:	b29b      	uxth	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	b29b      	uxth	r3, r3
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fd6a 	bl	8003324 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <lcd_scan_dir+0x300>)
 8003852:	899b      	ldrh	r3, [r3, #12]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fd79 	bl	800334c <lcd_wr_regno>
        lcd_wr_data(0);
 800385a:	2000      	movs	r0, #0
 800385c:	f7ff fd62 	bl	8003324 <lcd_wr_data>
        lcd_wr_data(0);
 8003860:	2000      	movs	r0, #0
 8003862:	f7ff fd5f 	bl	8003324 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <lcd_scan_dir+0x300>)
 8003868:	885b      	ldrh	r3, [r3, #2]
 800386a:	3b01      	subs	r3, #1
 800386c:	121b      	asrs	r3, r3, #8
 800386e:	b29b      	uxth	r3, r3
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fd57 	bl	8003324 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <lcd_scan_dir+0x300>)
 8003878:	885b      	ldrh	r3, [r3, #2]
 800387a:	3b01      	subs	r3, #1
 800387c:	b29b      	uxth	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	b29b      	uxth	r3, r3
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fd4e 	bl	8003324 <lcd_wr_data>
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000088 	.word	0x20000088

08003894 <lcd_draw_point>:
 * @param   x,y  : coordinate
 * @param   color: Point color
 * @retval  None.
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	603a      	str	r2, [r7, #0]
 800389e:	80fb      	strh	r3, [r7, #6]
 80038a0:	460b      	mov	r3, r1
 80038a2:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* Sets the cursor position */
 80038a4:	88ba      	ldrh	r2, [r7, #4]
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fd9a 	bl	80033e4 <lcd_set_cursor>
    lcd_write_ram_prepare();    /* Start writing GRAM */
 80038b0:	f7ff fd88 	bl	80033c4 <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <lcd_draw_point+0x30>)
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	b292      	uxth	r2, r2
 80038ba:	805a      	strh	r2, [r3, #2]
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	600ffffe 	.word	0x600ffffe

080038c8 <lcd_ssd_backlight_set>:
 * @brief   SSD1963 backlight brightness setting function
 * @param   pwm  : Backlight level,0~100. The larger the brighter.
 * @retval  None.
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
    lcd_wr_regno(0xBE);         /* Configure PWM output */
 80038d2:	20be      	movs	r0, #190	; 0xbe
 80038d4:	f7ff fd3a 	bl	800334c <lcd_wr_regno>
    lcd_wr_data(0x05);          /* 1 Set the PWM frequency */
 80038d8:	2005      	movs	r0, #5
 80038da:	f7ff fd23 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(pwm * 2.55);    /* 2 Set the PWM duty cycle */
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc feed 	bl	80006c0 <__aeabi_i2d>
 80038e6:	a310      	add	r3, pc, #64	; (adr r3, 8003928 <lcd_ssd_backlight_set+0x60>)
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fc fc6c 	bl	80001c8 <__aeabi_dmul>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	f7fc ff4c 	bl	8000794 <__aeabi_d2uiz>
 80038fc:	4603      	mov	r3, r0
 80038fe:	b29b      	uxth	r3, r3
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fd0f 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x01);          /* 3 Setting C */
 8003906:	2001      	movs	r0, #1
 8003908:	f7ff fd0c 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0xFF);          /* 4 Setting D */
 800390c:	20ff      	movs	r0, #255	; 0xff
 800390e:	f7ff fd09 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 5 Setting E */
 8003912:	2000      	movs	r0, #0
 8003914:	f7ff fd06 	bl	8003324 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 6 Setting F */
 8003918:	2000      	movs	r0, #0
 800391a:	f7ff fd03 	bl	8003324 <lcd_wr_data>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	66666666 	.word	0x66666666
 800392c:	40046666 	.word	0x40046666

08003930 <lcd_display_dir>:
 * @brief   Set the LCD display orientation
 * @param   dir  : 0, portrait; 1. Landscape
 * @retval  None.
 */
void lcd_display_dir(uint8_t dir)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* Portrait/landscape */
 800393a:	4a68      	ldr	r2, [pc, #416]	; (8003adc <lcd_display_dir+0x1ac>)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* Portrait */
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d165      	bne.n	8003a12 <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8003946:	4b65      	ldr	r3, [pc, #404]	; (8003adc <lcd_display_dir+0x1ac>)
 8003948:	22f0      	movs	r2, #240	; 0xf0
 800394a:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 800394c:	4b63      	ldr	r3, [pc, #396]	; (8003adc <lcd_display_dir+0x1ac>)
 800394e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003952:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003954:	4b61      	ldr	r3, [pc, #388]	; (8003adc <lcd_display_dir+0x1ac>)
 8003956:	889b      	ldrh	r3, [r3, #4]
 8003958:	f245 5210 	movw	r2, #21776	; 0x5510
 800395c:	4293      	cmp	r3, r2
 800395e:	d114      	bne.n	800398a <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8003960:	4b5e      	ldr	r3, [pc, #376]	; (8003adc <lcd_display_dir+0x1ac>)
 8003962:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003966:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8003968:	4b5c      	ldr	r3, [pc, #368]	; (8003adc <lcd_display_dir+0x1ac>)
 800396a:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800396e:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8003970:	4b5a      	ldr	r3, [pc, #360]	; (8003adc <lcd_display_dir+0x1ac>)
 8003972:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003976:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8003978:	4b58      	ldr	r3, [pc, #352]	; (8003adc <lcd_display_dir+0x1ac>)
 800397a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800397e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003980:	4b56      	ldr	r3, [pc, #344]	; (8003adc <lcd_display_dir+0x1ac>)
 8003982:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003986:	805a      	strh	r2, [r3, #2]
 8003988:	e020      	b.n	80039cc <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 800398a:	4b54      	ldr	r3, [pc, #336]	; (8003adc <lcd_display_dir+0x1ac>)
 800398c:	889b      	ldrh	r3, [r3, #4]
 800398e:	f641 1263 	movw	r2, #6499	; 0x1963
 8003992:	4293      	cmp	r3, r2
 8003994:	d111      	bne.n	80039ba <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8003996:	4b51      	ldr	r3, [pc, #324]	; (8003adc <lcd_display_dir+0x1ac>)
 8003998:	222c      	movs	r2, #44	; 0x2c
 800399a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* Set the write x-coordinate instruction */
 800399c:	4b4f      	ldr	r3, [pc, #316]	; (8003adc <lcd_display_dir+0x1ac>)
 800399e:	222b      	movs	r2, #43	; 0x2b
 80039a0:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* Set the write y-coordinate instruction */
 80039a2:	4b4e      	ldr	r3, [pc, #312]	; (8003adc <lcd_display_dir+0x1ac>)
 80039a4:	222a      	movs	r2, #42	; 0x2a
 80039a6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* Set width 480 */
 80039a8:	4b4c      	ldr	r3, [pc, #304]	; (8003adc <lcd_display_dir+0x1ac>)
 80039aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80039ae:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* Set height 800 */
 80039b0:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <lcd_display_dir+0x1ac>)
 80039b2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80039b6:	805a      	strh	r2, [r3, #2]
 80039b8:	e008      	b.n	80039cc <lcd_display_dir+0x9c>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 80039ba:	4b48      	ldr	r3, [pc, #288]	; (8003adc <lcd_display_dir+0x1ac>)
 80039bc:	222c      	movs	r2, #44	; 0x2c
 80039be:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 80039c0:	4b46      	ldr	r3, [pc, #280]	; (8003adc <lcd_display_dir+0x1ac>)
 80039c2:	222a      	movs	r2, #42	; 0x2a
 80039c4:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 80039c6:	4b45      	ldr	r3, [pc, #276]	; (8003adc <lcd_display_dir+0x1ac>)
 80039c8:	222b      	movs	r2, #43	; 0x2b
 80039ca:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 80039cc:	4b43      	ldr	r3, [pc, #268]	; (8003adc <lcd_display_dir+0x1ac>)
 80039ce:	889b      	ldrh	r3, [r3, #4]
 80039d0:	f245 3210 	movw	r2, #21264	; 0x5310
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d005      	beq.n	80039e4 <lcd_display_dir+0xb4>
 80039d8:	4b40      	ldr	r3, [pc, #256]	; (8003adc <lcd_display_dir+0x1ac>)
 80039da:	889b      	ldrh	r3, [r3, #4]
 80039dc:	f247 7296 	movw	r2, #30614	; 0x7796
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d107      	bne.n	80039f4 <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 80039e4:	4b3d      	ldr	r3, [pc, #244]	; (8003adc <lcd_display_dir+0x1ac>)
 80039e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039ea:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80039ec:	4b3b      	ldr	r3, [pc, #236]	; (8003adc <lcd_display_dir+0x1ac>)
 80039ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80039f2:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* 9806 means 480*800 resolution */
 80039f4:	4b39      	ldr	r3, [pc, #228]	; (8003adc <lcd_display_dir+0x1ac>)
 80039f6:	889b      	ldrh	r3, [r3, #4]
 80039f8:	f649 0206 	movw	r2, #38918	; 0x9806
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d165      	bne.n	8003acc <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8003a00:	4b36      	ldr	r3, [pc, #216]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a02:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003a06:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003a08:	4b34      	ldr	r3, [pc, #208]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a0a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003a0e:	805a      	strh	r2, [r3, #2]
 8003a10:	e05c      	b.n	8003acc <lcd_display_dir+0x19c>
        }
    }
    else                            /* landscape */
    {
        lcddev.width = 320;         /* Default width */
 8003a12:	4b32      	ldr	r3, [pc, #200]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a14:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a18:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Default height */
 8003a1a:	4b30      	ldr	r3, [pc, #192]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a1c:	22f0      	movs	r2, #240	; 0xf0
 8003a1e:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003a20:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a22:	889b      	ldrh	r3, [r3, #4]
 8003a24:	f245 5210 	movw	r2, #21776	; 0x5510
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d114      	bne.n	8003a56 <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a2e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003a32:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8003a34:	4b29      	ldr	r3, [pc, #164]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a36:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003a3a:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8003a3c:	4b27      	ldr	r3, [pc, #156]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a3e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003a42:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8003a44:	4b25      	ldr	r3, [pc, #148]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a46:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003a4a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8003a4c:	4b23      	ldr	r3, [pc, #140]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003a52:	805a      	strh	r2, [r3, #2]
 8003a54:	e026      	b.n	8003aa4 <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8003a56:	4b21      	ldr	r3, [pc, #132]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a58:	889b      	ldrh	r3, [r3, #4]
 8003a5a:	f641 1263 	movw	r2, #6499	; 0x1963
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d005      	beq.n	8003a6e <lcd_display_dir+0x13e>
 8003a62:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a64:	889b      	ldrh	r3, [r3, #4]
 8003a66:	f649 0206 	movw	r2, #38918	; 0x9806
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d111      	bne.n	8003a92 <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a70:	222c      	movs	r2, #44	; 0x2c
 8003a72:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* Set the write x-coordinate instruction */
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a76:	222a      	movs	r2, #42	; 0x2a
 8003a78:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* Set the write y-coordinate instruction */
 8003a7a:	4b18      	ldr	r3, [pc, #96]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a7c:	222b      	movs	r2, #43	; 0x2b
 8003a7e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* Set width 800 */
 8003a80:	4b16      	ldr	r3, [pc, #88]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a82:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003a86:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* Set height 480 */
 8003a88:	4b14      	ldr	r3, [pc, #80]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003a8e:	805a      	strh	r2, [r3, #2]
 8003a90:	e008      	b.n	8003aa4 <lcd_display_dir+0x174>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a94:	222c      	movs	r2, #44	; 0x2c
 8003a96:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <lcd_display_dir+0x1ac>)
 8003a9a:	222a      	movs	r2, #42	; 0x2a
 8003a9c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <lcd_display_dir+0x1ac>)
 8003aa0:	222b      	movs	r2, #43	; 0x2b
 8003aa2:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <lcd_display_dir+0x1ac>)
 8003aa6:	889b      	ldrh	r3, [r3, #4]
 8003aa8:	f245 3210 	movw	r2, #21264	; 0x5310
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d005      	beq.n	8003abc <lcd_display_dir+0x18c>
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <lcd_display_dir+0x1ac>)
 8003ab2:	889b      	ldrh	r3, [r3, #4]
 8003ab4:	f247 7296 	movw	r2, #30614	; 0x7796
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d107      	bne.n	8003acc <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <lcd_display_dir+0x1ac>)
 8003abe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ac2:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <lcd_display_dir+0x1ac>)
 8003ac6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003aca:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Default scan direction */
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7ff fd5f 	bl	8003590 <lcd_scan_dir>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000088 	.word	0x20000088

08003ae0 <lcd_init>:
 * @note    This initialization function can initialize various types of LCD
 * @param   None.
 * @retval  None.
 */
void lcd_init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
	FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	611a      	str	r2, [r3, #16]
 8003af4:	615a      	str	r2, [r3, #20]
 8003af6:	619a      	str	r2, [r3, #24]

	HAL_Delay(50);        /* After initializing the FSMC, a certain amount of time must be waited before the initialization can start */
 8003af8:	2032      	movs	r0, #50	; 0x32
 8003afa:	f001 fadb 	bl	80050b4 <HAL_Delay>

    /* Try a read of 9341 ID */
    lcd_wr_regno(0XD3);
 8003afe:	20d3      	movs	r0, #211	; 0xd3
 8003b00:	f7ff fc24 	bl	800334c <lcd_wr_regno>
    lcddev.id = lcd_rd_data();  /* dummy read */
 8003b04:	f7ff fc4c 	bl	80033a0 <lcd_rd_data>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4bb0      	ldr	r3, [pc, #704]	; (8003dd0 <lcd_init+0x2f0>)
 8003b0e:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8003b10:	f7ff fc46 	bl	80033a0 <lcd_rd_data>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	4bad      	ldr	r3, [pc, #692]	; (8003dd0 <lcd_init+0x2f0>)
 8003b1a:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read 0X93 */
 8003b1c:	f7ff fc40 	bl	80033a0 <lcd_rd_data>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	4baa      	ldr	r3, [pc, #680]	; (8003dd0 <lcd_init+0x2f0>)
 8003b26:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8003b28:	4ba9      	ldr	r3, [pc, #676]	; (8003dd0 <lcd_init+0x2f0>)
 8003b2a:	889b      	ldrh	r3, [r3, #4]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	4ba7      	ldr	r3, [pc, #668]	; (8003dd0 <lcd_init+0x2f0>)
 8003b32:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* Read 0X41 */
 8003b34:	f7ff fc34 	bl	80033a0 <lcd_rd_data>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4ba4      	ldr	r3, [pc, #656]	; (8003dd0 <lcd_init+0x2f0>)
 8003b3e:	889b      	ldrh	r3, [r3, #4]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	4ba2      	ldr	r3, [pc, #648]	; (8003dd0 <lcd_init+0x2f0>)
 8003b46:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* Not 9341, try to see if it's ST7789 */
 8003b48:	4ba1      	ldr	r3, [pc, #644]	; (8003dd0 <lcd_init+0x2f0>)
 8003b4a:	889b      	ldrh	r3, [r3, #4]
 8003b4c:	f249 3241 	movw	r2, #37697	; 0x9341
 8003b50:	4293      	cmp	r3, r2
 8003b52:	f000 8122 	beq.w	8003d9a <lcd_init+0x2ba>
    {
        lcd_wr_regno(0X04);
 8003b56:	2004      	movs	r0, #4
 8003b58:	f7ff fbf8 	bl	800334c <lcd_wr_regno>
        lcddev.id = lcd_rd_data();      /* dummy read */
 8003b5c:	f7ff fc20 	bl	80033a0 <lcd_rd_data>
 8003b60:	4603      	mov	r3, r0
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b9a      	ldr	r3, [pc, #616]	; (8003dd0 <lcd_init+0x2f0>)
 8003b66:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read to 0X85 */
 8003b68:	f7ff fc1a 	bl	80033a0 <lcd_rd_data>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b97      	ldr	r3, [pc, #604]	; (8003dd0 <lcd_init+0x2f0>)
 8003b72:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read 0X85 */
 8003b74:	f7ff fc14 	bl	80033a0 <lcd_rd_data>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b94      	ldr	r3, [pc, #592]	; (8003dd0 <lcd_init+0x2f0>)
 8003b7e:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8003b80:	4b93      	ldr	r3, [pc, #588]	; (8003dd0 <lcd_init+0x2f0>)
 8003b82:	889b      	ldrh	r3, [r3, #4]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	4b91      	ldr	r3, [pc, #580]	; (8003dd0 <lcd_init+0x2f0>)
 8003b8a:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* Read 0X52 */
 8003b8c:	f7ff fc08 	bl	80033a0 <lcd_rd_data>
 8003b90:	4603      	mov	r3, r0
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b8e      	ldr	r3, [pc, #568]	; (8003dd0 <lcd_init+0x2f0>)
 8003b96:	889b      	ldrh	r3, [r3, #4]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	4b8c      	ldr	r3, [pc, #560]	; (8003dd0 <lcd_init+0x2f0>)
 8003b9e:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        /* Convert the ID of 8552 to 7789 */
 8003ba0:	4b8b      	ldr	r3, [pc, #556]	; (8003dd0 <lcd_init+0x2f0>)
 8003ba2:	889b      	ldrh	r3, [r3, #4]
 8003ba4:	f248 5252 	movw	r2, #34130	; 0x8552
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d103      	bne.n	8003bb4 <lcd_init+0xd4>
        {
            lcddev.id = 0x7789;
 8003bac:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <lcd_init+0x2f0>)
 8003bae:	f247 7289 	movw	r2, #30601	; 0x7789
 8003bb2:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Also not ST7789, try not NT35310 */
 8003bb4:	4b86      	ldr	r3, [pc, #536]	; (8003dd0 <lcd_init+0x2f0>)
 8003bb6:	889b      	ldrh	r3, [r3, #4]
 8003bb8:	f247 7289 	movw	r2, #30601	; 0x7789
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	f000 80ec 	beq.w	8003d9a <lcd_init+0x2ba>
        {
            lcd_wr_regno(0xD4);
 8003bc2:	20d4      	movs	r0, #212	; 0xd4
 8003bc4:	f7ff fbc2 	bl	800334c <lcd_wr_regno>
            lcddev.id = lcd_rd_data();  /* dummy read */
 8003bc8:	f7ff fbea 	bl	80033a0 <lcd_rd_data>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b7f      	ldr	r3, [pc, #508]	; (8003dd0 <lcd_init+0x2f0>)
 8003bd2:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x01 */
 8003bd4:	f7ff fbe4 	bl	80033a0 <lcd_rd_data>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4b7c      	ldr	r3, [pc, #496]	; (8003dd0 <lcd_init+0x2f0>)
 8003bde:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x53 */
 8003be0:	f7ff fbde 	bl	80033a0 <lcd_rd_data>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <lcd_init+0x2f0>)
 8003bea:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8003bec:	4b78      	ldr	r3, [pc, #480]	; (8003dd0 <lcd_init+0x2f0>)
 8003bee:	889b      	ldrh	r3, [r3, #4]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <lcd_init+0x2f0>)
 8003bf6:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8003bf8:	f7ff fbd2 	bl	80033a0 <lcd_rd_data>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4b73      	ldr	r3, [pc, #460]	; (8003dd0 <lcd_init+0x2f0>)
 8003c02:	889b      	ldrh	r3, [r3, #4]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	4b71      	ldr	r3, [pc, #452]	; (8003dd0 <lcd_init+0x2f0>)
 8003c0a:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Also not NT35310, try to see if it is ST7796 */
 8003c0c:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <lcd_init+0x2f0>)
 8003c0e:	889b      	ldrh	r3, [r3, #4]
 8003c10:	f245 3210 	movw	r2, #21264	; 0x5310
 8003c14:	4293      	cmp	r3, r2
 8003c16:	f000 80c0 	beq.w	8003d9a <lcd_init+0x2ba>
            {
                lcd_wr_regno(0XD3);
 8003c1a:	20d3      	movs	r0, #211	; 0xd3
 8003c1c:	f7ff fb96 	bl	800334c <lcd_wr_regno>
                lcddev.id = lcd_rd_data();  /* dummy read */
 8003c20:	f7ff fbbe 	bl	80033a0 <lcd_rd_data>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <lcd_init+0x2f0>)
 8003c2a:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8003c2c:	f7ff fbb8 	bl	80033a0 <lcd_rd_data>
 8003c30:	4603      	mov	r3, r0
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <lcd_init+0x2f0>)
 8003c36:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read 0X77 */
 8003c38:	f7ff fbb2 	bl	80033a0 <lcd_rd_data>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <lcd_init+0x2f0>)
 8003c42:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8003c44:	4b62      	ldr	r3, [pc, #392]	; (8003dd0 <lcd_init+0x2f0>)
 8003c46:	889b      	ldrh	r3, [r3, #4]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	4b60      	ldr	r3, [pc, #384]	; (8003dd0 <lcd_init+0x2f0>)
 8003c4e:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* Read 0X96 */
 8003c50:	f7ff fba6 	bl	80033a0 <lcd_rd_data>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	4b5d      	ldr	r3, [pc, #372]	; (8003dd0 <lcd_init+0x2f0>)
 8003c5a:	889b      	ldrh	r3, [r3, #4]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <lcd_init+0x2f0>)
 8003c62:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0x7796)    /* Also not ST7796, try to see if it is NT35510 */
 8003c64:	4b5a      	ldr	r3, [pc, #360]	; (8003dd0 <lcd_init+0x2f0>)
 8003c66:	889b      	ldrh	r3, [r3, #4]
 8003c68:	f247 7296 	movw	r2, #30614	; 0x7796
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	f000 8094 	beq.w	8003d9a <lcd_init+0x2ba>
                {
                    /* Send key (provided by manufacturer) */
                    lcd_write_reg(0xF000, 0x0055);
 8003c72:	2155      	movs	r1, #85	; 0x55
 8003c74:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003c78:	f7ff fb7c 	bl	8003374 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8003c7c:	21aa      	movs	r1, #170	; 0xaa
 8003c7e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003c82:	f7ff fb77 	bl	8003374 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 8003c86:	2152      	movs	r1, #82	; 0x52
 8003c88:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003c8c:	f7ff fb72 	bl	8003374 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 8003c90:	2108      	movs	r1, #8
 8003c92:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003c96:	f7ff fb6d 	bl	8003374 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003ca0:	f7ff fb68 	bl	8003374 <lcd_write_reg>

                    lcd_wr_regno(0xC500);       /* Read the lower eight bits of the ID */
 8003ca4:	f44f 4045 	mov.w	r0, #50432	; 0xc500
 8003ca8:	f7ff fb50 	bl	800334c <lcd_wr_regno>
                    lcddev.id = lcd_rd_data();  /* Read back 0x55 */
 8003cac:	f7ff fb78 	bl	80033a0 <lcd_rd_data>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <lcd_init+0x2f0>)
 8003cb6:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8003cb8:	4b45      	ldr	r3, [pc, #276]	; (8003dd0 <lcd_init+0x2f0>)
 8003cba:	889b      	ldrh	r3, [r3, #4]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <lcd_init+0x2f0>)
 8003cc2:	809a      	strh	r2, [r3, #4]

                    lcd_wr_regno(0xC501);       /* Read the high eight bits of the ID */
 8003cc4:	f24c 5001 	movw	r0, #50433	; 0xc501
 8003cc8:	f7ff fb40 	bl	800334c <lcd_wr_regno>
                    lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8003ccc:	f7ff fb68 	bl	80033a0 <lcd_rd_data>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <lcd_init+0x2f0>)
 8003cd6:	889b      	ldrh	r3, [r3, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <lcd_init+0x2f0>)
 8003cde:	809a      	strh	r2, [r3, #4]

                    HAL_Delay(5);                /* Wait 5ms, because instruction 0XC501 is a software reset instruction for 1963, wait 5ms for 1963 reset to complete */
 8003ce0:	2005      	movs	r0, #5
 8003ce2:	f001 f9e7 	bl	80050b4 <HAL_Delay>

                    if (lcddev.id != 0x5510)    /* Also not NT5510, try to see if it is ILI9806 */
 8003ce6:	4b3a      	ldr	r3, [pc, #232]	; (8003dd0 <lcd_init+0x2f0>)
 8003ce8:	889b      	ldrh	r3, [r3, #4]
 8003cea:	f245 5210 	movw	r2, #21776	; 0x5510
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d053      	beq.n	8003d9a <lcd_init+0x2ba>
                    {
                        lcd_wr_regno(0XD3);
 8003cf2:	20d3      	movs	r0, #211	; 0xd3
 8003cf4:	f7ff fb2a 	bl	800334c <lcd_wr_regno>
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8003cf8:	f7ff fb52 	bl	80033a0 <lcd_rd_data>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <lcd_init+0x2f0>)
 8003d02:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X00 */
 8003d04:	f7ff fb4c 	bl	80033a0 <lcd_rd_data>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <lcd_init+0x2f0>)
 8003d0e:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X98 */
 8003d10:	f7ff fb46 	bl	80033a0 <lcd_rd_data>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <lcd_init+0x2f0>)
 8003d1a:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <lcd_init+0x2f0>)
 8003d1e:	889b      	ldrh	r3, [r3, #4]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <lcd_init+0x2f0>)
 8003d26:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* Read back 0X06 */
 8003d28:	f7ff fb3a 	bl	80033a0 <lcd_rd_data>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <lcd_init+0x2f0>)
 8003d32:	889b      	ldrh	r3, [r3, #4]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <lcd_init+0x2f0>)
 8003d3a:	809a      	strh	r2, [r3, #4]

                        if (lcddev.id != 0x9806)    /* Not ILI9806 either, try to see if it's SSD1963 */
 8003d3c:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <lcd_init+0x2f0>)
 8003d3e:	889b      	ldrh	r3, [r3, #4]
 8003d40:	f649 0206 	movw	r2, #38918	; 0x9806
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d028      	beq.n	8003d9a <lcd_init+0x2ba>
                        {
                            lcd_wr_regno(0xA1);
 8003d48:	20a1      	movs	r0, #161	; 0xa1
 8003d4a:	f7ff faff 	bl	800334c <lcd_wr_regno>
                            lcddev.id = lcd_rd_data();
 8003d4e:	f7ff fb27 	bl	80033a0 <lcd_rd_data>
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <lcd_init+0x2f0>)
 8003d58:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* Read back 0x57 */
 8003d5a:	f7ff fb21 	bl	80033a0 <lcd_rd_data>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <lcd_init+0x2f0>)
 8003d64:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <lcd_init+0x2f0>)
 8003d68:	889b      	ldrh	r3, [r3, #4]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <lcd_init+0x2f0>)
 8003d70:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* Read back 0x61 */
 8003d72:	f7ff fb15 	bl	80033a0 <lcd_rd_data>
 8003d76:	4603      	mov	r3, r0
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <lcd_init+0x2f0>)
 8003d7c:	889b      	ldrh	r3, [r3, #4]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <lcd_init+0x2f0>)
 8003d84:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* The ID read back by SSD1963 is 5761H, which we force to be 1963 for convenience */
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <lcd_init+0x2f0>)
 8003d88:	889b      	ldrh	r3, [r3, #4]
 8003d8a:	f245 7261 	movw	r2, #22369	; 0x5761
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d103      	bne.n	8003d9a <lcd_init+0x2ba>
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <lcd_init+0x2f0>)
 8003d94:	f641 1263 	movw	r2, #6499	; 0x1963
 8003d98:	809a      	strh	r2, [r3, #4]
                }
            }
        }
    }

    if (lcddev.id == 0X7789)
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <lcd_init+0x2f0>)
 8003d9c:	889b      	ldrh	r3, [r3, #4]
 8003d9e:	f247 7289 	movw	r2, #30601	; 0x7789
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d102      	bne.n	8003dac <lcd_init+0x2cc>
    {
        lcd_ex_st7789_reginit();    /* Perform ST7789 initialization */
 8003da6:	f7fc fe93 	bl	8000ad0 <lcd_ex_st7789_reginit>
 8003daa:	e039      	b.n	8003e20 <lcd_init+0x340>
    }
    else if (lcddev.id == 0X9341)
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <lcd_init+0x2f0>)
 8003dae:	889b      	ldrh	r3, [r3, #4]
 8003db0:	f249 3241 	movw	r2, #37697	; 0x9341
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d102      	bne.n	8003dbe <lcd_init+0x2de>
    {
        lcd_ex_ili9341_reginit();   /* Perform ILI9341 initialization */
 8003db8:	f7fc ff60 	bl	8000c7c <lcd_ex_ili9341_reginit>
 8003dbc:	e030      	b.n	8003e20 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x5310)
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <lcd_init+0x2f0>)
 8003dc0:	889b      	ldrh	r3, [r3, #4]
 8003dc2:	f245 3210 	movw	r2, #21264	; 0x5310
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d104      	bne.n	8003dd4 <lcd_init+0x2f4>
    {
        lcd_ex_nt35310_reginit();   /* Perform NT35310 initialization */
 8003dca:	f7fd f86f 	bl	8000eac <lcd_ex_nt35310_reginit>
 8003dce:	e027      	b.n	8003e20 <lcd_init+0x340>
 8003dd0:	20000088 	.word	0x20000088
    }
    else if (lcddev.id == 0x7796)
 8003dd4:	4b44      	ldr	r3, [pc, #272]	; (8003ee8 <lcd_init+0x408>)
 8003dd6:	889b      	ldrh	r3, [r3, #4]
 8003dd8:	f247 7296 	movw	r2, #30614	; 0x7796
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d102      	bne.n	8003de6 <lcd_init+0x306>
    {
        lcd_ex_st7796_reginit();    /* Perform ST7796 initialization */
 8003de0:	f7fd ffdf 	bl	8001da2 <lcd_ex_st7796_reginit>
 8003de4:	e01c      	b.n	8003e20 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x5510)
 8003de6:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <lcd_init+0x408>)
 8003de8:	889b      	ldrh	r3, [r3, #4]
 8003dea:	f245 5210 	movw	r2, #21776	; 0x5510
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d102      	bne.n	8003df8 <lcd_init+0x318>
    {
        lcd_ex_nt35510_reginit();   /* Perform NT35510 initialization */
 8003df2:	f7fe f8bb 	bl	8001f6c <lcd_ex_nt35510_reginit>
 8003df6:	e013      	b.n	8003e20 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x9806)
 8003df8:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <lcd_init+0x408>)
 8003dfa:	889b      	ldrh	r3, [r3, #4]
 8003dfc:	f649 0206 	movw	r2, #38918	; 0x9806
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d102      	bne.n	8003e0a <lcd_init+0x32a>
    {
        lcd_ex_ili9806_reginit();   /* Perform ILI9806 initialization */
 8003e04:	f7ff f832 	bl	8002e6c <lcd_ex_ili9806_reginit>
 8003e08:	e00a      	b.n	8003e20 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x1963)
 8003e0a:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <lcd_init+0x408>)
 8003e0c:	889b      	ldrh	r3, [r3, #4]
 8003e0e:	f641 1263 	movw	r2, #6499	; 0x1963
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d104      	bne.n	8003e20 <lcd_init+0x340>
    {
        lcd_ex_ssd1963_reginit();   /* Perform SSD1963 initialization */
 8003e16:	f7ff f9cb 	bl	80031b0 <lcd_ex_ssd1963_reginit>
        lcd_ssd_backlight_set(100); /* The backlight is set to its brightest */
 8003e1a:	2064      	movs	r0, #100	; 0x64
 8003e1c:	f7ff fd54 	bl	80038c8 <lcd_ssd_backlight_set>
    }

    if (lcddev.id == 0x7789)
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <lcd_init+0x408>)
 8003e22:	889b      	ldrh	r3, [r3, #4]
 8003e24:	f247 7289 	movw	r2, #30601	; 0x7789
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10d      	bne.n	8003e48 <lcd_init+0x368>
    {
    	ExtTiming.AddressSetupTime = 3;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 3;
 8003e30:	2303      	movs	r3, #3
 8003e32:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 8003e34:	4b2d      	ldr	r3, [pc, #180]	; (8003eec <lcd_init+0x40c>)
 8003e36:	6858      	ldr	r0, [r3, #4]
 8003e38:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <lcd_init+0x40c>)
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <lcd_init+0x40c>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	1d39      	adds	r1, r7, #4
 8003e42:	f004 fb53 	bl	80084ec <FSMC_NORSRAM_Extended_Timing_Init>
 8003e46:	e03e      	b.n	8003ec6 <lcd_init+0x3e6>
    }
    else if ((lcddev.id == 0x5310) ||
 8003e48:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <lcd_init+0x408>)
 8003e4a:	889b      	ldrh	r3, [r3, #4]
 8003e4c:	f245 3210 	movw	r2, #21264	; 0x5310
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d017      	beq.n	8003e84 <lcd_init+0x3a4>
             (lcddev.id == 0x7796) ||
 8003e54:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <lcd_init+0x408>)
 8003e56:	889b      	ldrh	r3, [r3, #4]
    else if ((lcddev.id == 0x5310) ||
 8003e58:	f247 7296 	movw	r2, #30614	; 0x7796
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d011      	beq.n	8003e84 <lcd_init+0x3a4>
             (lcddev.id == 0x5510) ||
 8003e60:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <lcd_init+0x408>)
 8003e62:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x7796) ||
 8003e64:	f245 5210 	movw	r2, #21776	; 0x5510
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <lcd_init+0x3a4>
             (lcddev.id == 0x9806) ||
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <lcd_init+0x408>)
 8003e6e:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x5510) ||
 8003e70:	f649 0206 	movw	r2, #38918	; 0x9806
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d005      	beq.n	8003e84 <lcd_init+0x3a4>
             (lcddev.id == 0x1963))
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <lcd_init+0x408>)
 8003e7a:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x9806) ||
 8003e7c:	f641 1263 	movw	r2, #6499	; 0x1963
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10d      	bne.n	8003ea0 <lcd_init+0x3c0>
    {
    	ExtTiming.AddressSetupTime = 2;
 8003e84:	2302      	movs	r3, #2
 8003e86:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 2;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <lcd_init+0x40c>)
 8003e8e:	6858      	ldr	r0, [r3, #4]
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <lcd_init+0x40c>)
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	4b15      	ldr	r3, [pc, #84]	; (8003eec <lcd_init+0x40c>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	1d39      	adds	r1, r7, #4
 8003e9a:	f004 fb27 	bl	80084ec <FSMC_NORSRAM_Extended_Timing_Init>
 8003e9e:	e012      	b.n	8003ec6 <lcd_init+0x3e6>
    }
    else if (lcddev.id == 0x9341)
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <lcd_init+0x408>)
 8003ea2:	889b      	ldrh	r3, [r3, #4]
 8003ea4:	f249 3241 	movw	r2, #37697	; 0x9341
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10c      	bne.n	8003ec6 <lcd_init+0x3e6>
    {
    	ExtTiming.AddressSetupTime = 1;
 8003eac:	2301      	movs	r3, #1
 8003eae:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 1;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <lcd_init+0x40c>)
 8003eb6:	6858      	ldr	r0, [r3, #4]
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <lcd_init+0x40c>)
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <lcd_init+0x40c>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	1d39      	adds	r1, r7, #4
 8003ec2:	f004 fb13 	bl	80084ec <FSMC_NORSRAM_Extended_Timing_Init>
    }

    lcd_display_dir(0); /* Portrait is the default */
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7ff fd32 	bl	8003930 <lcd_display_dir>
    LCD_BL(1);          /* Light up the backlight */
 8003ecc:	2201      	movs	r2, #1
 8003ece:	2120      	movs	r1, #32
 8003ed0:	4807      	ldr	r0, [pc, #28]	; (8003ef0 <lcd_init+0x410>)
 8003ed2:	f002 fd41 	bl	8006958 <HAL_GPIO_WritePin>
    lcd_clear(WHITE);
 8003ed6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003eda:	f000 f80b 	bl	8003ef4 <lcd_clear>
}
 8003ede:	bf00      	nop
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000088 	.word	0x20000088
 8003eec:	20000140 	.word	0x20000140
 8003ef0:	40020400 	.word	0x40020400

08003ef4 <lcd_clear>:
 * @brief   Screen clearing function
 * @param   color : To clear the screen color
 * @retval  None.
 */
void lcd_clear(uint16_t color)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]

    totalpoint = lcddev.width * lcddev.height;    /* Get the total points */
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <lcd_clear+0x54>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <lcd_clear+0x54>)
 8003f0e:	885b      	ldrh	r3, [r3, #2]
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	60bb      	str	r3, [r7, #8]
    lcd_set_cursor(0x00, 0x0000);   /* Sets the cursor position */
 8003f16:	2100      	movs	r1, #0
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7ff fa63 	bl	80033e4 <lcd_set_cursor>
    lcd_write_ram_prepare();        /* Start writing GRAM */
 8003f1e:	f7ff fa51 	bl	80033c4 <lcd_write_ram_prepare>

    for (index = 0; index < totalpoint; index++)
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	e005      	b.n	8003f34 <lcd_clear+0x40>
    {
        LCD->LCD_RAM = color;
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <lcd_clear+0x58>)
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d3f5      	bcc.n	8003f28 <lcd_clear+0x34>
   }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000088 	.word	0x20000088
 8003f4c:	600ffffe 	.word	0x600ffffe

08003f50 <lcd_show_char>:
 * @param   mode  : Overlay mode (1); Non-superposition (0);
 * @param   color : The color of the character;
 * @retval  None.
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4623      	mov	r3, r4
 8003f60:	80fb      	strh	r3, [r7, #6]
 8003f62:	4603      	mov	r3, r0
 8003f64:	80bb      	strh	r3, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	70fb      	strb	r3, [r7, #3]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8003f6e:	88bb      	ldrh	r3, [r7, #4]
 8003f70:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]

    csize = ((size >> 3) + (((size & 0x7) != 0) ? 1 : 0)) * (size >> 1); /* Get the number of bytes of a font character corresponding to the dot matrix set */
 8003f7a:	78bb      	ldrb	r3, [r7, #2]
 8003f7c:	08db      	lsrs	r3, r3, #3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	78bb      	ldrb	r3, [r7, #2]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf14      	ite	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	2300      	moveq	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	4413      	add	r3, r2
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	78bb      	ldrb	r3, [r7, #2]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	fb12 f303 	smulbb	r3, r2, r3
 8003fa0:	737b      	strb	r3, [r7, #13]
    chr -= ' ';    /* Get the offset value (ASCII fonts start modulo Spaces, so - "is the font for the corresponding character) */
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	3b20      	subs	r3, #32
 8003fa6:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8003fa8:	78bb      	ldrb	r3, [r7, #2]
 8003faa:	3b0c      	subs	r3, #12
 8003fac:	2b14      	cmp	r3, #20
 8003fae:	f200 809a 	bhi.w	80040e6 <lcd_show_char+0x196>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <lcd_show_char+0x68>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	0800400d 	.word	0x0800400d
 8003fbc:	080040e7 	.word	0x080040e7
 8003fc0:	080040e7 	.word	0x080040e7
 8003fc4:	080040e7 	.word	0x080040e7
 8003fc8:	0800401f 	.word	0x0800401f
 8003fcc:	080040e7 	.word	0x080040e7
 8003fd0:	080040e7 	.word	0x080040e7
 8003fd4:	080040e7 	.word	0x080040e7
 8003fd8:	080040e7 	.word	0x080040e7
 8003fdc:	080040e7 	.word	0x080040e7
 8003fe0:	080040e7 	.word	0x080040e7
 8003fe4:	080040e7 	.word	0x080040e7
 8003fe8:	0800402b 	.word	0x0800402b
 8003fec:	080040e7 	.word	0x080040e7
 8003ff0:	080040e7 	.word	0x080040e7
 8003ff4:	080040e7 	.word	0x080040e7
 8003ff8:	080040e7 	.word	0x080040e7
 8003ffc:	080040e7 	.word	0x080040e7
 8004000:	080040e7 	.word	0x080040e7
 8004004:	080040e7 	.word	0x080040e7
 8004008:	0800403d 	.word	0x0800403d
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[(uint8_t)chr];  /* Call 1206 font */
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4a37      	ldr	r2, [pc, #220]	; (80040f4 <lcd_show_char+0x1a4>)
 8004018:	4413      	add	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
            break;
 800401c:	e014      	b.n	8004048 <lcd_show_char+0xf8>

        case 16:
            pfont = (uint8_t *)asc2_1608[(uint8_t)chr];  /* Call 1608 font */
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	4a35      	ldr	r2, [pc, #212]	; (80040f8 <lcd_show_char+0x1a8>)
 8004024:	4413      	add	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
            break;
 8004028:	e00e      	b.n	8004048 <lcd_show_char+0xf8>

        case 24:
            pfont = (uint8_t *)asc2_2412[(uint8_t)chr];  /* Call 2412 font */
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4a31      	ldr	r2, [pc, #196]	; (80040fc <lcd_show_char+0x1ac>)
 8004036:	4413      	add	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
            break;
 800403a:	e005      	b.n	8004048 <lcd_show_char+0xf8>

        case 32:
            pfont = (uint8_t *)asc2_3216[(uint8_t)chr];  /* Call 3216 font */
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	019b      	lsls	r3, r3, #6
 8004040:	4a2f      	ldr	r2, [pc, #188]	; (8004100 <lcd_show_char+0x1b0>)
 8004042:	4413      	add	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
            break;
 8004046:	bf00      	nop

        default:
            return ;
    }

    y0 = y;
 8004048:	88bb      	ldrh	r3, [r7, #4]
 800404a:	81fb      	strh	r3, [r7, #14]
    for (t = 0; t < csize; t++)
 800404c:	2300      	movs	r3, #0
 800404e:	757b      	strb	r3, [r7, #21]
 8004050:	e044      	b.n	80040dc <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* Retrieves the dot matrix data of the character */
 8004052:	7d7b      	ldrb	r3, [r7, #21]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 800405c:	2300      	movs	r3, #0
 800405e:	75bb      	strb	r3, [r7, #22]
 8004060:	e034      	b.n	80040cc <lcd_show_char+0x17c>
        {
            if ((temp & 0x80) != 0)        /* Valid points, need to be displayed */
 8004062:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	da06      	bge.n	8004078 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* Let me draw the dot, let me show the dot */
 800406a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800406c:	88b9      	ldrh	r1, [r7, #4]
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fc0f 	bl	8003894 <lcd_draw_point>
 8004076:	e00a      	b.n	800408e <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* Invalid point, not shown */
 8004078:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* Drawing the background color is equivalent to not showing the point (note that the background color is controlled by a global variable). */
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <lcd_show_char+0x1b4>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	88b9      	ldrh	r1, [r7, #4]
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fc03 	bl	8003894 <lcd_draw_point>
            }

            temp <<= 1; /* Shift in order to get the state of the next bit */
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	75fb      	strb	r3, [r7, #23]
            y++;
 8004094:	88bb      	ldrh	r3, [r7, #4]
 8004096:	3301      	adds	r3, #1
 8004098:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* Hyper region */
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <lcd_show_char+0x1b8>)
 800409c:	885b      	ldrh	r3, [r3, #2]
 800409e:	88ba      	ldrh	r2, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d222      	bcs.n	80040ea <lcd_show_char+0x19a>

            if ((y - y0) == size)
 80040a4:	88ba      	ldrh	r2, [r7, #4]
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	1ad2      	subs	r2, r2, r3
 80040aa:	78bb      	ldrb	r3, [r7, #2]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d10a      	bne.n	80040c6 <lcd_show_char+0x176>
            {
                y = y0;          /* y coordinate reset */
 80040b0:	89fb      	ldrh	r3, [r7, #14]
 80040b2:	80bb      	strh	r3, [r7, #4]
                x++;             /* The x-coordinate is increasing */
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	3301      	adds	r3, #1
 80040b8:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <lcd_show_char+0x1b8>)
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d307      	bcc.n	80040d4 <lcd_show_char+0x184>
                {
                    return;     /* The x-coordinate hyperregion */
 80040c4:	e012      	b.n	80040ec <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 80040c6:	7dbb      	ldrb	r3, [r7, #22]
 80040c8:	3301      	adds	r3, #1
 80040ca:	75bb      	strb	r3, [r7, #22]
 80040cc:	7dbb      	ldrb	r3, [r7, #22]
 80040ce:	2b07      	cmp	r3, #7
 80040d0:	d9c7      	bls.n	8004062 <lcd_show_char+0x112>
 80040d2:	e000      	b.n	80040d6 <lcd_show_char+0x186>
                }

                break;
 80040d4:	bf00      	nop
    for (t = 0; t < csize; t++)
 80040d6:	7d7b      	ldrb	r3, [r7, #21]
 80040d8:	3301      	adds	r3, #1
 80040da:	757b      	strb	r3, [r7, #21]
 80040dc:	7d7a      	ldrb	r2, [r7, #21]
 80040de:	7b7b      	ldrb	r3, [r7, #13]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d3b6      	bcc.n	8004052 <lcd_show_char+0x102>
 80040e4:	e002      	b.n	80040ec <lcd_show_char+0x19c>
            return ;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* Hyper region */
 80040ea:	bf00      	nop
            }
        }
    }
}
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd90      	pop	{r4, r7, pc}
 80040f2:	bf00      	nop
 80040f4:	08008ff4 	.word	0x08008ff4
 80040f8:	08009468 	.word	0x08009468
 80040fc:	08009a58 	.word	0x08009a58
 8004100:	0800a7b4 	.word	0x0800a7b4
 8004104:	20000000 	.word	0x20000000
 8004108:	20000088 	.word	0x20000088

0800410c <lcd_pow>:
 * @param   m   : The base number
 * @param   n   : Exponent
 * @retval  None.
 */
static uint32_t lcd_pow(uint8_t m, uint8_t n)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	460a      	mov	r2, r1
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	4613      	mov	r3, r2
 800411a:	71bb      	strb	r3, [r7, #6]
    uint32_t result = 1;
 800411c:	2301      	movs	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]

    while (n--)result *= m;
 8004120:	e004      	b.n	800412c <lcd_pow+0x20>
 8004122:	79fa      	ldrb	r2, [r7, #7]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	79bb      	ldrb	r3, [r7, #6]
 800412e:	1e5a      	subs	r2, r3, #1
 8004130:	71ba      	strb	r2, [r7, #6]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f5      	bne.n	8004122 <lcd_pow+0x16>

    return result;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <lcd_show_xnum>:
 *           [0]  :0, non-overlay display; 1, overlay display.
 * @param   color : The color of the number;
 * @retval  None.
 */
void lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color)
{
 8004144:	b5b0      	push	{r4, r5, r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	60ba      	str	r2, [r7, #8]
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	81fb      	strh	r3, [r7, #14]
 8004152:	460b      	mov	r3, r1
 8004154:	81bb      	strh	r3, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	71fb      	strb	r3, [r7, #7]
    uint8_t t, temp;
    uint8_t enshow = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	75bb      	strb	r3, [r7, #22]

    for (t = 0; t < len; t++)   /* Cycle by the total number of display bits */
 800415e:	2300      	movs	r3, #0
 8004160:	75fb      	strb	r3, [r7, #23]
 8004162:	e085      	b.n	8004270 <lcd_show_xnum+0x12c>
    {
        temp = (num / lcd_pow(10, len - t - 1)) % 10;    /* Gets the number of the corresponding bit */
 8004164:	79fa      	ldrb	r2, [r7, #7]
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b2db      	uxtb	r3, r3
 8004170:	4619      	mov	r1, r3
 8004172:	200a      	movs	r0, #10
 8004174:	f7ff ffca 	bl	800410c <lcd_pow>
 8004178:	4602      	mov	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004180:	4b40      	ldr	r3, [pc, #256]	; (8004284 <lcd_show_xnum+0x140>)
 8004182:	fba3 2301 	umull	r2, r3, r3, r1
 8004186:	08da      	lsrs	r2, r3, #3
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	1aca      	subs	r2, r1, r3
 8004192:	4613      	mov	r3, r2
 8004194:	757b      	strb	r3, [r7, #21]

        if (enshow == 0 && t < (len - 1))   /* Display is not enabled, and there is still bit to display */
 8004196:	7dbb      	ldrb	r3, [r7, #22]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d147      	bne.n	800422c <lcd_show_xnum+0xe8>
 800419c:	7dfa      	ldrb	r2, [r7, #23]
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	429a      	cmp	r2, r3
 80041a4:	da42      	bge.n	800422c <lcd_show_xnum+0xe8>
        {
            if (temp == 0)
 80041a6:	7d7b      	ldrb	r3, [r7, #21]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d13d      	bne.n	8004228 <lcd_show_xnum+0xe4>
            {
                if (mode & 0X80)   /* The high bits need to be filled with zeros */
 80041ac:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	da1c      	bge.n	80041ee <lcd_show_xnum+0xaa>
                {
                    lcd_show_char(x + (size / 2)*t, y, '0', size, mode & 0X01, color);  /* put a 0 in there */
 80041b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	b29a      	uxth	r2, r3
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	fb12 f303 	smulbb	r3, r2, r3
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	89fb      	ldrh	r3, [r7, #14]
 80041ca:	4413      	add	r3, r2
 80041cc:	b298      	uxth	r0, r3
 80041ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80041dc:	89b9      	ldrh	r1, [r7, #12]
 80041de:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80041e0:	9201      	str	r2, [sp, #4]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4623      	mov	r3, r4
 80041e6:	2230      	movs	r2, #48	; 0x30
 80041e8:	f7ff feb2 	bl	8003f50 <lcd_show_char>
                else
                {
                    lcd_show_char(x + (size / 2)*t, y, ' ', size, mode & 0X01, color);  /* Use Spaces for space */
                }

                continue;
 80041ec:	e03d      	b.n	800426a <lcd_show_xnum+0x126>
                    lcd_show_char(x + (size / 2)*t, y, ' ', size, mode & 0X01, color);  /* Use Spaces for space */
 80041ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	fb12 f303 	smulbb	r3, r2, r3
 8004200:	b29a      	uxth	r2, r3
 8004202:	89fb      	ldrh	r3, [r7, #14]
 8004204:	4413      	add	r3, r2
 8004206:	b298      	uxth	r0, r3
 8004208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8004216:	89b9      	ldrh	r1, [r7, #12]
 8004218:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800421a:	9201      	str	r2, [sp, #4]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	4623      	mov	r3, r4
 8004220:	2220      	movs	r2, #32
 8004222:	f7ff fe95 	bl	8003f50 <lcd_show_char>
                continue;
 8004226:	e020      	b.n	800426a <lcd_show_xnum+0x126>
            }
            else
            {
                enshow = 1; /* Enable display */
 8004228:	2301      	movs	r3, #1
 800422a:	75bb      	strb	r3, [r7, #22]
            }

        }

        lcd_show_char(x + (size / 2)*t, y, temp + '0', size, mode & 0X01, color);
 800422c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	b29a      	uxth	r2, r3
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	b29b      	uxth	r3, r3
 800423a:	fb12 f303 	smulbb	r3, r2, r3
 800423e:	b29a      	uxth	r2, r3
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	4413      	add	r3, r2
 8004244:	b298      	uxth	r0, r3
 8004246:	7d7b      	ldrb	r3, [r7, #21]
 8004248:	3330      	adds	r3, #48	; 0x30
 800424a:	b2dc      	uxtb	r4, r3
 800424c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f897 5028 	ldrb.w	r5, [r7, #40]	; 0x28
 800425a:	89b9      	ldrh	r1, [r7, #12]
 800425c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800425e:	9201      	str	r2, [sp, #4]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	462b      	mov	r3, r5
 8004264:	4622      	mov	r2, r4
 8004266:	f7ff fe73 	bl	8003f50 <lcd_show_char>
    for (t = 0; t < len; t++)   /* Cycle by the total number of display bits */
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	3301      	adds	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
 8004270:	7dfa      	ldrb	r2, [r7, #23]
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	429a      	cmp	r2, r3
 8004276:	f4ff af75 	bcc.w	8004164 <lcd_show_xnum+0x20>
    }
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bdb0      	pop	{r4, r5, r7, pc}
 8004284:	cccccccd 	.word	0xcccccccd

08004288 <lcd_show_string>:
 * @param   p            : The first address of the string
 * @param   color        : The color of the string;
 * @retval  None
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b087      	sub	sp, #28
 800428c:	af02      	add	r7, sp, #8
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4623      	mov	r3, r4
 8004298:	80fb      	strh	r3, [r7, #6]
 800429a:	4603      	mov	r3, r0
 800429c:	80bb      	strh	r3, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	807b      	strh	r3, [r7, #2]
 80042a2:	4613      	mov	r3, r2
 80042a4:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	73fb      	strb	r3, [r7, #15]
    width += x;
 80042aa:	887a      	ldrh	r2, [r7, #2]
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	4413      	add	r3, r2
 80042b0:	807b      	strh	r3, [r7, #2]
    height += y;
 80042b2:	883a      	ldrh	r2, [r7, #0]
 80042b4:	88bb      	ldrh	r3, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 80042ba:	e027      	b.n	800430c <lcd_show_string+0x84>
    {
        if (x >= width)
 80042bc:	88fa      	ldrh	r2, [r7, #6]
 80042be:	887b      	ldrh	r3, [r7, #2]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d307      	bcc.n	80042d4 <lcd_show_string+0x4c>
        {
            x = x0;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	80fb      	strh	r3, [r7, #6]
            y += size;
 80042c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	88bb      	ldrh	r3, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* quit */
 80042d4:	88ba      	ldrh	r2, [r7, #4]
 80042d6:	883b      	ldrh	r3, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d220      	bcs.n	800431e <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	781a      	ldrb	r2, [r3, #0]
 80042e0:	f897 4020 	ldrb.w	r4, [r7, #32]
 80042e4:	88b9      	ldrh	r1, [r7, #4]
 80042e6:	88f8      	ldrh	r0, [r7, #6]
 80042e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	2300      	movs	r3, #0
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4623      	mov	r3, r4
 80042f2:	f7ff fe2d 	bl	8003f50 <lcd_show_char>
        x += size / 2;
 80042f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	b29a      	uxth	r2, r3
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	4413      	add	r3, r2
 8004304:	80fb      	strh	r3, [r7, #6]
        p++;
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	3301      	adds	r3, #1
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b7e      	cmp	r3, #126	; 0x7e
 8004312:	d805      	bhi.n	8004320 <lcd_show_string+0x98>
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b1f      	cmp	r3, #31
 800431a:	d8cf      	bhi.n	80042bc <lcd_show_string+0x34>
    }
}
 800431c:	e000      	b.n	8004320 <lcd_show_string+0x98>
        if (y >= height)break;  /* quit */
 800431e:	bf00      	nop
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	bd90      	pop	{r4, r7, pc}

08004328 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800432e:	463b      	mov	r3, r7
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800433a:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <MX_ADC2_Init+0x98>)
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <MX_ADC2_Init+0x9c>)
 800433e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004340:	4b1f      	ldr	r3, [pc, #124]	; (80043c0 <MX_ADC2_Init+0x98>)
 8004342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004346:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004348:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <MX_ADC2_Init+0x98>)
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800434e:	4b1c      	ldr	r3, [pc, #112]	; (80043c0 <MX_ADC2_Init+0x98>)
 8004350:	2200      	movs	r2, #0
 8004352:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004354:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <MX_ADC2_Init+0x98>)
 8004356:	2201      	movs	r2, #1
 8004358:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800435a:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <MX_ADC2_Init+0x98>)
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004362:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <MX_ADC2_Init+0x98>)
 8004364:	2200      	movs	r2, #0
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <MX_ADC2_Init+0x98>)
 800436a:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <MX_ADC2_Init+0xa0>)
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <MX_ADC2_Init+0x98>)
 8004370:	2200      	movs	r2, #0
 8004372:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004374:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <MX_ADC2_Init+0x98>)
 8004376:	2201      	movs	r2, #1
 8004378:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800437a:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <MX_ADC2_Init+0x98>)
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <MX_ADC2_Init+0x98>)
 8004384:	2201      	movs	r2, #1
 8004386:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004388:	480d      	ldr	r0, [pc, #52]	; (80043c0 <MX_ADC2_Init+0x98>)
 800438a:	f000 feb7 	bl	80050fc <HAL_ADC_Init>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004394:	f000 fbe4 	bl	8004b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004398:	2301      	movs	r3, #1
 800439a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800439c:	2301      	movs	r3, #1
 800439e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80043a0:	2307      	movs	r3, #7
 80043a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80043a4:	463b      	mov	r3, r7
 80043a6:	4619      	mov	r1, r3
 80043a8:	4805      	ldr	r0, [pc, #20]	; (80043c0 <MX_ADC2_Init+0x98>)
 80043aa:	f001 f985 	bl	80056b8 <HAL_ADC_ConfigChannel>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80043b4:	f000 fbd4 	bl	8004b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000098 	.word	0x20000098
 80043c4:	40012100 	.word	0x40012100
 80043c8:	0f000001 	.word	0x0f000001

080043cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d4:	f107 0314 	add.w	r3, r7, #20
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <HAL_ADC_MspInit+0xdc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d158      	bne.n	80044a0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <HAL_ADC_MspInit+0xe0>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	4a2d      	ldr	r2, [pc, #180]	; (80044ac <HAL_ADC_MspInit+0xe0>)
 80043f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043fc:	6453      	str	r3, [r2, #68]	; 0x44
 80043fe:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_ADC_MspInit+0xe0>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <HAL_ADC_MspInit+0xe0>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	4a26      	ldr	r2, [pc, #152]	; (80044ac <HAL_ADC_MspInit+0xe0>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	6313      	str	r3, [r2, #48]	; 0x30
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_ADC_MspInit+0xe0>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004426:	2302      	movs	r3, #2
 8004428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800442a:	2303      	movs	r3, #3
 800442c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004432:	f107 0314 	add.w	r3, r7, #20
 8004436:	4619      	mov	r1, r3
 8004438:	481d      	ldr	r0, [pc, #116]	; (80044b0 <HAL_ADC_MspInit+0xe4>)
 800443a:	f002 f8f1 	bl	8006620 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 8004440:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <HAL_ADC_MspInit+0xec>)
 8004442:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 8004446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800444a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800444c:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004452:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 8004454:	2200      	movs	r2, #0
 8004456:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004458:	4b16      	ldr	r3, [pc, #88]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 800445a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800445e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 8004462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004466:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 800446a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800446e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8004470:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 8004472:	2200      	movs	r2, #0
 8004474:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004476:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 8004478:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800447c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 8004480:	2200      	movs	r2, #0
 8004482:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004484:	480b      	ldr	r0, [pc, #44]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 8004486:	f001 fcc9 	bl	8005e1c <HAL_DMA_Init>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8004490:	f000 fb66 	bl	8004b60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
 800449a:	4a06      	ldr	r2, [pc, #24]	; (80044b4 <HAL_ADC_MspInit+0xe8>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80044a0:	bf00      	nop
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40012100 	.word	0x40012100
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40020000 	.word	0x40020000
 80044b4:	200000e0 	.word	0x200000e0
 80044b8:	40026440 	.word	0x40026440

080044bc <adc_dma_enable>:
 * @brief   enables a single ADC DMA transfer
 * @param   ndtr: The number of DMA transfers
 * @retval  None
 */
void adc_dma_enable(uint16_t cndtr)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	80fb      	strh	r3, [r7, #6]
    ADC2->CR2 &= ~(1 << 0);                 /* Turn off the ADC first */
 80044c6:	4b17      	ldr	r3, [pc, #92]	; (8004524 <adc_dma_enable+0x68>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4a16      	ldr	r2, [pc, #88]	; (8004524 <adc_dma_enable+0x68>)
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	6093      	str	r3, [r2, #8]

    DMA2_Stream2->CR &= ~(1 << 0);         /* Turn off DMA transfers */
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <adc_dma_enable+0x6c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a14      	ldr	r2, [pc, #80]	; (8004528 <adc_dma_enable+0x6c>)
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream2->CR & (1 << 0));   /* Make sure DMA can be set */
 80044de:	bf00      	nop
 80044e0:	4b11      	ldr	r3, [pc, #68]	; (8004528 <adc_dma_enable+0x6c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f9      	bne.n	80044e0 <adc_dma_enable+0x24>
    DMA2_Stream2->NDTR = cndtr;            /* Amount of data transferred by DMA */
 80044ec:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <adc_dma_enable+0x6c>)
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	6053      	str	r3, [r2, #4]
    DMA2_Stream2->CR |= 1 << 0;            /* Enable DMA transfer */
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <adc_dma_enable+0x6c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a0c      	ldr	r2, [pc, #48]	; (8004528 <adc_dma_enable+0x6c>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	6013      	str	r3, [r2, #0]

    ADC2->CR2 |= 1 << 0;                    /* Restart the ADC */
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <adc_dma_enable+0x68>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4a08      	ldr	r2, [pc, #32]	; (8004524 <adc_dma_enable+0x68>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6093      	str	r3, [r2, #8]
    ADC2->CR2 |= 1 << 22;                   /* Start the rule transition channel */
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <adc_dma_enable+0x68>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4a05      	ldr	r2, [pc, #20]	; (8004524 <adc_dma_enable+0x68>)
 8004510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004514:	6093      	str	r3, [r2, #8]
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40012100 	.word	0x40012100
 8004528:	40026440 	.word	0x40026440

0800452c <adc_get_result>:
 * @brief   Gets the ADC converted result
 * @param   None
 * @retval  None
 */
uint32_t adc_get_result(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc2);                      /* Turn on the ADC */
 8004530:	4806      	ldr	r0, [pc, #24]	; (800454c <adc_get_result+0x20>)
 8004532:	f000 fe27 	bl	8005184 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 10);      /* Round robin transformation */
 8004536:	210a      	movs	r1, #10
 8004538:	4804      	ldr	r0, [pc, #16]	; (800454c <adc_get_result+0x20>)
 800453a:	f000 fef5 	bl	8005328 <HAL_ADC_PollForConversion>
    return (uint16_t)HAL_ADC_GetValue(&hadc2);  /* Returns the result of the last ADC2 rule group transformation */
 800453e:	4803      	ldr	r0, [pc, #12]	; (800454c <adc_get_result+0x20>)
 8004540:	f001 f88e 	bl	8005660 <HAL_ADC_GetValue>
 8004544:	4603      	mov	r3, r0
 8004546:	b29b      	uxth	r3, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000098 	.word	0x20000098

08004550 <adc_get_result_average>:
 * @brief   Takes the transformation value of the channel ch, takes it times, and averages it
 * @param   times : Get the number of times
 * @retval  channel ch the average of times conversion results
 */
uint32_t adc_get_result_average(uint8_t times)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_val = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
    uint8_t t;

    for (t = 0; t < times; t++)     /* Get The times data */
 800455e:	2300      	movs	r3, #0
 8004560:	72fb      	strb	r3, [r7, #11]
 8004562:	e00b      	b.n	800457c <adc_get_result_average+0x2c>
    {
        temp_val += adc_get_result();
 8004564:	f7ff ffe2 	bl	800452c <adc_get_result>
 8004568:	4602      	mov	r2, r0
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
        HAL_Delay(5);               /* delay 5ms */
 8004570:	2005      	movs	r0, #5
 8004572:	f000 fd9f 	bl	80050b4 <HAL_Delay>
    for (t = 0; t < times; t++)     /* Get The times data */
 8004576:	7afb      	ldrb	r3, [r7, #11]
 8004578:	3301      	adds	r3, #1
 800457a:	72fb      	strb	r3, [r7, #11]
 800457c:	7afa      	ldrb	r2, [r7, #11]
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d3ef      	bcc.n	8004564 <adc_get_result_average+0x14>
    }

    return temp_val / times;        /* Returning the average */
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <MX_DMA_Init+0x3c>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	4a0b      	ldr	r2, [pc, #44]	; (80045d0 <MX_DMA_Init+0x3c>)
 80045a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045a8:	6313      	str	r3, [r2, #48]	; 0x30
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <MX_DMA_Init+0x3c>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 80045b6:	2201      	movs	r2, #1
 80045b8:	2102      	movs	r1, #2
 80045ba:	203a      	movs	r0, #58	; 0x3a
 80045bc:	f001 fbf7 	bl	8005dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80045c0:	203a      	movs	r0, #58	; 0x3a
 80045c2:	f001 fc10 	bl	8005de6 <HAL_NVIC_EnableIRQ>

}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800

080045d4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08e      	sub	sp, #56	; 0x38
 80045d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80045da:	f107 031c 	add.w	r3, r7, #28
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
 80045e4:	609a      	str	r2, [r3, #8]
 80045e6:	60da      	str	r2, [r3, #12]
 80045e8:	611a      	str	r2, [r3, #16]
 80045ea:	615a      	str	r2, [r3, #20]
 80045ec:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80045ee:	463b      	mov	r3, r7
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	611a      	str	r2, [r3, #16]
 80045fc:	615a      	str	r2, [r3, #20]
 80045fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004600:	4b2f      	ldr	r3, [pc, #188]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004602:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004606:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004608:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <MX_FSMC_Init+0xec>)
 800460a:	4a2e      	ldr	r2, [pc, #184]	; (80046c4 <MX_FSMC_Init+0xf0>)
 800460c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800460e:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004614:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004616:	2200      	movs	r2, #0
 8004618:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800461a:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <MX_FSMC_Init+0xec>)
 800461c:	2200      	movs	r2, #0
 800461e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004620:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004622:	2210      	movs	r2, #16
 8004624:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004626:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004628:	2200      	movs	r2, #0
 800462a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800462c:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <MX_FSMC_Init+0xec>)
 800462e:	2200      	movs	r2, #0
 8004630:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004632:	4b23      	ldr	r3, [pc, #140]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004634:	2200      	movs	r2, #0
 8004636:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <MX_FSMC_Init+0xec>)
 800463a:	2200      	movs	r2, #0
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004648:	2200      	movs	r2, #0
 800464a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800464c:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <MX_FSMC_Init+0xec>)
 800464e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004656:	2200      	movs	r2, #0
 8004658:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800465a:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <MX_FSMC_Init+0xec>)
 800465c:	2200      	movs	r2, #0
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <MX_FSMC_Init+0xec>)
 8004662:	2200      	movs	r2, #0
 8004664:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004666:	230f      	movs	r3, #15
 8004668:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800466a:	230f      	movs	r3, #15
 800466c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800466e:	233c      	movs	r3, #60	; 0x3c
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004676:	2310      	movs	r3, #16
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800467a:	2311      	movs	r3, #17
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800467e:	2300      	movs	r3, #0
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 8004682:	2309      	movs	r3, #9
 8004684:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8004686:	230f      	movs	r3, #15
 8004688:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800468a:	2309      	movs	r3, #9
 800468c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 800468e:	230f      	movs	r3, #15
 8004690:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004692:	2310      	movs	r3, #16
 8004694:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004696:	2311      	movs	r3, #17
 8004698:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800469a:	2300      	movs	r3, #0
 800469c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800469e:	463a      	mov	r2, r7
 80046a0:	f107 031c 	add.w	r3, r7, #28
 80046a4:	4619      	mov	r1, r3
 80046a6:	4806      	ldr	r0, [pc, #24]	; (80046c0 <MX_FSMC_Init+0xec>)
 80046a8:	f002 fde2 	bl	8007270 <HAL_SRAM_Init>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80046b2:	f000 fa55 	bl	8004b60 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80046b6:	bf00      	nop
 80046b8:	3738      	adds	r7, #56	; 0x38
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000140 	.word	0x20000140
 80046c4:	a0000104 	.word	0xa0000104

080046c8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80046dc:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <HAL_FSMC_MspInit+0x88>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d131      	bne.n	8004748 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80046e4:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <HAL_FSMC_MspInit+0x88>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4b19      	ldr	r3, [pc, #100]	; (8004754 <HAL_FSMC_MspInit+0x8c>)
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <HAL_FSMC_MspInit+0x8c>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6393      	str	r3, [r2, #56]	; 0x38
 80046fa:	4b16      	ldr	r3, [pc, #88]	; (8004754 <HAL_FSMC_MspInit+0x8c>)
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8004706:	f64f 7388 	movw	r3, #65416	; 0xff88
 800470a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470c:	2302      	movs	r3, #2
 800470e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004714:	2303      	movs	r3, #3
 8004716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004718:	230c      	movs	r3, #12
 800471a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	4619      	mov	r1, r3
 8004720:	480d      	ldr	r0, [pc, #52]	; (8004758 <HAL_FSMC_MspInit+0x90>)
 8004722:	f001 ff7d 	bl	8006620 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004726:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800472a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004734:	2303      	movs	r3, #3
 8004736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004738:	230c      	movs	r3, #12
 800473a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	4619      	mov	r1, r3
 8004740:	4806      	ldr	r0, [pc, #24]	; (800475c <HAL_FSMC_MspInit+0x94>)
 8004742:	f001 ff6d 	bl	8006620 <HAL_GPIO_Init>
 8004746:	e000      	b.n	800474a <HAL_FSMC_MspInit+0x82>
    return;
 8004748:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000190 	.word	0x20000190
 8004754:	40023800 	.word	0x40023800
 8004758:	40021000 	.word	0x40021000
 800475c:	40020c00 	.word	0x40020c00

08004760 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004768:	f7ff ffae 	bl	80046c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08c      	sub	sp, #48	; 0x30
 8004778:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477a:	f107 031c 	add.w	r3, r7, #28
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <MX_GPIO_Init+0x12c>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	4a43      	ldr	r2, [pc, #268]	; (80048a0 <MX_GPIO_Init+0x12c>)
 8004794:	f043 0310 	orr.w	r3, r3, #16
 8004798:	6313      	str	r3, [r2, #48]	; 0x30
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <MX_GPIO_Init+0x12c>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	4b3d      	ldr	r3, [pc, #244]	; (80048a0 <MX_GPIO_Init+0x12c>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a3c      	ldr	r2, [pc, #240]	; (80048a0 <MX_GPIO_Init+0x12c>)
 80047b0:	f043 0304 	orr.w	r3, r3, #4
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
 80047b6:	4b3a      	ldr	r3, [pc, #232]	; (80048a0 <MX_GPIO_Init+0x12c>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <MX_GPIO_Init+0x12c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	4a35      	ldr	r2, [pc, #212]	; (80048a0 <MX_GPIO_Init+0x12c>)
 80047cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d0:	6313      	str	r3, [r2, #48]	; 0x30
 80047d2:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <MX_GPIO_Init+0x12c>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	4b2f      	ldr	r3, [pc, #188]	; (80048a0 <MX_GPIO_Init+0x12c>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a2e      	ldr	r2, [pc, #184]	; (80048a0 <MX_GPIO_Init+0x12c>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b2c      	ldr	r3, [pc, #176]	; (80048a0 <MX_GPIO_Init+0x12c>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <MX_GPIO_Init+0x12c>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	4a27      	ldr	r2, [pc, #156]	; (80048a0 <MX_GPIO_Init+0x12c>)
 8004804:	f043 0308 	orr.w	r3, r3, #8
 8004808:	6313      	str	r3, [r2, #48]	; 0x30
 800480a:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <MX_GPIO_Init+0x12c>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	607b      	str	r3, [r7, #4]
 800481a:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <MX_GPIO_Init+0x12c>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <MX_GPIO_Init+0x12c>)
 8004820:	f043 0302 	orr.w	r3, r3, #2
 8004824:	6313      	str	r3, [r2, #48]	; 0x30
 8004826:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <MX_GPIO_Init+0x12c>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	607b      	str	r3, [r7, #4]
 8004830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8004832:	2201      	movs	r2, #1
 8004834:	2160      	movs	r1, #96	; 0x60
 8004836:	481b      	ldr	r0, [pc, #108]	; (80048a4 <MX_GPIO_Init+0x130>)
 8004838:	f002 f88e 	bl	8006958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 800483c:	2201      	movs	r2, #1
 800483e:	2120      	movs	r1, #32
 8004840:	4819      	ldr	r0, [pc, #100]	; (80048a8 <MX_GPIO_Init+0x134>)
 8004842:	f002 f889 	bl	8006958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8004846:	2360      	movs	r3, #96	; 0x60
 8004848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484a:	2301      	movs	r3, #1
 800484c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800484e:	2301      	movs	r3, #1
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004852:	2302      	movs	r3, #2
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004856:	f107 031c 	add.w	r3, r7, #28
 800485a:	4619      	mov	r1, r3
 800485c:	4811      	ldr	r0, [pc, #68]	; (80048a4 <MX_GPIO_Init+0x130>)
 800485e:	f001 fedf 	bl	8006620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WK_UP_Pin|KEY0_Pin;
 8004862:	f248 0301 	movw	r3, #32769	; 0x8001
 8004866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004868:	2300      	movs	r3, #0
 800486a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800486c:	2302      	movs	r3, #2
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004870:	f107 031c 	add.w	r3, r7, #28
 8004874:	4619      	mov	r1, r3
 8004876:	480d      	ldr	r0, [pc, #52]	; (80048ac <MX_GPIO_Init+0x138>)
 8004878:	f001 fed2 	bl	8006620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800487c:	2320      	movs	r3, #32
 800487e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004880:	2301      	movs	r3, #1
 8004882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004884:	2301      	movs	r3, #1
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004888:	2302      	movs	r3, #2
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800488c:	f107 031c 	add.w	r3, r7, #28
 8004890:	4619      	mov	r1, r3
 8004892:	4805      	ldr	r0, [pc, #20]	; (80048a8 <MX_GPIO_Init+0x134>)
 8004894:	f001 fec4 	bl	8006620 <HAL_GPIO_Init>

}
 8004898:	bf00      	nop
 800489a:	3730      	adds	r7, #48	; 0x30
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40020400 	.word	0x40020400
 80048ac:	40020000 	.word	0x40020000

080048b0 <stm32f407vg_show_mesg>:
 * @brief   Displays information about the experiment
 * @param   None
 * @retval  None
 */
void stm32f407vg_show_mesg(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
	/* The serial port outputs the experimental information */
	printf("\n");
 80048b4:	200a      	movs	r0, #10
 80048b6:	f003 ff13 	bl	80086e0 <putchar>
	printf("********************************\r\n");
 80048ba:	480a      	ldr	r0, [pc, #40]	; (80048e4 <stm32f407vg_show_mesg+0x34>)
 80048bc:	f003 ff6c 	bl	8008798 <puts>
	printf("STM32F407\r\n");
 80048c0:	4809      	ldr	r0, [pc, #36]	; (80048e8 <stm32f407vg_show_mesg+0x38>)
 80048c2:	f003 ff69 	bl	8008798 <puts>
	printf("ADC_DMA_Single_Channel Test\r\n");
 80048c6:	4809      	ldr	r0, [pc, #36]	; (80048ec <stm32f407vg_show_mesg+0x3c>)
 80048c8:	f003 ff66 	bl	8008798 <puts>
	printf("ATOM@ALIENTEK\r\n");
 80048cc:	4808      	ldr	r0, [pc, #32]	; (80048f0 <stm32f407vg_show_mesg+0x40>)
 80048ce:	f003 ff63 	bl	8008798 <puts>
	printf("********************************\r\n");
 80048d2:	4804      	ldr	r0, [pc, #16]	; (80048e4 <stm32f407vg_show_mesg+0x34>)
 80048d4:	f003 ff60 	bl	8008798 <puts>
	printf("\r\n");
 80048d8:	4806      	ldr	r0, [pc, #24]	; (80048f4 <stm32f407vg_show_mesg+0x44>)
 80048da:	f003 ff5d 	bl	8008798 <puts>
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	08008f44 	.word	0x08008f44
 80048e8:	08008f68 	.word	0x08008f68
 80048ec:	08008f74 	.word	0x08008f74
 80048f0:	08008f94 	.word	0x08008f94
 80048f4:	08008fa4 	.word	0x08008fa4

080048f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048fe:	f000 fb67 	bl	8004fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004902:	f000 f8c3 	bl	8004a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004906:	f7ff ff35 	bl	8004774 <MX_GPIO_Init>
  MX_DMA_Init();
 800490a:	f7ff fe43 	bl	8004594 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800490e:	f000 fa5b 	bl	8004dc8 <MX_USART1_UART_Init>
  MX_FSMC_Init();
 8004912:	f7ff fe5f 	bl	80045d4 <MX_FSMC_Init>
  MX_ADC2_Init();
 8004916:	f7ff fd07 	bl	8004328 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();                                         /* Initialize LCD */
 800491a:	f7ff f8e1 	bl	8003ae0 <lcd_init>
  stm32f407vg_show_mesg();
 800491e:	f7ff ffc7 	bl	80048b0 <stm32f407vg_show_mesg>
  HAL_DMA_Start_IT(&hdma_adc2, (uint32_t)&ADC2->DR, (uint32_t)&g_adc_dma_buf, 0);
 8004922:	4a4e      	ldr	r2, [pc, #312]	; (8004a5c <main+0x164>)
 8004924:	2300      	movs	r3, #0
 8004926:	494e      	ldr	r1, [pc, #312]	; (8004a60 <main+0x168>)
 8004928:	484e      	ldr	r0, [pc, #312]	; (8004a64 <main+0x16c>)
 800492a:	f001 fb25 	bl	8005f78 <HAL_DMA_Start_IT>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)g_adc_dma_buf, ADC_DMA_BUF_SIZE);
 800492e:	2232      	movs	r2, #50	; 0x32
 8004930:	494a      	ldr	r1, [pc, #296]	; (8004a5c <main+0x164>)
 8004932:	484d      	ldr	r0, [pc, #308]	; (8004a68 <main+0x170>)
 8004934:	f000 fd84 	bl	8005440 <HAL_ADC_Start_DMA>

  lcd_show_string(30, 50, 200, 16, 16, "STM32", RED);
 8004938:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800493c:	9302      	str	r3, [sp, #8]
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <main+0x174>)
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	2310      	movs	r3, #16
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2310      	movs	r3, #16
 8004948:	22c8      	movs	r2, #200	; 0xc8
 800494a:	2132      	movs	r1, #50	; 0x32
 800494c:	201e      	movs	r0, #30
 800494e:	f7ff fc9b 	bl	8004288 <lcd_show_string>
  lcd_show_string(30, 70, 200, 16, 16, "ADC DMA TEST", RED);
 8004952:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004956:	9302      	str	r3, [sp, #8]
 8004958:	4b45      	ldr	r3, [pc, #276]	; (8004a70 <main+0x178>)
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	2310      	movs	r3, #16
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2310      	movs	r3, #16
 8004962:	22c8      	movs	r2, #200	; 0xc8
 8004964:	2146      	movs	r1, #70	; 0x46
 8004966:	201e      	movs	r0, #30
 8004968:	f7ff fc8e 	bl	8004288 <lcd_show_string>
  lcd_show_string(30, 90, 200, 16, 16, "ATOM@ALIENTEK", RED);
 800496c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004970:	9302      	str	r3, [sp, #8]
 8004972:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <main+0x17c>)
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	2310      	movs	r3, #16
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	2310      	movs	r3, #16
 800497c:	22c8      	movs	r2, #200	; 0xc8
 800497e:	215a      	movs	r1, #90	; 0x5a
 8004980:	201e      	movs	r0, #30
 8004982:	f7ff fc81 	bl	8004288 <lcd_show_string>

  lcd_show_string(30, 110, 200, 16, 16, "ADC2_CH1_VAL:0", BLUE);
 8004986:	231f      	movs	r3, #31
 8004988:	9302      	str	r3, [sp, #8]
 800498a:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <main+0x180>)
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	2310      	movs	r3, #16
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2310      	movs	r3, #16
 8004994:	22c8      	movs	r2, #200	; 0xc8
 8004996:	216e      	movs	r1, #110	; 0x6e
 8004998:	201e      	movs	r0, #30
 800499a:	f7ff fc75 	bl	8004288 <lcd_show_string>
  lcd_show_string(30, 130, 200, 16, 16, "ADC2_CH1_VOL:0.000V", BLUE);
 800499e:	231f      	movs	r3, #31
 80049a0:	9302      	str	r3, [sp, #8]
 80049a2:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <main+0x184>)
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	2310      	movs	r3, #16
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	2310      	movs	r3, #16
 80049ac:	22c8      	movs	r2, #200	; 0xc8
 80049ae:	2182      	movs	r1, #130	; 0x82
 80049b0:	201e      	movs	r0, #30
 80049b2:	f7ff fc69 	bl	8004288 <lcd_show_string>

  adc_dma_enable(ADC_DMA_BUF_SIZE);   /* Start the ADC DMA acquisition */
 80049b6:	2032      	movs	r0, #50	; 0x32
 80049b8:	f7ff fd80 	bl	80044bc <adc_dma_enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adc_result = adc_get_result_average(10);     /* The ADC results are obtained by mean filtering */
 80049bc:	200a      	movs	r0, #10
 80049be:	f7ff fdc7 	bl	8004550 <adc_get_result_average>
 80049c2:	4603      	mov	r3, r0
 80049c4:	80fb      	strh	r3, [r7, #6]
	  lcd_show_xnum(134, 110, adc_result, 5, 16, 0, BLUE);
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	231f      	movs	r3, #31
 80049ca:	9302      	str	r3, [sp, #8]
 80049cc:	2300      	movs	r3, #0
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	2310      	movs	r3, #16
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	2305      	movs	r3, #5
 80049d6:	216e      	movs	r1, #110	; 0x6e
 80049d8:	2086      	movs	r0, #134	; 0x86
 80049da:	f7ff fbb3 	bl	8004144 <lcd_show_xnum>

	  voltage = (adc_result * 3300) / 4095;                       /* Calculate the actual voltage value (1000 times larger) */
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	f640 42e4 	movw	r2, #3300	; 0xce4
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
 80049e8:	4a25      	ldr	r2, [pc, #148]	; (8004a80 <main+0x188>)
 80049ea:	fb82 1203 	smull	r1, r2, r2, r3
 80049ee:	441a      	add	r2, r3
 80049f0:	12d2      	asrs	r2, r2, #11
 80049f2:	17db      	asrs	r3, r3, #31
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	80bb      	strh	r3, [r7, #4]
	  lcd_show_xnum(134, 130, voltage / 1000, 1, 16, 0, BLUE);
 80049f8:	88bb      	ldrh	r3, [r7, #4]
 80049fa:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <main+0x18c>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	099b      	lsrs	r3, r3, #6
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	231f      	movs	r3, #31
 8004a08:	9302      	str	r3, [sp, #8]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	2310      	movs	r3, #16
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	2301      	movs	r3, #1
 8004a14:	2182      	movs	r1, #130	; 0x82
 8004a16:	2086      	movs	r0, #134	; 0x86
 8004a18:	f7ff fb94 	bl	8004144 <lcd_show_xnum>
	  lcd_show_xnum(150, 130, voltage % 1000, 3, 16, 0x80, BLUE);
 8004a1c:	88bb      	ldrh	r3, [r7, #4]
 8004a1e:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <main+0x18c>)
 8004a20:	fba2 1203 	umull	r1, r2, r2, r3
 8004a24:	0992      	lsrs	r2, r2, #6
 8004a26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a2a:	fb01 f202 	mul.w	r2, r1, r2
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	231f      	movs	r3, #31
 8004a36:	9302      	str	r3, [sp, #8]
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2303      	movs	r3, #3
 8004a42:	2182      	movs	r1, #130	; 0x82
 8004a44:	2096      	movs	r0, #150	; 0x96
 8004a46:	f7ff fb7d 	bl	8004144 <lcd_show_xnum>

	  LED0_TOGGLE();             /* flashing LED0 indicates that the system is running */
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	480e      	ldr	r0, [pc, #56]	; (8004a88 <main+0x190>)
 8004a4e:	f001 ff9c 	bl	800698a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);   		 /* delay 1000ms */
 8004a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a56:	f000 fb2d 	bl	80050b4 <HAL_Delay>
	  adc_result = adc_get_result_average(10);     /* The ADC results are obtained by mean filtering */
 8004a5a:	e7af      	b.n	80049bc <main+0xc4>
 8004a5c:	20000194 	.word	0x20000194
 8004a60:	4001214c 	.word	0x4001214c
 8004a64:	200000e0 	.word	0x200000e0
 8004a68:	20000098 	.word	0x20000098
 8004a6c:	08008fa8 	.word	0x08008fa8
 8004a70:	08008fb0 	.word	0x08008fb0
 8004a74:	08008fc0 	.word	0x08008fc0
 8004a78:	08008fd0 	.word	0x08008fd0
 8004a7c:	08008fe0 	.word	0x08008fe0
 8004a80:	80080081 	.word	0x80080081
 8004a84:	10624dd3 	.word	0x10624dd3
 8004a88:	40021000 	.word	0x40021000

08004a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b094      	sub	sp, #80	; 0x50
 8004a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a92:	f107 0320 	add.w	r3, r7, #32
 8004a96:	2230      	movs	r2, #48	; 0x30
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f003 ff5c 	bl	8008958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004aa0:	f107 030c 	add.w	r3, r7, #12
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <SystemClock_Config+0xcc>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <SystemClock_Config+0xcc>)
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abe:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac0:	4b25      	ldr	r3, [pc, #148]	; (8004b58 <SystemClock_Config+0xcc>)
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004acc:	2300      	movs	r3, #0
 8004ace:	607b      	str	r3, [r7, #4]
 8004ad0:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <SystemClock_Config+0xd0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a21      	ldr	r2, [pc, #132]	; (8004b5c <SystemClock_Config+0xd0>)
 8004ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b1f      	ldr	r3, [pc, #124]	; (8004b5c <SystemClock_Config+0xd0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004aec:	2301      	movs	r3, #1
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004af0:	2310      	movs	r3, #16
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004af4:	2302      	movs	r3, #2
 8004af6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004af8:	2300      	movs	r3, #0
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004afc:	2308      	movs	r3, #8
 8004afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004b00:	23a8      	movs	r3, #168	; 0xa8
 8004b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b04:	2302      	movs	r3, #2
 8004b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004b08:	2304      	movs	r3, #4
 8004b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b0c:	f107 0320 	add.w	r3, r7, #32
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 ff55 	bl	80069c0 <HAL_RCC_OscConfig>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004b1c:	f000 f820 	bl	8004b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b20:	230f      	movs	r3, #15
 8004b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b24:	2302      	movs	r3, #2
 8004b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004b2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	2105      	movs	r1, #5
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f002 f9b6 	bl	8006eb0 <HAL_RCC_ClockConfig>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004b4a:	f000 f809 	bl	8004b60 <Error_Handler>
  }
}
 8004b4e:	bf00      	nop
 8004b50:	3750      	adds	r7, #80	; 0x50
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40007000 	.word	0x40007000

08004b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b64:	b672      	cpsid	i
}
 8004b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b68:	e7fe      	b.n	8004b68 <Error_Handler+0x8>
	...

08004b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <HAL_MspInit+0x4c>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	4a0f      	ldr	r2, [pc, #60]	; (8004bb8 <HAL_MspInit+0x4c>)
 8004b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b80:	6453      	str	r3, [r2, #68]	; 0x44
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_MspInit+0x4c>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <HAL_MspInit+0x4c>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	4a08      	ldr	r2, [pc, #32]	; (8004bb8 <HAL_MspInit+0x4c>)
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_MspInit+0x4c>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8004baa:	2005      	movs	r0, #5
 8004bac:	f001 f8f4 	bl	8005d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40023800 	.word	0x40023800

08004bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004bc0:	e7fe      	b.n	8004bc0 <NMI_Handler+0x4>

08004bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bc6:	e7fe      	b.n	8004bc6 <HardFault_Handler+0x4>

08004bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bcc:	e7fe      	b.n	8004bcc <MemManage_Handler+0x4>

08004bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bd2:	e7fe      	b.n	8004bd2 <BusFault_Handler+0x4>

08004bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bd8:	e7fe      	b.n	8004bd8 <UsageFault_Handler+0x4>

08004bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bde:	bf00      	nop
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bec:	bf00      	nop
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bfa:	bf00      	nop
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c08:	f000 fa34 	bl	8005074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c0c:	bf00      	nop
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c14:	4802      	ldr	r0, [pc, #8]	; (8004c20 <USART1_IRQHandler+0x10>)
 8004c16:	f002 fc73 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200002cc 	.word	0x200002cc

08004c24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004c28:	4802      	ldr	r0, [pc, #8]	; (8004c34 <DMA2_Stream2_IRQHandler+0x10>)
 8004c2a:	f001 fa8f 	bl	800614c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200000e0 	.word	0x200000e0

08004c38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e00a      	b.n	8004c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c4a:	f3af 8000 	nop.w
 8004c4e:	4601      	mov	r1, r0
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	60ba      	str	r2, [r7, #8]
 8004c56:	b2ca      	uxtb	r2, r1
 8004c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	dbf0      	blt.n	8004c4a <_read+0x12>
  }

  return len;
 8004c68:	687b      	ldr	r3, [r7, #4]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	e009      	b.n	8004c98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	60ba      	str	r2, [r7, #8]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 f889 	bl	8004da4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	3301      	adds	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	dbf1      	blt.n	8004c84 <_write+0x12>
  }
  return len;
 8004ca0:	687b      	ldr	r3, [r7, #4]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <_close>:

int _close(int file)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <_isatty>:

int _isatty(int file)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004cea:	2301      	movs	r3, #1
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d1c:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <_sbrk+0x5c>)
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <_sbrk+0x60>)
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d28:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <_sbrk+0x64>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d30:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <_sbrk+0x64>)
 8004d32:	4a12      	ldr	r2, [pc, #72]	; (8004d7c <_sbrk+0x68>)
 8004d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <_sbrk+0x64>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d207      	bcs.n	8004d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d44:	f003 fe56 	bl	80089f4 <__errno>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	220c      	movs	r2, #12
 8004d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d52:	e009      	b.n	8004d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <_sbrk+0x64>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <_sbrk+0x64>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	4a05      	ldr	r2, [pc, #20]	; (8004d78 <_sbrk+0x64>)
 8004d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d66:	68fb      	ldr	r3, [r7, #12]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20020000 	.word	0x20020000
 8004d74:	00000400 	.word	0x00000400
 8004d78:	200001f8 	.word	0x200001f8
 8004d7c:	20000468 	.word	0x20000468

08004d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <SystemInit+0x20>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	4a05      	ldr	r2, [pc, #20]	; (8004da0 <SystemInit+0x20>)
 8004d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	e000ed00 	.word	0xe000ed00

08004da4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004dac:	1d39      	adds	r1, r7, #4
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	2201      	movs	r2, #1
 8004db4:	4803      	ldr	r0, [pc, #12]	; (8004dc4 <__io_putchar+0x20>)
 8004db6:	f002 faf3 	bl	80073a0 <HAL_UART_Transmit>
	return ch;
 8004dba:	687b      	ldr	r3, [r7, #4]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	200002cc 	.word	0x200002cc

08004dc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004dce:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <MX_USART1_UART_Init+0x58>)
 8004dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004dee:	220c      	movs	r2, #12
 8004df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004df2:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004df8:	4b08      	ldr	r3, [pc, #32]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dfe:	4807      	ldr	r0, [pc, #28]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004e00:	f002 fa7e 	bl	8007300 <HAL_UART_Init>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004e0a:	f7ff fea9 	bl	8004b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* This function enables the receive interrupt: flag UART_IT_RXNE and sets
   * the receive buffer and the maximum amount of data the receive buffer can receive */
   HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8004e0e:	2201      	movs	r2, #1
 8004e10:	4904      	ldr	r1, [pc, #16]	; (8004e24 <MX_USART1_UART_Init+0x5c>)
 8004e12:	4802      	ldr	r0, [pc, #8]	; (8004e1c <MX_USART1_UART_Init+0x54>)
 8004e14:	f002 fb4f 	bl	80074b6 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8004e18:	bf00      	nop
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	200002cc 	.word	0x200002cc
 8004e20:	40011000 	.word	0x40011000
 8004e24:	200002c8 	.word	0x200002c8

08004e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e30:	f107 0314 	add.w	r3, r7, #20
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_UART_MspInit+0x94>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d134      	bne.n	8004eb4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ec0 <HAL_UART_MspInit+0x98>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <HAL_UART_MspInit+0x98>)
 8004e54:	f043 0310 	orr.w	r3, r3, #16
 8004e58:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5a:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_UART_MspInit+0x98>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <HAL_UART_MspInit+0x98>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	4a14      	ldr	r2, [pc, #80]	; (8004ec0 <HAL_UART_MspInit+0x98>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6313      	str	r3, [r2, #48]	; 0x30
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <HAL_UART_MspInit+0x98>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e90:	2303      	movs	r3, #3
 8004e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e94:	2307      	movs	r3, #7
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e98:	f107 0314 	add.w	r3, r7, #20
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4809      	ldr	r0, [pc, #36]	; (8004ec4 <HAL_UART_MspInit+0x9c>)
 8004ea0:	f001 fbbe 	bl	8006620 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 2);
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	2025      	movs	r0, #37	; 0x25
 8004eaa:	f000 ff80 	bl	8005dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004eae:	2025      	movs	r0, #37	; 0x25
 8004eb0:	f000 ff99 	bl	8005de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	3728      	adds	r7, #40	; 0x28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40011000 	.word	0x40011000
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40020000 	.word	0x40020000

08004ec8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)                      /* if it is serial port USART1 */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a24      	ldr	r2, [pc, #144]	; (8004f68 <HAL_UART_RxCpltCallback+0xa0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d142      	bne.n	8004f60 <HAL_UART_RxCpltCallback+0x98>
    {
        if ((g_usart_rx_sta & 0x8000) == 0)             /* receipt not completed */
 8004eda:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b21b      	sxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	db38      	blt.n	8004f56 <HAL_UART_RxCpltCallback+0x8e>
        {
            if (g_usart_rx_sta & 0x4000)                /* 0x0d has been received (the Enter key). */
 8004ee4:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d011      	beq.n	8004f14 <HAL_UART_RxCpltCallback+0x4c>
            {
                if (g_rx_buffer[0] != 0x0a)             /* this is not 0x0a (that is, not a newline key) */
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <HAL_UART_RxCpltCallback+0xa8>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b0a      	cmp	r3, #10
 8004ef6:	d003      	beq.n	8004f00 <HAL_UART_RxCpltCallback+0x38>
                {
                    g_usart_rx_sta = 0;                 /* receive error,restart */
 8004ef8:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	801a      	strh	r2, [r3, #0]
 8004efe:	e02a      	b.n	8004f56 <HAL_UART_RxCpltCallback+0x8e>
                }
                else                                    /* it gets 0x0a (the newline key) */
                {
                    g_usart_rx_sta |= 0x8000;           /* the reception is complete */
 8004f00:	4b1a      	ldr	r3, [pc, #104]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	e020      	b.n	8004f56 <HAL_UART_RxCpltCallback+0x8e>
                }
            }
            else                                        /* 0X0d has not been reached yet (the Enter key) */
            {
                if (g_rx_buffer[0] == 0x0d)
 8004f14:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <HAL_UART_RxCpltCallback+0xa8>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b0d      	cmp	r3, #13
 8004f1a:	d107      	bne.n	8004f2c <HAL_UART_RxCpltCallback+0x64>
                    g_usart_rx_sta |= 0x4000;
 8004f1c:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004f28:	801a      	strh	r2, [r3, #0]
 8004f2a:	e014      	b.n	8004f56 <HAL_UART_RxCpltCallback+0x8e>
                else
                {
                    g_usart_rx_buf[g_usart_rx_sta & 0X3FFF] = g_rx_buffer[0];
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004f34:	4a0e      	ldr	r2, [pc, #56]	; (8004f70 <HAL_UART_RxCpltCallback+0xa8>)
 8004f36:	7811      	ldrb	r1, [r2, #0]
 8004f38:	4a0e      	ldr	r2, [pc, #56]	; (8004f74 <HAL_UART_RxCpltCallback+0xac>)
 8004f3a:	54d1      	strb	r1, [r2, r3]
                    g_usart_rx_sta++;
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	3301      	adds	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004f46:	801a      	strh	r2, [r3, #0]

                    if (g_usart_rx_sta > (USART_REC_LEN - 1))
 8004f48:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	2bc7      	cmp	r3, #199	; 0xc7
 8004f4e:	d902      	bls.n	8004f56 <HAL_UART_RxCpltCallback+0x8e>
                    {
                        g_usart_rx_sta = 0;             /* receive data error, start receive again */
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_UART_RxCpltCallback+0xa4>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8004f56:	2201      	movs	r2, #1
 8004f58:	4905      	ldr	r1, [pc, #20]	; (8004f70 <HAL_UART_RxCpltCallback+0xa8>)
 8004f5a:	4807      	ldr	r0, [pc, #28]	; (8004f78 <HAL_UART_RxCpltCallback+0xb0>)
 8004f5c:	f002 faab 	bl	80074b6 <HAL_UART_Receive_IT>
    }
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40011000 	.word	0x40011000
 8004f6c:	200002c4 	.word	0x200002c4
 8004f70:	200002c8 	.word	0x200002c8
 8004f74:	200001fc 	.word	0x200001fc
 8004f78:	200002cc 	.word	0x200002cc

08004f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004f80:	f7ff fefe 	bl	8004d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f84:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f86:	490d      	ldr	r1, [pc, #52]	; (8004fbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f88:	4a0d      	ldr	r2, [pc, #52]	; (8004fc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f8c:	e002      	b.n	8004f94 <LoopCopyDataInit>

08004f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f92:	3304      	adds	r3, #4

08004f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f98:	d3f9      	bcc.n	8004f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f9c:	4c0a      	ldr	r4, [pc, #40]	; (8004fc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fa0:	e001      	b.n	8004fa6 <LoopFillZerobss>

08004fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fa4:	3204      	adds	r2, #4

08004fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fa8:	d3fb      	bcc.n	8004fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004faa:	f003 fd29 	bl	8008a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fae:	f7ff fca3 	bl	80048f8 <main>
  bx  lr    
 8004fb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004fb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fbc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8004fc0:	0800bfa4 	.word	0x0800bfa4
  ldr r2, =_sbss
 8004fc4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8004fc8:	20000464 	.word	0x20000464

08004fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fcc:	e7fe      	b.n	8004fcc <ADC_IRQHandler>
	...

08004fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <HAL_Init+0x40>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <HAL_Init+0x40>)
 8004fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <HAL_Init+0x40>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <HAL_Init+0x40>)
 8004fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fec:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_Init+0x40>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a07      	ldr	r2, [pc, #28]	; (8005010 <HAL_Init+0x40>)
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ff8:	2003      	movs	r0, #3
 8004ffa:	f000 fecd 	bl	8005d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ffe:	2000      	movs	r0, #0
 8005000:	f000 f808 	bl	8005014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005004:	f7ff fdb2 	bl	8004b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40023c00 	.word	0x40023c00

08005014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800501c:	4b12      	ldr	r3, [pc, #72]	; (8005068 <HAL_InitTick+0x54>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_InitTick+0x58>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	4619      	mov	r1, r3
 8005026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800502a:	fbb3 f3f1 	udiv	r3, r3, r1
 800502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fee5 	bl	8005e02 <HAL_SYSTICK_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e00e      	b.n	8005060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b0f      	cmp	r3, #15
 8005046:	d80a      	bhi.n	800505e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005048:	2200      	movs	r2, #0
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	f000 fead 	bl	8005dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005054:	4a06      	ldr	r2, [pc, #24]	; (8005070 <HAL_InitTick+0x5c>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000004 	.word	0x20000004
 800506c:	2000000c 	.word	0x2000000c
 8005070:	20000008 	.word	0x20000008

08005074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_IncTick+0x20>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_IncTick+0x24>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4413      	add	r3, r2
 8005084:	4a04      	ldr	r2, [pc, #16]	; (8005098 <HAL_IncTick+0x24>)
 8005086:	6013      	str	r3, [r2, #0]
}
 8005088:	bf00      	nop
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c
 8005098:	20000314 	.word	0x20000314

0800509c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return uwTick;
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <HAL_GetTick+0x14>)
 80050a2:	681b      	ldr	r3, [r3, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000314 	.word	0x20000314

080050b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050bc:	f7ff ffee 	bl	800509c <HAL_GetTick>
 80050c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d005      	beq.n	80050da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <HAL_Delay+0x44>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050da:	bf00      	nop
 80050dc:	f7ff ffde 	bl	800509c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d8f7      	bhi.n	80050dc <HAL_Delay+0x28>
  {
  }
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	2000000c 	.word	0x2000000c

080050fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e033      	b.n	800517a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff f956 	bl	80043cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	d118      	bne.n	800516c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005142:	f023 0302 	bic.w	r3, r3, #2
 8005146:	f043 0202 	orr.w	r2, r3, #2
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fbd4 	bl	80058fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	f043 0201 	orr.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
 800516a:	e001      	b.n	8005170 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_ADC_Start+0x1a>
 800519a:	2302      	movs	r3, #2
 800519c:	e0b2      	b.n	8005304 <HAL_ADC_Start+0x180>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d018      	beq.n	80051e6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051c4:	4b52      	ldr	r3, [pc, #328]	; (8005310 <HAL_ADC_Start+0x18c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a52      	ldr	r2, [pc, #328]	; (8005314 <HAL_ADC_Start+0x190>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	0c9a      	lsrs	r2, r3, #18
 80051d0:	4613      	mov	r3, r2
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	4413      	add	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80051d8:	e002      	b.n	80051e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3b01      	subs	r3, #1
 80051de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f9      	bne.n	80051da <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d17a      	bne.n	80052ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800521e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005232:	d106      	bne.n	8005242 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	f023 0206 	bic.w	r2, r3, #6
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	645a      	str	r2, [r3, #68]	; 0x44
 8005240:	e002      	b.n	8005248 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005250:	4b31      	ldr	r3, [pc, #196]	; (8005318 <HAL_ADC_Start+0x194>)
 8005252:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800525c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12a      	bne.n	80052c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2b      	ldr	r2, [pc, #172]	; (800531c <HAL_ADC_Start+0x198>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d015      	beq.n	80052a0 <HAL_ADC_Start+0x11c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a29      	ldr	r2, [pc, #164]	; (8005320 <HAL_ADC_Start+0x19c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d105      	bne.n	800528a <HAL_ADC_Start+0x106>
 800527e:	4b26      	ldr	r3, [pc, #152]	; (8005318 <HAL_ADC_Start+0x194>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a25      	ldr	r2, [pc, #148]	; (8005324 <HAL_ADC_Start+0x1a0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d136      	bne.n	8005302 <HAL_ADC_Start+0x17e>
 8005294:	4b20      	ldr	r3, [pc, #128]	; (8005318 <HAL_ADC_Start+0x194>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	d130      	bne.n	8005302 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d129      	bne.n	8005302 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052bc:	609a      	str	r2, [r3, #8]
 80052be:	e020      	b.n	8005302 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_ADC_Start+0x198>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d11b      	bne.n	8005302 <HAL_ADC_Start+0x17e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d114      	bne.n	8005302 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	e00b      	b.n	8005302 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f043 0210 	orr.w	r2, r3, #16
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	f043 0201 	orr.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000004 	.word	0x20000004
 8005314:	431bde83 	.word	0x431bde83
 8005318:	40012300 	.word	0x40012300
 800531c:	40012000 	.word	0x40012000
 8005320:	40012100 	.word	0x40012100
 8005324:	40012200 	.word	0x40012200

08005328 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005344:	d113      	bne.n	800536e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005354:	d10b      	bne.n	800536e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e063      	b.n	8005436 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800536e:	f7ff fe95 	bl	800509c <HAL_GetTick>
 8005372:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005374:	e021      	b.n	80053ba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d01d      	beq.n	80053ba <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <HAL_ADC_PollForConversion+0x6c>
 8005384:	f7ff fe8a 	bl	800509c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d212      	bcs.n	80053ba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d00b      	beq.n	80053ba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f043 0204 	orr.w	r2, r3, #4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e03d      	b.n	8005436 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d1d6      	bne.n	8005376 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0212 	mvn.w	r2, #18
 80053d0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d123      	bne.n	8005434 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11f      	bne.n	8005434 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d006      	beq.n	8005410 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800540c:	2b00      	cmp	r3, #0
 800540e:	d111      	bne.n	8005434 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	f043 0201 	orr.w	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_ADC_Start_DMA+0x1e>
 800545a:	2302      	movs	r3, #2
 800545c:	e0e9      	b.n	8005632 <HAL_ADC_Start_DMA+0x1f2>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b01      	cmp	r3, #1
 8005472:	d018      	beq.n	80054a6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005484:	4b6d      	ldr	r3, [pc, #436]	; (800563c <HAL_ADC_Start_DMA+0x1fc>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a6d      	ldr	r2, [pc, #436]	; (8005640 <HAL_ADC_Start_DMA+0x200>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0c9a      	lsrs	r2, r3, #18
 8005490:	4613      	mov	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	4413      	add	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005498:	e002      	b.n	80054a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3b01      	subs	r3, #1
 800549e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f9      	bne.n	800549a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b4:	d107      	bne.n	80054c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054c4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	f040 80a1 	bne.w	8005618 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005500:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005514:	d106      	bne.n	8005524 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551a:	f023 0206 	bic.w	r2, r3, #6
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	645a      	str	r2, [r3, #68]	; 0x44
 8005522:	e002      	b.n	800552a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005532:	4b44      	ldr	r3, [pc, #272]	; (8005644 <HAL_ADC_Start_DMA+0x204>)
 8005534:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	4a43      	ldr	r2, [pc, #268]	; (8005648 <HAL_ADC_Start_DMA+0x208>)
 800553c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	4a42      	ldr	r2, [pc, #264]	; (800564c <HAL_ADC_Start_DMA+0x20c>)
 8005544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	4a41      	ldr	r2, [pc, #260]	; (8005650 <HAL_ADC_Start_DMA+0x210>)
 800554c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005556:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005566:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005576:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	334c      	adds	r3, #76	; 0x4c
 8005582:	4619      	mov	r1, r3
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f000 fcf6 	bl	8005f78 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	2b00      	cmp	r3, #0
 8005596:	d12a      	bne.n	80055ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2d      	ldr	r2, [pc, #180]	; (8005654 <HAL_ADC_Start_DMA+0x214>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d015      	beq.n	80055ce <HAL_ADC_Start_DMA+0x18e>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2c      	ldr	r2, [pc, #176]	; (8005658 <HAL_ADC_Start_DMA+0x218>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d105      	bne.n	80055b8 <HAL_ADC_Start_DMA+0x178>
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <HAL_ADC_Start_DMA+0x204>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a27      	ldr	r2, [pc, #156]	; (800565c <HAL_ADC_Start_DMA+0x21c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d136      	bne.n	8005630 <HAL_ADC_Start_DMA+0x1f0>
 80055c2:	4b20      	ldr	r3, [pc, #128]	; (8005644 <HAL_ADC_Start_DMA+0x204>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d130      	bne.n	8005630 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d129      	bne.n	8005630 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	e020      	b.n	8005630 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a18      	ldr	r2, [pc, #96]	; (8005654 <HAL_ADC_Start_DMA+0x214>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d11b      	bne.n	8005630 <HAL_ADC_Start_DMA+0x1f0>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d114      	bne.n	8005630 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005614:	609a      	str	r2, [r3, #8]
 8005616:	e00b      	b.n	8005630 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	f043 0210 	orr.w	r2, r3, #16
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	f043 0201 	orr.w	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000004 	.word	0x20000004
 8005640:	431bde83 	.word	0x431bde83
 8005644:	40012300 	.word	0x40012300
 8005648:	08005af5 	.word	0x08005af5
 800564c:	08005baf 	.word	0x08005baf
 8005650:	08005bcb 	.word	0x08005bcb
 8005654:	40012000 	.word	0x40012000
 8005658:	40012100 	.word	0x40012100
 800565c:	40012200 	.word	0x40012200

08005660 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x1c>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e105      	b.n	80058e0 <HAL_ADC_ConfigChannel+0x228>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b09      	cmp	r3, #9
 80056e2:	d925      	bls.n	8005730 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68d9      	ldr	r1, [r3, #12]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	4613      	mov	r3, r2
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	3b1e      	subs	r3, #30
 80056fa:	2207      	movs	r2, #7
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	43da      	mvns	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	400a      	ands	r2, r1
 8005708:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68d9      	ldr	r1, [r3, #12]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	4618      	mov	r0, r3
 800571c:	4603      	mov	r3, r0
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	4403      	add	r3, r0
 8005722:	3b1e      	subs	r3, #30
 8005724:	409a      	lsls	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	e022      	b.n	8005776 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6919      	ldr	r1, [r3, #16]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	4613      	mov	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	4413      	add	r3, r2
 8005744:	2207      	movs	r2, #7
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43da      	mvns	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	400a      	ands	r2, r1
 8005752:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6919      	ldr	r1, [r3, #16]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	4618      	mov	r0, r3
 8005766:	4603      	mov	r3, r0
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4403      	add	r3, r0
 800576c:	409a      	lsls	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b06      	cmp	r3, #6
 800577c:	d824      	bhi.n	80057c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	3b05      	subs	r3, #5
 8005790:	221f      	movs	r2, #31
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43da      	mvns	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	400a      	ands	r2, r1
 800579e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	4618      	mov	r0, r3
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	3b05      	subs	r3, #5
 80057ba:	fa00 f203 	lsl.w	r2, r0, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	635a      	str	r2, [r3, #52]	; 0x34
 80057c6:	e04c      	b.n	8005862 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	d824      	bhi.n	800581a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	3b23      	subs	r3, #35	; 0x23
 80057e2:	221f      	movs	r2, #31
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	43da      	mvns	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	400a      	ands	r2, r1
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	4618      	mov	r0, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	3b23      	subs	r3, #35	; 0x23
 800580c:	fa00 f203 	lsl.w	r2, r0, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
 8005818:	e023      	b.n	8005862 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	3b41      	subs	r3, #65	; 0x41
 800582c:	221f      	movs	r2, #31
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43da      	mvns	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	400a      	ands	r2, r1
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	4618      	mov	r0, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	3b41      	subs	r3, #65	; 0x41
 8005856:	fa00 f203 	lsl.w	r2, r0, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005862:	4b22      	ldr	r3, [pc, #136]	; (80058ec <HAL_ADC_ConfigChannel+0x234>)
 8005864:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <HAL_ADC_ConfigChannel+0x238>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d109      	bne.n	8005884 <HAL_ADC_ConfigChannel+0x1cc>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b12      	cmp	r3, #18
 8005876:	d105      	bne.n	8005884 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <HAL_ADC_ConfigChannel+0x238>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d123      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x21e>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b10      	cmp	r3, #16
 8005894:	d003      	beq.n	800589e <HAL_ADC_ConfigChannel+0x1e6>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b11      	cmp	r3, #17
 800589c:	d11b      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d111      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <HAL_ADC_ConfigChannel+0x23c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a10      	ldr	r2, [pc, #64]	; (80058f8 <HAL_ADC_ConfigChannel+0x240>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	0c9a      	lsrs	r2, r3, #18
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80058c8:	e002      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f9      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	40012300 	.word	0x40012300
 80058f0:	40012000 	.word	0x40012000
 80058f4:	20000004 	.word	0x20000004
 80058f8:	431bde83 	.word	0x431bde83

080058fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005904:	4b79      	ldr	r3, [pc, #484]	; (8005aec <ADC_Init+0x1f0>)
 8005906:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	431a      	orrs	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005930:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	021a      	lsls	r2, r3, #8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6859      	ldr	r1, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6899      	ldr	r1, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	4a58      	ldr	r2, [pc, #352]	; (8005af0 <ADC_Init+0x1f4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d022      	beq.n	80059da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6899      	ldr	r1, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80059c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6899      	ldr	r1, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	609a      	str	r2, [r3, #8]
 80059d8:	e00f      	b.n	80059fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80059f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0202 	bic.w	r2, r2, #2
 8005a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6899      	ldr	r1, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7e1b      	ldrb	r3, [r3, #24]
 8005a14:	005a      	lsls	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01b      	beq.n	8005a60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005a46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6859      	ldr	r1, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	3b01      	subs	r3, #1
 8005a54:	035a      	lsls	r2, r3, #13
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	e007      	b.n	8005a70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	051a      	lsls	r2, r3, #20
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6899      	ldr	r1, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ab2:	025a      	lsls	r2, r3, #9
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6899      	ldr	r1, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	029a      	lsls	r2, r3, #10
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	609a      	str	r2, [r3, #8]
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40012300 	.word	0x40012300
 8005af0:	0f000001 	.word	0x0f000001

08005af4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d13c      	bne.n	8005b88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d12b      	bne.n	8005b80 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d127      	bne.n	8005b80 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d006      	beq.n	8005b4c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d119      	bne.n	8005b80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0220 	bic.w	r2, r2, #32
 8005b5a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	f043 0201 	orr.w	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff fd7a 	bl	800567a <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b86:	e00e      	b.n	8005ba6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff fd84 	bl	80056a2 <HAL_ADC_ErrorCallback>
}
 8005b9a:	e004      	b.n	8005ba6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff fd66 	bl	800568e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2240      	movs	r2, #64	; 0x40
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	f043 0204 	orr.w	r2, r3, #4
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff fd59 	bl	80056a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <__NVIC_SetPriorityGrouping+0x44>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c14:	4013      	ands	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c2a:	4a04      	ldr	r2, [pc, #16]	; (8005c3c <__NVIC_SetPriorityGrouping+0x44>)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	60d3      	str	r3, [r2, #12]
}
 8005c30:	bf00      	nop
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	e000ed00 	.word	0xe000ed00

08005c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c44:	4b04      	ldr	r3, [pc, #16]	; (8005c58 <__NVIC_GetPriorityGrouping+0x18>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	0a1b      	lsrs	r3, r3, #8
 8005c4a:	f003 0307 	and.w	r3, r3, #7
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	e000ed00 	.word	0xe000ed00

08005c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	db0b      	blt.n	8005c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	f003 021f 	and.w	r2, r3, #31
 8005c74:	4907      	ldr	r1, [pc, #28]	; (8005c94 <__NVIC_EnableIRQ+0x38>)
 8005c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	e000e100 	.word	0xe000e100

08005c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	6039      	str	r1, [r7, #0]
 8005ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	db0a      	blt.n	8005cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	490c      	ldr	r1, [pc, #48]	; (8005ce4 <__NVIC_SetPriority+0x4c>)
 8005cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb6:	0112      	lsls	r2, r2, #4
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	440b      	add	r3, r1
 8005cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cc0:	e00a      	b.n	8005cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	4908      	ldr	r1, [pc, #32]	; (8005ce8 <__NVIC_SetPriority+0x50>)
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	3b04      	subs	r3, #4
 8005cd0:	0112      	lsls	r2, r2, #4
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	761a      	strb	r2, [r3, #24]
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	e000e100 	.word	0xe000e100
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f1c3 0307 	rsb	r3, r3, #7
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	bf28      	it	cs
 8005d0a:	2304      	movcs	r3, #4
 8005d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	3304      	adds	r3, #4
 8005d12:	2b06      	cmp	r3, #6
 8005d14:	d902      	bls.n	8005d1c <NVIC_EncodePriority+0x30>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	3b03      	subs	r3, #3
 8005d1a:	e000      	b.n	8005d1e <NVIC_EncodePriority+0x32>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43da      	mvns	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	401a      	ands	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d34:	f04f 31ff 	mov.w	r1, #4294967295
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3e:	43d9      	mvns	r1, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d44:	4313      	orrs	r3, r2
         );
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3724      	adds	r7, #36	; 0x24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d64:	d301      	bcc.n	8005d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d66:	2301      	movs	r3, #1
 8005d68:	e00f      	b.n	8005d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d6a:	4a0a      	ldr	r2, [pc, #40]	; (8005d94 <SysTick_Config+0x40>)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d72:	210f      	movs	r1, #15
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	f7ff ff8e 	bl	8005c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <SysTick_Config+0x40>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d82:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <SysTick_Config+0x40>)
 8005d84:	2207      	movs	r2, #7
 8005d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	e000e010 	.word	0xe000e010

08005d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff ff29 	bl	8005bf8 <__NVIC_SetPriorityGrouping>
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	4603      	mov	r3, r0
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dc0:	f7ff ff3e 	bl	8005c40 <__NVIC_GetPriorityGrouping>
 8005dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68b9      	ldr	r1, [r7, #8]
 8005dca:	6978      	ldr	r0, [r7, #20]
 8005dcc:	f7ff ff8e 	bl	8005cec <NVIC_EncodePriority>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff ff5d 	bl	8005c98 <__NVIC_SetPriority>
}
 8005dde:	bf00      	nop
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	4603      	mov	r3, r0
 8005dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff ff31 	bl	8005c5c <__NVIC_EnableIRQ>
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff ffa2 	bl	8005d54 <SysTick_Config>
 8005e10:	4603      	mov	r3, r0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e28:	f7ff f938 	bl	800509c <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e099      	b.n	8005f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0201 	bic.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e58:	e00f      	b.n	8005e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e5a:	f7ff f91f 	bl	800509c <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	d908      	bls.n	8005e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2203      	movs	r2, #3
 8005e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e078      	b.n	8005f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e8      	bne.n	8005e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4b38      	ldr	r3, [pc, #224]	; (8005f74 <HAL_DMA_Init+0x158>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d107      	bne.n	8005ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	4313      	orrs	r3, r2
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0307 	bic.w	r3, r3, #7
 8005efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d117      	bne.n	8005f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00e      	beq.n	8005f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fb01 	bl	8006528 <DMA_CheckFifoParam>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2240      	movs	r2, #64	; 0x40
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e016      	b.n	8005f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fab8 	bl	80064bc <DMA_CalcBaseAndBitshift>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f54:	223f      	movs	r2, #63	; 0x3f
 8005f56:	409a      	lsls	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	f010803f 	.word	0xf010803f

08005f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_DMA_Start_IT+0x26>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e040      	b.n	8006020 <HAL_DMA_Start_IT+0xa8>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d12f      	bne.n	8006012 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fa4a 	bl	8006460 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd0:	223f      	movs	r2, #63	; 0x3f
 8005fd2:	409a      	lsls	r2, r3
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0216 	orr.w	r2, r2, #22
 8005fe6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0208 	orr.w	r2, r2, #8
 8005ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e005      	b.n	800601e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800601a:	2302      	movs	r3, #2
 800601c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800601e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006034:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006036:	f7ff f831 	bl	800509c <HAL_GetTick>
 800603a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d008      	beq.n	800605a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e052      	b.n	8006100 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0216 	bic.w	r2, r2, #22
 8006068:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006078:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d103      	bne.n	800608a <HAL_DMA_Abort+0x62>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0208 	bic.w	r2, r2, #8
 8006098:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060aa:	e013      	b.n	80060d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ac:	f7fe fff6 	bl	800509c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	d90c      	bls.n	80060d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2203      	movs	r2, #3
 80060c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e015      	b.n	8006100 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e4      	bne.n	80060ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e6:	223f      	movs	r2, #63	; 0x3f
 80060e8:	409a      	lsls	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d004      	beq.n	8006126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2280      	movs	r2, #128	; 0x80
 8006120:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e00c      	b.n	8006140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2205      	movs	r2, #5
 800612a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006158:	4b8e      	ldr	r3, [pc, #568]	; (8006394 <HAL_DMA_IRQHandler+0x248>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a8e      	ldr	r2, [pc, #568]	; (8006398 <HAL_DMA_IRQHandler+0x24c>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	0a9b      	lsrs	r3, r3, #10
 8006164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006176:	2208      	movs	r2, #8
 8006178:	409a      	lsls	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4013      	ands	r3, r2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01a      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d013      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0204 	bic.w	r2, r2, #4
 800619e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a4:	2208      	movs	r2, #8
 80061a6:	409a      	lsls	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0201 	orr.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	2201      	movs	r2, #1
 80061be:	409a      	lsls	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4013      	ands	r3, r2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d012      	beq.n	80061ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00b      	beq.n	80061ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	2201      	movs	r2, #1
 80061dc:	409a      	lsls	r2, r3
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	f043 0202 	orr.w	r2, r3, #2
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f2:	2204      	movs	r2, #4
 80061f4:	409a      	lsls	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d012      	beq.n	8006224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006210:	2204      	movs	r2, #4
 8006212:	409a      	lsls	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	f043 0204 	orr.w	r2, r3, #4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006228:	2210      	movs	r2, #16
 800622a:	409a      	lsls	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d043      	beq.n	80062bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d03c      	beq.n	80062bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006246:	2210      	movs	r2, #16
 8006248:	409a      	lsls	r2, r3
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d018      	beq.n	800628e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d108      	bne.n	800627c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d024      	beq.n	80062bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
 800627a:	e01f      	b.n	80062bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01b      	beq.n	80062bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
 800628c:	e016      	b.n	80062bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006298:	2b00      	cmp	r3, #0
 800629a:	d107      	bne.n	80062ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0208 	bic.w	r2, r2, #8
 80062aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c0:	2220      	movs	r2, #32
 80062c2:	409a      	lsls	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 808f 	beq.w	80063ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8087 	beq.w	80063ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e2:	2220      	movs	r2, #32
 80062e4:	409a      	lsls	r2, r3
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b05      	cmp	r3, #5
 80062f4:	d136      	bne.n	8006364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0216 	bic.w	r2, r2, #22
 8006304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695a      	ldr	r2, [r3, #20]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d103      	bne.n	8006326 <HAL_DMA_IRQHandler+0x1da>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0208 	bic.w	r2, r2, #8
 8006334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633a:	223f      	movs	r2, #63	; 0x3f
 800633c:	409a      	lsls	r2, r3
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006356:	2b00      	cmp	r3, #0
 8006358:	d07e      	beq.n	8006458 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
        }
        return;
 8006362:	e079      	b.n	8006458 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01d      	beq.n	80063ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10d      	bne.n	800639c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006384:	2b00      	cmp	r3, #0
 8006386:	d031      	beq.n	80063ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
 8006390:	e02c      	b.n	80063ec <HAL_DMA_IRQHandler+0x2a0>
 8006392:	bf00      	nop
 8006394:	20000004 	.word	0x20000004
 8006398:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d023      	beq.n	80063ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
 80063ac:	e01e      	b.n	80063ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10f      	bne.n	80063dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0210 	bic.w	r2, r2, #16
 80063ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d032      	beq.n	800645a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d022      	beq.n	8006446 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2205      	movs	r2, #5
 8006404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0201 	bic.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	3301      	adds	r3, #1
 800641c:	60bb      	str	r3, [r7, #8]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	429a      	cmp	r2, r3
 8006422:	d307      	bcc.n	8006434 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f2      	bne.n	8006418 <HAL_DMA_IRQHandler+0x2cc>
 8006432:	e000      	b.n	8006436 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006434:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3
 8006456:	e000      	b.n	800645a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006458:	bf00      	nop
    }
  }
}
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800647c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d108      	bne.n	80064a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800649e:	e007      	b.n	80064b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	60da      	str	r2, [r3, #12]
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	3b10      	subs	r3, #16
 80064cc:	4a14      	ldr	r2, [pc, #80]	; (8006520 <DMA_CalcBaseAndBitshift+0x64>)
 80064ce:	fba2 2303 	umull	r2, r3, r2, r3
 80064d2:	091b      	lsrs	r3, r3, #4
 80064d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80064d6:	4a13      	ldr	r2, [pc, #76]	; (8006524 <DMA_CalcBaseAndBitshift+0x68>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d909      	bls.n	80064fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80064f2:	f023 0303 	bic.w	r3, r3, #3
 80064f6:	1d1a      	adds	r2, r3, #4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	659a      	str	r2, [r3, #88]	; 0x58
 80064fc:	e007      	b.n	800650e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	aaaaaaab 	.word	0xaaaaaaab
 8006524:	0800bf8c 	.word	0x0800bf8c

08006528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d11f      	bne.n	8006582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d856      	bhi.n	80065f6 <DMA_CheckFifoParam+0xce>
 8006548:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <DMA_CheckFifoParam+0x28>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006561 	.word	0x08006561
 8006554:	08006573 	.word	0x08006573
 8006558:	08006561 	.word	0x08006561
 800655c:	080065f7 	.word	0x080065f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d046      	beq.n	80065fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006570:	e043      	b.n	80065fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800657a:	d140      	bne.n	80065fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006580:	e03d      	b.n	80065fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658a:	d121      	bne.n	80065d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b03      	cmp	r3, #3
 8006590:	d837      	bhi.n	8006602 <DMA_CheckFifoParam+0xda>
 8006592:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <DMA_CheckFifoParam+0x70>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065af 	.word	0x080065af
 80065a0:	080065a9 	.word	0x080065a9
 80065a4:	080065c1 	.word	0x080065c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	73fb      	strb	r3, [r7, #15]
      break;
 80065ac:	e030      	b.n	8006610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d025      	beq.n	8006606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065be:	e022      	b.n	8006606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065c8:	d11f      	bne.n	800660a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80065ce:	e01c      	b.n	800660a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d903      	bls.n	80065de <DMA_CheckFifoParam+0xb6>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d003      	beq.n	80065e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80065dc:	e018      	b.n	8006610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	73fb      	strb	r3, [r7, #15]
      break;
 80065e2:	e015      	b.n	8006610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00e      	beq.n	800660e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
      break;
 80065f4:	e00b      	b.n	800660e <DMA_CheckFifoParam+0xe6>
      break;
 80065f6:	bf00      	nop
 80065f8:	e00a      	b.n	8006610 <DMA_CheckFifoParam+0xe8>
      break;
 80065fa:	bf00      	nop
 80065fc:	e008      	b.n	8006610 <DMA_CheckFifoParam+0xe8>
      break;
 80065fe:	bf00      	nop
 8006600:	e006      	b.n	8006610 <DMA_CheckFifoParam+0xe8>
      break;
 8006602:	bf00      	nop
 8006604:	e004      	b.n	8006610 <DMA_CheckFifoParam+0xe8>
      break;
 8006606:	bf00      	nop
 8006608:	e002      	b.n	8006610 <DMA_CheckFifoParam+0xe8>
      break;   
 800660a:	bf00      	nop
 800660c:	e000      	b.n	8006610 <DMA_CheckFifoParam+0xe8>
      break;
 800660e:	bf00      	nop
    }
  } 
  
  return status; 
 8006610:	7bfb      	ldrb	r3, [r7, #15]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop

08006620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006620:	b480      	push	{r7}
 8006622:	b089      	sub	sp, #36	; 0x24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800662e:	2300      	movs	r3, #0
 8006630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006632:	2300      	movs	r3, #0
 8006634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	e16b      	b.n	8006914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800663c:	2201      	movs	r2, #1
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4013      	ands	r3, r2
 800664e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	429a      	cmp	r2, r3
 8006656:	f040 815a 	bne.w	800690e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	2b01      	cmp	r3, #1
 8006664:	d005      	beq.n	8006672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800666e:	2b02      	cmp	r3, #2
 8006670:	d130      	bne.n	80066d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	2203      	movs	r2, #3
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	43db      	mvns	r3, r3
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	4013      	ands	r3, r2
 8006688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	4313      	orrs	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066a8:	2201      	movs	r2, #1
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	43db      	mvns	r3, r3
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	4013      	ands	r3, r2
 80066b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	f003 0201 	and.w	r2, r3, #1
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	fa02 f303 	lsl.w	r3, r2, r3
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d017      	beq.n	8006710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	2203      	movs	r2, #3
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	43db      	mvns	r3, r3
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	4013      	ands	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	4313      	orrs	r3, r2
 8006708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d123      	bne.n	8006764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	08da      	lsrs	r2, r3, #3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3208      	adds	r2, #8
 8006724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	220f      	movs	r2, #15
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	43db      	mvns	r3, r3
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	4013      	ands	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	4313      	orrs	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	08da      	lsrs	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3208      	adds	r2, #8
 800675e:	69b9      	ldr	r1, [r7, #24]
 8006760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	2203      	movs	r2, #3
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4013      	ands	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 0203 	and.w	r2, r3, #3
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4313      	orrs	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80b4 	beq.w	800690e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	4b60      	ldr	r3, [pc, #384]	; (800692c <HAL_GPIO_Init+0x30c>)
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	4a5f      	ldr	r2, [pc, #380]	; (800692c <HAL_GPIO_Init+0x30c>)
 80067b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067b4:	6453      	str	r3, [r2, #68]	; 0x44
 80067b6:	4b5d      	ldr	r3, [pc, #372]	; (800692c <HAL_GPIO_Init+0x30c>)
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067c2:	4a5b      	ldr	r2, [pc, #364]	; (8006930 <HAL_GPIO_Init+0x310>)
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	089b      	lsrs	r3, r3, #2
 80067c8:	3302      	adds	r3, #2
 80067ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	220f      	movs	r2, #15
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	43db      	mvns	r3, r3
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	4013      	ands	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a52      	ldr	r2, [pc, #328]	; (8006934 <HAL_GPIO_Init+0x314>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d02b      	beq.n	8006846 <HAL_GPIO_Init+0x226>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a51      	ldr	r2, [pc, #324]	; (8006938 <HAL_GPIO_Init+0x318>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d025      	beq.n	8006842 <HAL_GPIO_Init+0x222>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a50      	ldr	r2, [pc, #320]	; (800693c <HAL_GPIO_Init+0x31c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d01f      	beq.n	800683e <HAL_GPIO_Init+0x21e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a4f      	ldr	r2, [pc, #316]	; (8006940 <HAL_GPIO_Init+0x320>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d019      	beq.n	800683a <HAL_GPIO_Init+0x21a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a4e      	ldr	r2, [pc, #312]	; (8006944 <HAL_GPIO_Init+0x324>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <HAL_GPIO_Init+0x216>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a4d      	ldr	r2, [pc, #308]	; (8006948 <HAL_GPIO_Init+0x328>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00d      	beq.n	8006832 <HAL_GPIO_Init+0x212>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a4c      	ldr	r2, [pc, #304]	; (800694c <HAL_GPIO_Init+0x32c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d007      	beq.n	800682e <HAL_GPIO_Init+0x20e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a4b      	ldr	r2, [pc, #300]	; (8006950 <HAL_GPIO_Init+0x330>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d101      	bne.n	800682a <HAL_GPIO_Init+0x20a>
 8006826:	2307      	movs	r3, #7
 8006828:	e00e      	b.n	8006848 <HAL_GPIO_Init+0x228>
 800682a:	2308      	movs	r3, #8
 800682c:	e00c      	b.n	8006848 <HAL_GPIO_Init+0x228>
 800682e:	2306      	movs	r3, #6
 8006830:	e00a      	b.n	8006848 <HAL_GPIO_Init+0x228>
 8006832:	2305      	movs	r3, #5
 8006834:	e008      	b.n	8006848 <HAL_GPIO_Init+0x228>
 8006836:	2304      	movs	r3, #4
 8006838:	e006      	b.n	8006848 <HAL_GPIO_Init+0x228>
 800683a:	2303      	movs	r3, #3
 800683c:	e004      	b.n	8006848 <HAL_GPIO_Init+0x228>
 800683e:	2302      	movs	r3, #2
 8006840:	e002      	b.n	8006848 <HAL_GPIO_Init+0x228>
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <HAL_GPIO_Init+0x228>
 8006846:	2300      	movs	r3, #0
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	f002 0203 	and.w	r2, r2, #3
 800684e:	0092      	lsls	r2, r2, #2
 8006850:	4093      	lsls	r3, r2
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	4313      	orrs	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006858:	4935      	ldr	r1, [pc, #212]	; (8006930 <HAL_GPIO_Init+0x310>)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	089b      	lsrs	r3, r3, #2
 800685e:	3302      	adds	r3, #2
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006866:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <HAL_GPIO_Init+0x334>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	43db      	mvns	r3, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800688a:	4a32      	ldr	r2, [pc, #200]	; (8006954 <HAL_GPIO_Init+0x334>)
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006890:	4b30      	ldr	r3, [pc, #192]	; (8006954 <HAL_GPIO_Init+0x334>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	43db      	mvns	r3, r3
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	4013      	ands	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068b4:	4a27      	ldr	r2, [pc, #156]	; (8006954 <HAL_GPIO_Init+0x334>)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068ba:	4b26      	ldr	r3, [pc, #152]	; (8006954 <HAL_GPIO_Init+0x334>)
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	43db      	mvns	r3, r3
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	4013      	ands	r3, r2
 80068c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068de:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <HAL_GPIO_Init+0x334>)
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068e4:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <HAL_GPIO_Init+0x334>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	43db      	mvns	r3, r3
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	4013      	ands	r3, r2
 80068f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006908:	4a12      	ldr	r2, [pc, #72]	; (8006954 <HAL_GPIO_Init+0x334>)
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3301      	adds	r3, #1
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	2b0f      	cmp	r3, #15
 8006918:	f67f ae90 	bls.w	800663c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800691c:	bf00      	nop
 800691e:	bf00      	nop
 8006920:	3724      	adds	r7, #36	; 0x24
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40023800 	.word	0x40023800
 8006930:	40013800 	.word	0x40013800
 8006934:	40020000 	.word	0x40020000
 8006938:	40020400 	.word	0x40020400
 800693c:	40020800 	.word	0x40020800
 8006940:	40020c00 	.word	0x40020c00
 8006944:	40021000 	.word	0x40021000
 8006948:	40021400 	.word	0x40021400
 800694c:	40021800 	.word	0x40021800
 8006950:	40021c00 	.word	0x40021c00
 8006954:	40013c00 	.word	0x40013c00

08006958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	807b      	strh	r3, [r7, #2]
 8006964:	4613      	mov	r3, r2
 8006966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006968:	787b      	ldrb	r3, [r7, #1]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006974:	e003      	b.n	800697e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006976:	887b      	ldrh	r3, [r7, #2]
 8006978:	041a      	lsls	r2, r3, #16
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	619a      	str	r2, [r3, #24]
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800698a:	b480      	push	{r7}
 800698c:	b085      	sub	sp, #20
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800699c:	887a      	ldrh	r2, [r7, #2]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4013      	ands	r3, r2
 80069a2:	041a      	lsls	r2, r3, #16
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	43d9      	mvns	r1, r3
 80069a8:	887b      	ldrh	r3, [r7, #2]
 80069aa:	400b      	ands	r3, r1
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	619a      	str	r2, [r3, #24]
}
 80069b2:	bf00      	nop
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e267      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d075      	beq.n	8006aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069de:	4b88      	ldr	r3, [pc, #544]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 030c 	and.w	r3, r3, #12
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d00c      	beq.n	8006a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ea:	4b85      	ldr	r3, [pc, #532]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	d112      	bne.n	8006a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069f6:	4b82      	ldr	r3, [pc, #520]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a02:	d10b      	bne.n	8006a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a04:	4b7e      	ldr	r3, [pc, #504]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d05b      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x108>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d157      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e242      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a24:	d106      	bne.n	8006a34 <HAL_RCC_OscConfig+0x74>
 8006a26:	4b76      	ldr	r3, [pc, #472]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a75      	ldr	r2, [pc, #468]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	e01d      	b.n	8006a70 <HAL_RCC_OscConfig+0xb0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x98>
 8006a3e:	4b70      	ldr	r3, [pc, #448]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a6f      	ldr	r2, [pc, #444]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	4b6d      	ldr	r3, [pc, #436]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a6c      	ldr	r2, [pc, #432]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	e00b      	b.n	8006a70 <HAL_RCC_OscConfig+0xb0>
 8006a58:	4b69      	ldr	r3, [pc, #420]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a68      	ldr	r2, [pc, #416]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	4b66      	ldr	r3, [pc, #408]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a65      	ldr	r2, [pc, #404]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d013      	beq.n	8006aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a78:	f7fe fb10 	bl	800509c <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a80:	f7fe fb0c 	bl	800509c <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	; 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e207      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a92:	4b5b      	ldr	r3, [pc, #364]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCC_OscConfig+0xc0>
 8006a9e:	e014      	b.n	8006aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa0:	f7fe fafc 	bl	800509c <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aa8:	f7fe faf8 	bl	800509c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b64      	cmp	r3, #100	; 0x64
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e1f3      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aba:	4b51      	ldr	r3, [pc, #324]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f0      	bne.n	8006aa8 <HAL_RCC_OscConfig+0xe8>
 8006ac6:	e000      	b.n	8006aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d063      	beq.n	8006b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ad6:	4b4a      	ldr	r3, [pc, #296]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 030c 	and.w	r3, r3, #12
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ae2:	4b47      	ldr	r3, [pc, #284]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d11c      	bne.n	8006b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aee:	4b44      	ldr	r3, [pc, #272]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d116      	bne.n	8006b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006afa:	4b41      	ldr	r3, [pc, #260]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <HAL_RCC_OscConfig+0x152>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d001      	beq.n	8006b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e1c7      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b12:	4b3b      	ldr	r3, [pc, #236]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	4937      	ldr	r1, [pc, #220]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b26:	e03a      	b.n	8006b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d020      	beq.n	8006b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b30:	4b34      	ldr	r3, [pc, #208]	; (8006c04 <HAL_RCC_OscConfig+0x244>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b36:	f7fe fab1 	bl	800509c <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b3e:	f7fe faad 	bl	800509c <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e1a8      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b50:	4b2b      	ldr	r3, [pc, #172]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b5c:	4b28      	ldr	r3, [pc, #160]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	4925      	ldr	r1, [pc, #148]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	600b      	str	r3, [r1, #0]
 8006b70:	e015      	b.n	8006b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b72:	4b24      	ldr	r3, [pc, #144]	; (8006c04 <HAL_RCC_OscConfig+0x244>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b78:	f7fe fa90 	bl	800509c <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b80:	f7fe fa8c 	bl	800509c <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e187      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b92:	4b1b      	ldr	r3, [pc, #108]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d036      	beq.n	8006c18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d016      	beq.n	8006be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <HAL_RCC_OscConfig+0x248>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb8:	f7fe fa70 	bl	800509c <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bc0:	f7fe fa6c 	bl	800509c <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e167      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x200>
 8006bde:	e01b      	b.n	8006c18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006be0:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <HAL_RCC_OscConfig+0x248>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be6:	f7fe fa59 	bl	800509c <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bec:	e00e      	b.n	8006c0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bee:	f7fe fa55 	bl	800509c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d907      	bls.n	8006c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e150      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
 8006c00:	40023800 	.word	0x40023800
 8006c04:	42470000 	.word	0x42470000
 8006c08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c0c:	4b88      	ldr	r3, [pc, #544]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1ea      	bne.n	8006bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8097 	beq.w	8006d54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c2a:	4b81      	ldr	r3, [pc, #516]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10f      	bne.n	8006c56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c36:	2300      	movs	r3, #0
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	4b7d      	ldr	r3, [pc, #500]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	4a7c      	ldr	r2, [pc, #496]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c44:	6413      	str	r3, [r2, #64]	; 0x40
 8006c46:	4b7a      	ldr	r3, [pc, #488]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c52:	2301      	movs	r3, #1
 8006c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c56:	4b77      	ldr	r3, [pc, #476]	; (8006e34 <HAL_RCC_OscConfig+0x474>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d118      	bne.n	8006c94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c62:	4b74      	ldr	r3, [pc, #464]	; (8006e34 <HAL_RCC_OscConfig+0x474>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a73      	ldr	r2, [pc, #460]	; (8006e34 <HAL_RCC_OscConfig+0x474>)
 8006c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c6e:	f7fe fa15 	bl	800509c <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c74:	e008      	b.n	8006c88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c76:	f7fe fa11 	bl	800509c <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e10c      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c88:	4b6a      	ldr	r3, [pc, #424]	; (8006e34 <HAL_RCC_OscConfig+0x474>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0f0      	beq.n	8006c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d106      	bne.n	8006caa <HAL_RCC_OscConfig+0x2ea>
 8006c9c:	4b64      	ldr	r3, [pc, #400]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	4a63      	ldr	r2, [pc, #396]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca8:	e01c      	b.n	8006ce4 <HAL_RCC_OscConfig+0x324>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2b05      	cmp	r3, #5
 8006cb0:	d10c      	bne.n	8006ccc <HAL_RCC_OscConfig+0x30c>
 8006cb2:	4b5f      	ldr	r3, [pc, #380]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb6:	4a5e      	ldr	r2, [pc, #376]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006cb8:	f043 0304 	orr.w	r3, r3, #4
 8006cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006cbe:	4b5c      	ldr	r3, [pc, #368]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	4a5b      	ldr	r2, [pc, #364]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cca:	e00b      	b.n	8006ce4 <HAL_RCC_OscConfig+0x324>
 8006ccc:	4b58      	ldr	r3, [pc, #352]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd0:	4a57      	ldr	r2, [pc, #348]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd8:	4b55      	ldr	r3, [pc, #340]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cdc:	4a54      	ldr	r2, [pc, #336]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006cde:	f023 0304 	bic.w	r3, r3, #4
 8006ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d015      	beq.n	8006d18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cec:	f7fe f9d6 	bl	800509c <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf2:	e00a      	b.n	8006d0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cf4:	f7fe f9d2 	bl	800509c <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e0cb      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d0a:	4b49      	ldr	r3, [pc, #292]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0ee      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x334>
 8006d16:	e014      	b.n	8006d42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d18:	f7fe f9c0 	bl	800509c <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d1e:	e00a      	b.n	8006d36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d20:	f7fe f9bc 	bl	800509c <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e0b5      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d36:	4b3e      	ldr	r3, [pc, #248]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1ee      	bne.n	8006d20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d105      	bne.n	8006d54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d48:	4b39      	ldr	r3, [pc, #228]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	4a38      	ldr	r2, [pc, #224]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 80a1 	beq.w	8006ea0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d5e:	4b34      	ldr	r3, [pc, #208]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d05c      	beq.n	8006e24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d141      	bne.n	8006df6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d72:	4b31      	ldr	r3, [pc, #196]	; (8006e38 <HAL_RCC_OscConfig+0x478>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d78:	f7fe f990 	bl	800509c <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d80:	f7fe f98c 	bl	800509c <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e087      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d92:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f0      	bne.n	8006d80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69da      	ldr	r2, [r3, #28]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	019b      	lsls	r3, r3, #6
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	3b01      	subs	r3, #1
 8006db8:	041b      	lsls	r3, r3, #16
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	061b      	lsls	r3, r3, #24
 8006dc2:	491b      	ldr	r1, [pc, #108]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dc8:	4b1b      	ldr	r3, [pc, #108]	; (8006e38 <HAL_RCC_OscConfig+0x478>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dce:	f7fe f965 	bl	800509c <HAL_GetTick>
 8006dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd4:	e008      	b.n	8006de8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dd6:	f7fe f961 	bl	800509c <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d901      	bls.n	8006de8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e05c      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006de8:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0f0      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x416>
 8006df4:	e054      	b.n	8006ea0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <HAL_RCC_OscConfig+0x478>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfc:	f7fe f94e 	bl	800509c <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e04:	f7fe f94a 	bl	800509c <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e045      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e16:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <HAL_RCC_OscConfig+0x470>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x444>
 8006e22:	e03d      	b.n	8006ea0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d107      	bne.n	8006e3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e038      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
 8006e30:	40023800 	.word	0x40023800
 8006e34:	40007000 	.word	0x40007000
 8006e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e3c:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <HAL_RCC_OscConfig+0x4ec>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d028      	beq.n	8006e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d121      	bne.n	8006e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d11a      	bne.n	8006e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d111      	bne.n	8006e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	3b01      	subs	r3, #1
 8006e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d107      	bne.n	8006e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40023800 	.word	0x40023800

08006eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e0cc      	b.n	800705e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ec4:	4b68      	ldr	r3, [pc, #416]	; (8007068 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d90c      	bls.n	8006eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed2:	4b65      	ldr	r3, [pc, #404]	; (8007068 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eda:	4b63      	ldr	r3, [pc, #396]	; (8007068 <HAL_RCC_ClockConfig+0x1b8>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d001      	beq.n	8006eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e0b8      	b.n	800705e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d020      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f04:	4b59      	ldr	r3, [pc, #356]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4a58      	ldr	r2, [pc, #352]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f1c:	4b53      	ldr	r3, [pc, #332]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	4a52      	ldr	r2, [pc, #328]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f28:	4b50      	ldr	r3, [pc, #320]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	494d      	ldr	r1, [pc, #308]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d044      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d107      	bne.n	8006f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4e:	4b47      	ldr	r3, [pc, #284]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d119      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e07f      	b.n	800705e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d003      	beq.n	8006f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d107      	bne.n	8006f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f6e:	4b3f      	ldr	r3, [pc, #252]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d109      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e06f      	b.n	800705e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f7e:	4b3b      	ldr	r3, [pc, #236]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e067      	b.n	800705e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f8e:	4b37      	ldr	r3, [pc, #220]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f023 0203 	bic.w	r2, r3, #3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	4934      	ldr	r1, [pc, #208]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fa0:	f7fe f87c 	bl	800509c <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa6:	e00a      	b.n	8006fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa8:	f7fe f878 	bl	800509c <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e04f      	b.n	800705e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fbe:	4b2b      	ldr	r3, [pc, #172]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 020c 	and.w	r2, r3, #12
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d1eb      	bne.n	8006fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fd0:	4b25      	ldr	r3, [pc, #148]	; (8007068 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d20c      	bcs.n	8006ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fde:	4b22      	ldr	r3, [pc, #136]	; (8007068 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe6:	4b20      	ldr	r3, [pc, #128]	; (8007068 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d001      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e032      	b.n	800705e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d008      	beq.n	8007016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007004:	4b19      	ldr	r3, [pc, #100]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4916      	ldr	r1, [pc, #88]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	4313      	orrs	r3, r2
 8007014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0308 	and.w	r3, r3, #8
 800701e:	2b00      	cmp	r3, #0
 8007020:	d009      	beq.n	8007036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007022:	4b12      	ldr	r3, [pc, #72]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	490e      	ldr	r1, [pc, #56]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	4313      	orrs	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007036:	f000 f821 	bl	800707c <HAL_RCC_GetSysClockFreq>
 800703a:	4602      	mov	r2, r0
 800703c:	4b0b      	ldr	r3, [pc, #44]	; (800706c <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	490a      	ldr	r1, [pc, #40]	; (8007070 <HAL_RCC_ClockConfig+0x1c0>)
 8007048:	5ccb      	ldrb	r3, [r1, r3]
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	4a09      	ldr	r2, [pc, #36]	; (8007074 <HAL_RCC_ClockConfig+0x1c4>)
 8007050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007052:	4b09      	ldr	r3, [pc, #36]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f7fd ffdc 	bl	8005014 <HAL_InitTick>

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40023c00 	.word	0x40023c00
 800706c:	40023800 	.word	0x40023800
 8007070:	0800bf74 	.word	0x0800bf74
 8007074:	20000004 	.word	0x20000004
 8007078:	20000008 	.word	0x20000008

0800707c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800707c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007080:	b090      	sub	sp, #64	; 0x40
 8007082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
 8007088:	2300      	movs	r3, #0
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800708c:	2300      	movs	r3, #0
 800708e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007094:	4b59      	ldr	r3, [pc, #356]	; (80071fc <HAL_RCC_GetSysClockFreq+0x180>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 030c 	and.w	r3, r3, #12
 800709c:	2b08      	cmp	r3, #8
 800709e:	d00d      	beq.n	80070bc <HAL_RCC_GetSysClockFreq+0x40>
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	f200 80a1 	bhi.w	80071e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <HAL_RCC_GetSysClockFreq+0x34>
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d003      	beq.n	80070b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80070ae:	e09b      	b.n	80071e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070b0:	4b53      	ldr	r3, [pc, #332]	; (8007200 <HAL_RCC_GetSysClockFreq+0x184>)
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80070b4:	e09b      	b.n	80071ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070b6:	4b53      	ldr	r3, [pc, #332]	; (8007204 <HAL_RCC_GetSysClockFreq+0x188>)
 80070b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80070ba:	e098      	b.n	80071ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070bc:	4b4f      	ldr	r3, [pc, #316]	; (80071fc <HAL_RCC_GetSysClockFreq+0x180>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070c6:	4b4d      	ldr	r3, [pc, #308]	; (80071fc <HAL_RCC_GetSysClockFreq+0x180>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d028      	beq.n	8007124 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070d2:	4b4a      	ldr	r3, [pc, #296]	; (80071fc <HAL_RCC_GetSysClockFreq+0x180>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	099b      	lsrs	r3, r3, #6
 80070d8:	2200      	movs	r2, #0
 80070da:	623b      	str	r3, [r7, #32]
 80070dc:	627a      	str	r2, [r7, #36]	; 0x24
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80070e4:	2100      	movs	r1, #0
 80070e6:	4b47      	ldr	r3, [pc, #284]	; (8007204 <HAL_RCC_GetSysClockFreq+0x188>)
 80070e8:	fb03 f201 	mul.w	r2, r3, r1
 80070ec:	2300      	movs	r3, #0
 80070ee:	fb00 f303 	mul.w	r3, r0, r3
 80070f2:	4413      	add	r3, r2
 80070f4:	4a43      	ldr	r2, [pc, #268]	; (8007204 <HAL_RCC_GetSysClockFreq+0x188>)
 80070f6:	fba0 1202 	umull	r1, r2, r0, r2
 80070fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070fc:	460a      	mov	r2, r1
 80070fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8007100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007102:	4413      	add	r3, r2
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	2200      	movs	r2, #0
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	61fa      	str	r2, [r7, #28]
 800710e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007112:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007116:	f7f9 fb5d 	bl	80007d4 <__aeabi_uldivmod>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4613      	mov	r3, r2
 8007120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007122:	e053      	b.n	80071cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007124:	4b35      	ldr	r3, [pc, #212]	; (80071fc <HAL_RCC_GetSysClockFreq+0x180>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	099b      	lsrs	r3, r3, #6
 800712a:	2200      	movs	r2, #0
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	617a      	str	r2, [r7, #20]
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007136:	f04f 0b00 	mov.w	fp, #0
 800713a:	4652      	mov	r2, sl
 800713c:	465b      	mov	r3, fp
 800713e:	f04f 0000 	mov.w	r0, #0
 8007142:	f04f 0100 	mov.w	r1, #0
 8007146:	0159      	lsls	r1, r3, #5
 8007148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800714c:	0150      	lsls	r0, r2, #5
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	ebb2 080a 	subs.w	r8, r2, sl
 8007156:	eb63 090b 	sbc.w	r9, r3, fp
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007166:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800716a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800716e:	ebb2 0408 	subs.w	r4, r2, r8
 8007172:	eb63 0509 	sbc.w	r5, r3, r9
 8007176:	f04f 0200 	mov.w	r2, #0
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	00eb      	lsls	r3, r5, #3
 8007180:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007184:	00e2      	lsls	r2, r4, #3
 8007186:	4614      	mov	r4, r2
 8007188:	461d      	mov	r5, r3
 800718a:	eb14 030a 	adds.w	r3, r4, sl
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	eb45 030b 	adc.w	r3, r5, fp
 8007194:	607b      	str	r3, [r7, #4]
 8007196:	f04f 0200 	mov.w	r2, #0
 800719a:	f04f 0300 	mov.w	r3, #0
 800719e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071a2:	4629      	mov	r1, r5
 80071a4:	028b      	lsls	r3, r1, #10
 80071a6:	4621      	mov	r1, r4
 80071a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071ac:	4621      	mov	r1, r4
 80071ae:	028a      	lsls	r2, r1, #10
 80071b0:	4610      	mov	r0, r2
 80071b2:	4619      	mov	r1, r3
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	2200      	movs	r2, #0
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	60fa      	str	r2, [r7, #12]
 80071bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c0:	f7f9 fb08 	bl	80007d4 <__aeabi_uldivmod>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4613      	mov	r3, r2
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <HAL_RCC_GetSysClockFreq+0x180>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	3301      	adds	r3, #1
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80071dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071e6:	e002      	b.n	80071ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071e8:	4b05      	ldr	r3, [pc, #20]	; (8007200 <HAL_RCC_GetSysClockFreq+0x184>)
 80071ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3740      	adds	r7, #64	; 0x40
 80071f4:	46bd      	mov	sp, r7
 80071f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071fa:	bf00      	nop
 80071fc:	40023800 	.word	0x40023800
 8007200:	00f42400 	.word	0x00f42400
 8007204:	017d7840 	.word	0x017d7840

08007208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800720c:	4b03      	ldr	r3, [pc, #12]	; (800721c <HAL_RCC_GetHCLKFreq+0x14>)
 800720e:	681b      	ldr	r3, [r3, #0]
}
 8007210:	4618      	mov	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000004 	.word	0x20000004

08007220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007224:	f7ff fff0 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007228:	4602      	mov	r2, r0
 800722a:	4b05      	ldr	r3, [pc, #20]	; (8007240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	0a9b      	lsrs	r3, r3, #10
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	4903      	ldr	r1, [pc, #12]	; (8007244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007236:	5ccb      	ldrb	r3, [r1, r3]
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800723c:	4618      	mov	r0, r3
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40023800 	.word	0x40023800
 8007244:	0800bf84 	.word	0x0800bf84

08007248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800724c:	f7ff ffdc 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007250:	4602      	mov	r2, r0
 8007252:	4b05      	ldr	r3, [pc, #20]	; (8007268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	0b5b      	lsrs	r3, r3, #13
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	4903      	ldr	r1, [pc, #12]	; (800726c <HAL_RCC_GetPCLK2Freq+0x24>)
 800725e:	5ccb      	ldrb	r3, [r1, r3]
 8007260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007264:	4618      	mov	r0, r3
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40023800 	.word	0x40023800
 800726c:	0800bf84 	.word	0x0800bf84

08007270 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e038      	b.n	80072f8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7fd fa60 	bl	8004760 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3308      	adds	r3, #8
 80072a8:	4619      	mov	r1, r3
 80072aa:	4610      	mov	r0, r2
 80072ac:	f001 f87e 	bl	80083ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	461a      	mov	r2, r3
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	f001 f8e0 	bl	8008480 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6858      	ldr	r0, [r3, #4]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	f001 f90d 	bl	80084ec <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	6892      	ldr	r2, [r2, #8]
 80072da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	6892      	ldr	r2, [r2, #8]
 80072e6:	f041 0101 	orr.w	r1, r1, #1
 80072ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e042      	b.n	8007398 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fd fd7e 	bl	8004e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2224      	movs	r2, #36	; 0x24
 8007330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fdbd 	bl	8007ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695a      	ldr	r2, [r3, #20]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	603b      	str	r3, [r7, #0]
 80073ac:	4613      	mov	r3, r2
 80073ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d175      	bne.n	80074ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <HAL_UART_Transmit+0x2c>
 80073c6:	88fb      	ldrh	r3, [r7, #6]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e06e      	b.n	80074ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2221      	movs	r2, #33	; 0x21
 80073da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073de:	f7fd fe5d 	bl	800509c <HAL_GetTick>
 80073e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	88fa      	ldrh	r2, [r7, #6]
 80073e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f8:	d108      	bne.n	800740c <HAL_UART_Transmit+0x6c>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	e003      	b.n	8007414 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007410:	2300      	movs	r3, #0
 8007412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007414:	e02e      	b.n	8007474 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2200      	movs	r2, #0
 800741e:	2180      	movs	r1, #128	; 0x80
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 fb1f 	bl	8007a64 <UART_WaitOnFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e03a      	b.n	80074ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10b      	bne.n	8007456 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800744c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	3302      	adds	r3, #2
 8007452:	61bb      	str	r3, [r7, #24]
 8007454:	e007      	b.n	8007466 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	781a      	ldrb	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	3301      	adds	r3, #1
 8007464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1cb      	bne.n	8007416 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2200      	movs	r2, #0
 8007486:	2140      	movs	r1, #64	; 0x40
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 faeb 	bl	8007a64 <UART_WaitOnFlagUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e006      	b.n	80074ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	e000      	b.n	80074ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80074ac:	2302      	movs	r3, #2
  }
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d112      	bne.n	80074f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <HAL_UART_Receive_IT+0x26>
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e00b      	b.n	80074f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	461a      	mov	r2, r3
 80074ea:	68b9      	ldr	r1, [r7, #8]
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fb12 	bl	8007b16 <UART_Start_Receive_IT>
 80074f2:	4603      	mov	r3, r0
 80074f4:	e000      	b.n	80074f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80074f6:	2302      	movs	r3, #2
  }
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b0ba      	sub	sp, #232	; 0xe8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007526:	2300      	movs	r3, #0
 8007528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800752c:	2300      	movs	r3, #0
 800752e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800753e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10f      	bne.n	8007566 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d009      	beq.n	8007566 <HAL_UART_IRQHandler+0x66>
 8007552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fbf2 	bl	8007d48 <UART_Receive_IT>
      return;
 8007564:	e25b      	b.n	8007a1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80de 	beq.w	800772c <HAL_UART_IRQHandler+0x22c>
 8007570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800757c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007580:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80d1 	beq.w	800772c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <HAL_UART_IRQHandler+0xae>
 8007596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	f043 0201 	orr.w	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00b      	beq.n	80075d2 <HAL_UART_IRQHandler+0xd2>
 80075ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	f043 0202 	orr.w	r2, r3, #2
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <HAL_UART_IRQHandler+0xf6>
 80075de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ee:	f043 0204 	orr.w	r2, r3, #4
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <HAL_UART_IRQHandler+0x126>
 8007602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800760e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	f043 0208 	orr.w	r2, r3, #8
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 81f2 	beq.w	8007a14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d008      	beq.n	800764e <HAL_UART_IRQHandler+0x14e>
 800763c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb7d 	bl	8007d48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	bf0c      	ite	eq
 800765c:	2301      	moveq	r3, #1
 800765e:	2300      	movne	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d103      	bne.n	800767a <HAL_UART_IRQHandler+0x17a>
 8007672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d04f      	beq.n	800771a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fa85 	bl	8007b8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768a:	2b40      	cmp	r3, #64	; 0x40
 800768c:	d141      	bne.n	8007712 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3314      	adds	r3, #20
 8007694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3314      	adds	r3, #20
 80076b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1d9      	bne.n	800768e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d013      	beq.n	800770a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	4a7e      	ldr	r2, [pc, #504]	; (80078e0 <HAL_UART_IRQHandler+0x3e0>)
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe fd0a 	bl	8006108 <HAL_DMA_Abort_IT>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d016      	beq.n	8007728 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007708:	e00e      	b.n	8007728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f994 	bl	8007a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007710:	e00a      	b.n	8007728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f990 	bl	8007a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007718:	e006      	b.n	8007728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f98c 	bl	8007a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007726:	e175      	b.n	8007a14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	bf00      	nop
    return;
 800772a:	e173      	b.n	8007a14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	2b01      	cmp	r3, #1
 8007732:	f040 814f 	bne.w	80079d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773a:	f003 0310 	and.w	r3, r3, #16
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 8148 	beq.w	80079d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8141 	beq.w	80079d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60bb      	str	r3, [r7, #8]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	60bb      	str	r3, [r7, #8]
 8007766:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	f040 80b6 	bne.w	80078e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 8145 	beq.w	8007a18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007796:	429a      	cmp	r2, r3
 8007798:	f080 813e 	bcs.w	8007a18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ae:	f000 8088 	beq.w	80078c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	330c      	adds	r3, #12
 80077b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	330c      	adds	r3, #12
 80077da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1d9      	bne.n	80077b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3314      	adds	r3, #20
 8007804:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800780e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3314      	adds	r3, #20
 800781e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007822:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007826:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800782a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e1      	bne.n	80077fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3314      	adds	r3, #20
 8007840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800784a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800784c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3314      	adds	r3, #20
 800785a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800785e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007860:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007864:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800786c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e3      	bne.n	800783a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	330c      	adds	r3, #12
 80078a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80078a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e3      	bne.n	8007880 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fbb3 	bl	8006028 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f8b7 	bl	8007a4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078de:	e09b      	b.n	8007a18 <HAL_UART_IRQHandler+0x518>
 80078e0:	08007c51 	.word	0x08007c51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 808e 	beq.w	8007a1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8089 	beq.w	8007a1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	330c      	adds	r3, #12
 8007910:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	330c      	adds	r3, #12
 800792a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800792e:	647a      	str	r2, [r7, #68]	; 0x44
 8007930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800793c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e3      	bne.n	800790a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3314      	adds	r3, #20
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	623b      	str	r3, [r7, #32]
   return(result);
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3314      	adds	r3, #20
 8007962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007966:	633a      	str	r2, [r7, #48]	; 0x30
 8007968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800796c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e3      	bne.n	8007942 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	60fb      	str	r3, [r7, #12]
   return(result);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0310 	bic.w	r3, r3, #16
 800799e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079ac:	61fa      	str	r2, [r7, #28]
 80079ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	69b9      	ldr	r1, [r7, #24]
 80079b2:	69fa      	ldr	r2, [r7, #28]
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e3      	bne.n	8007988 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f83d 	bl	8007a4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079d2:	e023      	b.n	8007a1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d009      	beq.n	80079f4 <HAL_UART_IRQHandler+0x4f4>
 80079e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f943 	bl	8007c78 <UART_Transmit_IT>
    return;
 80079f2:	e014      	b.n	8007a1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00e      	beq.n	8007a1e <HAL_UART_IRQHandler+0x51e>
 8007a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d008      	beq.n	8007a1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f983 	bl	8007d18 <UART_EndTransmit_IT>
    return;
 8007a12:	e004      	b.n	8007a1e <HAL_UART_IRQHandler+0x51e>
    return;
 8007a14:	bf00      	nop
 8007a16:	e002      	b.n	8007a1e <HAL_UART_IRQHandler+0x51e>
      return;
 8007a18:	bf00      	nop
 8007a1a:	e000      	b.n	8007a1e <HAL_UART_IRQHandler+0x51e>
      return;
 8007a1c:	bf00      	nop
  }
}
 8007a1e:	37e8      	adds	r7, #232	; 0xe8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	4613      	mov	r3, r2
 8007a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a74:	e03b      	b.n	8007aee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7c:	d037      	beq.n	8007aee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a7e:	f7fd fb0d 	bl	800509c <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	6a3a      	ldr	r2, [r7, #32]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d302      	bcc.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e03a      	b.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f003 0304 	and.w	r3, r3, #4
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d023      	beq.n	8007aee <UART_WaitOnFlagUntilTimeout+0x8a>
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b80      	cmp	r3, #128	; 0x80
 8007aaa:	d020      	beq.n	8007aee <UART_WaitOnFlagUntilTimeout+0x8a>
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b40      	cmp	r3, #64	; 0x40
 8007ab0:	d01d      	beq.n	8007aee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d116      	bne.n	8007aee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f857 	bl	8007b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2208      	movs	r2, #8
 8007ae0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e00f      	b.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4013      	ands	r3, r2
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	bf0c      	ite	eq
 8007afe:	2301      	moveq	r3, #1
 8007b00:	2300      	movne	r3, #0
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	461a      	mov	r2, r3
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d0b4      	beq.n	8007a76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	60b9      	str	r1, [r7, #8]
 8007b20:	4613      	mov	r3, r2
 8007b22:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	88fa      	ldrh	r2, [r7, #6]
 8007b2e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	88fa      	ldrh	r2, [r7, #6]
 8007b34:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2222      	movs	r2, #34	; 0x22
 8007b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d007      	beq.n	8007b5c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b5a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695a      	ldr	r2, [r3, #20]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0220 	orr.w	r2, r2, #32
 8007b7a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b095      	sub	sp, #84	; 0x54
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	330c      	adds	r3, #12
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	330c      	adds	r3, #12
 8007bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bb2:	643a      	str	r2, [r7, #64]	; 0x40
 8007bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e5      	bne.n	8007b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3314      	adds	r3, #20
 8007bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	f023 0301 	bic.w	r3, r3, #1
 8007bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3314      	adds	r3, #20
 8007be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e5      	bne.n	8007bc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d119      	bne.n	8007c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f023 0310 	bic.w	r3, r3, #16
 8007c18:	647b      	str	r3, [r7, #68]	; 0x44
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	330c      	adds	r3, #12
 8007c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c22:	61ba      	str	r2, [r7, #24]
 8007c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6979      	ldr	r1, [r7, #20]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e5      	bne.n	8007c02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c44:	bf00      	nop
 8007c46:	3754      	adds	r7, #84	; 0x54
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff fee4 	bl	8007a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b21      	cmp	r3, #33	; 0x21
 8007c8a:	d13e      	bne.n	8007d0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c94:	d114      	bne.n	8007cc0 <UART_Transmit_IT+0x48>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d110      	bne.n	8007cc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	1c9a      	adds	r2, r3, #2
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	621a      	str	r2, [r3, #32]
 8007cbe:	e008      	b.n	8007cd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	1c59      	adds	r1, r3, #1
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6211      	str	r1, [r2, #32]
 8007cca:	781a      	ldrb	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10f      	bne.n	8007d06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e000      	b.n	8007d0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d0a:	2302      	movs	r3, #2
  }
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff fe73 	bl	8007a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08c      	sub	sp, #48	; 0x30
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b22      	cmp	r3, #34	; 0x22
 8007d5a:	f040 80ae 	bne.w	8007eba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d66:	d117      	bne.n	8007d98 <UART_Receive_IT+0x50>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d113      	bne.n	8007d98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	1c9a      	adds	r2, r3, #2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	629a      	str	r2, [r3, #40]	; 0x28
 8007d96:	e026      	b.n	8007de6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007daa:	d007      	beq.n	8007dbc <UART_Receive_IT+0x74>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <UART_Receive_IT+0x82>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	e008      	b.n	8007ddc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	4619      	mov	r1, r3
 8007df4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d15d      	bne.n	8007eb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0220 	bic.w	r2, r2, #32
 8007e08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695a      	ldr	r2, [r3, #20]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0201 	bic.w	r2, r2, #1
 8007e28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d135      	bne.n	8007eac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	330c      	adds	r3, #12
 8007e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	613b      	str	r3, [r7, #16]
   return(result);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f023 0310 	bic.w	r3, r3, #16
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	330c      	adds	r3, #12
 8007e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e66:	623a      	str	r2, [r7, #32]
 8007e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6a:	69f9      	ldr	r1, [r7, #28]
 8007e6c:	6a3a      	ldr	r2, [r7, #32]
 8007e6e:	e841 2300 	strex	r3, r2, [r1]
 8007e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1e5      	bne.n	8007e46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0310 	and.w	r3, r3, #16
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	d10a      	bne.n	8007e9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fdd1 	bl	8007a4c <HAL_UARTEx_RxEventCallback>
 8007eaa:	e002      	b.n	8007eb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7fd f80b 	bl	8004ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e002      	b.n	8007ebc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e000      	b.n	8007ebc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007eba:	2302      	movs	r3, #2
  }
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3730      	adds	r7, #48	; 0x30
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ec8:	b0c0      	sub	sp, #256	; 0x100
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee0:	68d9      	ldr	r1, [r3, #12]
 8007ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	ea40 0301 	orr.w	r3, r0, r1
 8007eec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f1c:	f021 010c 	bic.w	r1, r1, #12
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3e:	6999      	ldr	r1, [r3, #24]
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	ea40 0301 	orr.w	r3, r0, r1
 8007f4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b8f      	ldr	r3, [pc, #572]	; (8008190 <UART_SetConfig+0x2cc>)
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d005      	beq.n	8007f64 <UART_SetConfig+0xa0>
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	4b8d      	ldr	r3, [pc, #564]	; (8008194 <UART_SetConfig+0x2d0>)
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d104      	bne.n	8007f6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f64:	f7ff f970 	bl	8007248 <HAL_RCC_GetPCLK2Freq>
 8007f68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f6c:	e003      	b.n	8007f76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f6e:	f7ff f957 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8007f72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f80:	f040 810c 	bne.w	800819c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007f92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007f96:	4622      	mov	r2, r4
 8007f98:	462b      	mov	r3, r5
 8007f9a:	1891      	adds	r1, r2, r2
 8007f9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f9e:	415b      	adcs	r3, r3
 8007fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	eb12 0801 	adds.w	r8, r2, r1
 8007fac:	4629      	mov	r1, r5
 8007fae:	eb43 0901 	adc.w	r9, r3, r1
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fc6:	4690      	mov	r8, r2
 8007fc8:	4699      	mov	r9, r3
 8007fca:	4623      	mov	r3, r4
 8007fcc:	eb18 0303 	adds.w	r3, r8, r3
 8007fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	eb49 0303 	adc.w	r3, r9, r3
 8007fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007fea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007fee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	18db      	adds	r3, r3, r3
 8007ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	eb42 0303 	adc.w	r3, r2, r3
 8007ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8008000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008004:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008008:	f7f8 fbe4 	bl	80007d4 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4b61      	ldr	r3, [pc, #388]	; (8008198 <UART_SetConfig+0x2d4>)
 8008012:	fba3 2302 	umull	r2, r3, r3, r2
 8008016:	095b      	lsrs	r3, r3, #5
 8008018:	011c      	lsls	r4, r3, #4
 800801a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800801e:	2200      	movs	r2, #0
 8008020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008024:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008028:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800802c:	4642      	mov	r2, r8
 800802e:	464b      	mov	r3, r9
 8008030:	1891      	adds	r1, r2, r2
 8008032:	64b9      	str	r1, [r7, #72]	; 0x48
 8008034:	415b      	adcs	r3, r3
 8008036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008038:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800803c:	4641      	mov	r1, r8
 800803e:	eb12 0a01 	adds.w	sl, r2, r1
 8008042:	4649      	mov	r1, r9
 8008044:	eb43 0b01 	adc.w	fp, r3, r1
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008054:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800805c:	4692      	mov	sl, r2
 800805e:	469b      	mov	fp, r3
 8008060:	4643      	mov	r3, r8
 8008062:	eb1a 0303 	adds.w	r3, sl, r3
 8008066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800806a:	464b      	mov	r3, r9
 800806c:	eb4b 0303 	adc.w	r3, fp, r3
 8008070:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008080:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008084:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008088:	460b      	mov	r3, r1
 800808a:	18db      	adds	r3, r3, r3
 800808c:	643b      	str	r3, [r7, #64]	; 0x40
 800808e:	4613      	mov	r3, r2
 8008090:	eb42 0303 	adc.w	r3, r2, r3
 8008094:	647b      	str	r3, [r7, #68]	; 0x44
 8008096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800809a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800809e:	f7f8 fb99 	bl	80007d4 <__aeabi_uldivmod>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4611      	mov	r1, r2
 80080a8:	4b3b      	ldr	r3, [pc, #236]	; (8008198 <UART_SetConfig+0x2d4>)
 80080aa:	fba3 2301 	umull	r2, r3, r3, r1
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	2264      	movs	r2, #100	; 0x64
 80080b2:	fb02 f303 	mul.w	r3, r2, r3
 80080b6:	1acb      	subs	r3, r1, r3
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80080be:	4b36      	ldr	r3, [pc, #216]	; (8008198 <UART_SetConfig+0x2d4>)
 80080c0:	fba3 2302 	umull	r2, r3, r3, r2
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080cc:	441c      	add	r4, r3
 80080ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80080dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80080e0:	4642      	mov	r2, r8
 80080e2:	464b      	mov	r3, r9
 80080e4:	1891      	adds	r1, r2, r2
 80080e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80080e8:	415b      	adcs	r3, r3
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080f0:	4641      	mov	r1, r8
 80080f2:	1851      	adds	r1, r2, r1
 80080f4:	6339      	str	r1, [r7, #48]	; 0x30
 80080f6:	4649      	mov	r1, r9
 80080f8:	414b      	adcs	r3, r1
 80080fa:	637b      	str	r3, [r7, #52]	; 0x34
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008108:	4659      	mov	r1, fp
 800810a:	00cb      	lsls	r3, r1, #3
 800810c:	4651      	mov	r1, sl
 800810e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008112:	4651      	mov	r1, sl
 8008114:	00ca      	lsls	r2, r1, #3
 8008116:	4610      	mov	r0, r2
 8008118:	4619      	mov	r1, r3
 800811a:	4603      	mov	r3, r0
 800811c:	4642      	mov	r2, r8
 800811e:	189b      	adds	r3, r3, r2
 8008120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008124:	464b      	mov	r3, r9
 8008126:	460a      	mov	r2, r1
 8008128:	eb42 0303 	adc.w	r3, r2, r3
 800812c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800813c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008144:	460b      	mov	r3, r1
 8008146:	18db      	adds	r3, r3, r3
 8008148:	62bb      	str	r3, [r7, #40]	; 0x28
 800814a:	4613      	mov	r3, r2
 800814c:	eb42 0303 	adc.w	r3, r2, r3
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008156:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800815a:	f7f8 fb3b 	bl	80007d4 <__aeabi_uldivmod>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <UART_SetConfig+0x2d4>)
 8008164:	fba3 1302 	umull	r1, r3, r3, r2
 8008168:	095b      	lsrs	r3, r3, #5
 800816a:	2164      	movs	r1, #100	; 0x64
 800816c:	fb01 f303 	mul.w	r3, r1, r3
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	3332      	adds	r3, #50	; 0x32
 8008176:	4a08      	ldr	r2, [pc, #32]	; (8008198 <UART_SetConfig+0x2d4>)
 8008178:	fba2 2303 	umull	r2, r3, r2, r3
 800817c:	095b      	lsrs	r3, r3, #5
 800817e:	f003 0207 	and.w	r2, r3, #7
 8008182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4422      	add	r2, r4
 800818a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800818c:	e106      	b.n	800839c <UART_SetConfig+0x4d8>
 800818e:	bf00      	nop
 8008190:	40011000 	.word	0x40011000
 8008194:	40011400 	.word	0x40011400
 8008198:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800819c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80081ae:	4642      	mov	r2, r8
 80081b0:	464b      	mov	r3, r9
 80081b2:	1891      	adds	r1, r2, r2
 80081b4:	6239      	str	r1, [r7, #32]
 80081b6:	415b      	adcs	r3, r3
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081be:	4641      	mov	r1, r8
 80081c0:	1854      	adds	r4, r2, r1
 80081c2:	4649      	mov	r1, r9
 80081c4:	eb43 0501 	adc.w	r5, r3, r1
 80081c8:	f04f 0200 	mov.w	r2, #0
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	00eb      	lsls	r3, r5, #3
 80081d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081d6:	00e2      	lsls	r2, r4, #3
 80081d8:	4614      	mov	r4, r2
 80081da:	461d      	mov	r5, r3
 80081dc:	4643      	mov	r3, r8
 80081de:	18e3      	adds	r3, r4, r3
 80081e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081e4:	464b      	mov	r3, r9
 80081e6:	eb45 0303 	adc.w	r3, r5, r3
 80081ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	f04f 0300 	mov.w	r3, #0
 8008206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800820a:	4629      	mov	r1, r5
 800820c:	008b      	lsls	r3, r1, #2
 800820e:	4621      	mov	r1, r4
 8008210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008214:	4621      	mov	r1, r4
 8008216:	008a      	lsls	r2, r1, #2
 8008218:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800821c:	f7f8 fada 	bl	80007d4 <__aeabi_uldivmod>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4b60      	ldr	r3, [pc, #384]	; (80083a8 <UART_SetConfig+0x4e4>)
 8008226:	fba3 2302 	umull	r2, r3, r3, r2
 800822a:	095b      	lsrs	r3, r3, #5
 800822c:	011c      	lsls	r4, r3, #4
 800822e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008232:	2200      	movs	r2, #0
 8008234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008238:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800823c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008240:	4642      	mov	r2, r8
 8008242:	464b      	mov	r3, r9
 8008244:	1891      	adds	r1, r2, r2
 8008246:	61b9      	str	r1, [r7, #24]
 8008248:	415b      	adcs	r3, r3
 800824a:	61fb      	str	r3, [r7, #28]
 800824c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008250:	4641      	mov	r1, r8
 8008252:	1851      	adds	r1, r2, r1
 8008254:	6139      	str	r1, [r7, #16]
 8008256:	4649      	mov	r1, r9
 8008258:	414b      	adcs	r3, r1
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	f04f 0200 	mov.w	r2, #0
 8008260:	f04f 0300 	mov.w	r3, #0
 8008264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008268:	4659      	mov	r1, fp
 800826a:	00cb      	lsls	r3, r1, #3
 800826c:	4651      	mov	r1, sl
 800826e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008272:	4651      	mov	r1, sl
 8008274:	00ca      	lsls	r2, r1, #3
 8008276:	4610      	mov	r0, r2
 8008278:	4619      	mov	r1, r3
 800827a:	4603      	mov	r3, r0
 800827c:	4642      	mov	r2, r8
 800827e:	189b      	adds	r3, r3, r2
 8008280:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008284:	464b      	mov	r3, r9
 8008286:	460a      	mov	r2, r1
 8008288:	eb42 0303 	adc.w	r3, r2, r3
 800828c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	67bb      	str	r3, [r7, #120]	; 0x78
 800829a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800829c:	f04f 0200 	mov.w	r2, #0
 80082a0:	f04f 0300 	mov.w	r3, #0
 80082a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80082a8:	4649      	mov	r1, r9
 80082aa:	008b      	lsls	r3, r1, #2
 80082ac:	4641      	mov	r1, r8
 80082ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082b2:	4641      	mov	r1, r8
 80082b4:	008a      	lsls	r2, r1, #2
 80082b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80082ba:	f7f8 fa8b 	bl	80007d4 <__aeabi_uldivmod>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4611      	mov	r1, r2
 80082c4:	4b38      	ldr	r3, [pc, #224]	; (80083a8 <UART_SetConfig+0x4e4>)
 80082c6:	fba3 2301 	umull	r2, r3, r3, r1
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	2264      	movs	r2, #100	; 0x64
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	1acb      	subs	r3, r1, r3
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	3332      	adds	r3, #50	; 0x32
 80082d8:	4a33      	ldr	r2, [pc, #204]	; (80083a8 <UART_SetConfig+0x4e4>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082e4:	441c      	add	r4, r3
 80082e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ea:	2200      	movs	r2, #0
 80082ec:	673b      	str	r3, [r7, #112]	; 0x70
 80082ee:	677a      	str	r2, [r7, #116]	; 0x74
 80082f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80082f4:	4642      	mov	r2, r8
 80082f6:	464b      	mov	r3, r9
 80082f8:	1891      	adds	r1, r2, r2
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	415b      	adcs	r3, r3
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008304:	4641      	mov	r1, r8
 8008306:	1851      	adds	r1, r2, r1
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	4649      	mov	r1, r9
 800830c:	414b      	adcs	r3, r1
 800830e:	607b      	str	r3, [r7, #4]
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800831c:	4659      	mov	r1, fp
 800831e:	00cb      	lsls	r3, r1, #3
 8008320:	4651      	mov	r1, sl
 8008322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008326:	4651      	mov	r1, sl
 8008328:	00ca      	lsls	r2, r1, #3
 800832a:	4610      	mov	r0, r2
 800832c:	4619      	mov	r1, r3
 800832e:	4603      	mov	r3, r0
 8008330:	4642      	mov	r2, r8
 8008332:	189b      	adds	r3, r3, r2
 8008334:	66bb      	str	r3, [r7, #104]	; 0x68
 8008336:	464b      	mov	r3, r9
 8008338:	460a      	mov	r2, r1
 800833a:	eb42 0303 	adc.w	r3, r2, r3
 800833e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	663b      	str	r3, [r7, #96]	; 0x60
 800834a:	667a      	str	r2, [r7, #100]	; 0x64
 800834c:	f04f 0200 	mov.w	r2, #0
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008358:	4649      	mov	r1, r9
 800835a:	008b      	lsls	r3, r1, #2
 800835c:	4641      	mov	r1, r8
 800835e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008362:	4641      	mov	r1, r8
 8008364:	008a      	lsls	r2, r1, #2
 8008366:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800836a:	f7f8 fa33 	bl	80007d4 <__aeabi_uldivmod>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <UART_SetConfig+0x4e4>)
 8008374:	fba3 1302 	umull	r1, r3, r3, r2
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	2164      	movs	r1, #100	; 0x64
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	3332      	adds	r3, #50	; 0x32
 8008386:	4a08      	ldr	r2, [pc, #32]	; (80083a8 <UART_SetConfig+0x4e4>)
 8008388:	fba2 2303 	umull	r2, r3, r2, r3
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	f003 020f 	and.w	r2, r3, #15
 8008392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4422      	add	r2, r4
 800839a:	609a      	str	r2, [r3, #8]
}
 800839c:	bf00      	nop
 800839e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80083a2:	46bd      	mov	sp, r7
 80083a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083a8:	51eb851f 	.word	0x51eb851f

080083ac <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	6812      	ldr	r2, [r2, #0]
 80083c4:	f023 0101 	bic.w	r1, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	d102      	bne.n	80083dc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80083d6:	2340      	movs	r3, #64	; 0x40
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	e001      	b.n	80083e0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80083ec:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80083f2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80083f8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80083fe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008404:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800840a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8008410:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8008416:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800841c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8008422:	4313      	orrs	r3, r2
 8008424:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800843a:	4b10      	ldr	r3, [pc, #64]	; (800847c <FSMC_NORSRAM_Init+0xd0>)
 800843c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008444:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800844c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	43db      	mvns	r3, r3
 800845c:	ea02 0103 	and.w	r1, r2, r3
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	4319      	orrs	r1, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	371c      	adds	r7, #28
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	0008fb7f 	.word	0x0008fb7f

08008480 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008496:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	431a      	orrs	r2, r3
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	021b      	lsls	r3, r3, #8
 80084ac:	431a      	orrs	r2, r3
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	041b      	lsls	r3, r3, #16
 80084b4:	431a      	orrs	r2, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	051b      	lsls	r3, r3, #20
 80084be:	431a      	orrs	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	3b02      	subs	r3, #2
 80084c6:	061b      	lsls	r3, r3, #24
 80084c8:	431a      	orrs	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	3201      	adds	r2, #1
 80084d4:	4319      	orrs	r1, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
	...

080084ec <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
 80084f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008500:	d11d      	bne.n	800853e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800850a:	4b13      	ldr	r3, [pc, #76]	; (8008558 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800850c:	4013      	ands	r3, r2
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	6811      	ldr	r1, [r2, #0]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	6852      	ldr	r2, [r2, #4]
 8008516:	0112      	lsls	r2, r2, #4
 8008518:	4311      	orrs	r1, r2
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	6892      	ldr	r2, [r2, #8]
 800851e:	0212      	lsls	r2, r2, #8
 8008520:	4311      	orrs	r1, r2
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	6992      	ldr	r2, [r2, #24]
 8008526:	4311      	orrs	r1, r2
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	68d2      	ldr	r2, [r2, #12]
 800852c:	0412      	lsls	r2, r2, #16
 800852e:	430a      	orrs	r2, r1
 8008530:	ea43 0102 	orr.w	r1, r3, r2
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800853c:	e005      	b.n	800854a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3714      	adds	r7, #20
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	cff00000 	.word	0xcff00000

0800855c <std>:
 800855c:	2300      	movs	r3, #0
 800855e:	b510      	push	{r4, lr}
 8008560:	4604      	mov	r4, r0
 8008562:	e9c0 3300 	strd	r3, r3, [r0]
 8008566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856a:	6083      	str	r3, [r0, #8]
 800856c:	8181      	strh	r1, [r0, #12]
 800856e:	6643      	str	r3, [r0, #100]	; 0x64
 8008570:	81c2      	strh	r2, [r0, #14]
 8008572:	6183      	str	r3, [r0, #24]
 8008574:	4619      	mov	r1, r3
 8008576:	2208      	movs	r2, #8
 8008578:	305c      	adds	r0, #92	; 0x5c
 800857a:	f000 f9ed 	bl	8008958 <memset>
 800857e:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <std+0x58>)
 8008580:	6263      	str	r3, [r4, #36]	; 0x24
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <std+0x5c>)
 8008584:	62a3      	str	r3, [r4, #40]	; 0x28
 8008586:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <std+0x60>)
 8008588:	62e3      	str	r3, [r4, #44]	; 0x2c
 800858a:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <std+0x64>)
 800858c:	6323      	str	r3, [r4, #48]	; 0x30
 800858e:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <std+0x68>)
 8008590:	6224      	str	r4, [r4, #32]
 8008592:	429c      	cmp	r4, r3
 8008594:	d006      	beq.n	80085a4 <std+0x48>
 8008596:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800859a:	4294      	cmp	r4, r2
 800859c:	d002      	beq.n	80085a4 <std+0x48>
 800859e:	33d0      	adds	r3, #208	; 0xd0
 80085a0:	429c      	cmp	r4, r3
 80085a2:	d105      	bne.n	80085b0 <std+0x54>
 80085a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ac:	f000 ba4c 	b.w	8008a48 <__retarget_lock_init_recursive>
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	bf00      	nop
 80085b4:	080087a9 	.word	0x080087a9
 80085b8:	080087cb 	.word	0x080087cb
 80085bc:	08008803 	.word	0x08008803
 80085c0:	08008827 	.word	0x08008827
 80085c4:	20000318 	.word	0x20000318

080085c8 <stdio_exit_handler>:
 80085c8:	4a02      	ldr	r2, [pc, #8]	; (80085d4 <stdio_exit_handler+0xc>)
 80085ca:	4903      	ldr	r1, [pc, #12]	; (80085d8 <stdio_exit_handler+0x10>)
 80085cc:	4803      	ldr	r0, [pc, #12]	; (80085dc <stdio_exit_handler+0x14>)
 80085ce:	f000 b869 	b.w	80086a4 <_fwalk_sglue>
 80085d2:	bf00      	nop
 80085d4:	20000010 	.word	0x20000010
 80085d8:	08008d4d 	.word	0x08008d4d
 80085dc:	2000001c 	.word	0x2000001c

080085e0 <cleanup_stdio>:
 80085e0:	6841      	ldr	r1, [r0, #4]
 80085e2:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <cleanup_stdio+0x34>)
 80085e4:	4299      	cmp	r1, r3
 80085e6:	b510      	push	{r4, lr}
 80085e8:	4604      	mov	r4, r0
 80085ea:	d001      	beq.n	80085f0 <cleanup_stdio+0x10>
 80085ec:	f000 fbae 	bl	8008d4c <_fflush_r>
 80085f0:	68a1      	ldr	r1, [r4, #8]
 80085f2:	4b09      	ldr	r3, [pc, #36]	; (8008618 <cleanup_stdio+0x38>)
 80085f4:	4299      	cmp	r1, r3
 80085f6:	d002      	beq.n	80085fe <cleanup_stdio+0x1e>
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 fba7 	bl	8008d4c <_fflush_r>
 80085fe:	68e1      	ldr	r1, [r4, #12]
 8008600:	4b06      	ldr	r3, [pc, #24]	; (800861c <cleanup_stdio+0x3c>)
 8008602:	4299      	cmp	r1, r3
 8008604:	d004      	beq.n	8008610 <cleanup_stdio+0x30>
 8008606:	4620      	mov	r0, r4
 8008608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800860c:	f000 bb9e 	b.w	8008d4c <_fflush_r>
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop
 8008614:	20000318 	.word	0x20000318
 8008618:	20000380 	.word	0x20000380
 800861c:	200003e8 	.word	0x200003e8

08008620 <global_stdio_init.part.0>:
 8008620:	b510      	push	{r4, lr}
 8008622:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <global_stdio_init.part.0+0x30>)
 8008624:	4c0b      	ldr	r4, [pc, #44]	; (8008654 <global_stdio_init.part.0+0x34>)
 8008626:	4a0c      	ldr	r2, [pc, #48]	; (8008658 <global_stdio_init.part.0+0x38>)
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	4620      	mov	r0, r4
 800862c:	2200      	movs	r2, #0
 800862e:	2104      	movs	r1, #4
 8008630:	f7ff ff94 	bl	800855c <std>
 8008634:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008638:	2201      	movs	r2, #1
 800863a:	2109      	movs	r1, #9
 800863c:	f7ff ff8e 	bl	800855c <std>
 8008640:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008644:	2202      	movs	r2, #2
 8008646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864a:	2112      	movs	r1, #18
 800864c:	f7ff bf86 	b.w	800855c <std>
 8008650:	20000450 	.word	0x20000450
 8008654:	20000318 	.word	0x20000318
 8008658:	080085c9 	.word	0x080085c9

0800865c <__sfp_lock_acquire>:
 800865c:	4801      	ldr	r0, [pc, #4]	; (8008664 <__sfp_lock_acquire+0x8>)
 800865e:	f000 b9f4 	b.w	8008a4a <__retarget_lock_acquire_recursive>
 8008662:	bf00      	nop
 8008664:	20000459 	.word	0x20000459

08008668 <__sfp_lock_release>:
 8008668:	4801      	ldr	r0, [pc, #4]	; (8008670 <__sfp_lock_release+0x8>)
 800866a:	f000 b9ef 	b.w	8008a4c <__retarget_lock_release_recursive>
 800866e:	bf00      	nop
 8008670:	20000459 	.word	0x20000459

08008674 <__sinit>:
 8008674:	b510      	push	{r4, lr}
 8008676:	4604      	mov	r4, r0
 8008678:	f7ff fff0 	bl	800865c <__sfp_lock_acquire>
 800867c:	6a23      	ldr	r3, [r4, #32]
 800867e:	b11b      	cbz	r3, 8008688 <__sinit+0x14>
 8008680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008684:	f7ff bff0 	b.w	8008668 <__sfp_lock_release>
 8008688:	4b04      	ldr	r3, [pc, #16]	; (800869c <__sinit+0x28>)
 800868a:	6223      	str	r3, [r4, #32]
 800868c:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <__sinit+0x2c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1f5      	bne.n	8008680 <__sinit+0xc>
 8008694:	f7ff ffc4 	bl	8008620 <global_stdio_init.part.0>
 8008698:	e7f2      	b.n	8008680 <__sinit+0xc>
 800869a:	bf00      	nop
 800869c:	080085e1 	.word	0x080085e1
 80086a0:	20000450 	.word	0x20000450

080086a4 <_fwalk_sglue>:
 80086a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a8:	4607      	mov	r7, r0
 80086aa:	4688      	mov	r8, r1
 80086ac:	4614      	mov	r4, r2
 80086ae:	2600      	movs	r6, #0
 80086b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086b4:	f1b9 0901 	subs.w	r9, r9, #1
 80086b8:	d505      	bpl.n	80086c6 <_fwalk_sglue+0x22>
 80086ba:	6824      	ldr	r4, [r4, #0]
 80086bc:	2c00      	cmp	r4, #0
 80086be:	d1f7      	bne.n	80086b0 <_fwalk_sglue+0xc>
 80086c0:	4630      	mov	r0, r6
 80086c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c6:	89ab      	ldrh	r3, [r5, #12]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d907      	bls.n	80086dc <_fwalk_sglue+0x38>
 80086cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086d0:	3301      	adds	r3, #1
 80086d2:	d003      	beq.n	80086dc <_fwalk_sglue+0x38>
 80086d4:	4629      	mov	r1, r5
 80086d6:	4638      	mov	r0, r7
 80086d8:	47c0      	blx	r8
 80086da:	4306      	orrs	r6, r0
 80086dc:	3568      	adds	r5, #104	; 0x68
 80086de:	e7e9      	b.n	80086b4 <_fwalk_sglue+0x10>

080086e0 <putchar>:
 80086e0:	4b02      	ldr	r3, [pc, #8]	; (80086ec <putchar+0xc>)
 80086e2:	4601      	mov	r1, r0
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	6882      	ldr	r2, [r0, #8]
 80086e8:	f000 bbba 	b.w	8008e60 <_putc_r>
 80086ec:	20000068 	.word	0x20000068

080086f0 <_puts_r>:
 80086f0:	6a03      	ldr	r3, [r0, #32]
 80086f2:	b570      	push	{r4, r5, r6, lr}
 80086f4:	6884      	ldr	r4, [r0, #8]
 80086f6:	4605      	mov	r5, r0
 80086f8:	460e      	mov	r6, r1
 80086fa:	b90b      	cbnz	r3, 8008700 <_puts_r+0x10>
 80086fc:	f7ff ffba 	bl	8008674 <__sinit>
 8008700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008702:	07db      	lsls	r3, r3, #31
 8008704:	d405      	bmi.n	8008712 <_puts_r+0x22>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	0598      	lsls	r0, r3, #22
 800870a:	d402      	bmi.n	8008712 <_puts_r+0x22>
 800870c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870e:	f000 f99c 	bl	8008a4a <__retarget_lock_acquire_recursive>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	0719      	lsls	r1, r3, #28
 8008716:	d513      	bpl.n	8008740 <_puts_r+0x50>
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	b18b      	cbz	r3, 8008740 <_puts_r+0x50>
 800871c:	3e01      	subs	r6, #1
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008724:	3b01      	subs	r3, #1
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	b9e9      	cbnz	r1, 8008766 <_puts_r+0x76>
 800872a:	2b00      	cmp	r3, #0
 800872c:	da2e      	bge.n	800878c <_puts_r+0x9c>
 800872e:	4622      	mov	r2, r4
 8008730:	210a      	movs	r1, #10
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f87b 	bl	800882e <__swbuf_r>
 8008738:	3001      	adds	r0, #1
 800873a:	d007      	beq.n	800874c <_puts_r+0x5c>
 800873c:	250a      	movs	r5, #10
 800873e:	e007      	b.n	8008750 <_puts_r+0x60>
 8008740:	4621      	mov	r1, r4
 8008742:	4628      	mov	r0, r5
 8008744:	f000 f8b0 	bl	80088a8 <__swsetup_r>
 8008748:	2800      	cmp	r0, #0
 800874a:	d0e7      	beq.n	800871c <_puts_r+0x2c>
 800874c:	f04f 35ff 	mov.w	r5, #4294967295
 8008750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008752:	07da      	lsls	r2, r3, #31
 8008754:	d405      	bmi.n	8008762 <_puts_r+0x72>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	059b      	lsls	r3, r3, #22
 800875a:	d402      	bmi.n	8008762 <_puts_r+0x72>
 800875c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800875e:	f000 f975 	bl	8008a4c <__retarget_lock_release_recursive>
 8008762:	4628      	mov	r0, r5
 8008764:	bd70      	pop	{r4, r5, r6, pc}
 8008766:	2b00      	cmp	r3, #0
 8008768:	da04      	bge.n	8008774 <_puts_r+0x84>
 800876a:	69a2      	ldr	r2, [r4, #24]
 800876c:	429a      	cmp	r2, r3
 800876e:	dc06      	bgt.n	800877e <_puts_r+0x8e>
 8008770:	290a      	cmp	r1, #10
 8008772:	d004      	beq.n	800877e <_puts_r+0x8e>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	6022      	str	r2, [r4, #0]
 800877a:	7019      	strb	r1, [r3, #0]
 800877c:	e7cf      	b.n	800871e <_puts_r+0x2e>
 800877e:	4622      	mov	r2, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f000 f854 	bl	800882e <__swbuf_r>
 8008786:	3001      	adds	r0, #1
 8008788:	d1c9      	bne.n	800871e <_puts_r+0x2e>
 800878a:	e7df      	b.n	800874c <_puts_r+0x5c>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	250a      	movs	r5, #10
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	6022      	str	r2, [r4, #0]
 8008794:	701d      	strb	r5, [r3, #0]
 8008796:	e7db      	b.n	8008750 <_puts_r+0x60>

08008798 <puts>:
 8008798:	4b02      	ldr	r3, [pc, #8]	; (80087a4 <puts+0xc>)
 800879a:	4601      	mov	r1, r0
 800879c:	6818      	ldr	r0, [r3, #0]
 800879e:	f7ff bfa7 	b.w	80086f0 <_puts_r>
 80087a2:	bf00      	nop
 80087a4:	20000068 	.word	0x20000068

080087a8 <__sread>:
 80087a8:	b510      	push	{r4, lr}
 80087aa:	460c      	mov	r4, r1
 80087ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b0:	f000 f8fc 	bl	80089ac <_read_r>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	bfab      	itete	ge
 80087b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087ba:	89a3      	ldrhlt	r3, [r4, #12]
 80087bc:	181b      	addge	r3, r3, r0
 80087be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087c2:	bfac      	ite	ge
 80087c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80087c6:	81a3      	strhlt	r3, [r4, #12]
 80087c8:	bd10      	pop	{r4, pc}

080087ca <__swrite>:
 80087ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ce:	461f      	mov	r7, r3
 80087d0:	898b      	ldrh	r3, [r1, #12]
 80087d2:	05db      	lsls	r3, r3, #23
 80087d4:	4605      	mov	r5, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	4616      	mov	r6, r2
 80087da:	d505      	bpl.n	80087e8 <__swrite+0x1e>
 80087dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e0:	2302      	movs	r3, #2
 80087e2:	2200      	movs	r2, #0
 80087e4:	f000 f8d0 	bl	8008988 <_lseek_r>
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	4632      	mov	r2, r6
 80087f6:	463b      	mov	r3, r7
 80087f8:	4628      	mov	r0, r5
 80087fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087fe:	f000 b8e7 	b.w	80089d0 <_write_r>

08008802 <__sseek>:
 8008802:	b510      	push	{r4, lr}
 8008804:	460c      	mov	r4, r1
 8008806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800880a:	f000 f8bd 	bl	8008988 <_lseek_r>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	bf15      	itete	ne
 8008814:	6560      	strne	r0, [r4, #84]	; 0x54
 8008816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800881a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800881e:	81a3      	strheq	r3, [r4, #12]
 8008820:	bf18      	it	ne
 8008822:	81a3      	strhne	r3, [r4, #12]
 8008824:	bd10      	pop	{r4, pc}

08008826 <__sclose>:
 8008826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800882a:	f000 b89d 	b.w	8008968 <_close_r>

0800882e <__swbuf_r>:
 800882e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008830:	460e      	mov	r6, r1
 8008832:	4614      	mov	r4, r2
 8008834:	4605      	mov	r5, r0
 8008836:	b118      	cbz	r0, 8008840 <__swbuf_r+0x12>
 8008838:	6a03      	ldr	r3, [r0, #32]
 800883a:	b90b      	cbnz	r3, 8008840 <__swbuf_r+0x12>
 800883c:	f7ff ff1a 	bl	8008674 <__sinit>
 8008840:	69a3      	ldr	r3, [r4, #24]
 8008842:	60a3      	str	r3, [r4, #8]
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	071a      	lsls	r2, r3, #28
 8008848:	d525      	bpl.n	8008896 <__swbuf_r+0x68>
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	b31b      	cbz	r3, 8008896 <__swbuf_r+0x68>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	6922      	ldr	r2, [r4, #16]
 8008852:	1a98      	subs	r0, r3, r2
 8008854:	6963      	ldr	r3, [r4, #20]
 8008856:	b2f6      	uxtb	r6, r6
 8008858:	4283      	cmp	r3, r0
 800885a:	4637      	mov	r7, r6
 800885c:	dc04      	bgt.n	8008868 <__swbuf_r+0x3a>
 800885e:	4621      	mov	r1, r4
 8008860:	4628      	mov	r0, r5
 8008862:	f000 fa73 	bl	8008d4c <_fflush_r>
 8008866:	b9e0      	cbnz	r0, 80088a2 <__swbuf_r+0x74>
 8008868:	68a3      	ldr	r3, [r4, #8]
 800886a:	3b01      	subs	r3, #1
 800886c:	60a3      	str	r3, [r4, #8]
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	6022      	str	r2, [r4, #0]
 8008874:	701e      	strb	r6, [r3, #0]
 8008876:	6962      	ldr	r2, [r4, #20]
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	429a      	cmp	r2, r3
 800887c:	d004      	beq.n	8008888 <__swbuf_r+0x5a>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	07db      	lsls	r3, r3, #31
 8008882:	d506      	bpl.n	8008892 <__swbuf_r+0x64>
 8008884:	2e0a      	cmp	r6, #10
 8008886:	d104      	bne.n	8008892 <__swbuf_r+0x64>
 8008888:	4621      	mov	r1, r4
 800888a:	4628      	mov	r0, r5
 800888c:	f000 fa5e 	bl	8008d4c <_fflush_r>
 8008890:	b938      	cbnz	r0, 80088a2 <__swbuf_r+0x74>
 8008892:	4638      	mov	r0, r7
 8008894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008896:	4621      	mov	r1, r4
 8008898:	4628      	mov	r0, r5
 800889a:	f000 f805 	bl	80088a8 <__swsetup_r>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d0d5      	beq.n	800884e <__swbuf_r+0x20>
 80088a2:	f04f 37ff 	mov.w	r7, #4294967295
 80088a6:	e7f4      	b.n	8008892 <__swbuf_r+0x64>

080088a8 <__swsetup_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4b2a      	ldr	r3, [pc, #168]	; (8008954 <__swsetup_r+0xac>)
 80088ac:	4605      	mov	r5, r0
 80088ae:	6818      	ldr	r0, [r3, #0]
 80088b0:	460c      	mov	r4, r1
 80088b2:	b118      	cbz	r0, 80088bc <__swsetup_r+0x14>
 80088b4:	6a03      	ldr	r3, [r0, #32]
 80088b6:	b90b      	cbnz	r3, 80088bc <__swsetup_r+0x14>
 80088b8:	f7ff fedc 	bl	8008674 <__sinit>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088c2:	0718      	lsls	r0, r3, #28
 80088c4:	d422      	bmi.n	800890c <__swsetup_r+0x64>
 80088c6:	06d9      	lsls	r1, r3, #27
 80088c8:	d407      	bmi.n	80088da <__swsetup_r+0x32>
 80088ca:	2309      	movs	r3, #9
 80088cc:	602b      	str	r3, [r5, #0]
 80088ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	e034      	b.n	8008944 <__swsetup_r+0x9c>
 80088da:	0758      	lsls	r0, r3, #29
 80088dc:	d512      	bpl.n	8008904 <__swsetup_r+0x5c>
 80088de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088e0:	b141      	cbz	r1, 80088f4 <__swsetup_r+0x4c>
 80088e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e6:	4299      	cmp	r1, r3
 80088e8:	d002      	beq.n	80088f0 <__swsetup_r+0x48>
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 f8b0 	bl	8008a50 <_free_r>
 80088f0:	2300      	movs	r3, #0
 80088f2:	6363      	str	r3, [r4, #52]	; 0x34
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	2300      	movs	r3, #0
 80088fe:	6063      	str	r3, [r4, #4]
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	6023      	str	r3, [r4, #0]
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	f043 0308 	orr.w	r3, r3, #8
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	b94b      	cbnz	r3, 8008924 <__swsetup_r+0x7c>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891a:	d003      	beq.n	8008924 <__swsetup_r+0x7c>
 800891c:	4621      	mov	r1, r4
 800891e:	4628      	mov	r0, r5
 8008920:	f000 fa62 	bl	8008de8 <__smakebuf_r>
 8008924:	89a0      	ldrh	r0, [r4, #12]
 8008926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800892a:	f010 0301 	ands.w	r3, r0, #1
 800892e:	d00a      	beq.n	8008946 <__swsetup_r+0x9e>
 8008930:	2300      	movs	r3, #0
 8008932:	60a3      	str	r3, [r4, #8]
 8008934:	6963      	ldr	r3, [r4, #20]
 8008936:	425b      	negs	r3, r3
 8008938:	61a3      	str	r3, [r4, #24]
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	b943      	cbnz	r3, 8008950 <__swsetup_r+0xa8>
 800893e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008942:	d1c4      	bne.n	80088ce <__swsetup_r+0x26>
 8008944:	bd38      	pop	{r3, r4, r5, pc}
 8008946:	0781      	lsls	r1, r0, #30
 8008948:	bf58      	it	pl
 800894a:	6963      	ldrpl	r3, [r4, #20]
 800894c:	60a3      	str	r3, [r4, #8]
 800894e:	e7f4      	b.n	800893a <__swsetup_r+0x92>
 8008950:	2000      	movs	r0, #0
 8008952:	e7f7      	b.n	8008944 <__swsetup_r+0x9c>
 8008954:	20000068 	.word	0x20000068

08008958 <memset>:
 8008958:	4402      	add	r2, r0
 800895a:	4603      	mov	r3, r0
 800895c:	4293      	cmp	r3, r2
 800895e:	d100      	bne.n	8008962 <memset+0xa>
 8008960:	4770      	bx	lr
 8008962:	f803 1b01 	strb.w	r1, [r3], #1
 8008966:	e7f9      	b.n	800895c <memset+0x4>

08008968 <_close_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d06      	ldr	r5, [pc, #24]	; (8008984 <_close_r+0x1c>)
 800896c:	2300      	movs	r3, #0
 800896e:	4604      	mov	r4, r0
 8008970:	4608      	mov	r0, r1
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	f7fc f999 	bl	8004caa <_close>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_close_r+0x1a>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b103      	cbz	r3, 8008982 <_close_r+0x1a>
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	20000454 	.word	0x20000454

08008988 <_lseek_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d07      	ldr	r5, [pc, #28]	; (80089a8 <_lseek_r+0x20>)
 800898c:	4604      	mov	r4, r0
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	2200      	movs	r2, #0
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f7fc f9ae 	bl	8004cf8 <_lseek>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_lseek_r+0x1e>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_lseek_r+0x1e>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000454 	.word	0x20000454

080089ac <_read_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4d07      	ldr	r5, [pc, #28]	; (80089cc <_read_r+0x20>)
 80089b0:	4604      	mov	r4, r0
 80089b2:	4608      	mov	r0, r1
 80089b4:	4611      	mov	r1, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	602a      	str	r2, [r5, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	f7fc f93c 	bl	8004c38 <_read>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_read_r+0x1e>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_read_r+0x1e>
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	20000454 	.word	0x20000454

080089d0 <_write_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d07      	ldr	r5, [pc, #28]	; (80089f0 <_write_r+0x20>)
 80089d4:	4604      	mov	r4, r0
 80089d6:	4608      	mov	r0, r1
 80089d8:	4611      	mov	r1, r2
 80089da:	2200      	movs	r2, #0
 80089dc:	602a      	str	r2, [r5, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	f7fc f947 	bl	8004c72 <_write>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_write_r+0x1e>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_write_r+0x1e>
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	20000454 	.word	0x20000454

080089f4 <__errno>:
 80089f4:	4b01      	ldr	r3, [pc, #4]	; (80089fc <__errno+0x8>)
 80089f6:	6818      	ldr	r0, [r3, #0]
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20000068 	.word	0x20000068

08008a00 <__libc_init_array>:
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	4d0d      	ldr	r5, [pc, #52]	; (8008a38 <__libc_init_array+0x38>)
 8008a04:	4c0d      	ldr	r4, [pc, #52]	; (8008a3c <__libc_init_array+0x3c>)
 8008a06:	1b64      	subs	r4, r4, r5
 8008a08:	10a4      	asrs	r4, r4, #2
 8008a0a:	2600      	movs	r6, #0
 8008a0c:	42a6      	cmp	r6, r4
 8008a0e:	d109      	bne.n	8008a24 <__libc_init_array+0x24>
 8008a10:	4d0b      	ldr	r5, [pc, #44]	; (8008a40 <__libc_init_array+0x40>)
 8008a12:	4c0c      	ldr	r4, [pc, #48]	; (8008a44 <__libc_init_array+0x44>)
 8008a14:	f000 fa8a 	bl	8008f2c <_init>
 8008a18:	1b64      	subs	r4, r4, r5
 8008a1a:	10a4      	asrs	r4, r4, #2
 8008a1c:	2600      	movs	r6, #0
 8008a1e:	42a6      	cmp	r6, r4
 8008a20:	d105      	bne.n	8008a2e <__libc_init_array+0x2e>
 8008a22:	bd70      	pop	{r4, r5, r6, pc}
 8008a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a28:	4798      	blx	r3
 8008a2a:	3601      	adds	r6, #1
 8008a2c:	e7ee      	b.n	8008a0c <__libc_init_array+0xc>
 8008a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a32:	4798      	blx	r3
 8008a34:	3601      	adds	r6, #1
 8008a36:	e7f2      	b.n	8008a1e <__libc_init_array+0x1e>
 8008a38:	0800bf9c 	.word	0x0800bf9c
 8008a3c:	0800bf9c 	.word	0x0800bf9c
 8008a40:	0800bf9c 	.word	0x0800bf9c
 8008a44:	0800bfa0 	.word	0x0800bfa0

08008a48 <__retarget_lock_init_recursive>:
 8008a48:	4770      	bx	lr

08008a4a <__retarget_lock_acquire_recursive>:
 8008a4a:	4770      	bx	lr

08008a4c <__retarget_lock_release_recursive>:
 8008a4c:	4770      	bx	lr
	...

08008a50 <_free_r>:
 8008a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a52:	2900      	cmp	r1, #0
 8008a54:	d044      	beq.n	8008ae0 <_free_r+0x90>
 8008a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a5a:	9001      	str	r0, [sp, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a62:	bfb8      	it	lt
 8008a64:	18e4      	addlt	r4, r4, r3
 8008a66:	f000 f8df 	bl	8008c28 <__malloc_lock>
 8008a6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ae4 <_free_r+0x94>)
 8008a6c:	9801      	ldr	r0, [sp, #4]
 8008a6e:	6813      	ldr	r3, [r2, #0]
 8008a70:	b933      	cbnz	r3, 8008a80 <_free_r+0x30>
 8008a72:	6063      	str	r3, [r4, #4]
 8008a74:	6014      	str	r4, [r2, #0]
 8008a76:	b003      	add	sp, #12
 8008a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a7c:	f000 b8da 	b.w	8008c34 <__malloc_unlock>
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	d908      	bls.n	8008a96 <_free_r+0x46>
 8008a84:	6825      	ldr	r5, [r4, #0]
 8008a86:	1961      	adds	r1, r4, r5
 8008a88:	428b      	cmp	r3, r1
 8008a8a:	bf01      	itttt	eq
 8008a8c:	6819      	ldreq	r1, [r3, #0]
 8008a8e:	685b      	ldreq	r3, [r3, #4]
 8008a90:	1949      	addeq	r1, r1, r5
 8008a92:	6021      	streq	r1, [r4, #0]
 8008a94:	e7ed      	b.n	8008a72 <_free_r+0x22>
 8008a96:	461a      	mov	r2, r3
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	b10b      	cbz	r3, 8008aa0 <_free_r+0x50>
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d9fa      	bls.n	8008a96 <_free_r+0x46>
 8008aa0:	6811      	ldr	r1, [r2, #0]
 8008aa2:	1855      	adds	r5, r2, r1
 8008aa4:	42a5      	cmp	r5, r4
 8008aa6:	d10b      	bne.n	8008ac0 <_free_r+0x70>
 8008aa8:	6824      	ldr	r4, [r4, #0]
 8008aaa:	4421      	add	r1, r4
 8008aac:	1854      	adds	r4, r2, r1
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	6011      	str	r1, [r2, #0]
 8008ab2:	d1e0      	bne.n	8008a76 <_free_r+0x26>
 8008ab4:	681c      	ldr	r4, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	6053      	str	r3, [r2, #4]
 8008aba:	440c      	add	r4, r1
 8008abc:	6014      	str	r4, [r2, #0]
 8008abe:	e7da      	b.n	8008a76 <_free_r+0x26>
 8008ac0:	d902      	bls.n	8008ac8 <_free_r+0x78>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	6003      	str	r3, [r0, #0]
 8008ac6:	e7d6      	b.n	8008a76 <_free_r+0x26>
 8008ac8:	6825      	ldr	r5, [r4, #0]
 8008aca:	1961      	adds	r1, r4, r5
 8008acc:	428b      	cmp	r3, r1
 8008ace:	bf04      	itt	eq
 8008ad0:	6819      	ldreq	r1, [r3, #0]
 8008ad2:	685b      	ldreq	r3, [r3, #4]
 8008ad4:	6063      	str	r3, [r4, #4]
 8008ad6:	bf04      	itt	eq
 8008ad8:	1949      	addeq	r1, r1, r5
 8008ada:	6021      	streq	r1, [r4, #0]
 8008adc:	6054      	str	r4, [r2, #4]
 8008ade:	e7ca      	b.n	8008a76 <_free_r+0x26>
 8008ae0:	b003      	add	sp, #12
 8008ae2:	bd30      	pop	{r4, r5, pc}
 8008ae4:	2000045c 	.word	0x2000045c

08008ae8 <sbrk_aligned>:
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	4e0e      	ldr	r6, [pc, #56]	; (8008b24 <sbrk_aligned+0x3c>)
 8008aec:	460c      	mov	r4, r1
 8008aee:	6831      	ldr	r1, [r6, #0]
 8008af0:	4605      	mov	r5, r0
 8008af2:	b911      	cbnz	r1, 8008afa <sbrk_aligned+0x12>
 8008af4:	f000 fa0a 	bl	8008f0c <_sbrk_r>
 8008af8:	6030      	str	r0, [r6, #0]
 8008afa:	4621      	mov	r1, r4
 8008afc:	4628      	mov	r0, r5
 8008afe:	f000 fa05 	bl	8008f0c <_sbrk_r>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	d00a      	beq.n	8008b1c <sbrk_aligned+0x34>
 8008b06:	1cc4      	adds	r4, r0, #3
 8008b08:	f024 0403 	bic.w	r4, r4, #3
 8008b0c:	42a0      	cmp	r0, r4
 8008b0e:	d007      	beq.n	8008b20 <sbrk_aligned+0x38>
 8008b10:	1a21      	subs	r1, r4, r0
 8008b12:	4628      	mov	r0, r5
 8008b14:	f000 f9fa 	bl	8008f0c <_sbrk_r>
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d101      	bne.n	8008b20 <sbrk_aligned+0x38>
 8008b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b20:	4620      	mov	r0, r4
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	20000460 	.word	0x20000460

08008b28 <_malloc_r>:
 8008b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	1ccd      	adds	r5, r1, #3
 8008b2e:	f025 0503 	bic.w	r5, r5, #3
 8008b32:	3508      	adds	r5, #8
 8008b34:	2d0c      	cmp	r5, #12
 8008b36:	bf38      	it	cc
 8008b38:	250c      	movcc	r5, #12
 8008b3a:	2d00      	cmp	r5, #0
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	db01      	blt.n	8008b44 <_malloc_r+0x1c>
 8008b40:	42a9      	cmp	r1, r5
 8008b42:	d905      	bls.n	8008b50 <_malloc_r+0x28>
 8008b44:	230c      	movs	r3, #12
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	2600      	movs	r6, #0
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c24 <_malloc_r+0xfc>
 8008b54:	f000 f868 	bl	8008c28 <__malloc_lock>
 8008b58:	f8d8 3000 	ldr.w	r3, [r8]
 8008b5c:	461c      	mov	r4, r3
 8008b5e:	bb5c      	cbnz	r4, 8008bb8 <_malloc_r+0x90>
 8008b60:	4629      	mov	r1, r5
 8008b62:	4638      	mov	r0, r7
 8008b64:	f7ff ffc0 	bl	8008ae8 <sbrk_aligned>
 8008b68:	1c43      	adds	r3, r0, #1
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	d155      	bne.n	8008c1a <_malloc_r+0xf2>
 8008b6e:	f8d8 4000 	ldr.w	r4, [r8]
 8008b72:	4626      	mov	r6, r4
 8008b74:	2e00      	cmp	r6, #0
 8008b76:	d145      	bne.n	8008c04 <_malloc_r+0xdc>
 8008b78:	2c00      	cmp	r4, #0
 8008b7a:	d048      	beq.n	8008c0e <_malloc_r+0xe6>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4638      	mov	r0, r7
 8008b82:	eb04 0903 	add.w	r9, r4, r3
 8008b86:	f000 f9c1 	bl	8008f0c <_sbrk_r>
 8008b8a:	4581      	cmp	r9, r0
 8008b8c:	d13f      	bne.n	8008c0e <_malloc_r+0xe6>
 8008b8e:	6821      	ldr	r1, [r4, #0]
 8008b90:	1a6d      	subs	r5, r5, r1
 8008b92:	4629      	mov	r1, r5
 8008b94:	4638      	mov	r0, r7
 8008b96:	f7ff ffa7 	bl	8008ae8 <sbrk_aligned>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d037      	beq.n	8008c0e <_malloc_r+0xe6>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	442b      	add	r3, r5
 8008ba2:	6023      	str	r3, [r4, #0]
 8008ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d038      	beq.n	8008c1e <_malloc_r+0xf6>
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	42a2      	cmp	r2, r4
 8008bb0:	d12b      	bne.n	8008c0a <_malloc_r+0xe2>
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	605a      	str	r2, [r3, #4]
 8008bb6:	e00f      	b.n	8008bd8 <_malloc_r+0xb0>
 8008bb8:	6822      	ldr	r2, [r4, #0]
 8008bba:	1b52      	subs	r2, r2, r5
 8008bbc:	d41f      	bmi.n	8008bfe <_malloc_r+0xd6>
 8008bbe:	2a0b      	cmp	r2, #11
 8008bc0:	d917      	bls.n	8008bf2 <_malloc_r+0xca>
 8008bc2:	1961      	adds	r1, r4, r5
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	6025      	str	r5, [r4, #0]
 8008bc8:	bf18      	it	ne
 8008bca:	6059      	strne	r1, [r3, #4]
 8008bcc:	6863      	ldr	r3, [r4, #4]
 8008bce:	bf08      	it	eq
 8008bd0:	f8c8 1000 	streq.w	r1, [r8]
 8008bd4:	5162      	str	r2, [r4, r5]
 8008bd6:	604b      	str	r3, [r1, #4]
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f104 060b 	add.w	r6, r4, #11
 8008bde:	f000 f829 	bl	8008c34 <__malloc_unlock>
 8008be2:	f026 0607 	bic.w	r6, r6, #7
 8008be6:	1d23      	adds	r3, r4, #4
 8008be8:	1af2      	subs	r2, r6, r3
 8008bea:	d0ae      	beq.n	8008b4a <_malloc_r+0x22>
 8008bec:	1b9b      	subs	r3, r3, r6
 8008bee:	50a3      	str	r3, [r4, r2]
 8008bf0:	e7ab      	b.n	8008b4a <_malloc_r+0x22>
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	6862      	ldr	r2, [r4, #4]
 8008bf6:	d1dd      	bne.n	8008bb4 <_malloc_r+0x8c>
 8008bf8:	f8c8 2000 	str.w	r2, [r8]
 8008bfc:	e7ec      	b.n	8008bd8 <_malloc_r+0xb0>
 8008bfe:	4623      	mov	r3, r4
 8008c00:	6864      	ldr	r4, [r4, #4]
 8008c02:	e7ac      	b.n	8008b5e <_malloc_r+0x36>
 8008c04:	4634      	mov	r4, r6
 8008c06:	6876      	ldr	r6, [r6, #4]
 8008c08:	e7b4      	b.n	8008b74 <_malloc_r+0x4c>
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	e7cc      	b.n	8008ba8 <_malloc_r+0x80>
 8008c0e:	230c      	movs	r3, #12
 8008c10:	603b      	str	r3, [r7, #0]
 8008c12:	4638      	mov	r0, r7
 8008c14:	f000 f80e 	bl	8008c34 <__malloc_unlock>
 8008c18:	e797      	b.n	8008b4a <_malloc_r+0x22>
 8008c1a:	6025      	str	r5, [r4, #0]
 8008c1c:	e7dc      	b.n	8008bd8 <_malloc_r+0xb0>
 8008c1e:	605b      	str	r3, [r3, #4]
 8008c20:	deff      	udf	#255	; 0xff
 8008c22:	bf00      	nop
 8008c24:	2000045c 	.word	0x2000045c

08008c28 <__malloc_lock>:
 8008c28:	4801      	ldr	r0, [pc, #4]	; (8008c30 <__malloc_lock+0x8>)
 8008c2a:	f7ff bf0e 	b.w	8008a4a <__retarget_lock_acquire_recursive>
 8008c2e:	bf00      	nop
 8008c30:	20000458 	.word	0x20000458

08008c34 <__malloc_unlock>:
 8008c34:	4801      	ldr	r0, [pc, #4]	; (8008c3c <__malloc_unlock+0x8>)
 8008c36:	f7ff bf09 	b.w	8008a4c <__retarget_lock_release_recursive>
 8008c3a:	bf00      	nop
 8008c3c:	20000458 	.word	0x20000458

08008c40 <__sflush_r>:
 8008c40:	898a      	ldrh	r2, [r1, #12]
 8008c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c46:	4605      	mov	r5, r0
 8008c48:	0710      	lsls	r0, r2, #28
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	d458      	bmi.n	8008d00 <__sflush_r+0xc0>
 8008c4e:	684b      	ldr	r3, [r1, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dc05      	bgt.n	8008c60 <__sflush_r+0x20>
 8008c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	dc02      	bgt.n	8008c60 <__sflush_r+0x20>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c62:	2e00      	cmp	r6, #0
 8008c64:	d0f9      	beq.n	8008c5a <__sflush_r+0x1a>
 8008c66:	2300      	movs	r3, #0
 8008c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c6c:	682f      	ldr	r7, [r5, #0]
 8008c6e:	6a21      	ldr	r1, [r4, #32]
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	d032      	beq.n	8008cda <__sflush_r+0x9a>
 8008c74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	075a      	lsls	r2, r3, #29
 8008c7a:	d505      	bpl.n	8008c88 <__sflush_r+0x48>
 8008c7c:	6863      	ldr	r3, [r4, #4]
 8008c7e:	1ac0      	subs	r0, r0, r3
 8008c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c82:	b10b      	cbz	r3, 8008c88 <__sflush_r+0x48>
 8008c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c86:	1ac0      	subs	r0, r0, r3
 8008c88:	2300      	movs	r3, #0
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c8e:	6a21      	ldr	r1, [r4, #32]
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b0      	blx	r6
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	d106      	bne.n	8008ca8 <__sflush_r+0x68>
 8008c9a:	6829      	ldr	r1, [r5, #0]
 8008c9c:	291d      	cmp	r1, #29
 8008c9e:	d82b      	bhi.n	8008cf8 <__sflush_r+0xb8>
 8008ca0:	4a29      	ldr	r2, [pc, #164]	; (8008d48 <__sflush_r+0x108>)
 8008ca2:	410a      	asrs	r2, r1
 8008ca4:	07d6      	lsls	r6, r2, #31
 8008ca6:	d427      	bmi.n	8008cf8 <__sflush_r+0xb8>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	6062      	str	r2, [r4, #4]
 8008cac:	04d9      	lsls	r1, r3, #19
 8008cae:	6922      	ldr	r2, [r4, #16]
 8008cb0:	6022      	str	r2, [r4, #0]
 8008cb2:	d504      	bpl.n	8008cbe <__sflush_r+0x7e>
 8008cb4:	1c42      	adds	r2, r0, #1
 8008cb6:	d101      	bne.n	8008cbc <__sflush_r+0x7c>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b903      	cbnz	r3, 8008cbe <__sflush_r+0x7e>
 8008cbc:	6560      	str	r0, [r4, #84]	; 0x54
 8008cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cc0:	602f      	str	r7, [r5, #0]
 8008cc2:	2900      	cmp	r1, #0
 8008cc4:	d0c9      	beq.n	8008c5a <__sflush_r+0x1a>
 8008cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cca:	4299      	cmp	r1, r3
 8008ccc:	d002      	beq.n	8008cd4 <__sflush_r+0x94>
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f7ff febe 	bl	8008a50 <_free_r>
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8008cd8:	e7c0      	b.n	8008c5c <__sflush_r+0x1c>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b0      	blx	r6
 8008ce0:	1c41      	adds	r1, r0, #1
 8008ce2:	d1c8      	bne.n	8008c76 <__sflush_r+0x36>
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0c5      	beq.n	8008c76 <__sflush_r+0x36>
 8008cea:	2b1d      	cmp	r3, #29
 8008cec:	d001      	beq.n	8008cf2 <__sflush_r+0xb2>
 8008cee:	2b16      	cmp	r3, #22
 8008cf0:	d101      	bne.n	8008cf6 <__sflush_r+0xb6>
 8008cf2:	602f      	str	r7, [r5, #0]
 8008cf4:	e7b1      	b.n	8008c5a <__sflush_r+0x1a>
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfc:	81a3      	strh	r3, [r4, #12]
 8008cfe:	e7ad      	b.n	8008c5c <__sflush_r+0x1c>
 8008d00:	690f      	ldr	r7, [r1, #16]
 8008d02:	2f00      	cmp	r7, #0
 8008d04:	d0a9      	beq.n	8008c5a <__sflush_r+0x1a>
 8008d06:	0793      	lsls	r3, r2, #30
 8008d08:	680e      	ldr	r6, [r1, #0]
 8008d0a:	bf08      	it	eq
 8008d0c:	694b      	ldreq	r3, [r1, #20]
 8008d0e:	600f      	str	r7, [r1, #0]
 8008d10:	bf18      	it	ne
 8008d12:	2300      	movne	r3, #0
 8008d14:	eba6 0807 	sub.w	r8, r6, r7
 8008d18:	608b      	str	r3, [r1, #8]
 8008d1a:	f1b8 0f00 	cmp.w	r8, #0
 8008d1e:	dd9c      	ble.n	8008c5a <__sflush_r+0x1a>
 8008d20:	6a21      	ldr	r1, [r4, #32]
 8008d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d24:	4643      	mov	r3, r8
 8008d26:	463a      	mov	r2, r7
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b0      	blx	r6
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	dc06      	bgt.n	8008d3e <__sflush_r+0xfe>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	e78e      	b.n	8008c5c <__sflush_r+0x1c>
 8008d3e:	4407      	add	r7, r0
 8008d40:	eba8 0800 	sub.w	r8, r8, r0
 8008d44:	e7e9      	b.n	8008d1a <__sflush_r+0xda>
 8008d46:	bf00      	nop
 8008d48:	dfbffffe 	.word	0xdfbffffe

08008d4c <_fflush_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	690b      	ldr	r3, [r1, #16]
 8008d50:	4605      	mov	r5, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	b913      	cbnz	r3, 8008d5c <_fflush_r+0x10>
 8008d56:	2500      	movs	r5, #0
 8008d58:	4628      	mov	r0, r5
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	b118      	cbz	r0, 8008d66 <_fflush_r+0x1a>
 8008d5e:	6a03      	ldr	r3, [r0, #32]
 8008d60:	b90b      	cbnz	r3, 8008d66 <_fflush_r+0x1a>
 8008d62:	f7ff fc87 	bl	8008674 <__sinit>
 8008d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f3      	beq.n	8008d56 <_fflush_r+0xa>
 8008d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d70:	07d0      	lsls	r0, r2, #31
 8008d72:	d404      	bmi.n	8008d7e <_fflush_r+0x32>
 8008d74:	0599      	lsls	r1, r3, #22
 8008d76:	d402      	bmi.n	8008d7e <_fflush_r+0x32>
 8008d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d7a:	f7ff fe66 	bl	8008a4a <__retarget_lock_acquire_recursive>
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4621      	mov	r1, r4
 8008d82:	f7ff ff5d 	bl	8008c40 <__sflush_r>
 8008d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d88:	07da      	lsls	r2, r3, #31
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	d4e4      	bmi.n	8008d58 <_fflush_r+0xc>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	059b      	lsls	r3, r3, #22
 8008d92:	d4e1      	bmi.n	8008d58 <_fflush_r+0xc>
 8008d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d96:	f7ff fe59 	bl	8008a4c <__retarget_lock_release_recursive>
 8008d9a:	e7dd      	b.n	8008d58 <_fflush_r+0xc>

08008d9c <__swhatbuf_r>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	460c      	mov	r4, r1
 8008da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da4:	2900      	cmp	r1, #0
 8008da6:	b096      	sub	sp, #88	; 0x58
 8008da8:	4615      	mov	r5, r2
 8008daa:	461e      	mov	r6, r3
 8008dac:	da0d      	bge.n	8008dca <__swhatbuf_r+0x2e>
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008db4:	f04f 0100 	mov.w	r1, #0
 8008db8:	bf0c      	ite	eq
 8008dba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008dbe:	2340      	movne	r3, #64	; 0x40
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	6031      	str	r1, [r6, #0]
 8008dc4:	602b      	str	r3, [r5, #0]
 8008dc6:	b016      	add	sp, #88	; 0x58
 8008dc8:	bd70      	pop	{r4, r5, r6, pc}
 8008dca:	466a      	mov	r2, sp
 8008dcc:	f000 f87c 	bl	8008ec8 <_fstat_r>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	dbec      	blt.n	8008dae <__swhatbuf_r+0x12>
 8008dd4:	9901      	ldr	r1, [sp, #4]
 8008dd6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008dda:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008dde:	4259      	negs	r1, r3
 8008de0:	4159      	adcs	r1, r3
 8008de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008de6:	e7eb      	b.n	8008dc0 <__swhatbuf_r+0x24>

08008de8 <__smakebuf_r>:
 8008de8:	898b      	ldrh	r3, [r1, #12]
 8008dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dec:	079d      	lsls	r5, r3, #30
 8008dee:	4606      	mov	r6, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	d507      	bpl.n	8008e04 <__smakebuf_r+0x1c>
 8008df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	6123      	str	r3, [r4, #16]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	6163      	str	r3, [r4, #20]
 8008e00:	b002      	add	sp, #8
 8008e02:	bd70      	pop	{r4, r5, r6, pc}
 8008e04:	ab01      	add	r3, sp, #4
 8008e06:	466a      	mov	r2, sp
 8008e08:	f7ff ffc8 	bl	8008d9c <__swhatbuf_r>
 8008e0c:	9900      	ldr	r1, [sp, #0]
 8008e0e:	4605      	mov	r5, r0
 8008e10:	4630      	mov	r0, r6
 8008e12:	f7ff fe89 	bl	8008b28 <_malloc_r>
 8008e16:	b948      	cbnz	r0, 8008e2c <__smakebuf_r+0x44>
 8008e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e1c:	059a      	lsls	r2, r3, #22
 8008e1e:	d4ef      	bmi.n	8008e00 <__smakebuf_r+0x18>
 8008e20:	f023 0303 	bic.w	r3, r3, #3
 8008e24:	f043 0302 	orr.w	r3, r3, #2
 8008e28:	81a3      	strh	r3, [r4, #12]
 8008e2a:	e7e3      	b.n	8008df4 <__smakebuf_r+0xc>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	6020      	str	r0, [r4, #0]
 8008e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e34:	81a3      	strh	r3, [r4, #12]
 8008e36:	9b00      	ldr	r3, [sp, #0]
 8008e38:	6163      	str	r3, [r4, #20]
 8008e3a:	9b01      	ldr	r3, [sp, #4]
 8008e3c:	6120      	str	r0, [r4, #16]
 8008e3e:	b15b      	cbz	r3, 8008e58 <__smakebuf_r+0x70>
 8008e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e44:	4630      	mov	r0, r6
 8008e46:	f000 f851 	bl	8008eec <_isatty_r>
 8008e4a:	b128      	cbz	r0, 8008e58 <__smakebuf_r+0x70>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	431d      	orrs	r5, r3
 8008e5c:	81a5      	strh	r5, [r4, #12]
 8008e5e:	e7cf      	b.n	8008e00 <__smakebuf_r+0x18>

08008e60 <_putc_r>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	460d      	mov	r5, r1
 8008e64:	4614      	mov	r4, r2
 8008e66:	4606      	mov	r6, r0
 8008e68:	b118      	cbz	r0, 8008e72 <_putc_r+0x12>
 8008e6a:	6a03      	ldr	r3, [r0, #32]
 8008e6c:	b90b      	cbnz	r3, 8008e72 <_putc_r+0x12>
 8008e6e:	f7ff fc01 	bl	8008674 <__sinit>
 8008e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e74:	07d8      	lsls	r0, r3, #31
 8008e76:	d405      	bmi.n	8008e84 <_putc_r+0x24>
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	0599      	lsls	r1, r3, #22
 8008e7c:	d402      	bmi.n	8008e84 <_putc_r+0x24>
 8008e7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e80:	f7ff fde3 	bl	8008a4a <__retarget_lock_acquire_recursive>
 8008e84:	68a3      	ldr	r3, [r4, #8]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	60a3      	str	r3, [r4, #8]
 8008e8c:	da05      	bge.n	8008e9a <_putc_r+0x3a>
 8008e8e:	69a2      	ldr	r2, [r4, #24]
 8008e90:	4293      	cmp	r3, r2
 8008e92:	db12      	blt.n	8008eba <_putc_r+0x5a>
 8008e94:	b2eb      	uxtb	r3, r5
 8008e96:	2b0a      	cmp	r3, #10
 8008e98:	d00f      	beq.n	8008eba <_putc_r+0x5a>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	6022      	str	r2, [r4, #0]
 8008ea0:	701d      	strb	r5, [r3, #0]
 8008ea2:	b2ed      	uxtb	r5, r5
 8008ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ea6:	07da      	lsls	r2, r3, #31
 8008ea8:	d405      	bmi.n	8008eb6 <_putc_r+0x56>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	059b      	lsls	r3, r3, #22
 8008eae:	d402      	bmi.n	8008eb6 <_putc_r+0x56>
 8008eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb2:	f7ff fdcb 	bl	8008a4c <__retarget_lock_release_recursive>
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	bd70      	pop	{r4, r5, r6, pc}
 8008eba:	4629      	mov	r1, r5
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7ff fcb5 	bl	800882e <__swbuf_r>
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	e7ed      	b.n	8008ea4 <_putc_r+0x44>

08008ec8 <_fstat_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d07      	ldr	r5, [pc, #28]	; (8008ee8 <_fstat_r+0x20>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	f7fb fef4 	bl	8004cc2 <_fstat>
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	d102      	bne.n	8008ee4 <_fstat_r+0x1c>
 8008ede:	682b      	ldr	r3, [r5, #0]
 8008ee0:	b103      	cbz	r3, 8008ee4 <_fstat_r+0x1c>
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000454 	.word	0x20000454

08008eec <_isatty_r>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	4d06      	ldr	r5, [pc, #24]	; (8008f08 <_isatty_r+0x1c>)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	602b      	str	r3, [r5, #0]
 8008ef8:	f7fb fef3 	bl	8004ce2 <_isatty>
 8008efc:	1c43      	adds	r3, r0, #1
 8008efe:	d102      	bne.n	8008f06 <_isatty_r+0x1a>
 8008f00:	682b      	ldr	r3, [r5, #0]
 8008f02:	b103      	cbz	r3, 8008f06 <_isatty_r+0x1a>
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	bd38      	pop	{r3, r4, r5, pc}
 8008f08:	20000454 	.word	0x20000454

08008f0c <_sbrk_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d06      	ldr	r5, [pc, #24]	; (8008f28 <_sbrk_r+0x1c>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	f7fb fefc 	bl	8004d14 <_sbrk>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_sbrk_r+0x1a>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_sbrk_r+0x1a>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	20000454 	.word	0x20000454

08008f2c <_init>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr

08008f38 <_fini>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	bf00      	nop
 8008f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3e:	bc08      	pop	{r3}
 8008f40:	469e      	mov	lr, r3
 8008f42:	4770      	bx	lr
