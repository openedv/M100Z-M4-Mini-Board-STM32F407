
19_2_dac_triangular_wave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003068  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae9c  0800ae9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae9c  0800ae9c  0001ae9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aea4  0800aea4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aea4  0800aea4  0001aea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aea8  0800aea8  0001aea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800aeac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000304  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000374  20000374  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d5ba  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a1c  00000000  00000000  0002d69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bd8  00000000  00000000  000300c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008eb  00000000  00000000  00030c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023182  00000000  00000000  00031583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011909  00000000  00000000  00054705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca580  00000000  00000000  0006600e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035b8  00000000  00000000  00130590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00133b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e1c 	.word	0x08007e1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08007e1c 	.word	0x08007e1c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b970 	b.w	8000acc <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9e08      	ldr	r6, [sp, #32]
 800080a:	460d      	mov	r5, r1
 800080c:	4604      	mov	r4, r0
 800080e:	460f      	mov	r7, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14a      	bne.n	80008aa <__udivmoddi4+0xa6>
 8000814:	428a      	cmp	r2, r1
 8000816:	4694      	mov	ip, r2
 8000818:	d965      	bls.n	80008e6 <__udivmoddi4+0xe2>
 800081a:	fab2 f382 	clz	r3, r2
 800081e:	b143      	cbz	r3, 8000832 <__udivmoddi4+0x2e>
 8000820:	fa02 fc03 	lsl.w	ip, r2, r3
 8000824:	f1c3 0220 	rsb	r2, r3, #32
 8000828:	409f      	lsls	r7, r3
 800082a:	fa20 f202 	lsr.w	r2, r0, r2
 800082e:	4317      	orrs	r7, r2
 8000830:	409c      	lsls	r4, r3
 8000832:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000836:	fa1f f58c 	uxth.w	r5, ip
 800083a:	fbb7 f1fe 	udiv	r1, r7, lr
 800083e:	0c22      	lsrs	r2, r4, #16
 8000840:	fb0e 7711 	mls	r7, lr, r1, r7
 8000844:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000848:	fb01 f005 	mul.w	r0, r1, r5
 800084c:	4290      	cmp	r0, r2
 800084e:	d90a      	bls.n	8000866 <__udivmoddi4+0x62>
 8000850:	eb1c 0202 	adds.w	r2, ip, r2
 8000854:	f101 37ff 	add.w	r7, r1, #4294967295
 8000858:	f080 811c 	bcs.w	8000a94 <__udivmoddi4+0x290>
 800085c:	4290      	cmp	r0, r2
 800085e:	f240 8119 	bls.w	8000a94 <__udivmoddi4+0x290>
 8000862:	3902      	subs	r1, #2
 8000864:	4462      	add	r2, ip
 8000866:	1a12      	subs	r2, r2, r0
 8000868:	b2a4      	uxth	r4, r4
 800086a:	fbb2 f0fe 	udiv	r0, r2, lr
 800086e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000872:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000876:	fb00 f505 	mul.w	r5, r0, r5
 800087a:	42a5      	cmp	r5, r4
 800087c:	d90a      	bls.n	8000894 <__udivmoddi4+0x90>
 800087e:	eb1c 0404 	adds.w	r4, ip, r4
 8000882:	f100 32ff 	add.w	r2, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x294>
 800088a:	42a5      	cmp	r5, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x294>
 8000890:	4464      	add	r4, ip
 8000892:	3802      	subs	r0, #2
 8000894:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000898:	1b64      	subs	r4, r4, r5
 800089a:	2100      	movs	r1, #0
 800089c:	b11e      	cbz	r6, 80008a6 <__udivmoddi4+0xa2>
 800089e:	40dc      	lsrs	r4, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	e9c6 4300 	strd	r4, r3, [r6]
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0xbc>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	f000 80ed 	beq.w	8000a8e <__udivmoddi4+0x28a>
 80008b4:	2100      	movs	r1, #0
 80008b6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ba:	4608      	mov	r0, r1
 80008bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c0:	fab3 f183 	clz	r1, r3
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d149      	bne.n	800095c <__udivmoddi4+0x158>
 80008c8:	42ab      	cmp	r3, r5
 80008ca:	d302      	bcc.n	80008d2 <__udivmoddi4+0xce>
 80008cc:	4282      	cmp	r2, r0
 80008ce:	f200 80f8 	bhi.w	8000ac2 <__udivmoddi4+0x2be>
 80008d2:	1a84      	subs	r4, r0, r2
 80008d4:	eb65 0203 	sbc.w	r2, r5, r3
 80008d8:	2001      	movs	r0, #1
 80008da:	4617      	mov	r7, r2
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d0e2      	beq.n	80008a6 <__udivmoddi4+0xa2>
 80008e0:	e9c6 4700 	strd	r4, r7, [r6]
 80008e4:	e7df      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008e6:	b902      	cbnz	r2, 80008ea <__udivmoddi4+0xe6>
 80008e8:	deff      	udf	#255	; 0xff
 80008ea:	fab2 f382 	clz	r3, r2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f040 8090 	bne.w	8000a14 <__udivmoddi4+0x210>
 80008f4:	1a8a      	subs	r2, r1, r2
 80008f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fa:	fa1f fe8c 	uxth.w	lr, ip
 80008fe:	2101      	movs	r1, #1
 8000900:	fbb2 f5f7 	udiv	r5, r2, r7
 8000904:	fb07 2015 	mls	r0, r7, r5, r2
 8000908:	0c22      	lsrs	r2, r4, #16
 800090a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800090e:	fb0e f005 	mul.w	r0, lr, r5
 8000912:	4290      	cmp	r0, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x124>
 8000916:	eb1c 0202 	adds.w	r2, ip, r2
 800091a:	f105 38ff 	add.w	r8, r5, #4294967295
 800091e:	d202      	bcs.n	8000926 <__udivmoddi4+0x122>
 8000920:	4290      	cmp	r0, r2
 8000922:	f200 80cb 	bhi.w	8000abc <__udivmoddi4+0x2b8>
 8000926:	4645      	mov	r5, r8
 8000928:	1a12      	subs	r2, r2, r0
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000930:	fb07 2210 	mls	r2, r7, r0, r2
 8000934:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000938:	fb0e fe00 	mul.w	lr, lr, r0
 800093c:	45a6      	cmp	lr, r4
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x14e>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 32ff 	add.w	r2, r0, #4294967295
 8000948:	d202      	bcs.n	8000950 <__udivmoddi4+0x14c>
 800094a:	45a6      	cmp	lr, r4
 800094c:	f200 80bb 	bhi.w	8000ac6 <__udivmoddi4+0x2c2>
 8000950:	4610      	mov	r0, r2
 8000952:	eba4 040e 	sub.w	r4, r4, lr
 8000956:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800095a:	e79f      	b.n	800089c <__udivmoddi4+0x98>
 800095c:	f1c1 0720 	rsb	r7, r1, #32
 8000960:	408b      	lsls	r3, r1
 8000962:	fa22 fc07 	lsr.w	ip, r2, r7
 8000966:	ea4c 0c03 	orr.w	ip, ip, r3
 800096a:	fa05 f401 	lsl.w	r4, r5, r1
 800096e:	fa20 f307 	lsr.w	r3, r0, r7
 8000972:	40fd      	lsrs	r5, r7
 8000974:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000978:	4323      	orrs	r3, r4
 800097a:	fbb5 f8f9 	udiv	r8, r5, r9
 800097e:	fa1f fe8c 	uxth.w	lr, ip
 8000982:	fb09 5518 	mls	r5, r9, r8, r5
 8000986:	0c1c      	lsrs	r4, r3, #16
 8000988:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800098c:	fb08 f50e 	mul.w	r5, r8, lr
 8000990:	42a5      	cmp	r5, r4
 8000992:	fa02 f201 	lsl.w	r2, r2, r1
 8000996:	fa00 f001 	lsl.w	r0, r0, r1
 800099a:	d90b      	bls.n	80009b4 <__udivmoddi4+0x1b0>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a4:	f080 8088 	bcs.w	8000ab8 <__udivmoddi4+0x2b4>
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	f240 8085 	bls.w	8000ab8 <__udivmoddi4+0x2b4>
 80009ae:	f1a8 0802 	sub.w	r8, r8, #2
 80009b2:	4464      	add	r4, ip
 80009b4:	1b64      	subs	r4, r4, r5
 80009b6:	b29d      	uxth	r5, r3
 80009b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009bc:	fb09 4413 	mls	r4, r9, r3, r4
 80009c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009c8:	45a6      	cmp	lr, r4
 80009ca:	d908      	bls.n	80009de <__udivmoddi4+0x1da>
 80009cc:	eb1c 0404 	adds.w	r4, ip, r4
 80009d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009d4:	d26c      	bcs.n	8000ab0 <__udivmoddi4+0x2ac>
 80009d6:	45a6      	cmp	lr, r4
 80009d8:	d96a      	bls.n	8000ab0 <__udivmoddi4+0x2ac>
 80009da:	3b02      	subs	r3, #2
 80009dc:	4464      	add	r4, ip
 80009de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009e2:	fba3 9502 	umull	r9, r5, r3, r2
 80009e6:	eba4 040e 	sub.w	r4, r4, lr
 80009ea:	42ac      	cmp	r4, r5
 80009ec:	46c8      	mov	r8, r9
 80009ee:	46ae      	mov	lr, r5
 80009f0:	d356      	bcc.n	8000aa0 <__udivmoddi4+0x29c>
 80009f2:	d053      	beq.n	8000a9c <__udivmoddi4+0x298>
 80009f4:	b156      	cbz	r6, 8000a0c <__udivmoddi4+0x208>
 80009f6:	ebb0 0208 	subs.w	r2, r0, r8
 80009fa:	eb64 040e 	sbc.w	r4, r4, lr
 80009fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000a02:	40ca      	lsrs	r2, r1
 8000a04:	40cc      	lsrs	r4, r1
 8000a06:	4317      	orrs	r7, r2
 8000a08:	e9c6 7400 	strd	r7, r4, [r6]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a14:	f1c3 0120 	rsb	r1, r3, #32
 8000a18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a1c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a20:	fa25 f101 	lsr.w	r1, r5, r1
 8000a24:	409d      	lsls	r5, r3
 8000a26:	432a      	orrs	r2, r5
 8000a28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a34:	fb07 1510 	mls	r5, r7, r0, r1
 8000a38:	0c11      	lsrs	r1, r2, #16
 8000a3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a3e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a42:	428d      	cmp	r5, r1
 8000a44:	fa04 f403 	lsl.w	r4, r4, r3
 8000a48:	d908      	bls.n	8000a5c <__udivmoddi4+0x258>
 8000a4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a52:	d22f      	bcs.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a54:	428d      	cmp	r5, r1
 8000a56:	d92d      	bls.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	4461      	add	r1, ip
 8000a5c:	1b49      	subs	r1, r1, r5
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a64:	fb07 1115 	mls	r1, r7, r5, r1
 8000a68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a6c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a70:	4291      	cmp	r1, r2
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x282>
 8000a74:	eb1c 0202 	adds.w	r2, ip, r2
 8000a78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a7c:	d216      	bcs.n	8000aac <__udivmoddi4+0x2a8>
 8000a7e:	4291      	cmp	r1, r2
 8000a80:	d914      	bls.n	8000aac <__udivmoddi4+0x2a8>
 8000a82:	3d02      	subs	r5, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a52      	subs	r2, r2, r1
 8000a88:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a8c:	e738      	b.n	8000900 <__udivmoddi4+0xfc>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e708      	b.n	80008a6 <__udivmoddi4+0xa2>
 8000a94:	4639      	mov	r1, r7
 8000a96:	e6e6      	b.n	8000866 <__udivmoddi4+0x62>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x90>
 8000a9c:	4548      	cmp	r0, r9
 8000a9e:	d2a9      	bcs.n	80009f4 <__udivmoddi4+0x1f0>
 8000aa0:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	e7a3      	b.n	80009f4 <__udivmoddi4+0x1f0>
 8000aac:	4645      	mov	r5, r8
 8000aae:	e7ea      	b.n	8000a86 <__udivmoddi4+0x282>
 8000ab0:	462b      	mov	r3, r5
 8000ab2:	e794      	b.n	80009de <__udivmoddi4+0x1da>
 8000ab4:	4640      	mov	r0, r8
 8000ab6:	e7d1      	b.n	8000a5c <__udivmoddi4+0x258>
 8000ab8:	46d0      	mov	r8, sl
 8000aba:	e77b      	b.n	80009b4 <__udivmoddi4+0x1b0>
 8000abc:	3d02      	subs	r5, #2
 8000abe:	4462      	add	r2, ip
 8000ac0:	e732      	b.n	8000928 <__udivmoddi4+0x124>
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e70a      	b.n	80008dc <__udivmoddi4+0xd8>
 8000ac6:	4464      	add	r4, ip
 8000ac8:	3802      	subs	r0, #2
 8000aca:	e742      	b.n	8000952 <__udivmoddi4+0x14e>

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <delay_init>:
 * @brief   Initializes the delay function
 * @param   sysclk : system clock frequency, that is, CPU frequency (rcc_c_ck), 250MHz
 * @retval  None
 */
void delay_init(uint16_t sysclk)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
    g_fac_us = sysclk;
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	4a03      	ldr	r2, [pc, #12]	; (8000aec <delay_init+0x1c>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	2000008c 	.word	0x2000008c

08000af0 <delay_us>:
 * @note   uses clock picking method to do us delay whether OS is used or not
 * @param  nus : The number of us to delay
 * @retval none
 */
void delay_us(uint32_t nus)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    uint32_t ticks;
    uint32_t told, tnow, tcnt = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD;    /* Value of LOAD */
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <delay_us+0x74>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	617b      	str	r3, [r7, #20]
    ticks = nus * g_fac_us;             /* The number of beats required */
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <delay_us+0x78>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	613b      	str	r3, [r7, #16]

    told = SysTick->VAL;                /* The value of the counter at the time of entry */
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <delay_us+0x74>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <delay_us+0x74>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d0f8      	beq.n	8000b14 <delay_us+0x24>
        {
            if (tnow < told)
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d206      	bcs.n	8000b38 <delay_us+0x48>
            {
                tcnt += told - tnow;    /* It is sufficient to note here that SYSTICK is a decreasing counter */
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4413      	add	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	e007      	b.n	8000b48 <delay_us+0x58>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	1ad2      	subs	r2, r2, r3
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	4413      	add	r3, r2
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4413      	add	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d200      	bcs.n	8000b56 <delay_us+0x66>
        tnow = SysTick->VAL;
 8000b54:	e7de      	b.n	8000b14 <delay_us+0x24>
            {
                break;                  /* If the time is more than/equal to the time to be delayed, exit */
 8000b56:	bf00      	nop
            }
        }
    }
}
 8000b58:	bf00      	nop
 8000b5a:	3724      	adds	r7, #36	; 0x24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e010 	.word	0xe000e010
 8000b68:	2000008c 	.word	0x2000008c

08000b6c <key_scan>:
 * @retval      key,defined as follows:
 *              KEY0_PRES, 1,KEY0 pressed
 *              WKUP_PRES, 2,WKUP is pressed
 */
uint8_t key_scan(uint8_t mode)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1;                /* Press the button to release the flag */
    uint8_t keyval = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]

    if (mode == 1)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d102      	bne.n	8000b86 <key_scan+0x1a>
    {
    	key_up = 1;                           /* support for linking */
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <key_scan+0xa4>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
    }

    if (key_up && (KEY0 == 1 || WK_UP == 1))  /* The key release flag is 1, and any key is pressed */
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <key_scan+0xa4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d028      	beq.n	8000be0 <key_scan+0x74>
 8000b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b92:	4820      	ldr	r0, [pc, #128]	; (8000c14 <key_scan+0xa8>)
 8000b94:	f004 fe40 	bl	8005818 <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d006      	beq.n	8000bac <key_scan+0x40>
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	481c      	ldr	r0, [pc, #112]	; (8000c14 <key_scan+0xa8>)
 8000ba2:	f004 fe39 	bl	8005818 <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d119      	bne.n	8000be0 <key_scan+0x74>
    {
    	HAL_Delay(10);                        /* delay 10ms */
 8000bac:	200a      	movs	r0, #10
 8000bae:	f004 f9d3 	bl	8004f58 <HAL_Delay>
        key_up = 0;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <key_scan+0xa4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]

        if (KEY0 == 1)
 8000bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bbc:	4815      	ldr	r0, [pc, #84]	; (8000c14 <key_scan+0xa8>)
 8000bbe:	f004 fe2b 	bl	8005818 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d101      	bne.n	8000bcc <key_scan+0x60>
        {
        	keyval = KEY0_PRES;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
        }

        if (WK_UP == 1)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4811      	ldr	r0, [pc, #68]	; (8000c14 <key_scan+0xa8>)
 8000bd0:	f004 fe22 	bl	8005818 <HAL_GPIO_ReadPin>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d114      	bne.n	8000c04 <key_scan+0x98>
        {
        	keyval = WKUP_PRES;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	73fb      	strb	r3, [r7, #15]
        if (WK_UP == 1)
 8000bde:	e011      	b.n	8000c04 <key_scan+0x98>
        }
    }
    else if (KEY0 == 0 && WK_UP == 0)         /* Without any key pressed, the marker key is released */
 8000be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <key_scan+0xa8>)
 8000be6:	f004 fe17 	bl	8005818 <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d109      	bne.n	8000c04 <key_scan+0x98>
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4808      	ldr	r0, [pc, #32]	; (8000c14 <key_scan+0xa8>)
 8000bf4:	f004 fe10 	bl	8005818 <HAL_GPIO_ReadPin>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d102      	bne.n	8000c04 <key_scan+0x98>
    {
        key_up = 1;
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <key_scan+0xa4>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
    }

    return keyval;                            /* return key value */
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	40020000 	.word	0x40020000

08000c18 <lcd_ex_st7789_reginit>:
 * @brief  ST7789 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7789_reginit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8000c1c:	2011      	movs	r0, #17
 8000c1e:	f002 fc39 	bl	8003494 <lcd_wr_regno>

    HAL_Delay(120);
 8000c22:	2078      	movs	r0, #120	; 0x78
 8000c24:	f004 f998 	bl	8004f58 <HAL_Delay>

    lcd_wr_regno(0x36);
 8000c28:	2036      	movs	r0, #54	; 0x36
 8000c2a:	f002 fc33 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f002 fc1c 	bl	800346c <lcd_wr_data>


    lcd_wr_regno(0x3A);
 8000c34:	203a      	movs	r0, #58	; 0x3a
 8000c36:	f002 fc2d 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0X05);
 8000c3a:	2005      	movs	r0, #5
 8000c3c:	f002 fc16 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8000c40:	20b2      	movs	r0, #178	; 0xb2
 8000c42:	f002 fc27 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8000c46:	200c      	movs	r0, #12
 8000c48:	f002 fc10 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0C);
 8000c4c:	200c      	movs	r0, #12
 8000c4e:	f002 fc0d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f002 fc0a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x33);
 8000c58:	2033      	movs	r0, #51	; 0x33
 8000c5a:	f002 fc07 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x33);
 8000c5e:	2033      	movs	r0, #51	; 0x33
 8000c60:	f002 fc04 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8000c64:	20b7      	movs	r0, #183	; 0xb7
 8000c66:	f002 fc15 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x35);
 8000c6a:	2035      	movs	r0, #53	; 0x35
 8000c6c:	f002 fbfe 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 8000c70:	20bb      	movs	r0, #187	; 0xbb
 8000c72:	f002 fc0f 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 8000c76:	2032      	movs	r0, #50	; 0x32
 8000c78:	f002 fbf8 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8000c7c:	20c0      	movs	r0, #192	; 0xc0
 8000c7e:	f002 fc09 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8000c82:	200c      	movs	r0, #12
 8000c84:	f002 fbf2 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8000c88:	20c2      	movs	r0, #194	; 0xc2
 8000c8a:	f002 fc03 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f002 fbec 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 8000c94:	20c3      	movs	r0, #195	; 0xc3
 8000c96:	f002 fbfd 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 8000c9a:	2010      	movs	r0, #16
 8000c9c:	f002 fbe6 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 8000ca0:	20c4      	movs	r0, #196	; 0xc4
 8000ca2:	f002 fbf7 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 8000ca6:	2020      	movs	r0, #32
 8000ca8:	f002 fbe0 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8000cac:	20c6      	movs	r0, #198	; 0xc6
 8000cae:	f002 fbf1 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x0f);
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f002 fbda 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xD0);
 8000cb8:	20d0      	movs	r0, #208	; 0xd0
 8000cba:	f002 fbeb 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xA4);
 8000cbe:	20a4      	movs	r0, #164	; 0xa4
 8000cc0:	f002 fbd4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA1);
 8000cc4:	20a1      	movs	r0, #161	; 0xa1
 8000cc6:	f002 fbd1 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 8000cca:	20e0      	movs	r0, #224	; 0xe0
 8000ccc:	f002 fbe2 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8000cd0:	20d0      	movs	r0, #208	; 0xd0
 8000cd2:	f002 fbcb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f002 fbc8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x02);
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f002 fbc5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x07);
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f002 fbc2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0a);
 8000ce8:	200a      	movs	r0, #10
 8000cea:	f002 fbbf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x28);
 8000cee:	2028      	movs	r0, #40	; 0x28
 8000cf0:	f002 fbbc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x32);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f002 fbb9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0X44);
 8000cfa:	2044      	movs	r0, #68	; 0x44
 8000cfc:	f002 fbb6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x42);
 8000d00:	2042      	movs	r0, #66	; 0x42
 8000d02:	f002 fbb3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x06);
 8000d06:	2006      	movs	r0, #6
 8000d08:	f002 fbb0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0e);
 8000d0c:	200e      	movs	r0, #14
 8000d0e:	f002 fbad 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x12);
 8000d12:	2012      	movs	r0, #18
 8000d14:	f002 fbaa 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x14);
 8000d18:	2014      	movs	r0, #20
 8000d1a:	f002 fba7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x17);
 8000d1e:	2017      	movs	r0, #23
 8000d20:	f002 fba4 	bl	800346c <lcd_wr_data>


    lcd_wr_regno(0XE1);  /* Set Gamma */
 8000d24:	20e1      	movs	r0, #225	; 0xe1
 8000d26:	f002 fbb5 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8000d2a:	20d0      	movs	r0, #208	; 0xd0
 8000d2c:	f002 fb9e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f002 fb9b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x02);
 8000d36:	2002      	movs	r0, #2
 8000d38:	f002 fb98 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x07);
 8000d3c:	2007      	movs	r0, #7
 8000d3e:	f002 fb95 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0a);
 8000d42:	200a      	movs	r0, #10
 8000d44:	f002 fb92 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x28);
 8000d48:	2028      	movs	r0, #40	; 0x28
 8000d4a:	f002 fb8f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x31);
 8000d4e:	2031      	movs	r0, #49	; 0x31
 8000d50:	f002 fb8c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x54);
 8000d54:	2054      	movs	r0, #84	; 0x54
 8000d56:	f002 fb89 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x47);
 8000d5a:	2047      	movs	r0, #71	; 0x47
 8000d5c:	f002 fb86 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0e);
 8000d60:	200e      	movs	r0, #14
 8000d62:	f002 fb83 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1c);
 8000d66:	201c      	movs	r0, #28
 8000d68:	f002 fb80 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x17);
 8000d6c:	2017      	movs	r0, #23
 8000d6e:	f002 fb7d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1b);
 8000d72:	201b      	movs	r0, #27
 8000d74:	f002 fb7a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1e);
 8000d78:	201e      	movs	r0, #30
 8000d7a:	f002 fb77 	bl	800346c <lcd_wr_data>


    lcd_wr_regno(0x2A);
 8000d7e:	202a      	movs	r0, #42	; 0x2a
 8000d80:	f002 fb88 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f002 fb71 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f002 fb6e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f002 fb6b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xef);
 8000d96:	20ef      	movs	r0, #239	; 0xef
 8000d98:	f002 fb68 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x2B);
 8000d9c:	202b      	movs	r0, #43	; 0x2b
 8000d9e:	f002 fb79 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f002 fb62 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f002 fb5f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f002 fb5c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3f);
 8000db4:	203f      	movs	r0, #63	; 0x3f
 8000db6:	f002 fb59 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 8000dba:	2029      	movs	r0, #41	; 0x29
 8000dbc:	f002 fb6a 	bl	8003494 <lcd_wr_regno>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <lcd_ex_ili9341_reginit>:
 * @brief  ILI9341 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9341_reginit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 8000dc8:	20cf      	movs	r0, #207	; 0xcf
 8000dca:	f002 fb63 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f002 fb4c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xC1);
 8000dd4:	20c1      	movs	r0, #193	; 0xc1
 8000dd6:	f002 fb49 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0X30);
 8000dda:	2030      	movs	r0, #48	; 0x30
 8000ddc:	f002 fb46 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xED);
 8000de0:	20ed      	movs	r0, #237	; 0xed
 8000de2:	f002 fb57 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x64);
 8000de6:	2064      	movs	r0, #100	; 0x64
 8000de8:	f002 fb40 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x03);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f002 fb3d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0X12);
 8000df2:	2012      	movs	r0, #18
 8000df4:	f002 fb3a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0X81);
 8000df8:	2081      	movs	r0, #129	; 0x81
 8000dfa:	f002 fb37 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xE8);
 8000dfe:	20e8      	movs	r0, #232	; 0xe8
 8000e00:	f002 fb48 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x85);
 8000e04:	2085      	movs	r0, #133	; 0x85
 8000e06:	f002 fb31 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x10);
 8000e0a:	2010      	movs	r0, #16
 8000e0c:	f002 fb2e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x7A);
 8000e10:	207a      	movs	r0, #122	; 0x7a
 8000e12:	f002 fb2b 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xCB);
 8000e16:	20cb      	movs	r0, #203	; 0xcb
 8000e18:	f002 fb3c 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x39);
 8000e1c:	2039      	movs	r0, #57	; 0x39
 8000e1e:	f002 fb25 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2C);
 8000e22:	202c      	movs	r0, #44	; 0x2c
 8000e24:	f002 fb22 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f002 fb1f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x34);
 8000e2e:	2034      	movs	r0, #52	; 0x34
 8000e30:	f002 fb1c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x02);
 8000e34:	2002      	movs	r0, #2
 8000e36:	f002 fb19 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xF7);
 8000e3a:	20f7      	movs	r0, #247	; 0xf7
 8000e3c:	f002 fb2a 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8000e40:	2020      	movs	r0, #32
 8000e42:	f002 fb13 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xEA);
 8000e46:	20ea      	movs	r0, #234	; 0xea
 8000e48:	f002 fb24 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f002 fb0d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f002 fb0a 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 8000e58:	20c0      	movs	r0, #192	; 0xc0
 8000e5a:	f002 fb1b 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 8000e5e:	201b      	movs	r0, #27
 8000e60:	f002 fb04 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 8000e64:	20c1      	movs	r0, #193	; 0xc1
 8000e66:	f002 fb15 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f002 fafe 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 8000e70:	20c5      	movs	r0, #197	; 0xc5
 8000e72:	f002 fb0f 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 8000e76:	2030      	movs	r0, #48	; 0x30
 8000e78:	f002 faf8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 8000e7c:	2030      	movs	r0, #48	; 0x30
 8000e7e:	f002 faf5 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 8000e82:	20c7      	movs	r0, #199	; 0xc7
 8000e84:	f002 fb06 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0XB7);
 8000e88:	20b7      	movs	r0, #183	; 0xb7
 8000e8a:	f002 faef 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0x36); /*  Memory Access Control */
 8000e8e:	2036      	movs	r0, #54	; 0x36
 8000e90:	f002 fb00 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8000e94:	2048      	movs	r0, #72	; 0x48
 8000e96:	f002 fae9 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0x3A);
 8000e9a:	203a      	movs	r0, #58	; 0x3a
 8000e9c:	f002 fafa 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8000ea0:	2055      	movs	r0, #85	; 0x55
 8000ea2:	f002 fae3 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xB1);
 8000ea6:	20b1      	movs	r0, #177	; 0xb1
 8000ea8:	f002 faf4 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f002 fadd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1A);
 8000eb2:	201a      	movs	r0, #26
 8000eb4:	f002 fada 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xB6); /*  Display Function Control */
 8000eb8:	20b6      	movs	r0, #182	; 0xb6
 8000eba:	f002 faeb 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f002 fad4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA2);
 8000ec4:	20a2      	movs	r0, #162	; 0xa2
 8000ec6:	f002 fad1 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
 8000eca:	20f2      	movs	r0, #242	; 0xf2
 8000ecc:	f002 fae2 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f002 facb 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 8000ed6:	2026      	movs	r0, #38	; 0x26
 8000ed8:	f002 fadc 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f002 fac5 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 8000ee2:	20e0      	movs	r0, #224	; 0xe0
 8000ee4:	f002 fad6 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8000ee8:	200f      	movs	r0, #15
 8000eea:	f002 fabf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2A);
 8000eee:	202a      	movs	r0, #42	; 0x2a
 8000ef0:	f002 fabc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x28);
 8000ef4:	2028      	movs	r0, #40	; 0x28
 8000ef6:	f002 fab9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x08);
 8000efa:	2008      	movs	r0, #8
 8000efc:	f002 fab6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0E);
 8000f00:	200e      	movs	r0, #14
 8000f02:	f002 fab3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x08);
 8000f06:	2008      	movs	r0, #8
 8000f08:	f002 fab0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x54);
 8000f0c:	2054      	movs	r0, #84	; 0x54
 8000f0e:	f002 faad 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0XA9);
 8000f12:	20a9      	movs	r0, #169	; 0xa9
 8000f14:	f002 faaa 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x43);
 8000f18:	2043      	movs	r0, #67	; 0x43
 8000f1a:	f002 faa7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0A);
 8000f1e:	200a      	movs	r0, #10
 8000f20:	f002 faa4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000f24:	200f      	movs	r0, #15
 8000f26:	f002 faa1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f002 fa9e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f002 fa9b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f002 fa98 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f002 fa95 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0XE1);    /* Set Gamma */
 8000f42:	20e1      	movs	r0, #225	; 0xe1
 8000f44:	f002 faa6 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f002 fa8f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x15);
 8000f4e:	2015      	movs	r0, #21
 8000f50:	f002 fa8c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x17);
 8000f54:	2017      	movs	r0, #23
 8000f56:	f002 fa89 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x07);
 8000f5a:	2007      	movs	r0, #7
 8000f5c:	f002 fa86 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x11);
 8000f60:	2011      	movs	r0, #17
 8000f62:	f002 fa83 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x06);
 8000f66:	2006      	movs	r0, #6
 8000f68:	f002 fa80 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2B);
 8000f6c:	202b      	movs	r0, #43	; 0x2b
 8000f6e:	f002 fa7d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x56);
 8000f72:	2056      	movs	r0, #86	; 0x56
 8000f74:	f002 fa7a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3C);
 8000f78:	203c      	movs	r0, #60	; 0x3c
 8000f7a:	f002 fa77 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x05);
 8000f7e:	2005      	movs	r0, #5
 8000f80:	f002 fa74 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x10);
 8000f84:	2010      	movs	r0, #16
 8000f86:	f002 fa71 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f002 fa6e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3F);
 8000f90:	203f      	movs	r0, #63	; 0x3f
 8000f92:	f002 fa6b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3F);
 8000f96:	203f      	movs	r0, #63	; 0x3f
 8000f98:	f002 fa68 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000f9c:	200f      	movs	r0, #15
 8000f9e:	f002 fa65 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0x2B);
 8000fa2:	202b      	movs	r0, #43	; 0x2b
 8000fa4:	f002 fa76 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f002 fa5f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f002 fa5c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f002 fa59 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3f);
 8000fba:	203f      	movs	r0, #63	; 0x3f
 8000fbc:	f002 fa56 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8000fc0:	202a      	movs	r0, #42	; 0x2a
 8000fc2:	f002 fa67 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f002 fa50 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f002 fa4d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f002 fa4a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xef);
 8000fd8:	20ef      	movs	r0, #239	; 0xef
 8000fda:	f002 fa47 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 8000fde:	2011      	movs	r0, #17
 8000fe0:	f002 fa58 	bl	8003494 <lcd_wr_regno>
    HAL_Delay(120);
 8000fe4:	2078      	movs	r0, #120	; 0x78
 8000fe6:	f003 ffb7 	bl	8004f58 <HAL_Delay>
    lcd_wr_regno(0x29); /* display on */
 8000fea:	2029      	movs	r0, #41	; 0x29
 8000fec:	f002 fa52 	bl	8003494 <lcd_wr_regno>
 }
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <lcd_ex_nt35310_reginit>:
 * @brief  NT35310 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35310_reginit(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 8000ff8:	20ed      	movs	r0, #237	; 0xed
 8000ffa:	f002 fa4b 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f002 fa34 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFE);
 8001004:	20fe      	movs	r0, #254	; 0xfe
 8001006:	f002 fa31 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xEE);
 800100a:	20ee      	movs	r0, #238	; 0xee
 800100c:	f002 fa42 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xDE);
 8001010:	20de      	movs	r0, #222	; 0xde
 8001012:	f002 fa2b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x21);
 8001016:	2021      	movs	r0, #33	; 0x21
 8001018:	f002 fa28 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF1);
 800101c:	20f1      	movs	r0, #241	; 0xf1
 800101e:	f002 fa39 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001022:	2001      	movs	r0, #1
 8001024:	f002 fa22 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xDF);
 8001028:	20df      	movs	r0, #223	; 0xdf
 800102a:	f002 fa33 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x10);
 800102e:	2010      	movs	r0, #16
 8001030:	f002 fa1c 	bl	800346c <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8001034:	20c4      	movs	r0, #196	; 0xc4
 8001036:	f002 fa2d 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 800103a:	208f      	movs	r0, #143	; 0x8f
 800103c:	f002 fa16 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8001040:	20c6      	movs	r0, #198	; 0xc6
 8001042:	f002 fa27 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001046:	2000      	movs	r0, #0
 8001048:	f002 fa10 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xE2);
 800104c:	20e2      	movs	r0, #226	; 0xe2
 800104e:	f002 fa0d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xE2);
 8001052:	20e2      	movs	r0, #226	; 0xe2
 8001054:	f002 fa0a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xE2);
 8001058:	20e2      	movs	r0, #226	; 0xe2
 800105a:	f002 fa07 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xBF);
 800105e:	20bf      	movs	r0, #191	; 0xbf
 8001060:	f002 fa18 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8001064:	20aa      	movs	r0, #170	; 0xaa
 8001066:	f002 fa01 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB0);
 800106a:	20b0      	movs	r0, #176	; 0xb0
 800106c:	f002 fa12 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x0D);
 8001070:	200d      	movs	r0, #13
 8001072:	f002 f9fb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001076:	2000      	movs	r0, #0
 8001078:	f002 f9f8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0D);
 800107c:	200d      	movs	r0, #13
 800107e:	f002 f9f5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001082:	2000      	movs	r0, #0
 8001084:	f002 f9f2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x11);
 8001088:	2011      	movs	r0, #17
 800108a:	f002 f9ef 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800108e:	2000      	movs	r0, #0
 8001090:	f002 f9ec 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x19);
 8001094:	2019      	movs	r0, #25
 8001096:	f002 f9e9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800109a:	2000      	movs	r0, #0
 800109c:	f002 f9e6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x21);
 80010a0:	2021      	movs	r0, #33	; 0x21
 80010a2:	f002 f9e3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f002 f9e0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2D);
 80010ac:	202d      	movs	r0, #45	; 0x2d
 80010ae:	f002 f9dd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f002 f9da 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3D);
 80010b8:	203d      	movs	r0, #61	; 0x3d
 80010ba:	f002 f9d7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80010be:	2000      	movs	r0, #0
 80010c0:	f002 f9d4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x5D);
 80010c4:	205d      	movs	r0, #93	; 0x5d
 80010c6:	f002 f9d1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f002 f9ce 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x5D);
 80010d0:	205d      	movs	r0, #93	; 0x5d
 80010d2:	f002 f9cb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f002 f9c8 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB1);
 80010dc:	20b1      	movs	r0, #177	; 0xb1
 80010de:	f002 f9d9 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x80);
 80010e2:	2080      	movs	r0, #128	; 0x80
 80010e4:	f002 f9c2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f002 f9bf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x8B);
 80010ee:	208b      	movs	r0, #139	; 0x8b
 80010f0:	f002 f9bc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f002 f9b9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x96);
 80010fa:	2096      	movs	r0, #150	; 0x96
 80010fc:	f002 f9b6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f002 f9b3 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8001106:	20b2      	movs	r0, #178	; 0xb2
 8001108:	f002 f9c4 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800110c:	2000      	movs	r0, #0
 800110e:	f002 f9ad 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001112:	2000      	movs	r0, #0
 8001114:	f002 f9aa 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x02);
 8001118:	2002      	movs	r0, #2
 800111a:	f002 f9a7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800111e:	2000      	movs	r0, #0
 8001120:	f002 f9a4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x03);
 8001124:	2003      	movs	r0, #3
 8001126:	f002 f9a1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800112a:	2000      	movs	r0, #0
 800112c:	f002 f99e 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB3);
 8001130:	20b3      	movs	r0, #179	; 0xb3
 8001132:	f002 f9af 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001136:	2000      	movs	r0, #0
 8001138:	f002 f998 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800113c:	2000      	movs	r0, #0
 800113e:	f002 f995 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001142:	2000      	movs	r0, #0
 8001144:	f002 f992 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001148:	2000      	movs	r0, #0
 800114a:	f002 f98f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800114e:	2000      	movs	r0, #0
 8001150:	f002 f98c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001154:	2000      	movs	r0, #0
 8001156:	f002 f989 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800115a:	2000      	movs	r0, #0
 800115c:	f002 f986 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001160:	2000      	movs	r0, #0
 8001162:	f002 f983 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001166:	2000      	movs	r0, #0
 8001168:	f002 f980 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800116c:	2000      	movs	r0, #0
 800116e:	f002 f97d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001172:	2000      	movs	r0, #0
 8001174:	f002 f97a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f002 f977 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800117e:	2000      	movs	r0, #0
 8001180:	f002 f974 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001184:	2000      	movs	r0, #0
 8001186:	f002 f971 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800118a:	2000      	movs	r0, #0
 800118c:	f002 f96e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001190:	2000      	movs	r0, #0
 8001192:	f002 f96b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001196:	2000      	movs	r0, #0
 8001198:	f002 f968 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800119c:	2000      	movs	r0, #0
 800119e:	f002 f965 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f002 f962 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f002 f95f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f002 f95c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f002 f959 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f002 f956 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f002 f953 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB4);
 80011c6:	20b4      	movs	r0, #180	; 0xb4
 80011c8:	f002 f964 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x8B);
 80011cc:	208b      	movs	r0, #139	; 0x8b
 80011ce:	f002 f94d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f002 f94a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x96);
 80011d8:	2096      	movs	r0, #150	; 0x96
 80011da:	f002 f947 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f002 f944 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA1);
 80011e4:	20a1      	movs	r0, #161	; 0xa1
 80011e6:	f002 f941 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f002 f93e 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB5);
 80011f0:	20b5      	movs	r0, #181	; 0xb5
 80011f2:	f002 f94f 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x02);
 80011f6:	2002      	movs	r0, #2
 80011f8:	f002 f938 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f002 f935 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x03);
 8001202:	2003      	movs	r0, #3
 8001204:	f002 f932 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001208:	2000      	movs	r0, #0
 800120a:	f002 f92f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x04);
 800120e:	2004      	movs	r0, #4
 8001210:	f002 f92c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001214:	2000      	movs	r0, #0
 8001216:	f002 f929 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB6);
 800121a:	20b6      	movs	r0, #182	; 0xb6
 800121c:	f002 f93a 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f002 f923 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f002 f920 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB7);
 800122c:	20b7      	movs	r0, #183	; 0xb7
 800122e:	f002 f931 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f002 f91a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001238:	2000      	movs	r0, #0
 800123a:	f002 f917 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3F);
 800123e:	203f      	movs	r0, #63	; 0x3f
 8001240:	f002 f914 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001244:	2000      	movs	r0, #0
 8001246:	f002 f911 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x5E);
 800124a:	205e      	movs	r0, #94	; 0x5e
 800124c:	f002 f90e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001250:	2000      	movs	r0, #0
 8001252:	f002 f90b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x64);
 8001256:	2064      	movs	r0, #100	; 0x64
 8001258:	f002 f908 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800125c:	2000      	movs	r0, #0
 800125e:	f002 f905 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x8C);
 8001262:	208c      	movs	r0, #140	; 0x8c
 8001264:	f002 f902 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001268:	2000      	movs	r0, #0
 800126a:	f002 f8ff 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xAC);
 800126e:	20ac      	movs	r0, #172	; 0xac
 8001270:	f002 f8fc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f002 f8f9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xDC);
 800127a:	20dc      	movs	r0, #220	; 0xdc
 800127c:	f002 f8f6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f002 f8f3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x70);
 8001286:	2070      	movs	r0, #112	; 0x70
 8001288:	f002 f8f0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800128c:	2000      	movs	r0, #0
 800128e:	f002 f8ed 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x90);
 8001292:	2090      	movs	r0, #144	; 0x90
 8001294:	f002 f8ea 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001298:	2000      	movs	r0, #0
 800129a:	f002 f8e7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xEB);
 800129e:	20eb      	movs	r0, #235	; 0xeb
 80012a0:	f002 f8e4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f002 f8e1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xDC);
 80012aa:	20dc      	movs	r0, #220	; 0xdc
 80012ac:	f002 f8de 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f002 f8db 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB8);
 80012b6:	20b8      	movs	r0, #184	; 0xb8
 80012b8:	f002 f8ec 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80012bc:	2000      	movs	r0, #0
 80012be:	f002 f8d5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f002 f8d2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f002 f8cf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f002 f8cc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f002 f8c9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012da:	2000      	movs	r0, #0
 80012dc:	f002 f8c6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f002 f8c3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f002 f8c0 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xBA);
 80012ec:	20ba      	movs	r0, #186	; 0xba
 80012ee:	f002 f8d1 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x24);
 80012f2:	2024      	movs	r0, #36	; 0x24
 80012f4:	f002 f8ba 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f002 f8b7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80012fe:	2000      	movs	r0, #0
 8001300:	f002 f8b4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f002 f8b1 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC1);
 800130a:	20c1      	movs	r0, #193	; 0xc1
 800130c:	f002 f8c2 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8001310:	2020      	movs	r0, #32
 8001312:	f002 f8ab 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001316:	2000      	movs	r0, #0
 8001318:	f002 f8a8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x54);
 800131c:	2054      	movs	r0, #84	; 0x54
 800131e:	f002 f8a5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001322:	2000      	movs	r0, #0
 8001324:	f002 f8a2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFF);
 8001328:	20ff      	movs	r0, #255	; 0xff
 800132a:	f002 f89f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800132e:	2000      	movs	r0, #0
 8001330:	f002 f89c 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001334:	20c2      	movs	r0, #194	; 0xc2
 8001336:	f002 f8ad 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 800133a:	200a      	movs	r0, #10
 800133c:	f002 f896 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001340:	2000      	movs	r0, #0
 8001342:	f002 f893 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x04);
 8001346:	2004      	movs	r0, #4
 8001348:	f002 f890 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800134c:	2000      	movs	r0, #0
 800134e:	f002 f88d 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC3);
 8001352:	20c3      	movs	r0, #195	; 0xc3
 8001354:	f002 f89e 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8001358:	203c      	movs	r0, #60	; 0x3c
 800135a:	f002 f887 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800135e:	2000      	movs	r0, #0
 8001360:	f002 f884 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3A);
 8001364:	203a      	movs	r0, #58	; 0x3a
 8001366:	f002 f881 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800136a:	2000      	movs	r0, #0
 800136c:	f002 f87e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x39);
 8001370:	2039      	movs	r0, #57	; 0x39
 8001372:	f002 f87b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f002 f878 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x37);
 800137c:	2037      	movs	r0, #55	; 0x37
 800137e:	f002 f875 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001382:	2000      	movs	r0, #0
 8001384:	f002 f872 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001388:	203c      	movs	r0, #60	; 0x3c
 800138a:	f002 f86f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800138e:	2000      	movs	r0, #0
 8001390:	f002 f86c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x36);
 8001394:	2036      	movs	r0, #54	; 0x36
 8001396:	f002 f869 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f002 f866 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x32);
 80013a0:	2032      	movs	r0, #50	; 0x32
 80013a2:	f002 f863 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f002 f860 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2F);
 80013ac:	202f      	movs	r0, #47	; 0x2f
 80013ae:	f002 f85d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f002 f85a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2C);
 80013b8:	202c      	movs	r0, #44	; 0x2c
 80013ba:	f002 f857 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80013be:	2000      	movs	r0, #0
 80013c0:	f002 f854 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x29);
 80013c4:	2029      	movs	r0, #41	; 0x29
 80013c6:	f002 f851 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f002 f84e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x26);
 80013d0:	2026      	movs	r0, #38	; 0x26
 80013d2:	f002 f84b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f002 f848 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x24);
 80013dc:	2024      	movs	r0, #36	; 0x24
 80013de:	f002 f845 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f002 f842 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x24);
 80013e8:	2024      	movs	r0, #36	; 0x24
 80013ea:	f002 f83f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f002 f83c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x23);
 80013f4:	2023      	movs	r0, #35	; 0x23
 80013f6:	f002 f839 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f002 f836 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001400:	203c      	movs	r0, #60	; 0x3c
 8001402:	f002 f833 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001406:	2000      	movs	r0, #0
 8001408:	f002 f830 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x36);
 800140c:	2036      	movs	r0, #54	; 0x36
 800140e:	f002 f82d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001412:	2000      	movs	r0, #0
 8001414:	f002 f82a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x32);
 8001418:	2032      	movs	r0, #50	; 0x32
 800141a:	f002 f827 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800141e:	2000      	movs	r0, #0
 8001420:	f002 f824 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2F);
 8001424:	202f      	movs	r0, #47	; 0x2f
 8001426:	f002 f821 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800142a:	2000      	movs	r0, #0
 800142c:	f002 f81e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001430:	202c      	movs	r0, #44	; 0x2c
 8001432:	f002 f81b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001436:	2000      	movs	r0, #0
 8001438:	f002 f818 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x29);
 800143c:	2029      	movs	r0, #41	; 0x29
 800143e:	f002 f815 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001442:	2000      	movs	r0, #0
 8001444:	f002 f812 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x26);
 8001448:	2026      	movs	r0, #38	; 0x26
 800144a:	f002 f80f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800144e:	2000      	movs	r0, #0
 8001450:	f002 f80c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x24);
 8001454:	2024      	movs	r0, #36	; 0x24
 8001456:	f002 f809 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800145a:	2000      	movs	r0, #0
 800145c:	f002 f806 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x24);
 8001460:	2024      	movs	r0, #36	; 0x24
 8001462:	f002 f803 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001466:	2000      	movs	r0, #0
 8001468:	f002 f800 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x23);
 800146c:	2023      	movs	r0, #35	; 0x23
 800146e:	f001 fffd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f001 fffa 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC4);
 8001478:	20c4      	movs	r0, #196	; 0xc4
 800147a:	f002 f80b 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x62);
 800147e:	2062      	movs	r0, #98	; 0x62
 8001480:	f001 fff4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001484:	2000      	movs	r0, #0
 8001486:	f001 fff1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x05);
 800148a:	2005      	movs	r0, #5
 800148c:	f001 ffee 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001490:	2000      	movs	r0, #0
 8001492:	f001 ffeb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x84);
 8001496:	2084      	movs	r0, #132	; 0x84
 8001498:	f001 ffe8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800149c:	2000      	movs	r0, #0
 800149e:	f001 ffe5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xF0);
 80014a2:	20f0      	movs	r0, #240	; 0xf0
 80014a4:	f001 ffe2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f001 ffdf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x18);
 80014ae:	2018      	movs	r0, #24
 80014b0:	f001 ffdc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f001 ffd9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA4);
 80014ba:	20a4      	movs	r0, #164	; 0xa4
 80014bc:	f001 ffd6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f001 ffd3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x18);
 80014c6:	2018      	movs	r0, #24
 80014c8:	f001 ffd0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f001 ffcd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x50);
 80014d2:	2050      	movs	r0, #80	; 0x50
 80014d4:	f001 ffca 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80014d8:	2000      	movs	r0, #0
 80014da:	f001 ffc7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0C);
 80014de:	200c      	movs	r0, #12
 80014e0:	f001 ffc4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f001 ffc1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x17);
 80014ea:	2017      	movs	r0, #23
 80014ec:	f001 ffbe 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f001 ffbb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x95);
 80014f6:	2095      	movs	r0, #149	; 0x95
 80014f8:	f001 ffb8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f001 ffb5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001502:	20f3      	movs	r0, #243	; 0xf3
 8001504:	f001 ffb2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001508:	2000      	movs	r0, #0
 800150a:	f001 ffaf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xE6);
 800150e:	20e6      	movs	r0, #230	; 0xe6
 8001510:	f001 ffac 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001514:	2000      	movs	r0, #0
 8001516:	f001 ffa9 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC5);
 800151a:	20c5      	movs	r0, #197	; 0xc5
 800151c:	f001 ffba 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8001520:	2032      	movs	r0, #50	; 0x32
 8001522:	f001 ffa3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001526:	2000      	movs	r0, #0
 8001528:	f001 ffa0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x44);
 800152c:	2044      	movs	r0, #68	; 0x44
 800152e:	f001 ff9d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001532:	2000      	movs	r0, #0
 8001534:	f001 ff9a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x65);
 8001538:	2065      	movs	r0, #101	; 0x65
 800153a:	f001 ff97 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800153e:	2000      	movs	r0, #0
 8001540:	f001 ff94 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x76);
 8001544:	2076      	movs	r0, #118	; 0x76
 8001546:	f001 ff91 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800154a:	2000      	movs	r0, #0
 800154c:	f001 ff8e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x88);
 8001550:	2088      	movs	r0, #136	; 0x88
 8001552:	f001 ff8b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001556:	2000      	movs	r0, #0
 8001558:	f001 ff88 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC6);
 800155c:	20c6      	movs	r0, #198	; 0xc6
 800155e:	f001 ff99 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8001562:	2020      	movs	r0, #32
 8001564:	f001 ff82 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001568:	2000      	movs	r0, #0
 800156a:	f001 ff7f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x17);
 800156e:	2017      	movs	r0, #23
 8001570:	f001 ff7c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001574:	2000      	movs	r0, #0
 8001576:	f001 ff79 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 800157a:	2001      	movs	r0, #1
 800157c:	f001 ff76 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001580:	2000      	movs	r0, #0
 8001582:	f001 ff73 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC7);
 8001586:	20c7      	movs	r0, #199	; 0xc7
 8001588:	f001 ff84 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800158c:	2000      	movs	r0, #0
 800158e:	f001 ff6d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001592:	2000      	movs	r0, #0
 8001594:	f001 ff6a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f001 ff67 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800159e:	2000      	movs	r0, #0
 80015a0:	f001 ff64 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC8);
 80015a4:	20c8      	movs	r0, #200	; 0xc8
 80015a6:	f001 ff75 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f001 ff5e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f001 ff5b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f001 ff58 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015bc:	2000      	movs	r0, #0
 80015be:	f001 ff55 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC9);
 80015c2:	20c9      	movs	r0, #201	; 0xc9
 80015c4:	f001 ff66 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f001 ff4f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f001 ff4c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f001 ff49 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015da:	2000      	movs	r0, #0
 80015dc:	f001 ff46 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f001 ff43 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f001 ff40 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f001 ff3d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f001 ff3a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f001 ff37 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80015fe:	2000      	movs	r0, #0
 8001600:	f001 ff34 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001604:	2000      	movs	r0, #0
 8001606:	f001 ff31 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800160a:	2000      	movs	r0, #0
 800160c:	f001 ff2e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001610:	2000      	movs	r0, #0
 8001612:	f001 ff2b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001616:	2000      	movs	r0, #0
 8001618:	f001 ff28 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800161c:	2000      	movs	r0, #0
 800161e:	f001 ff25 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001622:	2000      	movs	r0, #0
 8001624:	f001 ff22 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8001628:	20e0      	movs	r0, #224	; 0xe0
 800162a:	f001 ff33 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x16);
 800162e:	2016      	movs	r0, #22
 8001630:	f001 ff1c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001634:	2000      	movs	r0, #0
 8001636:	f001 ff19 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1C);
 800163a:	201c      	movs	r0, #28
 800163c:	f001 ff16 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001640:	2000      	movs	r0, #0
 8001642:	f001 ff13 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x21);
 8001646:	2021      	movs	r0, #33	; 0x21
 8001648:	f001 ff10 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800164c:	2000      	movs	r0, #0
 800164e:	f001 ff0d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x36);
 8001652:	2036      	movs	r0, #54	; 0x36
 8001654:	f001 ff0a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001658:	2000      	movs	r0, #0
 800165a:	f001 ff07 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x46);
 800165e:	2046      	movs	r0, #70	; 0x46
 8001660:	f001 ff04 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001664:	2000      	movs	r0, #0
 8001666:	f001 ff01 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x52);
 800166a:	2052      	movs	r0, #82	; 0x52
 800166c:	f001 fefe 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001670:	2000      	movs	r0, #0
 8001672:	f001 fefb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x64);
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	f001 fef8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800167c:	2000      	movs	r0, #0
 800167e:	f001 fef5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x7A);
 8001682:	207a      	movs	r0, #122	; 0x7a
 8001684:	f001 fef2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001688:	2000      	movs	r0, #0
 800168a:	f001 feef 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x8B);
 800168e:	208b      	movs	r0, #139	; 0x8b
 8001690:	f001 feec 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001694:	2000      	movs	r0, #0
 8001696:	f001 fee9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x99);
 800169a:	2099      	movs	r0, #153	; 0x99
 800169c:	f001 fee6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f001 fee3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA8);
 80016a6:	20a8      	movs	r0, #168	; 0xa8
 80016a8:	f001 fee0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f001 fedd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xB9);
 80016b2:	20b9      	movs	r0, #185	; 0xb9
 80016b4:	f001 feda 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f001 fed7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xC4);
 80016be:	20c4      	movs	r0, #196	; 0xc4
 80016c0:	f001 fed4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f001 fed1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xCA);
 80016ca:	20ca      	movs	r0, #202	; 0xca
 80016cc:	f001 fece 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f001 fecb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD2);
 80016d6:	20d2      	movs	r0, #210	; 0xd2
 80016d8:	f001 fec8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80016dc:	2000      	movs	r0, #0
 80016de:	f001 fec5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD9);
 80016e2:	20d9      	movs	r0, #217	; 0xd9
 80016e4:	f001 fec2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f001 febf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xE0);
 80016ee:	20e0      	movs	r0, #224	; 0xe0
 80016f0:	f001 febc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f001 feb9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xF3);
 80016fa:	20f3      	movs	r0, #243	; 0xf3
 80016fc:	f001 feb6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001700:	2000      	movs	r0, #0
 8001702:	f001 feb3 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE1);
 8001706:	20e1      	movs	r0, #225	; 0xe1
 8001708:	f001 fec4 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x16);
 800170c:	2016      	movs	r0, #22
 800170e:	f001 fead 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001712:	2000      	movs	r0, #0
 8001714:	f001 feaa 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1C);
 8001718:	201c      	movs	r0, #28
 800171a:	f001 fea7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800171e:	2000      	movs	r0, #0
 8001720:	f001 fea4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x22);
 8001724:	2022      	movs	r0, #34	; 0x22
 8001726:	f001 fea1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800172a:	2000      	movs	r0, #0
 800172c:	f001 fe9e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x36);
 8001730:	2036      	movs	r0, #54	; 0x36
 8001732:	f001 fe9b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001736:	2000      	movs	r0, #0
 8001738:	f001 fe98 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x45);
 800173c:	2045      	movs	r0, #69	; 0x45
 800173e:	f001 fe95 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001742:	2000      	movs	r0, #0
 8001744:	f001 fe92 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x52);
 8001748:	2052      	movs	r0, #82	; 0x52
 800174a:	f001 fe8f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800174e:	2000      	movs	r0, #0
 8001750:	f001 fe8c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x64);
 8001754:	2064      	movs	r0, #100	; 0x64
 8001756:	f001 fe89 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800175a:	2000      	movs	r0, #0
 800175c:	f001 fe86 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x7A);
 8001760:	207a      	movs	r0, #122	; 0x7a
 8001762:	f001 fe83 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001766:	2000      	movs	r0, #0
 8001768:	f001 fe80 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x8B);
 800176c:	208b      	movs	r0, #139	; 0x8b
 800176e:	f001 fe7d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f001 fe7a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x99);
 8001778:	2099      	movs	r0, #153	; 0x99
 800177a:	f001 fe77 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800177e:	2000      	movs	r0, #0
 8001780:	f001 fe74 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA8);
 8001784:	20a8      	movs	r0, #168	; 0xa8
 8001786:	f001 fe71 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800178a:	2000      	movs	r0, #0
 800178c:	f001 fe6e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xB9);
 8001790:	20b9      	movs	r0, #185	; 0xb9
 8001792:	f001 fe6b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001796:	2000      	movs	r0, #0
 8001798:	f001 fe68 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xC4);
 800179c:	20c4      	movs	r0, #196	; 0xc4
 800179e:	f001 fe65 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f001 fe62 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xCA);
 80017a8:	20ca      	movs	r0, #202	; 0xca
 80017aa:	f001 fe5f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f001 fe5c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD2);
 80017b4:	20d2      	movs	r0, #210	; 0xd2
 80017b6:	f001 fe59 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f001 fe56 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD8);
 80017c0:	20d8      	movs	r0, #216	; 0xd8
 80017c2:	f001 fe53 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f001 fe50 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xE0);
 80017cc:	20e0      	movs	r0, #224	; 0xe0
 80017ce:	f001 fe4d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f001 fe4a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xF3);
 80017d8:	20f3      	movs	r0, #243	; 0xf3
 80017da:	f001 fe47 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80017de:	2000      	movs	r0, #0
 80017e0:	f001 fe44 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE2);
 80017e4:	20e2      	movs	r0, #226	; 0xe2
 80017e6:	f001 fe55 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x05);
 80017ea:	2005      	movs	r0, #5
 80017ec:	f001 fe3e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f001 fe3b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0B);
 80017f6:	200b      	movs	r0, #11
 80017f8:	f001 fe38 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f001 fe35 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1B);
 8001802:	201b      	movs	r0, #27
 8001804:	f001 fe32 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f001 fe2f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x34);
 800180e:	2034      	movs	r0, #52	; 0x34
 8001810:	f001 fe2c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001814:	2000      	movs	r0, #0
 8001816:	f001 fe29 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x44);
 800181a:	2044      	movs	r0, #68	; 0x44
 800181c:	f001 fe26 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001820:	2000      	movs	r0, #0
 8001822:	f001 fe23 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x4F);
 8001826:	204f      	movs	r0, #79	; 0x4f
 8001828:	f001 fe20 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f001 fe1d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x61);
 8001832:	2061      	movs	r0, #97	; 0x61
 8001834:	f001 fe1a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001838:	2000      	movs	r0, #0
 800183a:	f001 fe17 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x79);
 800183e:	2079      	movs	r0, #121	; 0x79
 8001840:	f001 fe14 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001844:	2000      	movs	r0, #0
 8001846:	f001 fe11 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x88);
 800184a:	2088      	movs	r0, #136	; 0x88
 800184c:	f001 fe0e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001850:	2000      	movs	r0, #0
 8001852:	f001 fe0b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x97);
 8001856:	2097      	movs	r0, #151	; 0x97
 8001858:	f001 fe08 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800185c:	2000      	movs	r0, #0
 800185e:	f001 fe05 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA6);
 8001862:	20a6      	movs	r0, #166	; 0xa6
 8001864:	f001 fe02 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001868:	2000      	movs	r0, #0
 800186a:	f001 fdff 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xB7);
 800186e:	20b7      	movs	r0, #183	; 0xb7
 8001870:	f001 fdfc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001874:	2000      	movs	r0, #0
 8001876:	f001 fdf9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xC2);
 800187a:	20c2      	movs	r0, #194	; 0xc2
 800187c:	f001 fdf6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001880:	2000      	movs	r0, #0
 8001882:	f001 fdf3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xC7);
 8001886:	20c7      	movs	r0, #199	; 0xc7
 8001888:	f001 fdf0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800188c:	2000      	movs	r0, #0
 800188e:	f001 fded 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD1);
 8001892:	20d1      	movs	r0, #209	; 0xd1
 8001894:	f001 fdea 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001898:	2000      	movs	r0, #0
 800189a:	f001 fde7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD6);
 800189e:	20d6      	movs	r0, #214	; 0xd6
 80018a0:	f001 fde4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f001 fde1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xDD);
 80018aa:	20dd      	movs	r0, #221	; 0xdd
 80018ac:	f001 fdde 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f001 fddb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xF3);
 80018b6:	20f3      	movs	r0, #243	; 0xf3
 80018b8:	f001 fdd8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80018bc:	2000      	movs	r0, #0
 80018be:	f001 fdd5 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xE3);
 80018c2:	20e3      	movs	r0, #227	; 0xe3
 80018c4:	f001 fde6 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x05);
 80018c8:	2005      	movs	r0, #5
 80018ca:	f001 fdcf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f001 fdcc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA);
 80018d4:	200a      	movs	r0, #10
 80018d6:	f001 fdc9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80018da:	2000      	movs	r0, #0
 80018dc:	f001 fdc6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1C);
 80018e0:	201c      	movs	r0, #28
 80018e2:	f001 fdc3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f001 fdc0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x33);
 80018ec:	2033      	movs	r0, #51	; 0x33
 80018ee:	f001 fdbd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f001 fdba 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x44);
 80018f8:	2044      	movs	r0, #68	; 0x44
 80018fa:	f001 fdb7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80018fe:	2000      	movs	r0, #0
 8001900:	f001 fdb4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x50);
 8001904:	2050      	movs	r0, #80	; 0x50
 8001906:	f001 fdb1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800190a:	2000      	movs	r0, #0
 800190c:	f001 fdae 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x62);
 8001910:	2062      	movs	r0, #98	; 0x62
 8001912:	f001 fdab 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001916:	2000      	movs	r0, #0
 8001918:	f001 fda8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x78);
 800191c:	2078      	movs	r0, #120	; 0x78
 800191e:	f001 fda5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001922:	2000      	movs	r0, #0
 8001924:	f001 fda2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x88);
 8001928:	2088      	movs	r0, #136	; 0x88
 800192a:	f001 fd9f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800192e:	2000      	movs	r0, #0
 8001930:	f001 fd9c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x97);
 8001934:	2097      	movs	r0, #151	; 0x97
 8001936:	f001 fd99 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800193a:	2000      	movs	r0, #0
 800193c:	f001 fd96 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA6);
 8001940:	20a6      	movs	r0, #166	; 0xa6
 8001942:	f001 fd93 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001946:	2000      	movs	r0, #0
 8001948:	f001 fd90 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xB7);
 800194c:	20b7      	movs	r0, #183	; 0xb7
 800194e:	f001 fd8d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001952:	2000      	movs	r0, #0
 8001954:	f001 fd8a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xC2);
 8001958:	20c2      	movs	r0, #194	; 0xc2
 800195a:	f001 fd87 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800195e:	2000      	movs	r0, #0
 8001960:	f001 fd84 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xC7);
 8001964:	20c7      	movs	r0, #199	; 0xc7
 8001966:	f001 fd81 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800196a:	2000      	movs	r0, #0
 800196c:	f001 fd7e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD1);
 8001970:	20d1      	movs	r0, #209	; 0xd1
 8001972:	f001 fd7b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001976:	2000      	movs	r0, #0
 8001978:	f001 fd78 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD5);
 800197c:	20d5      	movs	r0, #213	; 0xd5
 800197e:	f001 fd75 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001982:	2000      	movs	r0, #0
 8001984:	f001 fd72 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xDD);
 8001988:	20dd      	movs	r0, #221	; 0xdd
 800198a:	f001 fd6f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800198e:	2000      	movs	r0, #0
 8001990:	f001 fd6c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001994:	20f3      	movs	r0, #243	; 0xf3
 8001996:	f001 fd69 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800199a:	2000      	movs	r0, #0
 800199c:	f001 fd66 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE4);
 80019a0:	20e4      	movs	r0, #228	; 0xe4
 80019a2:	f001 fd77 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f001 fd60 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f001 fd5d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f001 fd5a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f001 fd57 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x02);
 80019be:	2002      	movs	r0, #2
 80019c0:	f001 fd54 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f001 fd51 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2A);
 80019ca:	202a      	movs	r0, #42	; 0x2a
 80019cc:	f001 fd4e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f001 fd4b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3C);
 80019d6:	203c      	movs	r0, #60	; 0x3c
 80019d8:	f001 fd48 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80019dc:	2000      	movs	r0, #0
 80019de:	f001 fd45 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x4B);
 80019e2:	204b      	movs	r0, #75	; 0x4b
 80019e4:	f001 fd42 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f001 fd3f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x5D);
 80019ee:	205d      	movs	r0, #93	; 0x5d
 80019f0:	f001 fd3c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f001 fd39 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x74);
 80019fa:	2074      	movs	r0, #116	; 0x74
 80019fc:	f001 fd36 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f001 fd33 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x84);
 8001a06:	2084      	movs	r0, #132	; 0x84
 8001a08:	f001 fd30 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f001 fd2d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x93);
 8001a12:	2093      	movs	r0, #147	; 0x93
 8001a14:	f001 fd2a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f001 fd27 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001a1e:	20a2      	movs	r0, #162	; 0xa2
 8001a20:	f001 fd24 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f001 fd21 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xB3);
 8001a2a:	20b3      	movs	r0, #179	; 0xb3
 8001a2c:	f001 fd1e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f001 fd1b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xBE);
 8001a36:	20be      	movs	r0, #190	; 0xbe
 8001a38:	f001 fd18 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f001 fd15 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001a42:	20c4      	movs	r0, #196	; 0xc4
 8001a44:	f001 fd12 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f001 fd0f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xCD);
 8001a4e:	20cd      	movs	r0, #205	; 0xcd
 8001a50:	f001 fd0c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f001 fd09 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD3);
 8001a5a:	20d3      	movs	r0, #211	; 0xd3
 8001a5c:	f001 fd06 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f001 fd03 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xDD);
 8001a66:	20dd      	movs	r0, #221	; 0xdd
 8001a68:	f001 fd00 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f001 fcfd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001a72:	20f3      	movs	r0, #243	; 0xf3
 8001a74:	f001 fcfa 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f001 fcf7 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xE5);
 8001a7e:	20e5      	movs	r0, #229	; 0xe5
 8001a80:	f001 fd08 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f001 fcf1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f001 fcee 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f001 fceb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f001 fce8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x02);
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f001 fce5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f001 fce2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x29);
 8001aa8:	2029      	movs	r0, #41	; 0x29
 8001aaa:	f001 fcdf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f001 fcdc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001ab4:	203c      	movs	r0, #60	; 0x3c
 8001ab6:	f001 fcd9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f001 fcd6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x4B);
 8001ac0:	204b      	movs	r0, #75	; 0x4b
 8001ac2:	f001 fcd3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f001 fcd0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001acc:	205d      	movs	r0, #93	; 0x5d
 8001ace:	f001 fccd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f001 fcca 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x74);
 8001ad8:	2074      	movs	r0, #116	; 0x74
 8001ada:	f001 fcc7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f001 fcc4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x84);
 8001ae4:	2084      	movs	r0, #132	; 0x84
 8001ae6:	f001 fcc1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f001 fcbe 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x93);
 8001af0:	2093      	movs	r0, #147	; 0x93
 8001af2:	f001 fcbb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f001 fcb8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001afc:	20a2      	movs	r0, #162	; 0xa2
 8001afe:	f001 fcb5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f001 fcb2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xB3);
 8001b08:	20b3      	movs	r0, #179	; 0xb3
 8001b0a:	f001 fcaf 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f001 fcac 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xBE);
 8001b14:	20be      	movs	r0, #190	; 0xbe
 8001b16:	f001 fca9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f001 fca6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001b20:	20c4      	movs	r0, #196	; 0xc4
 8001b22:	f001 fca3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b26:	2000      	movs	r0, #0
 8001b28:	f001 fca0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xCD);
 8001b2c:	20cd      	movs	r0, #205	; 0xcd
 8001b2e:	f001 fc9d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f001 fc9a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xD3);
 8001b38:	20d3      	movs	r0, #211	; 0xd3
 8001b3a:	f001 fc97 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f001 fc94 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xDC);
 8001b44:	20dc      	movs	r0, #220	; 0xdc
 8001b46:	f001 fc91 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f001 fc8e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001b50:	20f3      	movs	r0, #243	; 0xf3
 8001b52:	f001 fc8b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f001 fc88 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8001b5c:	20e6      	movs	r0, #230	; 0xe6
 8001b5e:	f001 fc99 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x11);
 8001b62:	2011      	movs	r0, #17
 8001b64:	f001 fc82 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f001 fc7f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x34);
 8001b6e:	2034      	movs	r0, #52	; 0x34
 8001b70:	f001 fc7c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f001 fc79 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x56);
 8001b7a:	2056      	movs	r0, #86	; 0x56
 8001b7c:	f001 fc76 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f001 fc73 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x76);
 8001b86:	2076      	movs	r0, #118	; 0x76
 8001b88:	f001 fc70 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f001 fc6d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x77);
 8001b92:	2077      	movs	r0, #119	; 0x77
 8001b94:	f001 fc6a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f001 fc67 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x66);
 8001b9e:	2066      	movs	r0, #102	; 0x66
 8001ba0:	f001 fc64 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f001 fc61 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x88);
 8001baa:	2088      	movs	r0, #136	; 0x88
 8001bac:	f001 fc5e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f001 fc5b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x99);
 8001bb6:	2099      	movs	r0, #153	; 0x99
 8001bb8:	f001 fc58 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f001 fc55 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xBB);
 8001bc2:	20bb      	movs	r0, #187	; 0xbb
 8001bc4:	f001 fc52 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f001 fc4f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x99);
 8001bce:	2099      	movs	r0, #153	; 0x99
 8001bd0:	f001 fc4c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f001 fc49 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x66);
 8001bda:	2066      	movs	r0, #102	; 0x66
 8001bdc:	f001 fc46 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f001 fc43 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x55);
 8001be6:	2055      	movs	r0, #85	; 0x55
 8001be8:	f001 fc40 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f001 fc3d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x55);
 8001bf2:	2055      	movs	r0, #85	; 0x55
 8001bf4:	f001 fc3a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f001 fc37 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x45);
 8001bfe:	2045      	movs	r0, #69	; 0x45
 8001c00:	f001 fc34 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f001 fc31 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x43);
 8001c0a:	2043      	movs	r0, #67	; 0x43
 8001c0c:	f001 fc2e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c10:	2000      	movs	r0, #0
 8001c12:	f001 fc2b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x44);
 8001c16:	2044      	movs	r0, #68	; 0x44
 8001c18:	f001 fc28 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f001 fc25 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE7);
 8001c22:	20e7      	movs	r0, #231	; 0xe7
 8001c24:	f001 fc36 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8001c28:	2032      	movs	r0, #50	; 0x32
 8001c2a:	f001 fc1f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f001 fc1c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x55);
 8001c34:	2055      	movs	r0, #85	; 0x55
 8001c36:	f001 fc19 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f001 fc16 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x76);
 8001c40:	2076      	movs	r0, #118	; 0x76
 8001c42:	f001 fc13 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f001 fc10 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x66);
 8001c4c:	2066      	movs	r0, #102	; 0x66
 8001c4e:	f001 fc0d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f001 fc0a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x67);
 8001c58:	2067      	movs	r0, #103	; 0x67
 8001c5a:	f001 fc07 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f001 fc04 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x67);
 8001c64:	2067      	movs	r0, #103	; 0x67
 8001c66:	f001 fc01 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f001 fbfe 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x87);
 8001c70:	2087      	movs	r0, #135	; 0x87
 8001c72:	f001 fbfb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f001 fbf8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x99);
 8001c7c:	2099      	movs	r0, #153	; 0x99
 8001c7e:	f001 fbf5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f001 fbf2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xBB);
 8001c88:	20bb      	movs	r0, #187	; 0xbb
 8001c8a:	f001 fbef 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f001 fbec 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x99);
 8001c94:	2099      	movs	r0, #153	; 0x99
 8001c96:	f001 fbe9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f001 fbe6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x77);
 8001ca0:	2077      	movs	r0, #119	; 0x77
 8001ca2:	f001 fbe3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f001 fbe0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x44);
 8001cac:	2044      	movs	r0, #68	; 0x44
 8001cae:	f001 fbdd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f001 fbda 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x56);
 8001cb8:	2056      	movs	r0, #86	; 0x56
 8001cba:	f001 fbd7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f001 fbd4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x23);
 8001cc4:	2023      	movs	r0, #35	; 0x23
 8001cc6:	f001 fbd1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f001 fbce 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x33);
 8001cd0:	2033      	movs	r0, #51	; 0x33
 8001cd2:	f001 fbcb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f001 fbc8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x45);
 8001cdc:	2045      	movs	r0, #69	; 0x45
 8001cde:	f001 fbc5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f001 fbc2 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8001ce8:	20e8      	movs	r0, #232	; 0xe8
 8001cea:	f001 fbd3 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f001 fbbc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f001 fbb9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x99);
 8001cfa:	2099      	movs	r0, #153	; 0x99
 8001cfc:	f001 fbb6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f001 fbb3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x87);
 8001d06:	2087      	movs	r0, #135	; 0x87
 8001d08:	f001 fbb0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f001 fbad 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x88);
 8001d12:	2088      	movs	r0, #136	; 0x88
 8001d14:	f001 fbaa 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f001 fba7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x77);
 8001d1e:	2077      	movs	r0, #119	; 0x77
 8001d20:	f001 fba4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f001 fba1 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x66);
 8001d2a:	2066      	movs	r0, #102	; 0x66
 8001d2c:	f001 fb9e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f001 fb9b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x88);
 8001d36:	2088      	movs	r0, #136	; 0x88
 8001d38:	f001 fb98 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f001 fb95 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xAA);
 8001d42:	20aa      	movs	r0, #170	; 0xaa
 8001d44:	f001 fb92 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f001 fb8f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xBB);
 8001d4e:	20bb      	movs	r0, #187	; 0xbb
 8001d50:	f001 fb8c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f001 fb89 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x99);
 8001d5a:	2099      	movs	r0, #153	; 0x99
 8001d5c:	f001 fb86 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f001 fb83 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x66);
 8001d66:	2066      	movs	r0, #102	; 0x66
 8001d68:	f001 fb80 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f001 fb7d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x55);
 8001d72:	2055      	movs	r0, #85	; 0x55
 8001d74:	f001 fb7a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f001 fb77 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x55);
 8001d7e:	2055      	movs	r0, #85	; 0x55
 8001d80:	f001 fb74 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f001 fb71 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x44);
 8001d8a:	2044      	movs	r0, #68	; 0x44
 8001d8c:	f001 fb6e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f001 fb6b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x44);
 8001d96:	2044      	movs	r0, #68	; 0x44
 8001d98:	f001 fb68 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f001 fb65 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x55);
 8001da2:	2055      	movs	r0, #85	; 0x55
 8001da4:	f001 fb62 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f001 fb5f 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE9);
 8001dae:	20e9      	movs	r0, #233	; 0xe9
 8001db0:	f001 fb70 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8001db4:	20aa      	movs	r0, #170	; 0xaa
 8001db6:	f001 fb59 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f001 fb56 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f001 fb53 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f001 fb50 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x00);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f001 fb61 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8001dd2:	20aa      	movs	r0, #170	; 0xaa
 8001dd4:	f001 fb4a 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xCF);
 8001dd8:	20cf      	movs	r0, #207	; 0xcf
 8001dda:	f001 fb5b 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f001 fb44 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f001 fb41 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f001 fb3e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f001 fb3b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f001 fb38 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f001 fb35 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f001 fb32 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f001 fb2f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f001 fb2c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f001 fb29 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f001 fb26 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f001 fb23 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f001 fb20 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f001 fb1d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f001 fb1a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f001 fb17 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f001 fb14 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001e44:	20f0      	movs	r0, #240	; 0xf0
 8001e46:	f001 fb25 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f001 fb0e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x50);
 8001e50:	2050      	movs	r0, #80	; 0x50
 8001e52:	f001 fb0b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f001 fb08 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f001 fb05 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f001 fb02 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF3);
 8001e68:	20f3      	movs	r0, #243	; 0xf3
 8001e6a:	f001 fb13 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f001 fafc 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF9);
 8001e74:	20f9      	movs	r0, #249	; 0xf9
 8001e76:	f001 fb0d 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x06);
 8001e7a:	2006      	movs	r0, #6
 8001e7c:	f001 faf6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x10);
 8001e80:	2010      	movs	r0, #16
 8001e82:	f001 faf3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x29);
 8001e86:	2029      	movs	r0, #41	; 0x29
 8001e88:	f001 faf0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f001 faed 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8001e92:	203a      	movs	r0, #58	; 0x3a
 8001e94:	f001 fafe 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 8001e98:	2055      	movs	r0, #85	; 0x55
 8001e9a:	f001 fae7 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x11);
 8001e9e:	2011      	movs	r0, #17
 8001ea0:	f001 faf8 	bl	8003494 <lcd_wr_regno>
    HAL_Delay(100);
 8001ea4:	2064      	movs	r0, #100	; 0x64
 8001ea6:	f003 f857 	bl	8004f58 <HAL_Delay>
    lcd_wr_regno(0x29);
 8001eaa:	2029      	movs	r0, #41	; 0x29
 8001eac:	f001 faf2 	bl	8003494 <lcd_wr_regno>
    lcd_wr_regno(0x35);
 8001eb0:	2035      	movs	r0, #53	; 0x35
 8001eb2:	f001 faef 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f001 fad8 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x51);
 8001ebc:	2051      	movs	r0, #81	; 0x51
 8001ebe:	f001 fae9 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8001ec2:	20ff      	movs	r0, #255	; 0xff
 8001ec4:	f001 fad2 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0x53);
 8001ec8:	2053      	movs	r0, #83	; 0x53
 8001eca:	f001 fae3 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x2C);
 8001ece:	202c      	movs	r0, #44	; 0x2c
 8001ed0:	f001 facc 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0x55);
 8001ed4:	2055      	movs	r0, #85	; 0x55
 8001ed6:	f001 fadd 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x82);
 8001eda:	2082      	movs	r0, #130	; 0x82
 8001edc:	f001 fac6 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0x2c);
 8001ee0:	202c      	movs	r0, #44	; 0x2c
 8001ee2:	f001 fad7 	bl	8003494 <lcd_wr_regno>
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <lcd_ex_st7796_reginit>:
 * @brief  ST7796 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7796_reginit(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8001eee:	2011      	movs	r0, #17
 8001ef0:	f001 fad0 	bl	8003494 <lcd_wr_regno>

    HAL_Delay(120);
 8001ef4:	2078      	movs	r0, #120	; 0x78
 8001ef6:	f003 f82f 	bl	8004f58 <HAL_Delay>

    lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
 8001efa:	2036      	movs	r0, #54	; 0x36
 8001efc:	f001 faca 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8001f00:	2048      	movs	r0, #72	; 0x48
 8001f02:	f001 fab3 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8001f06:	203a      	movs	r0, #58	; 0x3a
 8001f08:	f001 fac4 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8001f0c:	2055      	movs	r0, #85	; 0x55
 8001f0e:	f001 faad 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001f12:	20f0      	movs	r0, #240	; 0xf0
 8001f14:	f001 fabe 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xC3);
 8001f18:	20c3      	movs	r0, #195	; 0xc3
 8001f1a:	f001 faa7 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001f1e:	20f0      	movs	r0, #240	; 0xf0
 8001f20:	f001 fab8 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x96);
 8001f24:	2096      	movs	r0, #150	; 0x96
 8001f26:	f001 faa1 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8001f2a:	20b4      	movs	r0, #180	; 0xb4
 8001f2c:	f001 fab2 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f001 fa9b 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB6); /* Display Function Control */
 8001f36:	20b6      	movs	r0, #182	; 0xb6
 8001f38:	f001 faac 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f001 fa95 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001f42:	20a2      	movs	r0, #162	; 0xa2
 8001f44:	f001 fa92 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8001f48:	20b7      	movs	r0, #183	; 0xb7
 8001f4a:	f001 faa3 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xC6);
 8001f4e:	20c6      	movs	r0, #198	; 0xc6
 8001f50:	f001 fa8c 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB9);
 8001f54:	20b9      	movs	r0, #185	; 0xb9
 8001f56:	f001 fa9d 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	f001 fa86 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xE0);
 8001f60:	20e0      	movs	r0, #224	; 0xe0
 8001f62:	f001 fa83 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8001f66:	20c0      	movs	r0, #192	; 0xc0
 8001f68:	f001 fa94 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8001f6c:	2080      	movs	r0, #128	; 0x80
 8001f6e:	f001 fa7d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x16);
 8001f72:	2016      	movs	r0, #22
 8001f74:	f001 fa7a 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC1);
 8001f78:	20c1      	movs	r0, #193	; 0xc1
 8001f7a:	f001 fa8b 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x19);
 8001f7e:	2019      	movs	r0, #25
 8001f80:	f001 fa74 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001f84:	20c2      	movs	r0, #194	; 0xc2
 8001f86:	f001 fa85 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xA7);
 8001f8a:	20a7      	movs	r0, #167	; 0xa7
 8001f8c:	f001 fa6e 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC5);
 8001f90:	20c5      	movs	r0, #197	; 0xc5
 8001f92:	f001 fa7f 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8001f96:	2016      	movs	r0, #22
 8001f98:	f001 fa68 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8001f9c:	20e8      	movs	r0, #232	; 0xe8
 8001f9e:	f001 fa79 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x40);
 8001fa2:	2040      	movs	r0, #64	; 0x40
 8001fa4:	f001 fa62 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x8A);
 8001fa8:	208a      	movs	r0, #138	; 0x8a
 8001faa:	f001 fa5f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f001 fa5c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f001 fa59 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x29);
 8001fba:	2029      	movs	r0, #41	; 0x29
 8001fbc:	f001 fa56 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x19);
 8001fc0:	2019      	movs	r0, #25
 8001fc2:	f001 fa53 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xA5);
 8001fc6:	20a5      	movs	r0, #165	; 0xa5
 8001fc8:	f001 fa50 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x33);
 8001fcc:	2033      	movs	r0, #51	; 0x33
 8001fce:	f001 fa4d 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8001fd2:	20e0      	movs	r0, #224	; 0xe0
 8001fd4:	f001 fa5e 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8001fd8:	20f0      	movs	r0, #240	; 0xf0
 8001fda:	f001 fa47 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x07);
 8001fde:	2007      	movs	r0, #7
 8001fe0:	f001 fa44 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0D);
 8001fe4:	200d      	movs	r0, #13
 8001fe6:	f001 fa41 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x04);
 8001fea:	2004      	movs	r0, #4
 8001fec:	f001 fa3e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x05);
 8001ff0:	2005      	movs	r0, #5
 8001ff2:	f001 fa3b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x14);
 8001ff6:	2014      	movs	r0, #20
 8001ff8:	f001 fa38 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x36);
 8001ffc:	2036      	movs	r0, #54	; 0x36
 8001ffe:	f001 fa35 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x54);
 8002002:	2054      	movs	r0, #84	; 0x54
 8002004:	f001 fa32 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x4C);
 8002008:	204c      	movs	r0, #76	; 0x4c
 800200a:	f001 fa2f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x38);
 800200e:	2038      	movs	r0, #56	; 0x38
 8002010:	f001 fa2c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x13);
 8002014:	2013      	movs	r0, #19
 8002016:	f001 fa29 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x14);
 800201a:	2014      	movs	r0, #20
 800201c:	f001 fa26 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2E);
 8002020:	202e      	movs	r0, #46	; 0x2e
 8002022:	f001 fa23 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x34);
 8002026:	2034      	movs	r0, #52	; 0x34
 8002028:	f001 fa20 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE1);
 800202c:	20e1      	movs	r0, #225	; 0xe1
 800202e:	f001 fa31 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8002032:	20f0      	movs	r0, #240	; 0xf0
 8002034:	f001 fa1a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x10);
 8002038:	2010      	movs	r0, #16
 800203a:	f001 fa17 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x14);
 800203e:	2014      	movs	r0, #20
 8002040:	f001 fa14 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0E);
 8002044:	200e      	movs	r0, #14
 8002046:	f001 fa11 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0C);
 800204a:	200c      	movs	r0, #12
 800204c:	f001 fa0e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x08);
 8002050:	2008      	movs	r0, #8
 8002052:	f001 fa0b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x35);
 8002056:	2035      	movs	r0, #53	; 0x35
 8002058:	f001 fa08 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x44);
 800205c:	2044      	movs	r0, #68	; 0x44
 800205e:	f001 fa05 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x4C);
 8002062:	204c      	movs	r0, #76	; 0x4c
 8002064:	f001 fa02 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x26);
 8002068:	2026      	movs	r0, #38	; 0x26
 800206a:	f001 f9ff 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x10);
 800206e:	2010      	movs	r0, #16
 8002070:	f001 f9fc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x12);
 8002074:	2012      	movs	r0, #18
 8002076:	f001 f9f9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x2C);
 800207a:	202c      	movs	r0, #44	; 0x2c
 800207c:	f001 f9f6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x32);
 8002080:	2032      	movs	r0, #50	; 0x32
 8002082:	f001 f9f3 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002086:	20f0      	movs	r0, #240	; 0xf0
 8002088:	f001 fa04 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 800208c:	203c      	movs	r0, #60	; 0x3c
 800208e:	f001 f9ed 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002092:	20f0      	movs	r0, #240	; 0xf0
 8002094:	f001 f9fe 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x69);
 8002098:	2069      	movs	r0, #105	; 0x69
 800209a:	f001 f9e7 	bl	800346c <lcd_wr_data>

    HAL_Delay(120);
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f002 ff5a 	bl	8004f58 <HAL_Delay>

    lcd_wr_regno(0x21);
 80020a4:	2021      	movs	r0, #33	; 0x21
 80020a6:	f001 f9f5 	bl	8003494 <lcd_wr_regno>
    lcd_wr_regno(0x29);
 80020aa:	2029      	movs	r0, #41	; 0x29
 80020ac:	f001 f9f2 	bl	8003494 <lcd_wr_regno>
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <lcd_ex_nt35510_reginit>:
 * @brief  NT35510 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35510_reginit(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 80020b8:	2155      	movs	r1, #85	; 0x55
 80020ba:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80020be:	f001 f9fd 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 80020c2:	21aa      	movs	r1, #170	; 0xaa
 80020c4:	f24f 0001 	movw	r0, #61441	; 0xf001
 80020c8:	f001 f9f8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 80020cc:	2152      	movs	r1, #82	; 0x52
 80020ce:	f24f 0002 	movw	r0, #61442	; 0xf002
 80020d2:	f001 f9f3 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 80020d6:	2108      	movs	r1, #8
 80020d8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80020dc:	f001 f9ee 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 80020e0:	2101      	movs	r1, #1
 80020e2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80020e6:	f001 f9e9 	bl	80034bc <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 80020ea:	210d      	movs	r1, #13
 80020ec:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80020f0:	f001 f9e4 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 80020f4:	210d      	movs	r1, #13
 80020f6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80020fa:	f001 f9df 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 80020fe:	210d      	movs	r1, #13
 8002100:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002104:	f001 f9da 	bl	80034bc <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 8002108:	2134      	movs	r1, #52	; 0x34
 800210a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800210e:	f001 f9d5 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 8002112:	2134      	movs	r1, #52	; 0x34
 8002114:	f24b 6001 	movw	r0, #46593	; 0xb601
 8002118:	f001 f9d0 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 800211c:	2134      	movs	r1, #52	; 0x34
 800211e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002122:	f001 f9cb 	bl	80034bc <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 8002126:	210d      	movs	r1, #13
 8002128:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800212c:	f001 f9c6 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 8002130:	210d      	movs	r1, #13
 8002132:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002136:	f001 f9c1 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 800213a:	210d      	movs	r1, #13
 800213c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8002140:	f001 f9bc 	bl	80034bc <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 8002144:	2134      	movs	r1, #52	; 0x34
 8002146:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800214a:	f001 f9b7 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 800214e:	2134      	movs	r1, #52	; 0x34
 8002150:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002154:	f001 f9b2 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 8002158:	2134      	movs	r1, #52	; 0x34
 800215a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800215e:	f001 f9ad 	bl	80034bc <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 8002162:	2100      	movs	r1, #0
 8002164:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002168:	f001 f9a8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 800216c:	2100      	movs	r1, #0
 800216e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8002172:	f001 f9a3 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 8002176:	2100      	movs	r1, #0
 8002178:	f24b 2002 	movw	r0, #45570	; 0xb202
 800217c:	f001 f99e 	bl	80034bc <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 8002180:	2124      	movs	r1, #36	; 0x24
 8002182:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002186:	f001 f999 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 800218a:	2124      	movs	r1, #36	; 0x24
 800218c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002190:	f001 f994 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 8002194:	2124      	movs	r1, #36	; 0x24
 8002196:	f64b 0002 	movw	r0, #47106	; 0xb802
 800219a:	f001 f98f 	bl	80034bc <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 800219e:	2101      	movs	r1, #1
 80021a0:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80021a4:	f001 f98a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 80021a8:	210f      	movs	r1, #15
 80021aa:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80021ae:	f001 f985 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 80021b2:	210f      	movs	r1, #15
 80021b4:	f24b 3001 	movw	r0, #45825	; 0xb301
 80021b8:	f001 f980 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 80021bc:	210f      	movs	r1, #15
 80021be:	f24b 3002 	movw	r0, #45826	; 0xb302
 80021c2:	f001 f97b 	bl	80034bc <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 80021c6:	2134      	movs	r1, #52	; 0x34
 80021c8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80021cc:	f001 f976 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 80021d0:	2134      	movs	r1, #52	; 0x34
 80021d2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80021d6:	f001 f971 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 80021da:	2134      	movs	r1, #52	; 0x34
 80021dc:	f64b 1002 	movw	r0, #47362	; 0xb902
 80021e0:	f001 f96c 	bl	80034bc <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 80021e4:	2108      	movs	r1, #8
 80021e6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80021ea:	f001 f967 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 80021ee:	2108      	movs	r1, #8
 80021f0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80021f4:	f001 f962 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 80021f8:	2108      	movs	r1, #8
 80021fa:	f24b 5002 	movw	r0, #46338	; 0xb502
 80021fe:	f001 f95d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 8002202:	2103      	movs	r1, #3
 8002204:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8002208:	f001 f958 	bl	80034bc <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 800220c:	2124      	movs	r1, #36	; 0x24
 800220e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8002212:	f001 f953 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 8002216:	2124      	movs	r1, #36	; 0x24
 8002218:	f64b 2001 	movw	r0, #47617	; 0xba01
 800221c:	f001 f94e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 8002220:	2124      	movs	r1, #36	; 0x24
 8002222:	f64b 2002 	movw	r0, #47618	; 0xba02
 8002226:	f001 f949 	bl	80034bc <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 800222a:	2100      	movs	r1, #0
 800222c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002230:	f001 f944 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 8002234:	2178      	movs	r1, #120	; 0x78
 8002236:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800223a:	f001 f93f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 800223e:	2100      	movs	r1, #0
 8002240:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002244:	f001 f93a 	bl	80034bc <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 8002248:	2100      	movs	r1, #0
 800224a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800224e:	f001 f935 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 8002252:	2178      	movs	r1, #120	; 0x78
 8002254:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8002258:	f001 f930 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 800225c:	2100      	movs	r1, #0
 800225e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8002262:	f001 f92b 	bl	80034bc <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 8002266:	2100      	movs	r1, #0
 8002268:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800226c:	f001 f926 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 8002270:	2164      	movs	r1, #100	; 0x64
 8002272:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8002276:	f001 f921 	bl	80034bc <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 800227a:	2100      	movs	r1, #0
 800227c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8002280:	f001 f91c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 8002284:	2133      	movs	r1, #51	; 0x33
 8002286:	f24d 1001 	movw	r0, #53505	; 0xd101
 800228a:	f001 f917 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 800228e:	2100      	movs	r1, #0
 8002290:	f24d 1002 	movw	r0, #53506	; 0xd102
 8002294:	f001 f912 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 8002298:	2134      	movs	r1, #52	; 0x34
 800229a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800229e:	f001 f90d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 80022a2:	2100      	movs	r1, #0
 80022a4:	f24d 1004 	movw	r0, #53508	; 0xd104
 80022a8:	f001 f908 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 80022ac:	213a      	movs	r1, #58	; 0x3a
 80022ae:	f24d 1005 	movw	r0, #53509	; 0xd105
 80022b2:	f001 f903 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 80022b6:	2100      	movs	r1, #0
 80022b8:	f24d 1006 	movw	r0, #53510	; 0xd106
 80022bc:	f001 f8fe 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 80022c0:	214a      	movs	r1, #74	; 0x4a
 80022c2:	f24d 1007 	movw	r0, #53511	; 0xd107
 80022c6:	f001 f8f9 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 80022ca:	2100      	movs	r1, #0
 80022cc:	f24d 1008 	movw	r0, #53512	; 0xd108
 80022d0:	f001 f8f4 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 80022d4:	215c      	movs	r1, #92	; 0x5c
 80022d6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80022da:	f001 f8ef 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 80022de:	2100      	movs	r1, #0
 80022e0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80022e4:	f001 f8ea 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 80022e8:	2181      	movs	r1, #129	; 0x81
 80022ea:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80022ee:	f001 f8e5 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 80022f2:	2100      	movs	r1, #0
 80022f4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80022f8:	f001 f8e0 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 80022fc:	21a6      	movs	r1, #166	; 0xa6
 80022fe:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8002302:	f001 f8db 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 8002306:	2100      	movs	r1, #0
 8002308:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800230c:	f001 f8d6 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 8002310:	21e5      	movs	r1, #229	; 0xe5
 8002312:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8002316:	f001 f8d1 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 800231a:	2101      	movs	r1, #1
 800231c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8002320:	f001 f8cc 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 8002324:	2113      	movs	r1, #19
 8002326:	f24d 1011 	movw	r0, #53521	; 0xd111
 800232a:	f001 f8c7 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 800232e:	2101      	movs	r1, #1
 8002330:	f24d 1012 	movw	r0, #53522	; 0xd112
 8002334:	f001 f8c2 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 8002338:	2154      	movs	r1, #84	; 0x54
 800233a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800233e:	f001 f8bd 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 8002342:	2101      	movs	r1, #1
 8002344:	f24d 1014 	movw	r0, #53524	; 0xd114
 8002348:	f001 f8b8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 800234c:	2182      	movs	r1, #130	; 0x82
 800234e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8002352:	f001 f8b3 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 8002356:	2101      	movs	r1, #1
 8002358:	f24d 1016 	movw	r0, #53526	; 0xd116
 800235c:	f001 f8ae 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 8002360:	21ca      	movs	r1, #202	; 0xca
 8002362:	f24d 1017 	movw	r0, #53527	; 0xd117
 8002366:	f001 f8a9 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 800236a:	2102      	movs	r1, #2
 800236c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8002370:	f001 f8a4 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 8002374:	2100      	movs	r1, #0
 8002376:	f24d 1019 	movw	r0, #53529	; 0xd119
 800237a:	f001 f89f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 800237e:	2102      	movs	r1, #2
 8002380:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8002384:	f001 f89a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 8002388:	2101      	movs	r1, #1
 800238a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800238e:	f001 f895 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 8002392:	2102      	movs	r1, #2
 8002394:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8002398:	f001 f890 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 800239c:	2134      	movs	r1, #52	; 0x34
 800239e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80023a2:	f001 f88b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 80023a6:	2102      	movs	r1, #2
 80023a8:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80023ac:	f001 f886 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 80023b0:	2167      	movs	r1, #103	; 0x67
 80023b2:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80023b6:	f001 f881 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 80023ba:	2102      	movs	r1, #2
 80023bc:	f24d 1020 	movw	r0, #53536	; 0xd120
 80023c0:	f001 f87c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 80023c4:	2184      	movs	r1, #132	; 0x84
 80023c6:	f24d 1021 	movw	r0, #53537	; 0xd121
 80023ca:	f001 f877 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 80023ce:	2102      	movs	r1, #2
 80023d0:	f24d 1022 	movw	r0, #53538	; 0xd122
 80023d4:	f001 f872 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 80023d8:	21a4      	movs	r1, #164	; 0xa4
 80023da:	f24d 1023 	movw	r0, #53539	; 0xd123
 80023de:	f001 f86d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 80023e2:	2102      	movs	r1, #2
 80023e4:	f24d 1024 	movw	r0, #53540	; 0xd124
 80023e8:	f001 f868 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 80023ec:	21b7      	movs	r1, #183	; 0xb7
 80023ee:	f24d 1025 	movw	r0, #53541	; 0xd125
 80023f2:	f001 f863 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 80023f6:	2102      	movs	r1, #2
 80023f8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80023fc:	f001 f85e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 8002400:	21cf      	movs	r1, #207	; 0xcf
 8002402:	f24d 1027 	movw	r0, #53543	; 0xd127
 8002406:	f001 f859 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 800240a:	2102      	movs	r1, #2
 800240c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8002410:	f001 f854 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 8002414:	21de      	movs	r1, #222	; 0xde
 8002416:	f24d 1029 	movw	r0, #53545	; 0xd129
 800241a:	f001 f84f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 800241e:	2102      	movs	r1, #2
 8002420:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8002424:	f001 f84a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 8002428:	21f2      	movs	r1, #242	; 0xf2
 800242a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800242e:	f001 f845 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 8002432:	2102      	movs	r1, #2
 8002434:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8002438:	f001 f840 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 800243c:	21fe      	movs	r1, #254	; 0xfe
 800243e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8002442:	f001 f83b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 8002446:	2103      	movs	r1, #3
 8002448:	f24d 102e 	movw	r0, #53550	; 0xd12e
 800244c:	f001 f836 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 8002450:	2110      	movs	r1, #16
 8002452:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8002456:	f001 f831 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 800245a:	2103      	movs	r1, #3
 800245c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8002460:	f001 f82c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 8002464:	2133      	movs	r1, #51	; 0x33
 8002466:	f24d 1031 	movw	r0, #53553	; 0xd131
 800246a:	f001 f827 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 800246e:	2103      	movs	r1, #3
 8002470:	f24d 1032 	movw	r0, #53554	; 0xd132
 8002474:	f001 f822 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 8002478:	216d      	movs	r1, #109	; 0x6d
 800247a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800247e:	f001 f81d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 8002482:	2100      	movs	r1, #0
 8002484:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8002488:	f001 f818 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 800248c:	2133      	movs	r1, #51	; 0x33
 800248e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8002492:	f001 f813 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 8002496:	2100      	movs	r1, #0
 8002498:	f24d 2002 	movw	r0, #53762	; 0xd202
 800249c:	f001 f80e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 80024a0:	2134      	movs	r1, #52	; 0x34
 80024a2:	f24d 2003 	movw	r0, #53763	; 0xd203
 80024a6:	f001 f809 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 80024aa:	2100      	movs	r1, #0
 80024ac:	f24d 2004 	movw	r0, #53764	; 0xd204
 80024b0:	f001 f804 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 80024b4:	213a      	movs	r1, #58	; 0x3a
 80024b6:	f24d 2005 	movw	r0, #53765	; 0xd205
 80024ba:	f000 ffff 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 80024be:	2100      	movs	r1, #0
 80024c0:	f24d 2006 	movw	r0, #53766	; 0xd206
 80024c4:	f000 fffa 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 80024c8:	214a      	movs	r1, #74	; 0x4a
 80024ca:	f24d 2007 	movw	r0, #53767	; 0xd207
 80024ce:	f000 fff5 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 80024d2:	2100      	movs	r1, #0
 80024d4:	f24d 2008 	movw	r0, #53768	; 0xd208
 80024d8:	f000 fff0 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 80024dc:	215c      	movs	r1, #92	; 0x5c
 80024de:	f24d 2009 	movw	r0, #53769	; 0xd209
 80024e2:	f000 ffeb 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 80024e6:	2100      	movs	r1, #0
 80024e8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80024ec:	f000 ffe6 	bl	80034bc <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 80024f0:	2181      	movs	r1, #129	; 0x81
 80024f2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80024f6:	f000 ffe1 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 80024fa:	2100      	movs	r1, #0
 80024fc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8002500:	f000 ffdc 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 8002504:	21a6      	movs	r1, #166	; 0xa6
 8002506:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800250a:	f000 ffd7 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 800250e:	2100      	movs	r1, #0
 8002510:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8002514:	f000 ffd2 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 8002518:	21e5      	movs	r1, #229	; 0xe5
 800251a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800251e:	f000 ffcd 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 8002522:	2101      	movs	r1, #1
 8002524:	f24d 2010 	movw	r0, #53776	; 0xd210
 8002528:	f000 ffc8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 800252c:	2113      	movs	r1, #19
 800252e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8002532:	f000 ffc3 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 8002536:	2101      	movs	r1, #1
 8002538:	f24d 2012 	movw	r0, #53778	; 0xd212
 800253c:	f000 ffbe 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 8002540:	2154      	movs	r1, #84	; 0x54
 8002542:	f24d 2013 	movw	r0, #53779	; 0xd213
 8002546:	f000 ffb9 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 800254a:	2101      	movs	r1, #1
 800254c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8002550:	f000 ffb4 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 8002554:	2182      	movs	r1, #130	; 0x82
 8002556:	f24d 2015 	movw	r0, #53781	; 0xd215
 800255a:	f000 ffaf 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 800255e:	2101      	movs	r1, #1
 8002560:	f24d 2016 	movw	r0, #53782	; 0xd216
 8002564:	f000 ffaa 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 8002568:	21ca      	movs	r1, #202	; 0xca
 800256a:	f24d 2017 	movw	r0, #53783	; 0xd217
 800256e:	f000 ffa5 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 8002572:	2102      	movs	r1, #2
 8002574:	f24d 2018 	movw	r0, #53784	; 0xd218
 8002578:	f000 ffa0 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 800257c:	2100      	movs	r1, #0
 800257e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8002582:	f000 ff9b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 8002586:	2102      	movs	r1, #2
 8002588:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800258c:	f000 ff96 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 8002590:	2101      	movs	r1, #1
 8002592:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8002596:	f000 ff91 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 800259a:	2102      	movs	r1, #2
 800259c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80025a0:	f000 ff8c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 80025a4:	2134      	movs	r1, #52	; 0x34
 80025a6:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80025aa:	f000 ff87 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 80025ae:	2102      	movs	r1, #2
 80025b0:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80025b4:	f000 ff82 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 80025b8:	2167      	movs	r1, #103	; 0x67
 80025ba:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80025be:	f000 ff7d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 80025c2:	2102      	movs	r1, #2
 80025c4:	f24d 2020 	movw	r0, #53792	; 0xd220
 80025c8:	f000 ff78 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 80025cc:	2184      	movs	r1, #132	; 0x84
 80025ce:	f24d 2021 	movw	r0, #53793	; 0xd221
 80025d2:	f000 ff73 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 80025d6:	2102      	movs	r1, #2
 80025d8:	f24d 2022 	movw	r0, #53794	; 0xd222
 80025dc:	f000 ff6e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 80025e0:	21a4      	movs	r1, #164	; 0xa4
 80025e2:	f24d 2023 	movw	r0, #53795	; 0xd223
 80025e6:	f000 ff69 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 80025ea:	2102      	movs	r1, #2
 80025ec:	f24d 2024 	movw	r0, #53796	; 0xd224
 80025f0:	f000 ff64 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 80025f4:	21b7      	movs	r1, #183	; 0xb7
 80025f6:	f24d 2025 	movw	r0, #53797	; 0xd225
 80025fa:	f000 ff5f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 80025fe:	2102      	movs	r1, #2
 8002600:	f24d 2026 	movw	r0, #53798	; 0xd226
 8002604:	f000 ff5a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 8002608:	21cf      	movs	r1, #207	; 0xcf
 800260a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800260e:	f000 ff55 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 8002612:	2102      	movs	r1, #2
 8002614:	f24d 2028 	movw	r0, #53800	; 0xd228
 8002618:	f000 ff50 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 800261c:	21de      	movs	r1, #222	; 0xde
 800261e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8002622:	f000 ff4b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 8002626:	2102      	movs	r1, #2
 8002628:	f24d 202a 	movw	r0, #53802	; 0xd22a
 800262c:	f000 ff46 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 8002630:	21f2      	movs	r1, #242	; 0xf2
 8002632:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8002636:	f000 ff41 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 800263a:	2102      	movs	r1, #2
 800263c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8002640:	f000 ff3c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 8002644:	21fe      	movs	r1, #254	; 0xfe
 8002646:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800264a:	f000 ff37 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 800264e:	2103      	movs	r1, #3
 8002650:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8002654:	f000 ff32 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 8002658:	2110      	movs	r1, #16
 800265a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800265e:	f000 ff2d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 8002662:	2103      	movs	r1, #3
 8002664:	f24d 2030 	movw	r0, #53808	; 0xd230
 8002668:	f000 ff28 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 800266c:	2133      	movs	r1, #51	; 0x33
 800266e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8002672:	f000 ff23 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 8002676:	2103      	movs	r1, #3
 8002678:	f24d 2032 	movw	r0, #53810	; 0xd232
 800267c:	f000 ff1e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 8002680:	216d      	movs	r1, #109	; 0x6d
 8002682:	f24d 2033 	movw	r0, #53811	; 0xd233
 8002686:	f000 ff19 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 800268a:	2100      	movs	r1, #0
 800268c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8002690:	f000 ff14 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 8002694:	2133      	movs	r1, #51	; 0x33
 8002696:	f24d 3001 	movw	r0, #54017	; 0xd301
 800269a:	f000 ff0f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 800269e:	2100      	movs	r1, #0
 80026a0:	f24d 3002 	movw	r0, #54018	; 0xd302
 80026a4:	f000 ff0a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 80026a8:	2134      	movs	r1, #52	; 0x34
 80026aa:	f24d 3003 	movw	r0, #54019	; 0xd303
 80026ae:	f000 ff05 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 80026b2:	2100      	movs	r1, #0
 80026b4:	f24d 3004 	movw	r0, #54020	; 0xd304
 80026b8:	f000 ff00 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 80026bc:	213a      	movs	r1, #58	; 0x3a
 80026be:	f24d 3005 	movw	r0, #54021	; 0xd305
 80026c2:	f000 fefb 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 80026c6:	2100      	movs	r1, #0
 80026c8:	f24d 3006 	movw	r0, #54022	; 0xd306
 80026cc:	f000 fef6 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 80026d0:	214a      	movs	r1, #74	; 0x4a
 80026d2:	f24d 3007 	movw	r0, #54023	; 0xd307
 80026d6:	f000 fef1 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 80026da:	2100      	movs	r1, #0
 80026dc:	f24d 3008 	movw	r0, #54024	; 0xd308
 80026e0:	f000 feec 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 80026e4:	215c      	movs	r1, #92	; 0x5c
 80026e6:	f24d 3009 	movw	r0, #54025	; 0xd309
 80026ea:	f000 fee7 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 80026ee:	2100      	movs	r1, #0
 80026f0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80026f4:	f000 fee2 	bl	80034bc <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 80026f8:	2181      	movs	r1, #129	; 0x81
 80026fa:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80026fe:	f000 fedd 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 8002702:	2100      	movs	r1, #0
 8002704:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8002708:	f000 fed8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 800270c:	21a6      	movs	r1, #166	; 0xa6
 800270e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8002712:	f000 fed3 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 8002716:	2100      	movs	r1, #0
 8002718:	f24d 300e 	movw	r0, #54030	; 0xd30e
 800271c:	f000 fece 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 8002720:	21e5      	movs	r1, #229	; 0xe5
 8002722:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8002726:	f000 fec9 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 800272a:	2101      	movs	r1, #1
 800272c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8002730:	f000 fec4 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 8002734:	2113      	movs	r1, #19
 8002736:	f24d 3011 	movw	r0, #54033	; 0xd311
 800273a:	f000 febf 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 800273e:	2101      	movs	r1, #1
 8002740:	f24d 3012 	movw	r0, #54034	; 0xd312
 8002744:	f000 feba 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 8002748:	2154      	movs	r1, #84	; 0x54
 800274a:	f24d 3013 	movw	r0, #54035	; 0xd313
 800274e:	f000 feb5 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 8002752:	2101      	movs	r1, #1
 8002754:	f24d 3014 	movw	r0, #54036	; 0xd314
 8002758:	f000 feb0 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 800275c:	2182      	movs	r1, #130	; 0x82
 800275e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8002762:	f000 feab 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 8002766:	2101      	movs	r1, #1
 8002768:	f24d 3016 	movw	r0, #54038	; 0xd316
 800276c:	f000 fea6 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 8002770:	21ca      	movs	r1, #202	; 0xca
 8002772:	f24d 3017 	movw	r0, #54039	; 0xd317
 8002776:	f000 fea1 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 800277a:	2102      	movs	r1, #2
 800277c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8002780:	f000 fe9c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 8002784:	2100      	movs	r1, #0
 8002786:	f24d 3019 	movw	r0, #54041	; 0xd319
 800278a:	f000 fe97 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 800278e:	2102      	movs	r1, #2
 8002790:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8002794:	f000 fe92 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 8002798:	2101      	movs	r1, #1
 800279a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800279e:	f000 fe8d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 80027a2:	2102      	movs	r1, #2
 80027a4:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80027a8:	f000 fe88 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 80027ac:	2134      	movs	r1, #52	; 0x34
 80027ae:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80027b2:	f000 fe83 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 80027b6:	2102      	movs	r1, #2
 80027b8:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80027bc:	f000 fe7e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 80027c0:	2167      	movs	r1, #103	; 0x67
 80027c2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80027c6:	f000 fe79 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 80027ca:	2102      	movs	r1, #2
 80027cc:	f24d 3020 	movw	r0, #54048	; 0xd320
 80027d0:	f000 fe74 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 80027d4:	2184      	movs	r1, #132	; 0x84
 80027d6:	f24d 3021 	movw	r0, #54049	; 0xd321
 80027da:	f000 fe6f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 80027de:	2102      	movs	r1, #2
 80027e0:	f24d 3022 	movw	r0, #54050	; 0xd322
 80027e4:	f000 fe6a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 80027e8:	21a4      	movs	r1, #164	; 0xa4
 80027ea:	f24d 3023 	movw	r0, #54051	; 0xd323
 80027ee:	f000 fe65 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 80027f2:	2102      	movs	r1, #2
 80027f4:	f24d 3024 	movw	r0, #54052	; 0xd324
 80027f8:	f000 fe60 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 80027fc:	21b7      	movs	r1, #183	; 0xb7
 80027fe:	f24d 3025 	movw	r0, #54053	; 0xd325
 8002802:	f000 fe5b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 8002806:	2102      	movs	r1, #2
 8002808:	f24d 3026 	movw	r0, #54054	; 0xd326
 800280c:	f000 fe56 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 8002810:	21cf      	movs	r1, #207	; 0xcf
 8002812:	f24d 3027 	movw	r0, #54055	; 0xd327
 8002816:	f000 fe51 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 800281a:	2102      	movs	r1, #2
 800281c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8002820:	f000 fe4c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 8002824:	21de      	movs	r1, #222	; 0xde
 8002826:	f24d 3029 	movw	r0, #54057	; 0xd329
 800282a:	f000 fe47 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 800282e:	2102      	movs	r1, #2
 8002830:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8002834:	f000 fe42 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 8002838:	21f2      	movs	r1, #242	; 0xf2
 800283a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 800283e:	f000 fe3d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 8002842:	2102      	movs	r1, #2
 8002844:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8002848:	f000 fe38 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 800284c:	21fe      	movs	r1, #254	; 0xfe
 800284e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8002852:	f000 fe33 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 8002856:	2103      	movs	r1, #3
 8002858:	f24d 302e 	movw	r0, #54062	; 0xd32e
 800285c:	f000 fe2e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 8002860:	2110      	movs	r1, #16
 8002862:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8002866:	f000 fe29 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 800286a:	2103      	movs	r1, #3
 800286c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8002870:	f000 fe24 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 8002874:	2133      	movs	r1, #51	; 0x33
 8002876:	f24d 3031 	movw	r0, #54065	; 0xd331
 800287a:	f000 fe1f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 800287e:	2103      	movs	r1, #3
 8002880:	f24d 3032 	movw	r0, #54066	; 0xd332
 8002884:	f000 fe1a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 8002888:	216d      	movs	r1, #109	; 0x6d
 800288a:	f24d 3033 	movw	r0, #54067	; 0xd333
 800288e:	f000 fe15 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 8002892:	2100      	movs	r1, #0
 8002894:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8002898:	f000 fe10 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 800289c:	2133      	movs	r1, #51	; 0x33
 800289e:	f24d 4001 	movw	r0, #54273	; 0xd401
 80028a2:	f000 fe0b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 80028a6:	2100      	movs	r1, #0
 80028a8:	f24d 4002 	movw	r0, #54274	; 0xd402
 80028ac:	f000 fe06 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 80028b0:	2134      	movs	r1, #52	; 0x34
 80028b2:	f24d 4003 	movw	r0, #54275	; 0xd403
 80028b6:	f000 fe01 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 80028ba:	2100      	movs	r1, #0
 80028bc:	f24d 4004 	movw	r0, #54276	; 0xd404
 80028c0:	f000 fdfc 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 80028c4:	213a      	movs	r1, #58	; 0x3a
 80028c6:	f24d 4005 	movw	r0, #54277	; 0xd405
 80028ca:	f000 fdf7 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 80028ce:	2100      	movs	r1, #0
 80028d0:	f24d 4006 	movw	r0, #54278	; 0xd406
 80028d4:	f000 fdf2 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 80028d8:	214a      	movs	r1, #74	; 0x4a
 80028da:	f24d 4007 	movw	r0, #54279	; 0xd407
 80028de:	f000 fded 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 80028e2:	2100      	movs	r1, #0
 80028e4:	f24d 4008 	movw	r0, #54280	; 0xd408
 80028e8:	f000 fde8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 80028ec:	215c      	movs	r1, #92	; 0x5c
 80028ee:	f24d 4009 	movw	r0, #54281	; 0xd409
 80028f2:	f000 fde3 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 80028f6:	2100      	movs	r1, #0
 80028f8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80028fc:	f000 fdde 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 8002900:	2181      	movs	r1, #129	; 0x81
 8002902:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8002906:	f000 fdd9 	bl	80034bc <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 800290a:	2100      	movs	r1, #0
 800290c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8002910:	f000 fdd4 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 8002914:	21a6      	movs	r1, #166	; 0xa6
 8002916:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800291a:	f000 fdcf 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 800291e:	2100      	movs	r1, #0
 8002920:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8002924:	f000 fdca 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 8002928:	21e5      	movs	r1, #229	; 0xe5
 800292a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800292e:	f000 fdc5 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 8002932:	2101      	movs	r1, #1
 8002934:	f24d 4010 	movw	r0, #54288	; 0xd410
 8002938:	f000 fdc0 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 800293c:	2113      	movs	r1, #19
 800293e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8002942:	f000 fdbb 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 8002946:	2101      	movs	r1, #1
 8002948:	f24d 4012 	movw	r0, #54290	; 0xd412
 800294c:	f000 fdb6 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 8002950:	2154      	movs	r1, #84	; 0x54
 8002952:	f24d 4013 	movw	r0, #54291	; 0xd413
 8002956:	f000 fdb1 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 800295a:	2101      	movs	r1, #1
 800295c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8002960:	f000 fdac 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 8002964:	2182      	movs	r1, #130	; 0x82
 8002966:	f24d 4015 	movw	r0, #54293	; 0xd415
 800296a:	f000 fda7 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 800296e:	2101      	movs	r1, #1
 8002970:	f24d 4016 	movw	r0, #54294	; 0xd416
 8002974:	f000 fda2 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 8002978:	21ca      	movs	r1, #202	; 0xca
 800297a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800297e:	f000 fd9d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 8002982:	2102      	movs	r1, #2
 8002984:	f24d 4018 	movw	r0, #54296	; 0xd418
 8002988:	f000 fd98 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 800298c:	2100      	movs	r1, #0
 800298e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8002992:	f000 fd93 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 8002996:	2102      	movs	r1, #2
 8002998:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800299c:	f000 fd8e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 80029a0:	2101      	movs	r1, #1
 80029a2:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80029a6:	f000 fd89 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 80029aa:	2102      	movs	r1, #2
 80029ac:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80029b0:	f000 fd84 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 80029b4:	2134      	movs	r1, #52	; 0x34
 80029b6:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80029ba:	f000 fd7f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 80029be:	2102      	movs	r1, #2
 80029c0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80029c4:	f000 fd7a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 80029c8:	2167      	movs	r1, #103	; 0x67
 80029ca:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80029ce:	f000 fd75 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 80029d2:	2102      	movs	r1, #2
 80029d4:	f24d 4020 	movw	r0, #54304	; 0xd420
 80029d8:	f000 fd70 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 80029dc:	2184      	movs	r1, #132	; 0x84
 80029de:	f24d 4021 	movw	r0, #54305	; 0xd421
 80029e2:	f000 fd6b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 80029e6:	2102      	movs	r1, #2
 80029e8:	f24d 4022 	movw	r0, #54306	; 0xd422
 80029ec:	f000 fd66 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 80029f0:	21a4      	movs	r1, #164	; 0xa4
 80029f2:	f24d 4023 	movw	r0, #54307	; 0xd423
 80029f6:	f000 fd61 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 80029fa:	2102      	movs	r1, #2
 80029fc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8002a00:	f000 fd5c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 8002a04:	21b7      	movs	r1, #183	; 0xb7
 8002a06:	f24d 4025 	movw	r0, #54309	; 0xd425
 8002a0a:	f000 fd57 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 8002a0e:	2102      	movs	r1, #2
 8002a10:	f24d 4026 	movw	r0, #54310	; 0xd426
 8002a14:	f000 fd52 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 8002a18:	21cf      	movs	r1, #207	; 0xcf
 8002a1a:	f24d 4027 	movw	r0, #54311	; 0xd427
 8002a1e:	f000 fd4d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 8002a22:	2102      	movs	r1, #2
 8002a24:	f24d 4028 	movw	r0, #54312	; 0xd428
 8002a28:	f000 fd48 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 8002a2c:	21de      	movs	r1, #222	; 0xde
 8002a2e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8002a32:	f000 fd43 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 8002a36:	2102      	movs	r1, #2
 8002a38:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8002a3c:	f000 fd3e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 8002a40:	21f2      	movs	r1, #242	; 0xf2
 8002a42:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8002a46:	f000 fd39 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8002a50:	f000 fd34 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 8002a54:	21fe      	movs	r1, #254	; 0xfe
 8002a56:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8002a5a:	f000 fd2f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 8002a5e:	2103      	movs	r1, #3
 8002a60:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8002a64:	f000 fd2a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 8002a68:	2110      	movs	r1, #16
 8002a6a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8002a6e:	f000 fd25 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 8002a72:	2103      	movs	r1, #3
 8002a74:	f24d 4030 	movw	r0, #54320	; 0xd430
 8002a78:	f000 fd20 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 8002a7c:	2133      	movs	r1, #51	; 0x33
 8002a7e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8002a82:	f000 fd1b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 8002a86:	2103      	movs	r1, #3
 8002a88:	f24d 4032 	movw	r0, #54322	; 0xd432
 8002a8c:	f000 fd16 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 8002a90:	216d      	movs	r1, #109	; 0x6d
 8002a92:	f24d 4033 	movw	r0, #54323	; 0xd433
 8002a96:	f000 fd11 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8002aa0:	f000 fd0c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 8002aa4:	2133      	movs	r1, #51	; 0x33
 8002aa6:	f24d 5001 	movw	r0, #54529	; 0xd501
 8002aaa:	f000 fd07 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 8002aae:	2100      	movs	r1, #0
 8002ab0:	f24d 5002 	movw	r0, #54530	; 0xd502
 8002ab4:	f000 fd02 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 8002ab8:	2134      	movs	r1, #52	; 0x34
 8002aba:	f24d 5003 	movw	r0, #54531	; 0xd503
 8002abe:	f000 fcfd 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	f24d 5004 	movw	r0, #54532	; 0xd504
 8002ac8:	f000 fcf8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 8002acc:	213a      	movs	r1, #58	; 0x3a
 8002ace:	f24d 5005 	movw	r0, #54533	; 0xd505
 8002ad2:	f000 fcf3 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f24d 5006 	movw	r0, #54534	; 0xd506
 8002adc:	f000 fcee 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 8002ae0:	214a      	movs	r1, #74	; 0x4a
 8002ae2:	f24d 5007 	movw	r0, #54535	; 0xd507
 8002ae6:	f000 fce9 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 8002aea:	2100      	movs	r1, #0
 8002aec:	f24d 5008 	movw	r0, #54536	; 0xd508
 8002af0:	f000 fce4 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 8002af4:	215c      	movs	r1, #92	; 0x5c
 8002af6:	f24d 5009 	movw	r0, #54537	; 0xd509
 8002afa:	f000 fcdf 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 8002afe:	2100      	movs	r1, #0
 8002b00:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8002b04:	f000 fcda 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 8002b08:	2181      	movs	r1, #129	; 0x81
 8002b0a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8002b0e:	f000 fcd5 	bl	80034bc <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 8002b12:	2100      	movs	r1, #0
 8002b14:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8002b18:	f000 fcd0 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 8002b1c:	21a6      	movs	r1, #166	; 0xa6
 8002b1e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8002b22:	f000 fccb 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 8002b26:	2100      	movs	r1, #0
 8002b28:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8002b2c:	f000 fcc6 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 8002b30:	21e5      	movs	r1, #229	; 0xe5
 8002b32:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8002b36:	f000 fcc1 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8002b40:	f000 fcbc 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 8002b44:	2113      	movs	r1, #19
 8002b46:	f24d 5011 	movw	r0, #54545	; 0xd511
 8002b4a:	f000 fcb7 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 8002b4e:	2101      	movs	r1, #1
 8002b50:	f24d 5012 	movw	r0, #54546	; 0xd512
 8002b54:	f000 fcb2 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 8002b58:	2154      	movs	r1, #84	; 0x54
 8002b5a:	f24d 5013 	movw	r0, #54547	; 0xd513
 8002b5e:	f000 fcad 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 8002b62:	2101      	movs	r1, #1
 8002b64:	f24d 5014 	movw	r0, #54548	; 0xd514
 8002b68:	f000 fca8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 8002b6c:	2182      	movs	r1, #130	; 0x82
 8002b6e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8002b72:	f000 fca3 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 8002b76:	2101      	movs	r1, #1
 8002b78:	f24d 5016 	movw	r0, #54550	; 0xd516
 8002b7c:	f000 fc9e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 8002b80:	21ca      	movs	r1, #202	; 0xca
 8002b82:	f24d 5017 	movw	r0, #54551	; 0xd517
 8002b86:	f000 fc99 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8002b90:	f000 fc94 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 8002b94:	2100      	movs	r1, #0
 8002b96:	f24d 5019 	movw	r0, #54553	; 0xd519
 8002b9a:	f000 fc8f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8002ba4:	f000 fc8a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 8002ba8:	2101      	movs	r1, #1
 8002baa:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8002bae:	f000 fc85 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8002bb8:	f000 fc80 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 8002bbc:	2134      	movs	r1, #52	; 0x34
 8002bbe:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8002bc2:	f000 fc7b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8002bcc:	f000 fc76 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 8002bd0:	2167      	movs	r1, #103	; 0x67
 8002bd2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8002bd6:	f000 fc71 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 8002bda:	2102      	movs	r1, #2
 8002bdc:	f24d 5020 	movw	r0, #54560	; 0xd520
 8002be0:	f000 fc6c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 8002be4:	2184      	movs	r1, #132	; 0x84
 8002be6:	f24d 5021 	movw	r0, #54561	; 0xd521
 8002bea:	f000 fc67 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 8002bee:	2102      	movs	r1, #2
 8002bf0:	f24d 5022 	movw	r0, #54562	; 0xd522
 8002bf4:	f000 fc62 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 8002bf8:	21a4      	movs	r1, #164	; 0xa4
 8002bfa:	f24d 5023 	movw	r0, #54563	; 0xd523
 8002bfe:	f000 fc5d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 8002c02:	2102      	movs	r1, #2
 8002c04:	f24d 5024 	movw	r0, #54564	; 0xd524
 8002c08:	f000 fc58 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 8002c0c:	21b7      	movs	r1, #183	; 0xb7
 8002c0e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8002c12:	f000 fc53 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8002c16:	2102      	movs	r1, #2
 8002c18:	f24d 5026 	movw	r0, #54566	; 0xd526
 8002c1c:	f000 fc4e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 8002c20:	21cf      	movs	r1, #207	; 0xcf
 8002c22:	f24d 5027 	movw	r0, #54567	; 0xd527
 8002c26:	f000 fc49 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8002c30:	f000 fc44 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 8002c34:	21de      	movs	r1, #222	; 0xde
 8002c36:	f24d 5029 	movw	r0, #54569	; 0xd529
 8002c3a:	f000 fc3f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 8002c3e:	2102      	movs	r1, #2
 8002c40:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8002c44:	f000 fc3a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 8002c48:	21f2      	movs	r1, #242	; 0xf2
 8002c4a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8002c4e:	f000 fc35 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 8002c52:	2102      	movs	r1, #2
 8002c54:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8002c58:	f000 fc30 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 8002c5c:	21fe      	movs	r1, #254	; 0xfe
 8002c5e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8002c62:	f000 fc2b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 8002c66:	2103      	movs	r1, #3
 8002c68:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8002c6c:	f000 fc26 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 8002c70:	2110      	movs	r1, #16
 8002c72:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8002c76:	f000 fc21 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8002c80:	f000 fc1c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 8002c84:	2133      	movs	r1, #51	; 0x33
 8002c86:	f24d 5031 	movw	r0, #54577	; 0xd531
 8002c8a:	f000 fc17 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 8002c8e:	2103      	movs	r1, #3
 8002c90:	f24d 5032 	movw	r0, #54578	; 0xd532
 8002c94:	f000 fc12 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 8002c98:	216d      	movs	r1, #109	; 0x6d
 8002c9a:	f24d 5033 	movw	r0, #54579	; 0xd533
 8002c9e:	f000 fc0d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8002ca8:	f000 fc08 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 8002cac:	2133      	movs	r1, #51	; 0x33
 8002cae:	f24d 6001 	movw	r0, #54785	; 0xd601
 8002cb2:	f000 fc03 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f24d 6002 	movw	r0, #54786	; 0xd602
 8002cbc:	f000 fbfe 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 8002cc0:	2134      	movs	r1, #52	; 0x34
 8002cc2:	f24d 6003 	movw	r0, #54787	; 0xd603
 8002cc6:	f000 fbf9 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	f24d 6004 	movw	r0, #54788	; 0xd604
 8002cd0:	f000 fbf4 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 8002cd4:	213a      	movs	r1, #58	; 0x3a
 8002cd6:	f24d 6005 	movw	r0, #54789	; 0xd605
 8002cda:	f000 fbef 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	f24d 6006 	movw	r0, #54790	; 0xd606
 8002ce4:	f000 fbea 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 8002ce8:	214a      	movs	r1, #74	; 0x4a
 8002cea:	f24d 6007 	movw	r0, #54791	; 0xd607
 8002cee:	f000 fbe5 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	f24d 6008 	movw	r0, #54792	; 0xd608
 8002cf8:	f000 fbe0 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 8002cfc:	215c      	movs	r1, #92	; 0x5c
 8002cfe:	f24d 6009 	movw	r0, #54793	; 0xd609
 8002d02:	f000 fbdb 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8002d06:	2100      	movs	r1, #0
 8002d08:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8002d0c:	f000 fbd6 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 8002d10:	2181      	movs	r1, #129	; 0x81
 8002d12:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8002d16:	f000 fbd1 	bl	80034bc <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8002d20:	f000 fbcc 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 8002d24:	21a6      	movs	r1, #166	; 0xa6
 8002d26:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8002d2a:	f000 fbc7 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 8002d2e:	2100      	movs	r1, #0
 8002d30:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8002d34:	f000 fbc2 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 8002d38:	21e5      	movs	r1, #229	; 0xe5
 8002d3a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8002d3e:	f000 fbbd 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 8002d42:	2101      	movs	r1, #1
 8002d44:	f24d 6010 	movw	r0, #54800	; 0xd610
 8002d48:	f000 fbb8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 8002d4c:	2113      	movs	r1, #19
 8002d4e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8002d52:	f000 fbb3 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8002d56:	2101      	movs	r1, #1
 8002d58:	f24d 6012 	movw	r0, #54802	; 0xd612
 8002d5c:	f000 fbae 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 8002d60:	2154      	movs	r1, #84	; 0x54
 8002d62:	f24d 6013 	movw	r0, #54803	; 0xd613
 8002d66:	f000 fba9 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8002d70:	f000 fba4 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 8002d74:	2182      	movs	r1, #130	; 0x82
 8002d76:	f24d 6015 	movw	r0, #54805	; 0xd615
 8002d7a:	f000 fb9f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 8002d7e:	2101      	movs	r1, #1
 8002d80:	f24d 6016 	movw	r0, #54806	; 0xd616
 8002d84:	f000 fb9a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 8002d88:	21ca      	movs	r1, #202	; 0xca
 8002d8a:	f24d 6017 	movw	r0, #54807	; 0xd617
 8002d8e:	f000 fb95 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 8002d92:	2102      	movs	r1, #2
 8002d94:	f24d 6018 	movw	r0, #54808	; 0xd618
 8002d98:	f000 fb90 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8002da2:	f000 fb8b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 8002da6:	2102      	movs	r1, #2
 8002da8:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8002dac:	f000 fb86 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 8002db0:	2101      	movs	r1, #1
 8002db2:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8002db6:	f000 fb81 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 8002dba:	2102      	movs	r1, #2
 8002dbc:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8002dc0:	f000 fb7c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 8002dc4:	2134      	movs	r1, #52	; 0x34
 8002dc6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8002dca:	f000 fb77 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 8002dce:	2102      	movs	r1, #2
 8002dd0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8002dd4:	f000 fb72 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 8002dd8:	2167      	movs	r1, #103	; 0x67
 8002dda:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8002dde:	f000 fb6d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 8002de2:	2102      	movs	r1, #2
 8002de4:	f24d 6020 	movw	r0, #54816	; 0xd620
 8002de8:	f000 fb68 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 8002dec:	2184      	movs	r1, #132	; 0x84
 8002dee:	f24d 6021 	movw	r0, #54817	; 0xd621
 8002df2:	f000 fb63 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 8002df6:	2102      	movs	r1, #2
 8002df8:	f24d 6022 	movw	r0, #54818	; 0xd622
 8002dfc:	f000 fb5e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 8002e00:	21a4      	movs	r1, #164	; 0xa4
 8002e02:	f24d 6023 	movw	r0, #54819	; 0xd623
 8002e06:	f000 fb59 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8002e10:	f000 fb54 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 8002e14:	21b7      	movs	r1, #183	; 0xb7
 8002e16:	f24d 6025 	movw	r0, #54821	; 0xd625
 8002e1a:	f000 fb4f 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 8002e1e:	2102      	movs	r1, #2
 8002e20:	f24d 6026 	movw	r0, #54822	; 0xd626
 8002e24:	f000 fb4a 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 8002e28:	21cf      	movs	r1, #207	; 0xcf
 8002e2a:	f24d 6027 	movw	r0, #54823	; 0xd627
 8002e2e:	f000 fb45 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 8002e32:	2102      	movs	r1, #2
 8002e34:	f24d 6028 	movw	r0, #54824	; 0xd628
 8002e38:	f000 fb40 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 8002e3c:	21de      	movs	r1, #222	; 0xde
 8002e3e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8002e42:	f000 fb3b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8002e46:	2102      	movs	r1, #2
 8002e48:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8002e4c:	f000 fb36 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 8002e50:	21f2      	movs	r1, #242	; 0xf2
 8002e52:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8002e56:	f000 fb31 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8002e60:	f000 fb2c 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 8002e64:	21fe      	movs	r1, #254	; 0xfe
 8002e66:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8002e6a:	f000 fb27 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 8002e6e:	2103      	movs	r1, #3
 8002e70:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8002e74:	f000 fb22 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 8002e78:	2110      	movs	r1, #16
 8002e7a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8002e7e:	f000 fb1d 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 8002e82:	2103      	movs	r1, #3
 8002e84:	f24d 6030 	movw	r0, #54832	; 0xd630
 8002e88:	f000 fb18 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 8002e8c:	2133      	movs	r1, #51	; 0x33
 8002e8e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8002e92:	f000 fb13 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 8002e96:	2103      	movs	r1, #3
 8002e98:	f24d 6032 	movw	r0, #54834	; 0xd632
 8002e9c:	f000 fb0e 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 8002ea0:	216d      	movs	r1, #109	; 0x6d
 8002ea2:	f24d 6033 	movw	r0, #54835	; 0xd633
 8002ea6:	f000 fb09 	bl	80034bc <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 8002eaa:	2155      	movs	r1, #85	; 0x55
 8002eac:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002eb0:	f000 fb04 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8002eb4:	21aa      	movs	r1, #170	; 0xaa
 8002eb6:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002eba:	f000 faff 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8002ebe:	2152      	movs	r1, #82	; 0x52
 8002ec0:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002ec4:	f000 fafa 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8002ec8:	2108      	movs	r1, #8
 8002eca:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002ece:	f000 faf5 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002ed8:	f000 faf0 	bl	80034bc <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 8002edc:	21cc      	movs	r1, #204	; 0xcc
 8002ede:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002ee2:	f000 faeb 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002eec:	f000 fae6 	bl	80034bc <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 8002ef0:	2105      	movs	r1, #5
 8002ef2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002ef6:	f000 fae1 	bl	80034bc <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 8002efa:	2170      	movs	r1, #112	; 0x70
 8002efc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002f00:	f000 fadc 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 8002f04:	2170      	movs	r1, #112	; 0x70
 8002f06:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002f0a:	f000 fad7 	bl	80034bc <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 8002f0e:	2101      	movs	r1, #1
 8002f10:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002f14:	f000 fad2 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 8002f18:	2103      	movs	r1, #3
 8002f1a:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002f1e:	f000 facd 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 8002f22:	2103      	movs	r1, #3
 8002f24:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002f28:	f000 fac8 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 8002f2c:	2103      	movs	r1, #3
 8002f2e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8002f32:	f000 fac3 	bl	80034bc <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8002f36:	2102      	movs	r1, #2
 8002f38:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002f3c:	f000 fabe 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 8002f40:	2100      	movs	r1, #0
 8002f42:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8002f46:	f000 fab9 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002f50:	f000 fab4 	bl	80034bc <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 8002f54:	21d0      	movs	r1, #208	; 0xd0
 8002f56:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8002f5a:	f000 faaf 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 8002f5e:	2102      	movs	r1, #2
 8002f60:	f64c 1001 	movw	r0, #51457	; 0xc901
 8002f64:	f000 faaa 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 8002f68:	2150      	movs	r1, #80	; 0x50
 8002f6a:	f64c 1002 	movw	r0, #51458	; 0xc902
 8002f6e:	f000 faa5 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 8002f72:	2150      	movs	r1, #80	; 0x50
 8002f74:	f64c 1003 	movw	r0, #51459	; 0xc903
 8002f78:	f000 faa0 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 8002f7c:	2150      	movs	r1, #80	; 0x50
 8002f7e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8002f82:	f000 fa9b 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 8002f86:	2100      	movs	r1, #0
 8002f88:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8002f8c:	f000 fa96 	bl	80034bc <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8002f90:	2155      	movs	r1, #85	; 0x55
 8002f92:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8002f96:	f000 fa91 	bl	80034bc <lcd_write_reg>
    lcd_wr_regno(0x1100);
 8002f9a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8002f9e:	f000 fa79 	bl	8003494 <lcd_wr_regno>
    HAL_Delay(12);
 8002fa2:	200c      	movs	r0, #12
 8002fa4:	f001 ffd8 	bl	8004f58 <HAL_Delay>
    lcd_wr_regno(0x2900);
 8002fa8:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8002fac:	f000 fa72 	bl	8003494 <lcd_wr_regno>
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <lcd_ex_ili9806_reginit>:
 * @brief  ILI9806 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9806_reginit(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
 8002fb8:	20ff      	movs	r0, #255	; 0xff
 8002fba:	f000 fa6b 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8002fbe:	20ff      	movs	r0, #255	; 0xff
 8002fc0:	f000 fa54 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x98);
 8002fc4:	2098      	movs	r0, #152	; 0x98
 8002fc6:	f000 fa51 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x06);
 8002fca:	2006      	movs	r0, #6
 8002fcc:	f000 fa4e 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xBC); /* GIP 1 */
 8002fd0:	20bc      	movs	r0, #188	; 0xbc
 8002fd2:	f000 fa5f 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f000 fa48 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0F);
 8002fdc:	200f      	movs	r0, #15
 8002fde:	f000 fa45 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x61);
 8002fe2:	2061      	movs	r0, #97	; 0x61
 8002fe4:	f000 fa42 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002fe8:	20ff      	movs	r0, #255	; 0xff
 8002fea:	f000 fa3f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f000 fa3c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f000 fa39 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0B);
 8002ffa:	200b      	movs	r0, #11
 8002ffc:	f000 fa36 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x10);
 8003000:	2010      	movs	r0, #16
 8003002:	f000 fa33 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x37);
 8003006:	2037      	movs	r0, #55	; 0x37
 8003008:	f000 fa30 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x63);
 800300c:	2063      	movs	r0, #99	; 0x63
 800300e:	f000 fa2d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003012:	20ff      	movs	r0, #255	; 0xff
 8003014:	f000 fa2a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003018:	20ff      	movs	r0, #255	; 0xff
 800301a:	f000 fa27 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 800301e:	2001      	movs	r0, #1
 8003020:	f000 fa24 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 8003024:	2001      	movs	r0, #1
 8003026:	f000 fa21 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800302a:	2000      	movs	r0, #0
 800302c:	f000 fa1e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f000 fa1b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003036:	20ff      	movs	r0, #255	; 0xff
 8003038:	f000 fa18 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x52);
 800303c:	2052      	movs	r0, #82	; 0x52
 800303e:	f000 fa15 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 8003042:	2001      	movs	r0, #1
 8003044:	f000 fa12 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f000 fa0f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x40);
 800304e:	2040      	movs	r0, #64	; 0x40
 8003050:	f000 fa0c 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xBD); /* GIP 2 */
 8003054:	20bd      	movs	r0, #189	; 0xbd
 8003056:	f000 fa1d 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);
 800305a:	2001      	movs	r0, #1
 800305c:	f000 fa06 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x23);
 8003060:	2023      	movs	r0, #35	; 0x23
 8003062:	f000 fa03 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x45);
 8003066:	2045      	movs	r0, #69	; 0x45
 8003068:	f000 fa00 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x67);
 800306c:	2067      	movs	r0, #103	; 0x67
 800306e:	f000 f9fd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 8003072:	2001      	movs	r0, #1
 8003074:	f000 f9fa 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x23);
 8003078:	2023      	movs	r0, #35	; 0x23
 800307a:	f000 f9f7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x45);
 800307e:	2045      	movs	r0, #69	; 0x45
 8003080:	f000 f9f4 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x67);
 8003084:	2067      	movs	r0, #103	; 0x67
 8003086:	f000 f9f1 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xBE); /* GIP 3 */
 800308a:	20be      	movs	r0, #190	; 0xbe
 800308c:	f000 fa02 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003090:	2000      	movs	r0, #0
 8003092:	f000 f9eb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 8003096:	2001      	movs	r0, #1
 8003098:	f000 f9e8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xAB);
 800309c:	20ab      	movs	r0, #171	; 0xab
 800309e:	f000 f9e5 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x60);
 80030a2:	2060      	movs	r0, #96	; 0x60
 80030a4:	f000 f9e2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x22);
 80030a8:	2022      	movs	r0, #34	; 0x22
 80030aa:	f000 f9df 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x22);
 80030ae:	2022      	movs	r0, #34	; 0x22
 80030b0:	f000 f9dc 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x22);
 80030b4:	2022      	movs	r0, #34	; 0x22
 80030b6:	f000 f9d9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x22);
 80030ba:	2022      	movs	r0, #34	; 0x22
 80030bc:	f000 f9d6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x22);
 80030c0:	2022      	movs	r0, #34	; 0x22
 80030c2:	f000 f9d3 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xC7); /* VCOM Control */
 80030c6:	20c7      	movs	r0, #199	; 0xc7
 80030c8:	f000 f9e4 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x36);
 80030cc:	2036      	movs	r0, #54	; 0x36
 80030ce:	f000 f9cd 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
 80030d2:	20ed      	movs	r0, #237	; 0xed
 80030d4:	f000 f9de 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x7F);
 80030d8:	207f      	movs	r0, #127	; 0x7f
 80030da:	f000 f9c7 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0F);
 80030de:	200f      	movs	r0, #15
 80030e0:	f000 f9c4 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
 80030e4:	20c0      	movs	r0, #192	; 0xc0
 80030e6:	f000 f9d5 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 80030ea:	200f      	movs	r0, #15
 80030ec:	f000 f9be 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0B);
 80030f0:	200b      	movs	r0, #11
 80030f2:	f000 f9bb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0A);  /* VGH 15V,VGLO-10V */
 80030f6:	200a      	movs	r0, #10
 80030f8:	f000 f9b8 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
 80030fc:	20fc      	movs	r0, #252	; 0xfc
 80030fe:	f000 f9c9 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x08);
 8003102:	2008      	movs	r0, #8
 8003104:	f000 f9b2 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0XDF);
 8003108:	20df      	movs	r0, #223	; 0xdf
 800310a:	f000 f9c3 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f000 f9ac 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003114:	2000      	movs	r0, #0
 8003116:	f000 f9a9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f000 f9a6 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003120:	2000      	movs	r0, #0
 8003122:	f000 f9a3 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f000 f9a0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x20);
 800312c:	2020      	movs	r0, #32
 800312e:	f000 f99d 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
 8003132:	20f3      	movs	r0, #243	; 0xf3
 8003134:	f000 f9ae 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x74);
 8003138:	2074      	movs	r0, #116	; 0x74
 800313a:	f000 f997 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Inversion Type */
 800313e:	20b4      	movs	r0, #180	; 0xb4
 8003140:	f000 f9a8 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02 */
 8003144:	2000      	movs	r0, #0
 8003146:	f000 f991 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 800314a:	2000      	movs	r0, #0
 800314c:	f000 f98e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 8003150:	2000      	movs	r0, #0
 8003152:	f000 f98b 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF7); /* Resolution Control */
 8003156:	20f7      	movs	r0, #247	; 0xf7
 8003158:	f000 f99c 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x82);  /* 480*800 */
 800315c:	2082      	movs	r0, #130	; 0x82
 800315e:	f000 f985 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB1); /* FRAME RATE Setting */
 8003162:	20b1      	movs	r0, #177	; 0xb1
 8003164:	f000 f996 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f000 f97f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x13);
 800316e:	2013      	movs	r0, #19
 8003170:	f000 f97c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x13);
 8003174:	2013      	movs	r0, #19
 8003176:	f000 f979 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
 800317a:	20f2      	movs	r0, #242	; 0xf2
 800317c:	f000 f98a 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8003180:	2080      	movs	r0, #128	; 0x80
 8003182:	f000 f973 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x04);
 8003186:	2004      	movs	r0, #4
 8003188:	f000 f970 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x40);
 800318c:	2040      	movs	r0, #64	; 0x40
 800318e:	f000 f96d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x28);
 8003192:	2028      	movs	r0, #40	; 0x28
 8003194:	f000 f96a 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
 8003198:	20c1      	movs	r0, #193	; 0xc1
 800319a:	f000 f97b 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x17);
 800319e:	2017      	movs	r0, #23
 80031a0:	f000 f964 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMP */
 80031a4:	2088      	movs	r0, #136	; 0x88
 80031a6:	f000 f961 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMN */
 80031aa:	2088      	movs	r0, #136	; 0x88
 80031ac:	f000 f95e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x20);
 80031b0:	2020      	movs	r0, #32
 80031b2:	f000 f95b 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Positive Gamma Control */
 80031b6:	20e0      	movs	r0, #224	; 0xe0
 80031b8:	f000 f96c 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 80031bc:	2000      	movs	r0, #0
 80031be:	f000 f955 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P2 */
 80031c2:	200a      	movs	r0, #10
 80031c4:	f000 f952 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x12);  /* P3 */
 80031c8:	2012      	movs	r0, #18
 80031ca:	f000 f94f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x10);  /* P4 */
 80031ce:	2010      	movs	r0, #16
 80031d0:	f000 f94c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 80031d4:	200e      	movs	r0, #14
 80031d6:	f000 f949 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x20);  /* P6 */
 80031da:	2020      	movs	r0, #32
 80031dc:	f000 f946 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xCC);  /* P7 */
 80031e0:	20cc      	movs	r0, #204	; 0xcc
 80031e2:	f000 f943 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x07);  /* P8 */
 80031e6:	2007      	movs	r0, #7
 80031e8:	f000 f940 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 80031ec:	2006      	movs	r0, #6
 80031ee:	f000 f93d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P10 */
 80031f2:	200b      	movs	r0, #11
 80031f4:	f000 f93a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P11 */
 80031f8:	200e      	movs	r0, #14
 80031fa:	f000 f937 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P12 */
 80031fe:	200f      	movs	r0, #15
 8003200:	f000 f934 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P13 */
 8003204:	200d      	movs	r0, #13
 8003206:	f000 f931 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 800320a:	2015      	movs	r0, #21
 800320c:	f000 f92e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x10);  /* P15 */
 8003210:	2010      	movs	r0, #16
 8003212:	f000 f92b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 8003216:	2000      	movs	r0, #0
 8003218:	f000 f928 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xE1); /* Negative Gamma Correction */
 800321c:	20e1      	movs	r0, #225	; 0xe1
 800321e:	f000 f939 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8003222:	2000      	movs	r0, #0
 8003224:	f000 f922 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P2 */
 8003228:	200b      	movs	r0, #11
 800322a:	f000 f91f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x13);  /* P3 */
 800322e:	2013      	movs	r0, #19
 8003230:	f000 f91c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P4 */
 8003234:	200d      	movs	r0, #13
 8003236:	f000 f919 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 800323a:	200e      	movs	r0, #14
 800323c:	f000 f916 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1B);  /* P6 */
 8003240:	201b      	movs	r0, #27
 8003242:	f000 f913 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x71);  /* P7 */
 8003246:	2071      	movs	r0, #113	; 0x71
 8003248:	f000 f910 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x06);  /* P8 */
 800324c:	2006      	movs	r0, #6
 800324e:	f000 f90d 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 8003252:	2006      	movs	r0, #6
 8003254:	f000 f90a 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P10 */
 8003258:	200a      	movs	r0, #10
 800325a:	f000 f907 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P11 */
 800325e:	200f      	movs	r0, #15
 8003260:	f000 f904 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P12 */
 8003264:	200e      	movs	r0, #14
 8003266:	f000 f901 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P13 */
 800326a:	200f      	movs	r0, #15
 800326c:	f000 f8fe 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 8003270:	2015      	movs	r0, #21
 8003272:	f000 f8fb 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x0C);  /* P15 */
 8003276:	200c      	movs	r0, #12
 8003278:	f000 f8f8 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 800327c:	2000      	movs	r0, #0
 800327e:	f000 f8f5 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x2a);
 8003282:	202a      	movs	r0, #42	; 0x2a
 8003284:	f000 f906 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f000 f8ef 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f000 f8ec 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);
 8003294:	2001      	movs	r0, #1
 8003296:	f000 f8e9 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xdf);
 800329a:	20df      	movs	r0, #223	; 0xdf
 800329c:	f000 f8e6 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x2b);
 80032a0:	202b      	movs	r0, #43	; 0x2b
 80032a2:	f000 f8f7 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f000 f8e0 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f000 f8dd 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x03);
 80032b2:	2003      	movs	r0, #3
 80032b4:	f000 f8da 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x1f);
 80032b8:	201f      	movs	r0, #31
 80032ba:	f000 f8d7 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x3A); /* Pixel Format */
 80032be:	203a      	movs	r0, #58	; 0x3a
 80032c0:	f000 f8e8 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x55);
 80032c4:	2055      	movs	r0, #85	; 0x55
 80032c6:	f000 f8d1 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x36); /* Memory Access Control */
 80032ca:	2036      	movs	r0, #54	; 0x36
 80032cc:	f000 f8e2 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02-180 */
 80032d0:	2000      	movs	r0, #0
 80032d2:	f000 f8cb 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x11);
 80032d6:	2011      	movs	r0, #17
 80032d8:	f000 f8dc 	bl	8003494 <lcd_wr_regno>
    HAL_Delay(120);
 80032dc:	2078      	movs	r0, #120	; 0x78
 80032de:	f001 fe3b 	bl	8004f58 <HAL_Delay>
    lcd_wr_regno(0x29);
 80032e2:	2029      	movs	r0, #41	; 0x29
 80032e4:	f000 f8d6 	bl	8003494 <lcd_wr_regno>
    HAL_Delay(20);
 80032e8:	2014      	movs	r0, #20
 80032ea:	f001 fe35 	bl	8004f58 <HAL_Delay>
    lcd_wr_regno(0x2C);
 80032ee:	202c      	movs	r0, #44	; 0x2c
 80032f0:	f000 f8d0 	bl	8003494 <lcd_wr_regno>
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <lcd_ex_ssd1963_reginit>:
 * @brief  SSD1963 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ssd1963_reginit(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 80032fc:	20e2      	movs	r0, #226	; 0xe2
 80032fe:	f000 f8c9 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* parameter 1 */
 8003302:	201d      	movs	r0, #29
 8003304:	f000 f8b2 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x02);  /* parameter 2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 8003308:	2002      	movs	r0, #2
 800330a:	f000 f8af 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x04);  /* parameter 3 Validate M and N values */
 800330e:	2004      	movs	r0, #4
 8003310:	f000 f8ac 	bl	800346c <lcd_wr_data>
    HAL_Delay(1);
 8003314:	2001      	movs	r0, #1
 8003316:	f001 fe1f 	bl	8004f58 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 800331a:	20e0      	movs	r0, #224	; 0xe0
 800331c:	f000 f8ba 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 8003320:	2001      	movs	r0, #1
 8003322:	f000 f8a3 	bl	800346c <lcd_wr_data>
    HAL_Delay(10);
 8003326:	200a      	movs	r0, #10
 8003328:	f001 fe16 	bl	8004f58 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 800332c:	20e0      	movs	r0, #224	; 0xe0
 800332e:	f000 f8b1 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 8003332:	2003      	movs	r0, #3
 8003334:	f000 f89a 	bl	800346c <lcd_wr_data>
    HAL_Delay(12);
 8003338:	200c      	movs	r0, #12
 800333a:	f001 fe0d 	bl	8004f58 <HAL_Delay>
    lcd_wr_regno(0x01); /* soft reset */
 800333e:	2001      	movs	r0, #1
 8003340:	f000 f8a8 	bl	8003494 <lcd_wr_regno>
    HAL_Delay(10);
 8003344:	200a      	movs	r0, #10
 8003346:	f001 fe07 	bl	8004f58 <HAL_Delay>

    lcd_wr_regno(0xE6); /* Set the pixel frequency,33Mhz */
 800334a:	20e6      	movs	r0, #230	; 0xe6
 800334c:	f000 f8a2 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x2F);
 8003350:	202f      	movs	r0, #47	; 0x2f
 8003352:	f000 f88b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003356:	20ff      	movs	r0, #255	; 0xff
 8003358:	f000 f888 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFF);
 800335c:	20ff      	movs	r0, #255	; 0xff
 800335e:	f000 f885 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB0); /* Setting LCD mode */
 8003362:	20b0      	movs	r0, #176	; 0xb0
 8003364:	f000 f896 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24 bit mode */
 8003368:	2020      	movs	r0, #32
 800336a:	f000 f87f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT pattern */
 800336e:	2000      	movs	r0, #0
 8003370:	f000 f87c 	bl	800346c <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* Set the LCD horizontal pixels */
 8003374:	2003      	movs	r0, #3
 8003376:	f000 f879 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 800337a:	f240 301f 	movw	r0, #799	; 0x31f
 800337e:	f000 f875 	bl	800346c <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* Set the LCD vertical pixels */
 8003382:	2001      	movs	r0, #1
 8003384:	f000 f872 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 8003388:	f240 10df 	movw	r0, #479	; 0x1df
 800338c:	f000 f86e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB sequence */
 8003390:	2000      	movs	r0, #0
 8003392:	f000 f86b 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 8003396:	20b4      	movs	r0, #180	; 0xb4
 8003398:	f000 f87c 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 800339c:	2004      	movs	r0, #4
 800339e:	f000 f865 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 80033a2:	f240 401f 	movw	r0, #1055	; 0x41f
 80033a6:	f000 f861 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f000 f85e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 80033b0:	202e      	movs	r0, #46	; 0x2e
 80033b2:	f000 f85b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f000 f858 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80033bc:	2000      	movs	r0, #0
 80033be:	f000 f855 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f000 f852 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80033c8:	2000      	movs	r0, #0
 80033ca:	f000 f84f 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 80033ce:	20b6      	movs	r0, #182	; 0xb6
 80033d0:	f000 f860 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 80033d4:	2002      	movs	r0, #2
 80033d6:	f000 f849 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 80033da:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80033de:	f000 f845 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f000 f842 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 80033e8:	2017      	movs	r0, #23
 80033ea:	f000 f83f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 80033ee:	2015      	movs	r0, #21
 80033f0:	f000 f83c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80033f4:	2000      	movs	r0, #0
 80033f6:	f000 f839 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);
 80033fa:	2000      	movs	r0, #0
 80033fc:	f000 f836 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xF0); /* Set the interface between SSD1963 and CPU to 16bit */
 8003400:	20f0      	movs	r0, #240	; 0xf0
 8003402:	f000 f847 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 8003406:	2003      	movs	r0, #3
 8003408:	f000 f830 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0x29); /* Enable display */
 800340c:	2029      	movs	r0, #41	; 0x29
 800340e:	f000 f841 	bl	8003494 <lcd_wr_regno>
    /* Setting the PWM output backlight is adjustable through the duty cycle */
    lcd_wr_regno(0xD0); /* Set the automatic white balance DBC */
 8003412:	20d0      	movs	r0, #208	; 0xd0
 8003414:	f000 f83e 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 8003418:	2000      	movs	r0, #0
 800341a:	f000 f827 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xBE); /* Configure PWM output */
 800341e:	20be      	movs	r0, #190	; 0xbe
 8003420:	f000 f838 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1 Set the PWM frequency */
 8003424:	2005      	movs	r0, #5
 8003426:	f000 f821 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2 Set the PWM duty cycle */
 800342a:	20fe      	movs	r0, #254	; 0xfe
 800342c:	f000 f81e 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3 set C */
 8003430:	2001      	movs	r0, #1
 8003432:	f000 f81b 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4 set D */
 8003436:	2000      	movs	r0, #0
 8003438:	f000 f818 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5 set E */
 800343c:	2000      	movs	r0, #0
 800343e:	f000 f815 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6 set F */
 8003442:	2000      	movs	r0, #0
 8003444:	f000 f812 	bl	800346c <lcd_wr_data>

    lcd_wr_regno(0xB8); /* Set the GPIO configuration */
 8003448:	20b8      	movs	r0, #184	; 0xb8
 800344a:	f000 f823 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* Two IO ports are set as output */
 800344e:	2003      	movs	r0, #3
 8003450:	f000 f80c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO uses normal IO functionality */
 8003454:	2001      	movs	r0, #1
 8003456:	f000 f809 	bl	800346c <lcd_wr_data>
    lcd_wr_regno(0xBA);
 800345a:	20ba      	movs	r0, #186	; 0xba
 800345c:	f000 f81a 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0X01);  /* GPIO[1:0]=01, controls LCD orientation */
 8003460:	2001      	movs	r0, #1
 8003462:	f000 f803 	bl	800346c <lcd_wr_data>
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <lcd_wr_data>:
 * @brief   LCD write data
 * @param   data: data to be written
 * @retval  None
 */
void lcd_wr_data(volatile uint16_t data)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
    data = data;
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	b29b      	uxth	r3, r3
 800347a:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <lcd_wr_data+0x24>)
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	b292      	uxth	r2, r2
 8003482:	805a      	strh	r2, [r3, #2]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	600ffffe 	.word	0x600ffffe

08003494 <lcd_wr_regno>:
 * @brief   LCD write register number/address function
 * @param   regno: register number/address
 * @retval  None
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	80fb      	strh	r3, [r7, #6]
    regno = regno;
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <lcd_wr_regno+0x24>)
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	b292      	uxth	r2, r2
 80034aa:	801a      	strh	r2, [r3, #0]

}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	600ffffe 	.word	0x600ffffe

080034bc <lcd_write_reg>:
 * @param   regno: register number/address
 * @param   data: data to be written
 * @retval  None
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	460a      	mov	r2, r1
 80034c6:	80fb      	strh	r3, [r7, #6]
 80034c8:	4613      	mov	r3, r2
 80034ca:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 80034cc:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <lcd_write_reg+0x28>)
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = data;    /* Write in data */
 80034d2:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <lcd_write_reg+0x28>)
 80034d4:	88bb      	ldrh	r3, [r7, #4]
 80034d6:	8053      	strh	r3, [r2, #2]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	600ffffe 	.word	0x600ffffe

080034e8 <lcd_rd_data>:
 * @brief   LCD read register function
 * @param   None.
 * @retval  The data read
 */
static uint16_t lcd_rd_data(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
    volatile uint16_t ram;
    ram = LCD->LCD_RAM;
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <lcd_rd_data+0x20>)
 80034f0:	885b      	ldrh	r3, [r3, #2]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	80fb      	strh	r3, [r7, #6]
    return ram;
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	b29b      	uxth	r3, r3
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	600ffffe 	.word	0x600ffffe

0800350c <lcd_write_ram_prepare>:
 * @brief   LCD ready to write GRAM
 * @param   None.
 * @retval  None.
 */
void lcd_write_ram_prepare(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <lcd_write_ram_prepare+0x18>)
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <lcd_write_ram_prepare+0x1c>)
 8003514:	8912      	ldrh	r2, [r2, #8]
 8003516:	801a      	strh	r2, [r3, #0]
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	600ffffe 	.word	0x600ffffe
 8003528:	20000090 	.word	0x20000090

0800352c <lcd_set_cursor>:
 * @brief   Sets the cursor position
 * @param   x,y: coordinate
 * @retval  None.
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	460a      	mov	r2, r1
 8003536:	80fb      	strh	r3, [r7, #6]
 8003538:	4613      	mov	r3, r2
 800353a:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 800353c:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <lcd_set_cursor+0x1a8>)
 800353e:	889b      	ldrh	r3, [r3, #4]
 8003540:	f641 1263 	movw	r2, #6499	; 0x1963
 8003544:	4293      	cmp	r3, r2
 8003546:	d167      	bne.n	8003618 <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* In portrait mode, the x-coordinate needs to be transformed */
 8003548:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <lcd_set_cursor+0x1a8>)
 800354a:	799b      	ldrb	r3, [r3, #6]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d11e      	bne.n	800358e <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 8003550:	4b60      	ldr	r3, [pc, #384]	; (80036d4 <lcd_set_cursor+0x1a8>)
 8003552:	881a      	ldrh	r2, [r3, #0]
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 800355e:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <lcd_set_cursor+0x1a8>)
 8003560:	895b      	ldrh	r3, [r3, #10]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff96 	bl	8003494 <lcd_wr_regno>
            lcd_wr_data(0);
 8003568:	2000      	movs	r0, #0
 800356a:	f7ff ff7f 	bl	800346c <lcd_wr_data>
            lcd_wr_data(0);
 800356e:	2000      	movs	r0, #0
 8003570:	f7ff ff7c 	bl	800346c <lcd_wr_data>
            lcd_wr_data(x >> 8);
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	b29b      	uxth	r3, r3
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff76 	bl	800346c <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	b29b      	uxth	r3, r3
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff70 	bl	800346c <lcd_wr_data>
 800358c:	e021      	b.n	80035d2 <lcd_set_cursor+0xa6>
        }
        else                    /* landscape mode */
        {
            lcd_wr_regno(lcddev.setxcmd);
 800358e:	4b51      	ldr	r3, [pc, #324]	; (80036d4 <lcd_set_cursor+0x1a8>)
 8003590:	895b      	ldrh	r3, [r3, #10]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff7e 	bl	8003494 <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	b29b      	uxth	r3, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff64 	bl	800346c <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff5e 	bl	800346c <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 80035b0:	4b48      	ldr	r3, [pc, #288]	; (80036d4 <lcd_set_cursor+0x1a8>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	121b      	asrs	r3, r3, #8
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ff56 	bl	800346c <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 80035c0:	4b44      	ldr	r3, [pc, #272]	; (80036d4 <lcd_set_cursor+0x1a8>)
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff4d 	bl	800346c <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 80035d2:	4b40      	ldr	r3, [pc, #256]	; (80036d4 <lcd_set_cursor+0x1a8>)
 80035d4:	899b      	ldrh	r3, [r3, #12]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff5c 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 80035dc:	88bb      	ldrh	r3, [r7, #4]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff42 	bl	800346c <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 80035e8:	88bb      	ldrh	r3, [r7, #4]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff ff3c 	bl	800346c <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 80035f4:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <lcd_set_cursor+0x1a8>)
 80035f6:	885b      	ldrh	r3, [r3, #2]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	121b      	asrs	r3, r3, #8
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff34 	bl	800346c <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8003604:	4b33      	ldr	r3, [pc, #204]	; (80036d4 <lcd_set_cursor+0x1a8>)
 8003606:	885b      	ldrh	r3, [r3, #2]
 8003608:	3b01      	subs	r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	b29b      	uxth	r3, r3
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff2b 	bl	800346c <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8003616:	e058      	b.n	80036ca <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0X5510)
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <lcd_set_cursor+0x1a8>)
 800361a:	889b      	ldrh	r3, [r3, #4]
 800361c:	f245 5210 	movw	r2, #21776	; 0x5510
 8003620:	4293      	cmp	r3, r2
 8003622:	d130      	bne.n	8003686 <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <lcd_set_cursor+0x1a8>)
 8003626:	895b      	ldrh	r3, [r3, #10]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff33 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	b29b      	uxth	r3, r3
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff19 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <lcd_set_cursor+0x1a8>)
 800363c:	895b      	ldrh	r3, [r3, #10]
 800363e:	3301      	adds	r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff26 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(x & 0XFF);
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	b29b      	uxth	r3, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ff0c 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8003654:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <lcd_set_cursor+0x1a8>)
 8003656:	899b      	ldrh	r3, [r3, #12]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff1b 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 800365e:	88bb      	ldrh	r3, [r7, #4]
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	b29b      	uxth	r3, r3
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff01 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <lcd_set_cursor+0x1a8>)
 800366c:	899b      	ldrh	r3, [r3, #12]
 800366e:	3301      	adds	r3, #1
 8003670:	b29b      	uxth	r3, r3
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff ff0e 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(y & 0XFF);
 8003678:	88bb      	ldrh	r3, [r7, #4]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	b29b      	uxth	r3, r3
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fef4 	bl	800346c <lcd_wr_data>
}
 8003684:	e021      	b.n	80036ca <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 8003686:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <lcd_set_cursor+0x1a8>)
 8003688:	895b      	ldrh	r3, [r3, #10]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ff02 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fee8 	bl	800346c <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fee2 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <lcd_set_cursor+0x1a8>)
 80036aa:	899b      	ldrh	r3, [r3, #12]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fef1 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 80036b2:	88bb      	ldrh	r3, [r7, #4]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fed7 	bl	800346c <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 80036be:	88bb      	ldrh	r3, [r7, #4]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fed1 	bl	800346c <lcd_wr_data>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000090 	.word	0x20000090

080036d8 <lcd_scan_dir>:
 * @brief   Set the automatic scanning direction of LCD
 * @param   dir: 0 to 7, representing 8 directions (see lcd.h for definitions)
 * @retval  None.
 */
void lcd_scan_dir(uint8_t dir)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;

    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 80036ea:	4b9c      	ldr	r3, [pc, #624]	; (800395c <lcd_scan_dir+0x284>)
 80036ec:	799b      	ldrb	r3, [r3, #6]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <lcd_scan_dir+0x26>
 80036f2:	4b9a      	ldr	r3, [pc, #616]	; (800395c <lcd_scan_dir+0x284>)
 80036f4:	889b      	ldrh	r3, [r3, #4]
 80036f6:	f641 1263 	movw	r2, #6499	; 0x1963
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d109      	bne.n	8003712 <lcd_scan_dir+0x3a>
 80036fe:	4b97      	ldr	r3, [pc, #604]	; (800395c <lcd_scan_dir+0x284>)
 8003700:	799b      	ldrb	r3, [r3, #6]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d134      	bne.n	8003770 <lcd_scan_dir+0x98>
 8003706:	4b95      	ldr	r3, [pc, #596]	; (800395c <lcd_scan_dir+0x284>)
 8003708:	889b      	ldrh	r3, [r3, #4]
 800370a:	f641 1263 	movw	r2, #6499	; 0x1963
 800370e:	4293      	cmp	r3, r2
 8003710:	d12e      	bne.n	8003770 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* Change of direction */
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	2b07      	cmp	r3, #7
 8003716:	d82b      	bhi.n	8003770 <lcd_scan_dir+0x98>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <lcd_scan_dir+0x48>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003741 	.word	0x08003741
 8003724:	08003747 	.word	0x08003747
 8003728:	0800374d 	.word	0x0800374d
 800372c:	08003753 	.word	0x08003753
 8003730:	08003759 	.word	0x08003759
 8003734:	0800375f 	.word	0x0800375f
 8003738:	08003765 	.word	0x08003765
 800373c:	0800376b 	.word	0x0800376b
        {
            case L2R_U2D:
                dir = D2U_L2R;
 8003740:	2306      	movs	r3, #6
 8003742:	71fb      	strb	r3, [r7, #7]
                break;
 8003744:	e014      	b.n	8003770 <lcd_scan_dir+0x98>

            case L2R_D2U:
                dir = D2U_R2L;
 8003746:	2307      	movs	r3, #7
 8003748:	71fb      	strb	r3, [r7, #7]
                break;
 800374a:	e011      	b.n	8003770 <lcd_scan_dir+0x98>

            case R2L_U2D:
                dir = U2D_L2R;
 800374c:	2304      	movs	r3, #4
 800374e:	71fb      	strb	r3, [r7, #7]
                break;
 8003750:	e00e      	b.n	8003770 <lcd_scan_dir+0x98>

            case R2L_D2U:
                dir = U2D_R2L;
 8003752:	2305      	movs	r3, #5
 8003754:	71fb      	strb	r3, [r7, #7]
                break;
 8003756:	e00b      	b.n	8003770 <lcd_scan_dir+0x98>

            case U2D_L2R:
                dir = L2R_D2U;
 8003758:	2301      	movs	r3, #1
 800375a:	71fb      	strb	r3, [r7, #7]
                break;
 800375c:	e008      	b.n	8003770 <lcd_scan_dir+0x98>

            case U2D_R2L:
                dir = L2R_U2D;
 800375e:	2300      	movs	r3, #0
 8003760:	71fb      	strb	r3, [r7, #7]
                break;
 8003762:	e005      	b.n	8003770 <lcd_scan_dir+0x98>

            case D2U_L2R:
                dir = R2L_D2U;
 8003764:	2303      	movs	r3, #3
 8003766:	71fb      	strb	r3, [r7, #7]
                break;
 8003768:	e002      	b.n	8003770 <lcd_scan_dir+0x98>

            case D2U_R2L:
                dir = R2L_U2D;
 800376a:	2302      	movs	r3, #2
 800376c:	71fb      	strb	r3, [r7, #7]
                break;
 800376e:	bf00      	nop
        }
    }

    /* Set the value of 0X36/0X3600 register bit 5,6,7 according to the scan mode */
    switch (dir)
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b07      	cmp	r3, #7
 8003774:	d835      	bhi.n	80037e2 <lcd_scan_dir+0x10a>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <lcd_scan_dir+0xa4>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	080037e3 	.word	0x080037e3
 8003780:	0800379d 	.word	0x0800379d
 8003784:	080037a7 	.word	0x080037a7
 8003788:	080037b1 	.word	0x080037b1
 800378c:	080037bb 	.word	0x080037bb
 8003790:	080037c5 	.word	0x080037c5
 8003794:	080037cf 	.word	0x080037cf
 8003798:	080037d9 	.word	0x080037d9
        case L2R_U2D:/* From left to right, from top to bottom */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* From left to right, from bottom to top */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 800379c:	89fb      	ldrh	r3, [r7, #14]
 800379e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a2:	81fb      	strh	r3, [r7, #14]
            break;
 80037a4:	e01d      	b.n	80037e2 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* From right to left, from top to bottom */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80037a6:	89fb      	ldrh	r3, [r7, #14]
 80037a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ac:	81fb      	strh	r3, [r7, #14]
            break;
 80037ae:	e018      	b.n	80037e2 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* From right to left, from bottom to top */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80037b0:	89fb      	ldrh	r3, [r7, #14]
 80037b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037b6:	81fb      	strh	r3, [r7, #14]
            break;
 80037b8:	e013      	b.n	80037e2 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* From top to bottom, left to right */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80037ba:	89fb      	ldrh	r3, [r7, #14]
 80037bc:	f043 0320 	orr.w	r3, r3, #32
 80037c0:	81fb      	strh	r3, [r7, #14]
            break;
 80037c2:	e00e      	b.n	80037e2 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* From top to bottom, right to left */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80037c4:	89fb      	ldrh	r3, [r7, #14]
 80037c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037ca:	81fb      	strh	r3, [r7, #14]
            break;
 80037cc:	e009      	b.n	80037e2 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* From bottom to top, left to right */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80037ce:	89fb      	ldrh	r3, [r7, #14]
 80037d0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80037d4:	81fb      	strh	r3, [r7, #14]
            break;
 80037d6:	e004      	b.n	80037e2 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* From bottom to top, right to left */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80037d8:	89fb      	ldrh	r3, [r7, #14]
 80037da:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80037de:	81fb      	strh	r3, [r7, #14]
            break;
 80037e0:	bf00      	nop
    }

    if (lcddev.id == 0X5510)
 80037e2:	4b5e      	ldr	r3, [pc, #376]	; (800395c <lcd_scan_dir+0x284>)
 80037e4:	889b      	ldrh	r3, [r3, #4]
 80037e6:	f245 5210 	movw	r2, #21776	; 0x5510
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d103      	bne.n	80037f6 <lcd_scan_dir+0x11e>
    {
        dirreg = 0X3600;    /* For 5510, there is a difference between the registers of the other driver ics */
 80037ee:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80037f2:	81bb      	strh	r3, [r7, #12]
 80037f4:	e001      	b.n	80037fa <lcd_scan_dir+0x122>
    }
    else
    {
    	dirreg = 0X36;  /* For most driver ics, it is controlled by the 0X36 register */
 80037f6:	2336      	movs	r3, #54	; 0x36
 80037f8:	81bb      	strh	r3, [r7, #12]
    }

    /* 9341 & 7789 & 7796 to set the BGR bit */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 80037fa:	4b58      	ldr	r3, [pc, #352]	; (800395c <lcd_scan_dir+0x284>)
 80037fc:	889b      	ldrh	r3, [r3, #4]
 80037fe:	f249 3241 	movw	r2, #37697	; 0x9341
 8003802:	4293      	cmp	r3, r2
 8003804:	d00b      	beq.n	800381e <lcd_scan_dir+0x146>
 8003806:	4b55      	ldr	r3, [pc, #340]	; (800395c <lcd_scan_dir+0x284>)
 8003808:	889b      	ldrh	r3, [r3, #4]
 800380a:	f247 7289 	movw	r2, #30601	; 0x7789
 800380e:	4293      	cmp	r3, r2
 8003810:	d005      	beq.n	800381e <lcd_scan_dir+0x146>
 8003812:	4b52      	ldr	r3, [pc, #328]	; (800395c <lcd_scan_dir+0x284>)
 8003814:	889b      	ldrh	r3, [r3, #4]
 8003816:	f247 7296 	movw	r2, #30614	; 0x7796
 800381a:	4293      	cmp	r3, r2
 800381c:	d103      	bne.n	8003826 <lcd_scan_dir+0x14e>
    {
        regval |= 0X08;
 800381e:	89fb      	ldrh	r3, [r7, #14]
 8003820:	f043 0308 	orr.w	r3, r3, #8
 8003824:	81fb      	strh	r3, [r7, #14]
    }

    lcd_write_reg(dirreg, regval);
 8003826:	89fa      	ldrh	r2, [r7, #14]
 8003828:	89bb      	ldrh	r3, [r7, #12]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fe45 	bl	80034bc <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963 no coordinate manipulation */
 8003832:	4b4a      	ldr	r3, [pc, #296]	; (800395c <lcd_scan_dir+0x284>)
 8003834:	889b      	ldrh	r3, [r3, #4]
 8003836:	f641 1263 	movw	r2, #6499	; 0x1963
 800383a:	4293      	cmp	r3, r2
 800383c:	d025      	beq.n	800388a <lcd_scan_dir+0x1b2>
    {
        if (regval & 0X20)
 800383e:	89fb      	ldrh	r3, [r7, #14]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <lcd_scan_dir+0x192>
        {
            if (lcddev.width < lcddev.height)   /* Swap X and Y */
 8003848:	4b44      	ldr	r3, [pc, #272]	; (800395c <lcd_scan_dir+0x284>)
 800384a:	881a      	ldrh	r2, [r3, #0]
 800384c:	4b43      	ldr	r3, [pc, #268]	; (800395c <lcd_scan_dir+0x284>)
 800384e:	885b      	ldrh	r3, [r3, #2]
 8003850:	429a      	cmp	r2, r3
 8003852:	d21a      	bcs.n	800388a <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 8003854:	4b41      	ldr	r3, [pc, #260]	; (800395c <lcd_scan_dir+0x284>)
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 800385a:	4b40      	ldr	r3, [pc, #256]	; (800395c <lcd_scan_dir+0x284>)
 800385c:	885a      	ldrh	r2, [r3, #2]
 800385e:	4b3f      	ldr	r3, [pc, #252]	; (800395c <lcd_scan_dir+0x284>)
 8003860:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8003862:	4a3e      	ldr	r2, [pc, #248]	; (800395c <lcd_scan_dir+0x284>)
 8003864:	897b      	ldrh	r3, [r7, #10]
 8003866:	8053      	strh	r3, [r2, #2]
 8003868:	e00f      	b.n	800388a <lcd_scan_dir+0x1b2>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* Swap X and Y */
 800386a:	4b3c      	ldr	r3, [pc, #240]	; (800395c <lcd_scan_dir+0x284>)
 800386c:	881a      	ldrh	r2, [r3, #0]
 800386e:	4b3b      	ldr	r3, [pc, #236]	; (800395c <lcd_scan_dir+0x284>)
 8003870:	885b      	ldrh	r3, [r3, #2]
 8003872:	429a      	cmp	r2, r3
 8003874:	d909      	bls.n	800388a <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 8003876:	4b39      	ldr	r3, [pc, #228]	; (800395c <lcd_scan_dir+0x284>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 800387c:	4b37      	ldr	r3, [pc, #220]	; (800395c <lcd_scan_dir+0x284>)
 800387e:	885a      	ldrh	r2, [r3, #2]
 8003880:	4b36      	ldr	r3, [pc, #216]	; (800395c <lcd_scan_dir+0x284>)
 8003882:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8003884:	4a35      	ldr	r2, [pc, #212]	; (800395c <lcd_scan_dir+0x284>)
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* Set the size of the display area (window) */
    if (lcddev.id == 0X5510)
 800388a:	4b34      	ldr	r3, [pc, #208]	; (800395c <lcd_scan_dir+0x284>)
 800388c:	889b      	ldrh	r3, [r3, #4]
 800388e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003892:	4293      	cmp	r3, r2
 8003894:	d164      	bne.n	8003960 <lcd_scan_dir+0x288>
    {
        lcd_wr_regno(lcddev.setxcmd);
 8003896:	4b31      	ldr	r3, [pc, #196]	; (800395c <lcd_scan_dir+0x284>)
 8003898:	895b      	ldrh	r3, [r3, #10]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fdfa 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(0);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7ff fde3 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 80038a6:	4b2d      	ldr	r3, [pc, #180]	; (800395c <lcd_scan_dir+0x284>)
 80038a8:	895b      	ldrh	r3, [r3, #10]
 80038aa:	3301      	adds	r3, #1
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fdf0 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(0);
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7ff fdd9 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 2);
 80038ba:	4b28      	ldr	r3, [pc, #160]	; (800395c <lcd_scan_dir+0x284>)
 80038bc:	895b      	ldrh	r3, [r3, #10]
 80038be:	3302      	adds	r3, #2
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fde6 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) >> 8);
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <lcd_scan_dir+0x284>)
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	121b      	asrs	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fdca 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 3);
 80038d8:	4b20      	ldr	r3, [pc, #128]	; (800395c <lcd_scan_dir+0x284>)
 80038da:	895b      	ldrh	r3, [r3, #10]
 80038dc:	3303      	adds	r3, #3
 80038de:	b29b      	uxth	r3, r3
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fdd7 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <lcd_scan_dir+0x284>)
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fdba 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <lcd_scan_dir+0x284>)
 80038fa:	899b      	ldrh	r3, [r3, #12]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fdc9 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(0);
 8003902:	2000      	movs	r0, #0
 8003904:	f7ff fdb2 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <lcd_scan_dir+0x284>)
 800390a:	899b      	ldrh	r3, [r3, #12]
 800390c:	3301      	adds	r3, #1
 800390e:	b29b      	uxth	r3, r3
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fdbf 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(0);
 8003916:	2000      	movs	r0, #0
 8003918:	f7ff fda8 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 2);
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <lcd_scan_dir+0x284>)
 800391e:	899b      	ldrh	r3, [r3, #12]
 8003920:	3302      	adds	r3, #2
 8003922:	b29b      	uxth	r3, r3
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fdb5 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) >> 8);
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <lcd_scan_dir+0x284>)
 800392c:	885b      	ldrh	r3, [r3, #2]
 800392e:	3b01      	subs	r3, #1
 8003930:	121b      	asrs	r3, r3, #8
 8003932:	b29b      	uxth	r3, r3
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fd99 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 3);
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <lcd_scan_dir+0x284>)
 800393c:	899b      	ldrh	r3, [r3, #12]
 800393e:	3303      	adds	r3, #3
 8003940:	b29b      	uxth	r3, r3
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fda6 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <lcd_scan_dir+0x284>)
 800394a:	885b      	ldrh	r3, [r3, #2]
 800394c:	3b01      	subs	r3, #1
 800394e:	b29b      	uxth	r3, r3
 8003950:	b2db      	uxtb	r3, r3
 8003952:	b29b      	uxth	r3, r3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fd89 	bl	800346c <lcd_wr_data>
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 800395a:	e039      	b.n	80039d0 <lcd_scan_dir+0x2f8>
 800395c:	20000090 	.word	0x20000090
        lcd_wr_regno(lcddev.setxcmd);
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <lcd_scan_dir+0x300>)
 8003962:	895b      	ldrh	r3, [r3, #10]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fd95 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(0);
 800396a:	2000      	movs	r0, #0
 800396c:	f7ff fd7e 	bl	800346c <lcd_wr_data>
        lcd_wr_data(0);
 8003970:	2000      	movs	r0, #0
 8003972:	f7ff fd7b 	bl	800346c <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <lcd_scan_dir+0x300>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	3b01      	subs	r3, #1
 800397c:	121b      	asrs	r3, r3, #8
 800397e:	b29b      	uxth	r3, r3
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fd73 	bl	800346c <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <lcd_scan_dir+0x300>)
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	3b01      	subs	r3, #1
 800398c:	b29b      	uxth	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	b29b      	uxth	r3, r3
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fd6a 	bl	800346c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <lcd_scan_dir+0x300>)
 800399a:	899b      	ldrh	r3, [r3, #12]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fd79 	bl	8003494 <lcd_wr_regno>
        lcd_wr_data(0);
 80039a2:	2000      	movs	r0, #0
 80039a4:	f7ff fd62 	bl	800346c <lcd_wr_data>
        lcd_wr_data(0);
 80039a8:	2000      	movs	r0, #0
 80039aa:	f7ff fd5f 	bl	800346c <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <lcd_scan_dir+0x300>)
 80039b0:	885b      	ldrh	r3, [r3, #2]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	121b      	asrs	r3, r3, #8
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fd57 	bl	800346c <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <lcd_scan_dir+0x300>)
 80039c0:	885b      	ldrh	r3, [r3, #2]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fd4e 	bl	800346c <lcd_wr_data>
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000090 	.word	0x20000090

080039dc <lcd_draw_point>:
 * @param   x,y  : coordinate
 * @param   color: Point color
 * @retval  None.
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	603a      	str	r2, [r7, #0]
 80039e6:	80fb      	strh	r3, [r7, #6]
 80039e8:	460b      	mov	r3, r1
 80039ea:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* Sets the cursor position */
 80039ec:	88ba      	ldrh	r2, [r7, #4]
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fd9a 	bl	800352c <lcd_set_cursor>
    lcd_write_ram_prepare();    /* Start writing GRAM */
 80039f8:	f7ff fd88 	bl	800350c <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <lcd_draw_point+0x30>)
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	b292      	uxth	r2, r2
 8003a02:	805a      	strh	r2, [r3, #2]
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	600ffffe 	.word	0x600ffffe

08003a10 <lcd_ssd_backlight_set>:
 * @brief   SSD1963 backlight brightness setting function
 * @param   pwm  : Backlight level,0~100. The larger the brighter.
 * @retval  None.
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
    lcd_wr_regno(0xBE);         /* Configure PWM output */
 8003a1a:	20be      	movs	r0, #190	; 0xbe
 8003a1c:	f7ff fd3a 	bl	8003494 <lcd_wr_regno>
    lcd_wr_data(0x05);          /* 1 Set the PWM frequency */
 8003a20:	2005      	movs	r0, #5
 8003a22:	f7ff fd23 	bl	800346c <lcd_wr_data>
    lcd_wr_data(pwm * 2.55);    /* 2 Set the PWM duty cycle */
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fe49 	bl	80006c0 <__aeabi_i2d>
 8003a2e:	a310      	add	r3, pc, #64	; (adr r3, 8003a70 <lcd_ssd_backlight_set+0x60>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f7fc fbc8 	bl	80001c8 <__aeabi_dmul>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f7fc fea8 	bl	8000794 <__aeabi_d2uiz>
 8003a44:	4603      	mov	r3, r0
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff fd0f 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x01);          /* 3 Setting C */
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f7ff fd0c 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0xFF);          /* 4 Setting D */
 8003a54:	20ff      	movs	r0, #255	; 0xff
 8003a56:	f7ff fd09 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);          /* 5 Setting E */
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7ff fd06 	bl	800346c <lcd_wr_data>
    lcd_wr_data(0x00);          /* 6 Setting F */
 8003a60:	2000      	movs	r0, #0
 8003a62:	f7ff fd03 	bl	800346c <lcd_wr_data>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	66666666 	.word	0x66666666
 8003a74:	40046666 	.word	0x40046666

08003a78 <lcd_display_dir>:
 * @brief   Set the LCD display orientation
 * @param   dir  : 0, portrait; 1. Landscape
 * @retval  None.
 */
void lcd_display_dir(uint8_t dir)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* Portrait/landscape */
 8003a82:	4a68      	ldr	r2, [pc, #416]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* Portrait */
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d165      	bne.n	8003b5a <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8003a8e:	4b65      	ldr	r3, [pc, #404]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003a90:	22f0      	movs	r2, #240	; 0xf0
 8003a92:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8003a94:	4b63      	ldr	r3, [pc, #396]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003a96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a9a:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003a9c:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003a9e:	889b      	ldrh	r3, [r3, #4]
 8003aa0:	f245 5210 	movw	r2, #21776	; 0x5510
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d114      	bne.n	8003ad2 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8003aa8:	4b5e      	ldr	r3, [pc, #376]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003aaa:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003aae:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8003ab0:	4b5c      	ldr	r3, [pc, #368]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003ab2:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003ab6:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8003ab8:	4b5a      	ldr	r3, [pc, #360]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003aba:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003abe:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8003ac0:	4b58      	ldr	r3, [pc, #352]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003ac2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ac6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003ac8:	4b56      	ldr	r3, [pc, #344]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003aca:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003ace:	805a      	strh	r2, [r3, #2]
 8003ad0:	e020      	b.n	8003b14 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8003ad2:	4b54      	ldr	r3, [pc, #336]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003ad4:	889b      	ldrh	r3, [r3, #4]
 8003ad6:	f641 1263 	movw	r2, #6499	; 0x1963
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d111      	bne.n	8003b02 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8003ade:	4b51      	ldr	r3, [pc, #324]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003ae0:	222c      	movs	r2, #44	; 0x2c
 8003ae2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* Set the write x-coordinate instruction */
 8003ae4:	4b4f      	ldr	r3, [pc, #316]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003ae6:	222b      	movs	r2, #43	; 0x2b
 8003ae8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* Set the write y-coordinate instruction */
 8003aea:	4b4e      	ldr	r3, [pc, #312]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003aec:	222a      	movs	r2, #42	; 0x2a
 8003aee:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* Set width 480 */
 8003af0:	4b4c      	ldr	r3, [pc, #304]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003af2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003af6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* Set height 800 */
 8003af8:	4b4a      	ldr	r3, [pc, #296]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003afa:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003afe:	805a      	strh	r2, [r3, #2]
 8003b00:	e008      	b.n	8003b14 <lcd_display_dir+0x9c>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 8003b02:	4b48      	ldr	r3, [pc, #288]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b04:	222c      	movs	r2, #44	; 0x2c
 8003b06:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8003b08:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b0a:	222a      	movs	r2, #42	; 0x2a
 8003b0c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8003b0e:	4b45      	ldr	r3, [pc, #276]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b10:	222b      	movs	r2, #43	; 0x2b
 8003b12:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8003b14:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b16:	889b      	ldrh	r3, [r3, #4]
 8003b18:	f245 3210 	movw	r2, #21264	; 0x5310
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d005      	beq.n	8003b2c <lcd_display_dir+0xb4>
 8003b20:	4b40      	ldr	r3, [pc, #256]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b22:	889b      	ldrh	r3, [r3, #4]
 8003b24:	f247 7296 	movw	r2, #30614	; 0x7796
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d107      	bne.n	8003b3c <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8003b2c:	4b3d      	ldr	r3, [pc, #244]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b32:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8003b34:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b3a:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* 9806 means 480*800 resolution */
 8003b3c:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b3e:	889b      	ldrh	r3, [r3, #4]
 8003b40:	f649 0206 	movw	r2, #38918	; 0x9806
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d165      	bne.n	8003c14 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b4e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003b50:	4b34      	ldr	r3, [pc, #208]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b52:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003b56:	805a      	strh	r2, [r3, #2]
 8003b58:	e05c      	b.n	8003c14 <lcd_display_dir+0x19c>
        }
    }
    else                            /* landscape */
    {
        lcddev.width = 320;         /* Default width */
 8003b5a:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b60:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Default height */
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b64:	22f0      	movs	r2, #240	; 0xf0
 8003b66:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003b68:	4b2e      	ldr	r3, [pc, #184]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b6a:	889b      	ldrh	r3, [r3, #4]
 8003b6c:	f245 5210 	movw	r2, #21776	; 0x5510
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d114      	bne.n	8003b9e <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b76:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003b7a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8003b7c:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b7e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003b82:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8003b84:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b86:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003b8a:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8003b8c:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b8e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003b92:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8003b94:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003b96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b9a:	805a      	strh	r2, [r3, #2]
 8003b9c:	e026      	b.n	8003bec <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8003b9e:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003ba0:	889b      	ldrh	r3, [r3, #4]
 8003ba2:	f641 1263 	movw	r2, #6499	; 0x1963
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d005      	beq.n	8003bb6 <lcd_display_dir+0x13e>
 8003baa:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003bac:	889b      	ldrh	r3, [r3, #4]
 8003bae:	f649 0206 	movw	r2, #38918	; 0x9806
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d111      	bne.n	8003bda <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003bb8:	222c      	movs	r2, #44	; 0x2c
 8003bba:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* Set the write x-coordinate instruction */
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003bbe:	222a      	movs	r2, #42	; 0x2a
 8003bc0:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* Set the write y-coordinate instruction */
 8003bc2:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003bc4:	222b      	movs	r2, #43	; 0x2b
 8003bc6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* Set width 800 */
 8003bc8:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003bca:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003bce:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* Set height 480 */
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003bd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003bd6:	805a      	strh	r2, [r3, #2]
 8003bd8:	e008      	b.n	8003bec <lcd_display_dir+0x174>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003bdc:	222c      	movs	r2, #44	; 0x2c
 8003bde:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003be2:	222a      	movs	r2, #42	; 0x2a
 8003be4:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8003be6:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003be8:	222b      	movs	r2, #43	; 0x2b
 8003bea:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8003bec:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003bee:	889b      	ldrh	r3, [r3, #4]
 8003bf0:	f245 3210 	movw	r2, #21264	; 0x5310
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d005      	beq.n	8003c04 <lcd_display_dir+0x18c>
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003bfa:	889b      	ldrh	r3, [r3, #4]
 8003bfc:	f247 7296 	movw	r2, #30614	; 0x7796
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d107      	bne.n	8003c14 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003c06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c0a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <lcd_display_dir+0x1ac>)
 8003c0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c12:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Default scan direction */
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7ff fd5f 	bl	80036d8 <lcd_scan_dir>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000090 	.word	0x20000090

08003c28 <lcd_init>:
 * @note    This initialization function can initialize various types of LCD
 * @param   None.
 * @retval  None.
 */
void lcd_init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
	FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	611a      	str	r2, [r3, #16]
 8003c3c:	615a      	str	r2, [r3, #20]
 8003c3e:	619a      	str	r2, [r3, #24]

	HAL_Delay(50);        /* After initializing the FSMC, a certain amount of time must be waited before the initialization can start */
 8003c40:	2032      	movs	r0, #50	; 0x32
 8003c42:	f001 f989 	bl	8004f58 <HAL_Delay>

    /* Try a read of 9341 ID */
    lcd_wr_regno(0XD3);
 8003c46:	20d3      	movs	r0, #211	; 0xd3
 8003c48:	f7ff fc24 	bl	8003494 <lcd_wr_regno>
    lcddev.id = lcd_rd_data();  /* dummy read */
 8003c4c:	f7ff fc4c 	bl	80034e8 <lcd_rd_data>
 8003c50:	4603      	mov	r3, r0
 8003c52:	461a      	mov	r2, r3
 8003c54:	4bb0      	ldr	r3, [pc, #704]	; (8003f18 <lcd_init+0x2f0>)
 8003c56:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8003c58:	f7ff fc46 	bl	80034e8 <lcd_rd_data>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4bad      	ldr	r3, [pc, #692]	; (8003f18 <lcd_init+0x2f0>)
 8003c62:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read 0X93 */
 8003c64:	f7ff fc40 	bl	80034e8 <lcd_rd_data>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4baa      	ldr	r3, [pc, #680]	; (8003f18 <lcd_init+0x2f0>)
 8003c6e:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8003c70:	4ba9      	ldr	r3, [pc, #676]	; (8003f18 <lcd_init+0x2f0>)
 8003c72:	889b      	ldrh	r3, [r3, #4]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	4ba7      	ldr	r3, [pc, #668]	; (8003f18 <lcd_init+0x2f0>)
 8003c7a:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* Read 0X41 */
 8003c7c:	f7ff fc34 	bl	80034e8 <lcd_rd_data>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	4ba4      	ldr	r3, [pc, #656]	; (8003f18 <lcd_init+0x2f0>)
 8003c86:	889b      	ldrh	r3, [r3, #4]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	4ba2      	ldr	r3, [pc, #648]	; (8003f18 <lcd_init+0x2f0>)
 8003c8e:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* Not 9341, try to see if it's ST7789 */
 8003c90:	4ba1      	ldr	r3, [pc, #644]	; (8003f18 <lcd_init+0x2f0>)
 8003c92:	889b      	ldrh	r3, [r3, #4]
 8003c94:	f249 3241 	movw	r2, #37697	; 0x9341
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	f000 8122 	beq.w	8003ee2 <lcd_init+0x2ba>
    {
        lcd_wr_regno(0X04);
 8003c9e:	2004      	movs	r0, #4
 8003ca0:	f7ff fbf8 	bl	8003494 <lcd_wr_regno>
        lcddev.id = lcd_rd_data();      /* dummy read */
 8003ca4:	f7ff fc20 	bl	80034e8 <lcd_rd_data>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	461a      	mov	r2, r3
 8003cac:	4b9a      	ldr	r3, [pc, #616]	; (8003f18 <lcd_init+0x2f0>)
 8003cae:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read to 0X85 */
 8003cb0:	f7ff fc1a 	bl	80034e8 <lcd_rd_data>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	4b97      	ldr	r3, [pc, #604]	; (8003f18 <lcd_init+0x2f0>)
 8003cba:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read 0X85 */
 8003cbc:	f7ff fc14 	bl	80034e8 <lcd_rd_data>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b94      	ldr	r3, [pc, #592]	; (8003f18 <lcd_init+0x2f0>)
 8003cc6:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8003cc8:	4b93      	ldr	r3, [pc, #588]	; (8003f18 <lcd_init+0x2f0>)
 8003cca:	889b      	ldrh	r3, [r3, #4]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	4b91      	ldr	r3, [pc, #580]	; (8003f18 <lcd_init+0x2f0>)
 8003cd2:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* Read 0X52 */
 8003cd4:	f7ff fc08 	bl	80034e8 <lcd_rd_data>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4b8e      	ldr	r3, [pc, #568]	; (8003f18 <lcd_init+0x2f0>)
 8003cde:	889b      	ldrh	r3, [r3, #4]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b8c      	ldr	r3, [pc, #560]	; (8003f18 <lcd_init+0x2f0>)
 8003ce6:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        /* Convert the ID of 8552 to 7789 */
 8003ce8:	4b8b      	ldr	r3, [pc, #556]	; (8003f18 <lcd_init+0x2f0>)
 8003cea:	889b      	ldrh	r3, [r3, #4]
 8003cec:	f248 5252 	movw	r2, #34130	; 0x8552
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d103      	bne.n	8003cfc <lcd_init+0xd4>
        {
            lcddev.id = 0x7789;
 8003cf4:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <lcd_init+0x2f0>)
 8003cf6:	f247 7289 	movw	r2, #30601	; 0x7789
 8003cfa:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Also not ST7789, try not NT35310 */
 8003cfc:	4b86      	ldr	r3, [pc, #536]	; (8003f18 <lcd_init+0x2f0>)
 8003cfe:	889b      	ldrh	r3, [r3, #4]
 8003d00:	f247 7289 	movw	r2, #30601	; 0x7789
 8003d04:	4293      	cmp	r3, r2
 8003d06:	f000 80ec 	beq.w	8003ee2 <lcd_init+0x2ba>
        {
            lcd_wr_regno(0xD4);
 8003d0a:	20d4      	movs	r0, #212	; 0xd4
 8003d0c:	f7ff fbc2 	bl	8003494 <lcd_wr_regno>
            lcddev.id = lcd_rd_data();  /* dummy read */
 8003d10:	f7ff fbea 	bl	80034e8 <lcd_rd_data>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b7f      	ldr	r3, [pc, #508]	; (8003f18 <lcd_init+0x2f0>)
 8003d1a:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x01 */
 8003d1c:	f7ff fbe4 	bl	80034e8 <lcd_rd_data>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461a      	mov	r2, r3
 8003d24:	4b7c      	ldr	r3, [pc, #496]	; (8003f18 <lcd_init+0x2f0>)
 8003d26:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x53 */
 8003d28:	f7ff fbde 	bl	80034e8 <lcd_rd_data>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b79      	ldr	r3, [pc, #484]	; (8003f18 <lcd_init+0x2f0>)
 8003d32:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8003d34:	4b78      	ldr	r3, [pc, #480]	; (8003f18 <lcd_init+0x2f0>)
 8003d36:	889b      	ldrh	r3, [r3, #4]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	4b76      	ldr	r3, [pc, #472]	; (8003f18 <lcd_init+0x2f0>)
 8003d3e:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8003d40:	f7ff fbd2 	bl	80034e8 <lcd_rd_data>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	4b73      	ldr	r3, [pc, #460]	; (8003f18 <lcd_init+0x2f0>)
 8003d4a:	889b      	ldrh	r3, [r3, #4]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <lcd_init+0x2f0>)
 8003d52:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Also not NT35310, try to see if it is ST7796 */
 8003d54:	4b70      	ldr	r3, [pc, #448]	; (8003f18 <lcd_init+0x2f0>)
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	f245 3210 	movw	r2, #21264	; 0x5310
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	f000 80c0 	beq.w	8003ee2 <lcd_init+0x2ba>
            {
                lcd_wr_regno(0XD3);
 8003d62:	20d3      	movs	r0, #211	; 0xd3
 8003d64:	f7ff fb96 	bl	8003494 <lcd_wr_regno>
                lcddev.id = lcd_rd_data();  /* dummy read */
 8003d68:	f7ff fbbe 	bl	80034e8 <lcd_rd_data>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b69      	ldr	r3, [pc, #420]	; (8003f18 <lcd_init+0x2f0>)
 8003d72:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8003d74:	f7ff fbb8 	bl	80034e8 <lcd_rd_data>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b66      	ldr	r3, [pc, #408]	; (8003f18 <lcd_init+0x2f0>)
 8003d7e:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read 0X77 */
 8003d80:	f7ff fbb2 	bl	80034e8 <lcd_rd_data>
 8003d84:	4603      	mov	r3, r0
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <lcd_init+0x2f0>)
 8003d8a:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8003d8c:	4b62      	ldr	r3, [pc, #392]	; (8003f18 <lcd_init+0x2f0>)
 8003d8e:	889b      	ldrh	r3, [r3, #4]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	4b60      	ldr	r3, [pc, #384]	; (8003f18 <lcd_init+0x2f0>)
 8003d96:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* Read 0X96 */
 8003d98:	f7ff fba6 	bl	80034e8 <lcd_rd_data>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b5d      	ldr	r3, [pc, #372]	; (8003f18 <lcd_init+0x2f0>)
 8003da2:	889b      	ldrh	r3, [r3, #4]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <lcd_init+0x2f0>)
 8003daa:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0x7796)    /* Also not ST7796, try to see if it is NT35510 */
 8003dac:	4b5a      	ldr	r3, [pc, #360]	; (8003f18 <lcd_init+0x2f0>)
 8003dae:	889b      	ldrh	r3, [r3, #4]
 8003db0:	f247 7296 	movw	r2, #30614	; 0x7796
 8003db4:	4293      	cmp	r3, r2
 8003db6:	f000 8094 	beq.w	8003ee2 <lcd_init+0x2ba>
                {
                    /* Send key (provided by manufacturer) */
                    lcd_write_reg(0xF000, 0x0055);
 8003dba:	2155      	movs	r1, #85	; 0x55
 8003dbc:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003dc0:	f7ff fb7c 	bl	80034bc <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8003dc4:	21aa      	movs	r1, #170	; 0xaa
 8003dc6:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003dca:	f7ff fb77 	bl	80034bc <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 8003dce:	2152      	movs	r1, #82	; 0x52
 8003dd0:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003dd4:	f7ff fb72 	bl	80034bc <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 8003dd8:	2108      	movs	r1, #8
 8003dda:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003dde:	f7ff fb6d 	bl	80034bc <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8003de2:	2101      	movs	r1, #1
 8003de4:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003de8:	f7ff fb68 	bl	80034bc <lcd_write_reg>

                    lcd_wr_regno(0xC500);       /* Read the lower eight bits of the ID */
 8003dec:	f44f 4045 	mov.w	r0, #50432	; 0xc500
 8003df0:	f7ff fb50 	bl	8003494 <lcd_wr_regno>
                    lcddev.id = lcd_rd_data();  /* Read back 0x55 */
 8003df4:	f7ff fb78 	bl	80034e8 <lcd_rd_data>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b46      	ldr	r3, [pc, #280]	; (8003f18 <lcd_init+0x2f0>)
 8003dfe:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8003e00:	4b45      	ldr	r3, [pc, #276]	; (8003f18 <lcd_init+0x2f0>)
 8003e02:	889b      	ldrh	r3, [r3, #4]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <lcd_init+0x2f0>)
 8003e0a:	809a      	strh	r2, [r3, #4]

                    lcd_wr_regno(0xC501);       /* Read the high eight bits of the ID */
 8003e0c:	f24c 5001 	movw	r0, #50433	; 0xc501
 8003e10:	f7ff fb40 	bl	8003494 <lcd_wr_regno>
                    lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8003e14:	f7ff fb68 	bl	80034e8 <lcd_rd_data>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b3e      	ldr	r3, [pc, #248]	; (8003f18 <lcd_init+0x2f0>)
 8003e1e:	889b      	ldrh	r3, [r3, #4]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <lcd_init+0x2f0>)
 8003e26:	809a      	strh	r2, [r3, #4]

                    HAL_Delay(5);                /* Wait 5ms, because instruction 0XC501 is a software reset instruction for 1963, wait 5ms for 1963 reset to complete */
 8003e28:	2005      	movs	r0, #5
 8003e2a:	f001 f895 	bl	8004f58 <HAL_Delay>

                    if (lcddev.id != 0x5510)    /* Also not NT5510, try to see if it is ILI9806 */
 8003e2e:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <lcd_init+0x2f0>)
 8003e30:	889b      	ldrh	r3, [r3, #4]
 8003e32:	f245 5210 	movw	r2, #21776	; 0x5510
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d053      	beq.n	8003ee2 <lcd_init+0x2ba>
                    {
                        lcd_wr_regno(0XD3);
 8003e3a:	20d3      	movs	r0, #211	; 0xd3
 8003e3c:	f7ff fb2a 	bl	8003494 <lcd_wr_regno>
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8003e40:	f7ff fb52 	bl	80034e8 <lcd_rd_data>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b33      	ldr	r3, [pc, #204]	; (8003f18 <lcd_init+0x2f0>)
 8003e4a:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X00 */
 8003e4c:	f7ff fb4c 	bl	80034e8 <lcd_rd_data>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <lcd_init+0x2f0>)
 8003e56:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X98 */
 8003e58:	f7ff fb46 	bl	80034e8 <lcd_rd_data>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b2d      	ldr	r3, [pc, #180]	; (8003f18 <lcd_init+0x2f0>)
 8003e62:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8003e64:	4b2c      	ldr	r3, [pc, #176]	; (8003f18 <lcd_init+0x2f0>)
 8003e66:	889b      	ldrh	r3, [r3, #4]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <lcd_init+0x2f0>)
 8003e6e:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* Read back 0X06 */
 8003e70:	f7ff fb3a 	bl	80034e8 <lcd_rd_data>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <lcd_init+0x2f0>)
 8003e7a:	889b      	ldrh	r3, [r3, #4]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <lcd_init+0x2f0>)
 8003e82:	809a      	strh	r2, [r3, #4]

                        if (lcddev.id != 0x9806)    /* Not ILI9806 either, try to see if it's SSD1963 */
 8003e84:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <lcd_init+0x2f0>)
 8003e86:	889b      	ldrh	r3, [r3, #4]
 8003e88:	f649 0206 	movw	r2, #38918	; 0x9806
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d028      	beq.n	8003ee2 <lcd_init+0x2ba>
                        {
                            lcd_wr_regno(0xA1);
 8003e90:	20a1      	movs	r0, #161	; 0xa1
 8003e92:	f7ff faff 	bl	8003494 <lcd_wr_regno>
                            lcddev.id = lcd_rd_data();
 8003e96:	f7ff fb27 	bl	80034e8 <lcd_rd_data>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <lcd_init+0x2f0>)
 8003ea0:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* Read back 0x57 */
 8003ea2:	f7ff fb21 	bl	80034e8 <lcd_rd_data>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <lcd_init+0x2f0>)
 8003eac:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <lcd_init+0x2f0>)
 8003eb0:	889b      	ldrh	r3, [r3, #4]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <lcd_init+0x2f0>)
 8003eb8:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* Read back 0x61 */
 8003eba:	f7ff fb15 	bl	80034e8 <lcd_rd_data>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <lcd_init+0x2f0>)
 8003ec4:	889b      	ldrh	r3, [r3, #4]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <lcd_init+0x2f0>)
 8003ecc:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* The ID read back by SSD1963 is 5761H, which we force to be 1963 for convenience */
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <lcd_init+0x2f0>)
 8003ed0:	889b      	ldrh	r3, [r3, #4]
 8003ed2:	f245 7261 	movw	r2, #22369	; 0x5761
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d103      	bne.n	8003ee2 <lcd_init+0x2ba>
 8003eda:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <lcd_init+0x2f0>)
 8003edc:	f641 1263 	movw	r2, #6499	; 0x1963
 8003ee0:	809a      	strh	r2, [r3, #4]
                }
            }
        }
    }

    if (lcddev.id == 0X7789)
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <lcd_init+0x2f0>)
 8003ee4:	889b      	ldrh	r3, [r3, #4]
 8003ee6:	f247 7289 	movw	r2, #30601	; 0x7789
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d102      	bne.n	8003ef4 <lcd_init+0x2cc>
    {
        lcd_ex_st7789_reginit();    /* Perform ST7789 initialization */
 8003eee:	f7fc fe93 	bl	8000c18 <lcd_ex_st7789_reginit>
 8003ef2:	e039      	b.n	8003f68 <lcd_init+0x340>
    }
    else if (lcddev.id == 0X9341)
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <lcd_init+0x2f0>)
 8003ef6:	889b      	ldrh	r3, [r3, #4]
 8003ef8:	f249 3241 	movw	r2, #37697	; 0x9341
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d102      	bne.n	8003f06 <lcd_init+0x2de>
    {
        lcd_ex_ili9341_reginit();   /* Perform ILI9341 initialization */
 8003f00:	f7fc ff60 	bl	8000dc4 <lcd_ex_ili9341_reginit>
 8003f04:	e030      	b.n	8003f68 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x5310)
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <lcd_init+0x2f0>)
 8003f08:	889b      	ldrh	r3, [r3, #4]
 8003f0a:	f245 3210 	movw	r2, #21264	; 0x5310
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d104      	bne.n	8003f1c <lcd_init+0x2f4>
    {
        lcd_ex_nt35310_reginit();   /* Perform NT35310 initialization */
 8003f12:	f7fd f86f 	bl	8000ff4 <lcd_ex_nt35310_reginit>
 8003f16:	e027      	b.n	8003f68 <lcd_init+0x340>
 8003f18:	20000090 	.word	0x20000090
    }
    else if (lcddev.id == 0x7796)
 8003f1c:	4b44      	ldr	r3, [pc, #272]	; (8004030 <lcd_init+0x408>)
 8003f1e:	889b      	ldrh	r3, [r3, #4]
 8003f20:	f247 7296 	movw	r2, #30614	; 0x7796
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d102      	bne.n	8003f2e <lcd_init+0x306>
    {
        lcd_ex_st7796_reginit();    /* Perform ST7796 initialization */
 8003f28:	f7fd ffdf 	bl	8001eea <lcd_ex_st7796_reginit>
 8003f2c:	e01c      	b.n	8003f68 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x5510)
 8003f2e:	4b40      	ldr	r3, [pc, #256]	; (8004030 <lcd_init+0x408>)
 8003f30:	889b      	ldrh	r3, [r3, #4]
 8003f32:	f245 5210 	movw	r2, #21776	; 0x5510
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d102      	bne.n	8003f40 <lcd_init+0x318>
    {
        lcd_ex_nt35510_reginit();   /* Perform NT35510 initialization */
 8003f3a:	f7fe f8bb 	bl	80020b4 <lcd_ex_nt35510_reginit>
 8003f3e:	e013      	b.n	8003f68 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x9806)
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <lcd_init+0x408>)
 8003f42:	889b      	ldrh	r3, [r3, #4]
 8003f44:	f649 0206 	movw	r2, #38918	; 0x9806
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d102      	bne.n	8003f52 <lcd_init+0x32a>
    {
        lcd_ex_ili9806_reginit();   /* Perform ILI9806 initialization */
 8003f4c:	f7ff f832 	bl	8002fb4 <lcd_ex_ili9806_reginit>
 8003f50:	e00a      	b.n	8003f68 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x1963)
 8003f52:	4b37      	ldr	r3, [pc, #220]	; (8004030 <lcd_init+0x408>)
 8003f54:	889b      	ldrh	r3, [r3, #4]
 8003f56:	f641 1263 	movw	r2, #6499	; 0x1963
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d104      	bne.n	8003f68 <lcd_init+0x340>
    {
        lcd_ex_ssd1963_reginit();   /* Perform SSD1963 initialization */
 8003f5e:	f7ff f9cb 	bl	80032f8 <lcd_ex_ssd1963_reginit>
        lcd_ssd_backlight_set(100); /* The backlight is set to its brightest */
 8003f62:	2064      	movs	r0, #100	; 0x64
 8003f64:	f7ff fd54 	bl	8003a10 <lcd_ssd_backlight_set>
    }

    if (lcddev.id == 0x7789)
 8003f68:	4b31      	ldr	r3, [pc, #196]	; (8004030 <lcd_init+0x408>)
 8003f6a:	889b      	ldrh	r3, [r3, #4]
 8003f6c:	f247 7289 	movw	r2, #30601	; 0x7789
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10d      	bne.n	8003f90 <lcd_init+0x368>
    {
    	ExtTiming.AddressSetupTime = 3;
 8003f74:	2303      	movs	r3, #3
 8003f76:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 3;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <lcd_init+0x40c>)
 8003f7e:	6858      	ldr	r0, [r3, #4]
 8003f80:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <lcd_init+0x40c>)
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <lcd_init+0x40c>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	1d39      	adds	r1, r7, #4
 8003f8a:	f003 fa27 	bl	80073dc <FSMC_NORSRAM_Extended_Timing_Init>
 8003f8e:	e03e      	b.n	800400e <lcd_init+0x3e6>
    }
    else if ((lcddev.id == 0x5310) ||
 8003f90:	4b27      	ldr	r3, [pc, #156]	; (8004030 <lcd_init+0x408>)
 8003f92:	889b      	ldrh	r3, [r3, #4]
 8003f94:	f245 3210 	movw	r2, #21264	; 0x5310
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d017      	beq.n	8003fcc <lcd_init+0x3a4>
             (lcddev.id == 0x7796) ||
 8003f9c:	4b24      	ldr	r3, [pc, #144]	; (8004030 <lcd_init+0x408>)
 8003f9e:	889b      	ldrh	r3, [r3, #4]
    else if ((lcddev.id == 0x5310) ||
 8003fa0:	f247 7296 	movw	r2, #30614	; 0x7796
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d011      	beq.n	8003fcc <lcd_init+0x3a4>
             (lcddev.id == 0x5510) ||
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <lcd_init+0x408>)
 8003faa:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x7796) ||
 8003fac:	f245 5210 	movw	r2, #21776	; 0x5510
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00b      	beq.n	8003fcc <lcd_init+0x3a4>
             (lcddev.id == 0x9806) ||
 8003fb4:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <lcd_init+0x408>)
 8003fb6:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x5510) ||
 8003fb8:	f649 0206 	movw	r2, #38918	; 0x9806
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d005      	beq.n	8003fcc <lcd_init+0x3a4>
             (lcddev.id == 0x1963))
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <lcd_init+0x408>)
 8003fc2:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x9806) ||
 8003fc4:	f641 1263 	movw	r2, #6499	; 0x1963
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10d      	bne.n	8003fe8 <lcd_init+0x3c0>
    {
    	ExtTiming.AddressSetupTime = 2;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 2;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 8003fd4:	4b17      	ldr	r3, [pc, #92]	; (8004034 <lcd_init+0x40c>)
 8003fd6:	6858      	ldr	r0, [r3, #4]
 8003fd8:	4b16      	ldr	r3, [pc, #88]	; (8004034 <lcd_init+0x40c>)
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	4b15      	ldr	r3, [pc, #84]	; (8004034 <lcd_init+0x40c>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	1d39      	adds	r1, r7, #4
 8003fe2:	f003 f9fb 	bl	80073dc <FSMC_NORSRAM_Extended_Timing_Init>
 8003fe6:	e012      	b.n	800400e <lcd_init+0x3e6>
    }
    else if (lcddev.id == 0x9341)
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <lcd_init+0x408>)
 8003fea:	889b      	ldrh	r3, [r3, #4]
 8003fec:	f249 3241 	movw	r2, #37697	; 0x9341
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d10c      	bne.n	800400e <lcd_init+0x3e6>
    {
    	ExtTiming.AddressSetupTime = 1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 1;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <lcd_init+0x40c>)
 8003ffe:	6858      	ldr	r0, [r3, #4]
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <lcd_init+0x40c>)
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <lcd_init+0x40c>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	1d39      	adds	r1, r7, #4
 800400a:	f003 f9e7 	bl	80073dc <FSMC_NORSRAM_Extended_Timing_Init>
    }

    lcd_display_dir(0); /* Portrait is the default */
 800400e:	2000      	movs	r0, #0
 8004010:	f7ff fd32 	bl	8003a78 <lcd_display_dir>
    LCD_BL(1);          /* Light up the backlight */
 8004014:	2201      	movs	r2, #1
 8004016:	2120      	movs	r1, #32
 8004018:	4807      	ldr	r0, [pc, #28]	; (8004038 <lcd_init+0x410>)
 800401a:	f001 fc15 	bl	8005848 <HAL_GPIO_WritePin>
    lcd_clear(WHITE);
 800401e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004022:	f000 f80b 	bl	800403c <lcd_clear>
}
 8004026:	bf00      	nop
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000090 	.word	0x20000090
 8004034:	200000b4 	.word	0x200000b4
 8004038:	40020400 	.word	0x40020400

0800403c <lcd_clear>:
 * @brief   Screen clearing function
 * @param   color : To clear the screen color
 * @retval  None.
 */
void lcd_clear(uint16_t color)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]

    totalpoint = lcddev.width * lcddev.height;    /* Get the total points */
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <lcd_clear+0x54>)
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <lcd_clear+0x54>)
 8004056:	885b      	ldrh	r3, [r3, #2]
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	60bb      	str	r3, [r7, #8]
    lcd_set_cursor(0x00, 0x0000);   /* Sets the cursor position */
 800405e:	2100      	movs	r1, #0
 8004060:	2000      	movs	r0, #0
 8004062:	f7ff fa63 	bl	800352c <lcd_set_cursor>
    lcd_write_ram_prepare();        /* Start writing GRAM */
 8004066:	f7ff fa51 	bl	800350c <lcd_write_ram_prepare>

    for (index = 0; index < totalpoint; index++)
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e005      	b.n	800407c <lcd_clear+0x40>
    {
        LCD->LCD_RAM = color;
 8004070:	4a08      	ldr	r2, [pc, #32]	; (8004094 <lcd_clear+0x58>)
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3301      	adds	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	d3f5      	bcc.n	8004070 <lcd_clear+0x34>
   }
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000090 	.word	0x20000090
 8004094:	600ffffe 	.word	0x600ffffe

08004098 <lcd_show_char>:
 * @param   mode  : Overlay mode (1); Non-superposition (0);
 * @param   color : The color of the character;
 * @retval  None.
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	461a      	mov	r2, r3
 80040a6:	4623      	mov	r3, r4
 80040a8:	80fb      	strh	r3, [r7, #6]
 80040aa:	4603      	mov	r3, r0
 80040ac:	80bb      	strh	r3, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
 80040b2:	4613      	mov	r3, r2
 80040b4:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 80040b6:	88bb      	ldrh	r3, [r7, #4]
 80040b8:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]

    csize = ((size >> 3) + (((size & 0x7) != 0) ? 1 : 0)) * (size >> 1); /* Get the number of bytes of a font character corresponding to the dot matrix set */
 80040c2:	78bb      	ldrb	r3, [r7, #2]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	78bb      	ldrb	r3, [r7, #2]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	4413      	add	r3, r2
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	78bb      	ldrb	r3, [r7, #2]
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	fb12 f303 	smulbb	r3, r2, r3
 80040e8:	737b      	strb	r3, [r7, #13]
    chr -= ' ';    /* Get the offset value (ASCII fonts start modulo Spaces, so - "is the font for the corresponding character) */
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	3b20      	subs	r3, #32
 80040ee:	70fb      	strb	r3, [r7, #3]

    switch (size)
 80040f0:	78bb      	ldrb	r3, [r7, #2]
 80040f2:	3b0c      	subs	r3, #12
 80040f4:	2b14      	cmp	r3, #20
 80040f6:	f200 809a 	bhi.w	800422e <lcd_show_char+0x196>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <lcd_show_char+0x68>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004155 	.word	0x08004155
 8004104:	0800422f 	.word	0x0800422f
 8004108:	0800422f 	.word	0x0800422f
 800410c:	0800422f 	.word	0x0800422f
 8004110:	08004167 	.word	0x08004167
 8004114:	0800422f 	.word	0x0800422f
 8004118:	0800422f 	.word	0x0800422f
 800411c:	0800422f 	.word	0x0800422f
 8004120:	0800422f 	.word	0x0800422f
 8004124:	0800422f 	.word	0x0800422f
 8004128:	0800422f 	.word	0x0800422f
 800412c:	0800422f 	.word	0x0800422f
 8004130:	08004173 	.word	0x08004173
 8004134:	0800422f 	.word	0x0800422f
 8004138:	0800422f 	.word	0x0800422f
 800413c:	0800422f 	.word	0x0800422f
 8004140:	0800422f 	.word	0x0800422f
 8004144:	0800422f 	.word	0x0800422f
 8004148:	0800422f 	.word	0x0800422f
 800414c:	0800422f 	.word	0x0800422f
 8004150:	08004185 	.word	0x08004185
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[(uint8_t)chr];  /* Call 1206 font */
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	4613      	mov	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4a37      	ldr	r2, [pc, #220]	; (800423c <lcd_show_char+0x1a4>)
 8004160:	4413      	add	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
            break;
 8004164:	e014      	b.n	8004190 <lcd_show_char+0xf8>

        case 16:
            pfont = (uint8_t *)asc2_1608[(uint8_t)chr];  /* Call 1608 font */
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	4a35      	ldr	r2, [pc, #212]	; (8004240 <lcd_show_char+0x1a8>)
 800416c:	4413      	add	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
            break;
 8004170:	e00e      	b.n	8004190 <lcd_show_char+0xf8>

        case 24:
            pfont = (uint8_t *)asc2_2412[(uint8_t)chr];  /* Call 2412 font */
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4a31      	ldr	r2, [pc, #196]	; (8004244 <lcd_show_char+0x1ac>)
 800417e:	4413      	add	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
            break;
 8004182:	e005      	b.n	8004190 <lcd_show_char+0xf8>

        case 32:
            pfont = (uint8_t *)asc2_3216[(uint8_t)chr];  /* Call 3216 font */
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	019b      	lsls	r3, r3, #6
 8004188:	4a2f      	ldr	r2, [pc, #188]	; (8004248 <lcd_show_char+0x1b0>)
 800418a:	4413      	add	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
            break;
 800418e:	bf00      	nop

        default:
            return ;
    }

    y0 = y;
 8004190:	88bb      	ldrh	r3, [r7, #4]
 8004192:	81fb      	strh	r3, [r7, #14]
    for (t = 0; t < csize; t++)
 8004194:	2300      	movs	r3, #0
 8004196:	757b      	strb	r3, [r7, #21]
 8004198:	e044      	b.n	8004224 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* Retrieves the dot matrix data of the character */
 800419a:	7d7b      	ldrb	r3, [r7, #21]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4413      	add	r3, r2
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 80041a4:	2300      	movs	r3, #0
 80041a6:	75bb      	strb	r3, [r7, #22]
 80041a8:	e034      	b.n	8004214 <lcd_show_char+0x17c>
        {
            if ((temp & 0x80) != 0)        /* Valid points, need to be displayed */
 80041aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	da06      	bge.n	80041c0 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* Let me draw the dot, let me show the dot */
 80041b2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80041b4:	88b9      	ldrh	r1, [r7, #4]
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fc0f 	bl	80039dc <lcd_draw_point>
 80041be:	e00a      	b.n	80041d6 <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* Invalid point, not shown */
 80041c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* Drawing the background color is equivalent to not showing the point (note that the background color is controlled by a global variable). */
 80041c8:	4b20      	ldr	r3, [pc, #128]	; (800424c <lcd_show_char+0x1b4>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	88b9      	ldrh	r1, [r7, #4]
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff fc03 	bl	80039dc <lcd_draw_point>
            }

            temp <<= 1; /* Shift in order to get the state of the next bit */
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
            y++;
 80041dc:	88bb      	ldrh	r3, [r7, #4]
 80041de:	3301      	adds	r3, #1
 80041e0:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* Hyper region */
 80041e2:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <lcd_show_char+0x1b8>)
 80041e4:	885b      	ldrh	r3, [r3, #2]
 80041e6:	88ba      	ldrh	r2, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d222      	bcs.n	8004232 <lcd_show_char+0x19a>

            if ((y - y0) == size)
 80041ec:	88ba      	ldrh	r2, [r7, #4]
 80041ee:	89fb      	ldrh	r3, [r7, #14]
 80041f0:	1ad2      	subs	r2, r2, r3
 80041f2:	78bb      	ldrb	r3, [r7, #2]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d10a      	bne.n	800420e <lcd_show_char+0x176>
            {
                y = y0;          /* y coordinate reset */
 80041f8:	89fb      	ldrh	r3, [r7, #14]
 80041fa:	80bb      	strh	r3, [r7, #4]
                x++;             /* The x-coordinate is increasing */
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	3301      	adds	r3, #1
 8004200:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <lcd_show_char+0x1b8>)
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	429a      	cmp	r2, r3
 800420a:	d307      	bcc.n	800421c <lcd_show_char+0x184>
                {
                    return;     /* The x-coordinate hyperregion */
 800420c:	e012      	b.n	8004234 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 800420e:	7dbb      	ldrb	r3, [r7, #22]
 8004210:	3301      	adds	r3, #1
 8004212:	75bb      	strb	r3, [r7, #22]
 8004214:	7dbb      	ldrb	r3, [r7, #22]
 8004216:	2b07      	cmp	r3, #7
 8004218:	d9c7      	bls.n	80041aa <lcd_show_char+0x112>
 800421a:	e000      	b.n	800421e <lcd_show_char+0x186>
                }

                break;
 800421c:	bf00      	nop
    for (t = 0; t < csize; t++)
 800421e:	7d7b      	ldrb	r3, [r7, #21]
 8004220:	3301      	adds	r3, #1
 8004222:	757b      	strb	r3, [r7, #21]
 8004224:	7d7a      	ldrb	r2, [r7, #21]
 8004226:	7b7b      	ldrb	r3, [r7, #13]
 8004228:	429a      	cmp	r2, r3
 800422a:	d3b6      	bcc.n	800419a <lcd_show_char+0x102>
 800422c:	e002      	b.n	8004234 <lcd_show_char+0x19c>
            return ;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* Hyper region */
 8004232:	bf00      	nop
            }
        }
    }
}
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	bd90      	pop	{r4, r7, pc}
 800423a:	bf00      	nop
 800423c:	08007f04 	.word	0x08007f04
 8004240:	08008378 	.word	0x08008378
 8004244:	08008968 	.word	0x08008968
 8004248:	080096c4 	.word	0x080096c4
 800424c:	20000004 	.word	0x20000004
 8004250:	20000090 	.word	0x20000090

08004254 <lcd_show_string>:
 * @param   p            : The first address of the string
 * @param   color        : The color of the string;
 * @retval  None
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b087      	sub	sp, #28
 8004258:	af02      	add	r7, sp, #8
 800425a:	4604      	mov	r4, r0
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	4623      	mov	r3, r4
 8004264:	80fb      	strh	r3, [r7, #6]
 8004266:	4603      	mov	r3, r0
 8004268:	80bb      	strh	r3, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	807b      	strh	r3, [r7, #2]
 800426e:	4613      	mov	r3, r2
 8004270:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	73fb      	strb	r3, [r7, #15]
    width += x;
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	4413      	add	r3, r2
 800427c:	807b      	strh	r3, [r7, #2]
    height += y;
 800427e:	883a      	ldrh	r2, [r7, #0]
 8004280:	88bb      	ldrh	r3, [r7, #4]
 8004282:	4413      	add	r3, r2
 8004284:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 8004286:	e027      	b.n	80042d8 <lcd_show_string+0x84>
    {
        if (x >= width)
 8004288:	88fa      	ldrh	r2, [r7, #6]
 800428a:	887b      	ldrh	r3, [r7, #2]
 800428c:	429a      	cmp	r2, r3
 800428e:	d307      	bcc.n	80042a0 <lcd_show_string+0x4c>
        {
            x = x0;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	80fb      	strh	r3, [r7, #6]
            y += size;
 8004294:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004298:	b29a      	uxth	r2, r3
 800429a:	88bb      	ldrh	r3, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* quit */
 80042a0:	88ba      	ldrh	r2, [r7, #4]
 80042a2:	883b      	ldrh	r3, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d220      	bcs.n	80042ea <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	f897 4020 	ldrb.w	r4, [r7, #32]
 80042b0:	88b9      	ldrh	r1, [r7, #4]
 80042b2:	88f8      	ldrh	r0, [r7, #6]
 80042b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	2300      	movs	r3, #0
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	4623      	mov	r3, r4
 80042be:	f7ff feeb 	bl	8004098 <lcd_show_char>
        x += size / 2;
 80042c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	4413      	add	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
        p++;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	3301      	adds	r3, #1
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b7e      	cmp	r3, #126	; 0x7e
 80042de:	d805      	bhi.n	80042ec <lcd_show_string+0x98>
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b1f      	cmp	r3, #31
 80042e6:	d8cf      	bhi.n	8004288 <lcd_show_string+0x34>
    }
}
 80042e8:	e000      	b.n	80042ec <lcd_show_string+0x98>
        if (y >= height)break;  /* quit */
 80042ea:	bf00      	nop
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd90      	pop	{r4, r7, pc}

080042f4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80042fa:	463b      	mov	r3, r7
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <MX_DAC_Init+0x54>)
 8004304:	4a11      	ldr	r2, [pc, #68]	; (800434c <MX_DAC_Init+0x58>)
 8004306:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8004308:	480f      	ldr	r0, [pc, #60]	; (8004348 <MX_DAC_Init+0x54>)
 800430a:	f000 ff5a 	bl	80051c2 <HAL_DAC_Init>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8004314:	f000 fb80 	bl	8004a18 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004318:	2300      	movs	r3, #0
 800431a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800431c:	2302      	movs	r3, #2
 800431e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004320:	463b      	mov	r3, r7
 8004322:	2200      	movs	r2, #0
 8004324:	4619      	mov	r1, r3
 8004326:	4808      	ldr	r0, [pc, #32]	; (8004348 <MX_DAC_Init+0x54>)
 8004328:	f000 ffee 	bl	8005308 <HAL_DAC_ConfigChannel>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8004332:	f000 fb71 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);  /* Open DAC channel 1 */
 8004336:	2100      	movs	r1, #0
 8004338:	4803      	ldr	r0, [pc, #12]	; (8004348 <MX_DAC_Init+0x54>)
 800433a:	f000 ff64 	bl	8005206 <HAL_DAC_Start>
  /* USER CODE END DAC_Init 2 */

}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200000a0 	.word	0x200000a0
 800434c:	40007400 	.word	0x40007400

08004350 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004358:	f107 0314 	add.w	r3, r7, #20
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a17      	ldr	r2, [pc, #92]	; (80043cc <HAL_DAC_MspInit+0x7c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d127      	bne.n	80043c2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <HAL_DAC_MspInit+0x80>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <HAL_DAC_MspInit+0x80>)
 800437c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004380:	6413      	str	r3, [r2, #64]	; 0x40
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_DAC_MspInit+0x80>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <HAL_DAC_MspInit+0x80>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <HAL_DAC_MspInit+0x80>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6313      	str	r3, [r2, #48]	; 0x30
 800439e:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <HAL_DAC_MspInit+0x80>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80043aa:	2310      	movs	r3, #16
 80043ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043ae:	2303      	movs	r3, #3
 80043b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b6:	f107 0314 	add.w	r3, r7, #20
 80043ba:	4619      	mov	r1, r3
 80043bc:	4805      	ldr	r0, [pc, #20]	; (80043d4 <HAL_DAC_MspInit+0x84>)
 80043be:	f001 f88f 	bl	80054e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80043c2:	bf00      	nop
 80043c4:	3728      	adds	r7, #40	; 0x28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40007400 	.word	0x40007400
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40020000 	.word	0x40020000

080043d8 <dac_triangular_wave>:
 * @param   samples   : The number of periodic samples for a triangular wave
 * @param   number    : Outputs the number of triangular waves
 * @retval  None
 */
void dac_triangular_wave(uint16_t max_value, uint16_t interval, uint16_t samples, uint16_t number)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4604      	mov	r4, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4623      	mov	r3, r4
 80043e8:	80fb      	strh	r3, [r7, #6]
 80043ea:	4603      	mov	r3, r0
 80043ec:	80bb      	strh	r3, [r7, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	807b      	strh	r3, [r7, #2]
 80043f2:	4613      	mov	r3, r2
 80043f4:	803b      	strh	r3, [r7, #0]
    uint16_t curval;
    uint16_t sample_index;
    uint16_t wave_index;

    /* Make sure that the number of sampling points is even */
    samples = ((samples + 1) >> 1) << 1;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	3301      	adds	r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	807b      	strh	r3, [r7, #2]
    /* The step value is calculated for each sampling point */
    incval = max_value / (samples >> 1);
 8004402:	887b      	ldrh	r3, [r7, #2]
 8004404:	085b      	lsrs	r3, r3, #1
 8004406:	b29b      	uxth	r3, r3
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	813b      	strh	r3, [r7, #8]
    if (incval == 0)
 8004410:	893b      	ldrh	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d046      	beq.n	80044a4 <dac_triangular_wave+0xcc>
    {
        return;
    }

    for (wave_index=0; wave_index<number; wave_index++)
 8004416:	2300      	movs	r3, #0
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	e03e      	b.n	800449a <dac_triangular_wave+0xc2>
    {
        curval = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	81fb      	strh	r3, [r7, #14]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, curval);
 8004420:	89fb      	ldrh	r3, [r7, #14]
 8004422:	2200      	movs	r2, #0
 8004424:	2100      	movs	r1, #0
 8004426:	4821      	ldr	r0, [pc, #132]	; (80044ac <dac_triangular_wave+0xd4>)
 8004428:	f000 ff44 	bl	80052b4 <HAL_DAC_SetValue>

        /* Output rising edge */
        for (sample_index=0; sample_index<(samples >> 1); sample_index++)
 800442c:	2300      	movs	r3, #0
 800442e:	81bb      	strh	r3, [r7, #12]
 8004430:	e010      	b.n	8004454 <dac_triangular_wave+0x7c>
        {
            curval += incval;
 8004432:	89fa      	ldrh	r2, [r7, #14]
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	4413      	add	r3, r2
 8004438:	81fb      	strh	r3, [r7, #14]
            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, curval);
 800443a:	89fb      	ldrh	r3, [r7, #14]
 800443c:	2200      	movs	r2, #0
 800443e:	2100      	movs	r1, #0
 8004440:	481a      	ldr	r0, [pc, #104]	; (80044ac <dac_triangular_wave+0xd4>)
 8004442:	f000 ff37 	bl	80052b4 <HAL_DAC_SetValue>
            delay_us(interval);
 8004446:	88bb      	ldrh	r3, [r7, #4]
 8004448:	4618      	mov	r0, r3
 800444a:	f7fc fb51 	bl	8000af0 <delay_us>
        for (sample_index=0; sample_index<(samples >> 1); sample_index++)
 800444e:	89bb      	ldrh	r3, [r7, #12]
 8004450:	3301      	adds	r3, #1
 8004452:	81bb      	strh	r3, [r7, #12]
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	b29b      	uxth	r3, r3
 800445a:	89ba      	ldrh	r2, [r7, #12]
 800445c:	429a      	cmp	r2, r3
 800445e:	d3e8      	bcc.n	8004432 <dac_triangular_wave+0x5a>
        }

        /* Output falling edge */
        for (sample_index=0; sample_index<(samples >> 1); sample_index++)
 8004460:	2300      	movs	r3, #0
 8004462:	81bb      	strh	r3, [r7, #12]
 8004464:	e010      	b.n	8004488 <dac_triangular_wave+0xb0>
        {
            curval -= incval;
 8004466:	89fa      	ldrh	r2, [r7, #14]
 8004468:	893b      	ldrh	r3, [r7, #8]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	81fb      	strh	r3, [r7, #14]
            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, curval);
 800446e:	89fb      	ldrh	r3, [r7, #14]
 8004470:	2200      	movs	r2, #0
 8004472:	2100      	movs	r1, #0
 8004474:	480d      	ldr	r0, [pc, #52]	; (80044ac <dac_triangular_wave+0xd4>)
 8004476:	f000 ff1d 	bl	80052b4 <HAL_DAC_SetValue>
            delay_us(interval);
 800447a:	88bb      	ldrh	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc fb37 	bl	8000af0 <delay_us>
        for (sample_index=0; sample_index<(samples >> 1); sample_index++)
 8004482:	89bb      	ldrh	r3, [r7, #12]
 8004484:	3301      	adds	r3, #1
 8004486:	81bb      	strh	r3, [r7, #12]
 8004488:	887b      	ldrh	r3, [r7, #2]
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	b29b      	uxth	r3, r3
 800448e:	89ba      	ldrh	r2, [r7, #12]
 8004490:	429a      	cmp	r2, r3
 8004492:	d3e8      	bcc.n	8004466 <dac_triangular_wave+0x8e>
    for (wave_index=0; wave_index<number; wave_index++)
 8004494:	897b      	ldrh	r3, [r7, #10]
 8004496:	3301      	adds	r3, #1
 8004498:	817b      	strh	r3, [r7, #10]
 800449a:	897a      	ldrh	r2, [r7, #10]
 800449c:	883b      	ldrh	r3, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d3bc      	bcc.n	800441c <dac_triangular_wave+0x44>
 80044a2:	e000      	b.n	80044a6 <dac_triangular_wave+0xce>
        return;
 80044a4:	bf00      	nop
        }
    }
}
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd90      	pop	{r4, r7, pc}
 80044ac:	200000a0 	.word	0x200000a0

080044b0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08e      	sub	sp, #56	; 0x38
 80044b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80044b6:	f107 031c 	add.w	r3, r7, #28
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	609a      	str	r2, [r3, #8]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	611a      	str	r2, [r3, #16]
 80044c6:	615a      	str	r2, [r3, #20]
 80044c8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80044ca:	463b      	mov	r3, r7
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	611a      	str	r2, [r3, #16]
 80044d8:	615a      	str	r2, [r3, #20]
 80044da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80044dc:	4b2f      	ldr	r3, [pc, #188]	; (800459c <MX_FSMC_Init+0xec>)
 80044de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80044e2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80044e4:	4b2d      	ldr	r3, [pc, #180]	; (800459c <MX_FSMC_Init+0xec>)
 80044e6:	4a2e      	ldr	r2, [pc, #184]	; (80045a0 <MX_FSMC_Init+0xf0>)
 80044e8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80044ea:	4b2c      	ldr	r3, [pc, #176]	; (800459c <MX_FSMC_Init+0xec>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80044f0:	4b2a      	ldr	r3, [pc, #168]	; (800459c <MX_FSMC_Init+0xec>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80044f6:	4b29      	ldr	r3, [pc, #164]	; (800459c <MX_FSMC_Init+0xec>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <MX_FSMC_Init+0xec>)
 80044fe:	2210      	movs	r2, #16
 8004500:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004502:	4b26      	ldr	r3, [pc, #152]	; (800459c <MX_FSMC_Init+0xec>)
 8004504:	2200      	movs	r2, #0
 8004506:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004508:	4b24      	ldr	r3, [pc, #144]	; (800459c <MX_FSMC_Init+0xec>)
 800450a:	2200      	movs	r2, #0
 800450c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <MX_FSMC_Init+0xec>)
 8004510:	2200      	movs	r2, #0
 8004512:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004514:	4b21      	ldr	r3, [pc, #132]	; (800459c <MX_FSMC_Init+0xec>)
 8004516:	2200      	movs	r2, #0
 8004518:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <MX_FSMC_Init+0xec>)
 800451c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004520:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <MX_FSMC_Init+0xec>)
 8004524:	2200      	movs	r2, #0
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <MX_FSMC_Init+0xec>)
 800452a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <MX_FSMC_Init+0xec>)
 8004532:	2200      	movs	r2, #0
 8004534:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004536:	4b19      	ldr	r3, [pc, #100]	; (800459c <MX_FSMC_Init+0xec>)
 8004538:	2200      	movs	r2, #0
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800453c:	4b17      	ldr	r3, [pc, #92]	; (800459c <MX_FSMC_Init+0xec>)
 800453e:	2200      	movs	r2, #0
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004542:	230f      	movs	r3, #15
 8004544:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004546:	230f      	movs	r3, #15
 8004548:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800454a:	233c      	movs	r3, #60	; 0x3c
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004552:	2310      	movs	r3, #16
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8004556:	2311      	movs	r3, #17
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800455a:	2300      	movs	r3, #0
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 800455e:	2309      	movs	r3, #9
 8004560:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8004562:	230f      	movs	r3, #15
 8004564:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8004566:	2309      	movs	r3, #9
 8004568:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 800456a:	230f      	movs	r3, #15
 800456c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800456e:	2310      	movs	r3, #16
 8004570:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004572:	2311      	movs	r3, #17
 8004574:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800457a:	463a      	mov	r2, r7
 800457c:	f107 031c 	add.w	r3, r7, #28
 8004580:	4619      	mov	r1, r3
 8004582:	4806      	ldr	r0, [pc, #24]	; (800459c <MX_FSMC_Init+0xec>)
 8004584:	f001 fdec 	bl	8006160 <HAL_SRAM_Init>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800458e:	f000 fa43 	bl	8004a18 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004592:	bf00      	nop
 8004594:	3738      	adds	r7, #56	; 0x38
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200000b4 	.word	0x200000b4
 80045a0:	a0000104 	.word	0xa0000104

080045a4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80045b8:	4b1c      	ldr	r3, [pc, #112]	; (800462c <HAL_FSMC_MspInit+0x88>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d131      	bne.n	8004624 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <HAL_FSMC_MspInit+0x88>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_FSMC_MspInit+0x8c>)
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <HAL_FSMC_MspInit+0x8c>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6393      	str	r3, [r2, #56]	; 0x38
 80045d6:	4b16      	ldr	r3, [pc, #88]	; (8004630 <HAL_FSMC_MspInit+0x8c>)
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80045e2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80045e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e8:	2302      	movs	r3, #2
 80045ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f0:	2303      	movs	r3, #3
 80045f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80045f4:	230c      	movs	r3, #12
 80045f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	480d      	ldr	r0, [pc, #52]	; (8004634 <HAL_FSMC_MspInit+0x90>)
 80045fe:	f000 ff6f 	bl	80054e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004602:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8004606:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004608:	2302      	movs	r3, #2
 800460a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004610:	2303      	movs	r3, #3
 8004612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004614:	230c      	movs	r3, #12
 8004616:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	4619      	mov	r1, r3
 800461c:	4806      	ldr	r0, [pc, #24]	; (8004638 <HAL_FSMC_MspInit+0x94>)
 800461e:	f000 ff5f 	bl	80054e0 <HAL_GPIO_Init>
 8004622:	e000      	b.n	8004626 <HAL_FSMC_MspInit+0x82>
    return;
 8004624:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000104 	.word	0x20000104
 8004630:	40023800 	.word	0x40023800
 8004634:	40021000 	.word	0x40021000
 8004638:	40020c00 	.word	0x40020c00

0800463c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004644:	f7ff ffae 	bl	80045a4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08c      	sub	sp, #48	; 0x30
 8004654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004656:	f107 031c 	add.w	r3, r7, #28
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	605a      	str	r2, [r3, #4]
 8004660:	609a      	str	r2, [r3, #8]
 8004662:	60da      	str	r2, [r3, #12]
 8004664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	4b44      	ldr	r3, [pc, #272]	; (800477c <MX_GPIO_Init+0x12c>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	4a43      	ldr	r2, [pc, #268]	; (800477c <MX_GPIO_Init+0x12c>)
 8004670:	f043 0310 	orr.w	r3, r3, #16
 8004674:	6313      	str	r3, [r2, #48]	; 0x30
 8004676:	4b41      	ldr	r3, [pc, #260]	; (800477c <MX_GPIO_Init+0x12c>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	4b3d      	ldr	r3, [pc, #244]	; (800477c <MX_GPIO_Init+0x12c>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	4a3c      	ldr	r2, [pc, #240]	; (800477c <MX_GPIO_Init+0x12c>)
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	6313      	str	r3, [r2, #48]	; 0x30
 8004692:	4b3a      	ldr	r3, [pc, #232]	; (800477c <MX_GPIO_Init+0x12c>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	4b36      	ldr	r3, [pc, #216]	; (800477c <MX_GPIO_Init+0x12c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a35      	ldr	r2, [pc, #212]	; (800477c <MX_GPIO_Init+0x12c>)
 80046a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ac:	6313      	str	r3, [r2, #48]	; 0x30
 80046ae:	4b33      	ldr	r3, [pc, #204]	; (800477c <MX_GPIO_Init+0x12c>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b2f      	ldr	r3, [pc, #188]	; (800477c <MX_GPIO_Init+0x12c>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	4a2e      	ldr	r2, [pc, #184]	; (800477c <MX_GPIO_Init+0x12c>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <MX_GPIO_Init+0x12c>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	4b28      	ldr	r3, [pc, #160]	; (800477c <MX_GPIO_Init+0x12c>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	4a27      	ldr	r2, [pc, #156]	; (800477c <MX_GPIO_Init+0x12c>)
 80046e0:	f043 0308 	orr.w	r3, r3, #8
 80046e4:	6313      	str	r3, [r2, #48]	; 0x30
 80046e6:	4b25      	ldr	r3, [pc, #148]	; (800477c <MX_GPIO_Init+0x12c>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	4b21      	ldr	r3, [pc, #132]	; (800477c <MX_GPIO_Init+0x12c>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	4a20      	ldr	r2, [pc, #128]	; (800477c <MX_GPIO_Init+0x12c>)
 80046fc:	f043 0302 	orr.w	r3, r3, #2
 8004700:	6313      	str	r3, [r2, #48]	; 0x30
 8004702:	4b1e      	ldr	r3, [pc, #120]	; (800477c <MX_GPIO_Init+0x12c>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 800470e:	2201      	movs	r2, #1
 8004710:	2160      	movs	r1, #96	; 0x60
 8004712:	481b      	ldr	r0, [pc, #108]	; (8004780 <MX_GPIO_Init+0x130>)
 8004714:	f001 f898 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8004718:	2201      	movs	r2, #1
 800471a:	2120      	movs	r1, #32
 800471c:	4819      	ldr	r0, [pc, #100]	; (8004784 <MX_GPIO_Init+0x134>)
 800471e:	f001 f893 	bl	8005848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8004722:	2360      	movs	r3, #96	; 0x60
 8004724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004726:	2301      	movs	r3, #1
 8004728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800472a:	2301      	movs	r3, #1
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800472e:	2302      	movs	r3, #2
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004732:	f107 031c 	add.w	r3, r7, #28
 8004736:	4619      	mov	r1, r3
 8004738:	4811      	ldr	r0, [pc, #68]	; (8004780 <MX_GPIO_Init+0x130>)
 800473a:	f000 fed1 	bl	80054e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WK_UP_Pin|KEY0_Pin;
 800473e:	f248 0301 	movw	r3, #32769	; 0x8001
 8004742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004748:	2302      	movs	r3, #2
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800474c:	f107 031c 	add.w	r3, r7, #28
 8004750:	4619      	mov	r1, r3
 8004752:	480d      	ldr	r0, [pc, #52]	; (8004788 <MX_GPIO_Init+0x138>)
 8004754:	f000 fec4 	bl	80054e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8004758:	2320      	movs	r3, #32
 800475a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800475c:	2301      	movs	r3, #1
 800475e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004760:	2301      	movs	r3, #1
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004764:	2302      	movs	r3, #2
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8004768:	f107 031c 	add.w	r3, r7, #28
 800476c:	4619      	mov	r1, r3
 800476e:	4805      	ldr	r0, [pc, #20]	; (8004784 <MX_GPIO_Init+0x134>)
 8004770:	f000 feb6 	bl	80054e0 <HAL_GPIO_Init>

}
 8004774:	bf00      	nop
 8004776:	3730      	adds	r7, #48	; 0x30
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40023800 	.word	0x40023800
 8004780:	40021000 	.word	0x40021000
 8004784:	40020400 	.word	0x40020400
 8004788:	40020000 	.word	0x40020000

0800478c <stm32f407vg_show_mesg>:
 * @brief   Displays information about the experiment
 * @param   None
 * @retval  None
 */
void stm32f407vg_show_mesg(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
	/* The serial port outputs the experimental information */
	printf("\n");
 8004790:	200a      	movs	r0, #10
 8004792:	f002 ff1d 	bl	80075d0 <putchar>
	printf("********************************\r\n");
 8004796:	480a      	ldr	r0, [pc, #40]	; (80047c0 <stm32f407vg_show_mesg+0x34>)
 8004798:	f002 ff76 	bl	8007688 <puts>
	printf("STM32F407\r\n");
 800479c:	4809      	ldr	r0, [pc, #36]	; (80047c4 <stm32f407vg_show_mesg+0x38>)
 800479e:	f002 ff73 	bl	8007688 <puts>
	printf("DAC Triangular WAVE Test\r\n");
 80047a2:	4809      	ldr	r0, [pc, #36]	; (80047c8 <stm32f407vg_show_mesg+0x3c>)
 80047a4:	f002 ff70 	bl	8007688 <puts>
	printf("ATOM@ALIENTEK\r\n");
 80047a8:	4808      	ldr	r0, [pc, #32]	; (80047cc <stm32f407vg_show_mesg+0x40>)
 80047aa:	f002 ff6d 	bl	8007688 <puts>
	printf("********************************\r\n");
 80047ae:	4804      	ldr	r0, [pc, #16]	; (80047c0 <stm32f407vg_show_mesg+0x34>)
 80047b0:	f002 ff6a 	bl	8007688 <puts>
	printf("\r\n");
 80047b4:	4806      	ldr	r0, [pc, #24]	; (80047d0 <stm32f407vg_show_mesg+0x44>)
 80047b6:	f002 ff67 	bl	8007688 <puts>
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	08007e34 	.word	0x08007e34
 80047c4:	08007e58 	.word	0x08007e58
 80047c8:	08007e64 	.word	0x08007e64
 80047cc:	08007e80 	.word	0x08007e80
 80047d0:	08007e90 	.word	0x08007e90

080047d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint8_t key;
  uint8_t t = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047de:	f000 fb49 	bl	8004e74 <HAL_Init>

  /* USER CODE BEGIN Init */
  delay_init(84);
 80047e2:	2054      	movs	r0, #84	; 0x54
 80047e4:	f7fc f974 	bl	8000ad0 <delay_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80047e8:	f000 f8ac 	bl	8004944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047ec:	f7ff ff30 	bl	8004650 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80047f0:	f000 fa3c 	bl	8004c6c <MX_USART1_UART_Init>
  MX_FSMC_Init();
 80047f4:	f7ff fe5c 	bl	80044b0 <MX_FSMC_Init>
  MX_DAC_Init();
 80047f8:	f7ff fd7c 	bl	80042f4 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();                                         /* Initialize LCD */
 80047fc:	f7ff fa14 	bl	8003c28 <lcd_init>
  stm32f407vg_show_mesg();
 8004800:	f7ff ffc4 	bl	800478c <stm32f407vg_show_mesg>
  lcd_show_string(30, 50, 200, 16, 16, "STM32", RED);
 8004804:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004808:	9302      	str	r3, [sp, #8]
 800480a:	4b46      	ldr	r3, [pc, #280]	; (8004924 <main+0x150>)
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	2310      	movs	r3, #16
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2310      	movs	r3, #16
 8004814:	22c8      	movs	r2, #200	; 0xc8
 8004816:	2132      	movs	r1, #50	; 0x32
 8004818:	201e      	movs	r0, #30
 800481a:	f7ff fd1b 	bl	8004254 <lcd_show_string>
  lcd_show_string(30, 70, 200, 16, 16, "DAC Triangular Wave TEST", RED);
 800481e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004822:	9302      	str	r3, [sp, #8]
 8004824:	4b40      	ldr	r3, [pc, #256]	; (8004928 <main+0x154>)
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	2310      	movs	r3, #16
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	2310      	movs	r3, #16
 800482e:	22c8      	movs	r2, #200	; 0xc8
 8004830:	2146      	movs	r1, #70	; 0x46
 8004832:	201e      	movs	r0, #30
 8004834:	f7ff fd0e 	bl	8004254 <lcd_show_string>
  lcd_show_string(30, 90, 200, 16, 16, "ATOM@ALIENTEK", RED);
 8004838:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800483c:	9302      	str	r3, [sp, #8]
 800483e:	4b3b      	ldr	r3, [pc, #236]	; (800492c <main+0x158>)
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	2310      	movs	r3, #16
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	2310      	movs	r3, #16
 8004848:	22c8      	movs	r2, #200	; 0xc8
 800484a:	215a      	movs	r1, #90	; 0x5a
 800484c:	201e      	movs	r0, #30
 800484e:	f7ff fd01 	bl	8004254 <lcd_show_string>

  lcd_show_string(30, 110, 200, 16, 16, "WK_UP:Wave1 KEY0:Wave2", RED);
 8004852:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004856:	9302      	str	r3, [sp, #8]
 8004858:	4b35      	ldr	r3, [pc, #212]	; (8004930 <main+0x15c>)
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	2310      	movs	r3, #16
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2310      	movs	r3, #16
 8004862:	22c8      	movs	r2, #200	; 0xc8
 8004864:	216e      	movs	r1, #110	; 0x6e
 8004866:	201e      	movs	r0, #30
 8004868:	f7ff fcf4 	bl	8004254 <lcd_show_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  key = key_scan(0);                            /* Scan key */
 800486c:	2000      	movs	r0, #0
 800486e:	f7fc f97d 	bl	8000b6c <key_scan>
 8004872:	4603      	mov	r3, r0
 8004874:	71bb      	strb	r3, [r7, #6]

	  if (key == WKUP_PRES)                         /* High sampling rate */
 8004876:	79bb      	ldrb	r3, [r7, #6]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d120      	bne.n	80048be <main+0xea>
	  {
	  	  lcd_show_string(30, 130, 200, 16, 16, "DAC Wave1", BLUE);
 800487c:	231f      	movs	r3, #31
 800487e:	9302      	str	r3, [sp, #8]
 8004880:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <main+0x160>)
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	2310      	movs	r3, #16
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2310      	movs	r3, #16
 800488a:	22c8      	movs	r2, #200	; 0xc8
 800488c:	2182      	movs	r1, #130	; 0x82
 800488e:	201e      	movs	r0, #30
 8004890:	f7ff fce0 	bl	8004254 <lcd_show_string>
	  	  dac_triangular_wave(4095, 5, 2000, 100);  /* Amplitude 4095, sampling point interval 5us,2000 sampling points,100 waveforms */
 8004894:	2364      	movs	r3, #100	; 0x64
 8004896:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800489a:	2105      	movs	r1, #5
 800489c:	f640 70ff 	movw	r0, #4095	; 0xfff
 80048a0:	f7ff fd9a 	bl	80043d8 <dac_triangular_wave>
	  	  lcd_show_string(30, 130, 200, 16, 16, "DAC None ", BLUE);
 80048a4:	231f      	movs	r3, #31
 80048a6:	9302      	str	r3, [sp, #8]
 80048a8:	4b23      	ldr	r3, [pc, #140]	; (8004938 <main+0x164>)
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	2310      	movs	r3, #16
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2310      	movs	r3, #16
 80048b2:	22c8      	movs	r2, #200	; 0xc8
 80048b4:	2182      	movs	r1, #130	; 0x82
 80048b6:	201e      	movs	r0, #30
 80048b8:	f7ff fccc 	bl	8004254 <lcd_show_string>
 80048bc:	e022      	b.n	8004904 <main+0x130>
	  }
	  else if (key == KEY0_PRES) /* Low sampling rate */
 80048be:	79bb      	ldrb	r3, [r7, #6]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d11f      	bne.n	8004904 <main+0x130>
	  {
	  	  lcd_show_string(30, 130, 200, 16, 16, "DAC Wave2", BLUE);
 80048c4:	231f      	movs	r3, #31
 80048c6:	9302      	str	r3, [sp, #8]
 80048c8:	4b1c      	ldr	r3, [pc, #112]	; (800493c <main+0x168>)
 80048ca:	9301      	str	r3, [sp, #4]
 80048cc:	2310      	movs	r3, #16
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	2310      	movs	r3, #16
 80048d2:	22c8      	movs	r2, #200	; 0xc8
 80048d4:	2182      	movs	r1, #130	; 0x82
 80048d6:	201e      	movs	r0, #30
 80048d8:	f7ff fcbc 	bl	8004254 <lcd_show_string>
	  	  dac_triangular_wave(4095, 500, 20, 100);  /* Amplitude 4095, sampling point interval 500us,20 sampling points,100 waveforms */
 80048dc:	2364      	movs	r3, #100	; 0x64
 80048de:	2214      	movs	r2, #20
 80048e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80048e4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80048e8:	f7ff fd76 	bl	80043d8 <dac_triangular_wave>
	  	  lcd_show_string(30, 130, 200, 16, 16, "DAC None ", BLUE);
 80048ec:	231f      	movs	r3, #31
 80048ee:	9302      	str	r3, [sp, #8]
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <main+0x164>)
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	2310      	movs	r3, #16
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2310      	movs	r3, #16
 80048fa:	22c8      	movs	r2, #200	; 0xc8
 80048fc:	2182      	movs	r1, #130	; 0x82
 80048fe:	201e      	movs	r0, #30
 8004900:	f7ff fca8 	bl	8004254 <lcd_show_string>
	  }

	  if (++t == 20)
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	3301      	adds	r3, #1
 8004908:	71fb      	strb	r3, [r7, #7]
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	2b14      	cmp	r3, #20
 800490e:	d105      	bne.n	800491c <main+0x148>
	  {
	     t = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	71fb      	strb	r3, [r7, #7]
	     LED0_TOGGLE();  /* flashing LED0 indicates that the system is running */
 8004914:	2120      	movs	r1, #32
 8004916:	480a      	ldr	r0, [pc, #40]	; (8004940 <main+0x16c>)
 8004918:	f000 ffaf 	bl	800587a <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(10);     /* delay 10ms */
 800491c:	200a      	movs	r0, #10
 800491e:	f000 fb1b 	bl	8004f58 <HAL_Delay>
	  key = key_scan(0);                            /* Scan key */
 8004922:	e7a3      	b.n	800486c <main+0x98>
 8004924:	08007e94 	.word	0x08007e94
 8004928:	08007e9c 	.word	0x08007e9c
 800492c:	08007eb8 	.word	0x08007eb8
 8004930:	08007ec8 	.word	0x08007ec8
 8004934:	08007ee0 	.word	0x08007ee0
 8004938:	08007eec 	.word	0x08007eec
 800493c:	08007ef8 	.word	0x08007ef8
 8004940:	40021000 	.word	0x40021000

08004944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b094      	sub	sp, #80	; 0x50
 8004948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800494a:	f107 0320 	add.w	r3, r7, #32
 800494e:	2230      	movs	r2, #48	; 0x30
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f002 ff78 	bl	8007848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004958:	f107 030c 	add.w	r3, r7, #12
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	2300      	movs	r3, #0
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <SystemClock_Config+0xcc>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <SystemClock_Config+0xcc>)
 8004972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004976:	6413      	str	r3, [r2, #64]	; 0x40
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <SystemClock_Config+0xcc>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004984:	2300      	movs	r3, #0
 8004986:	607b      	str	r3, [r7, #4]
 8004988:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <SystemClock_Config+0xd0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <SystemClock_Config+0xd0>)
 800498e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <SystemClock_Config+0xd0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80049a0:	2302      	movs	r3, #2
 80049a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049a4:	2301      	movs	r3, #1
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049a8:	2310      	movs	r3, #16
 80049aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049ac:	2302      	movs	r3, #2
 80049ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80049b0:	2300      	movs	r3, #0
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80049b4:	2308      	movs	r3, #8
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80049b8:	23a8      	movs	r3, #168	; 0xa8
 80049ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049bc:	2302      	movs	r3, #2
 80049be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80049c0:	2304      	movs	r3, #4
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049c4:	f107 0320 	add.w	r3, r7, #32
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 ff71 	bl	80058b0 <HAL_RCC_OscConfig>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80049d4:	f000 f820 	bl	8004a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049d8:	230f      	movs	r3, #15
 80049da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049dc:	2302      	movs	r3, #2
 80049de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80049e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80049e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80049ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80049f0:	f107 030c 	add.w	r3, r7, #12
 80049f4:	2105      	movs	r1, #5
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 f9d2 	bl	8005da0 <HAL_RCC_ClockConfig>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004a02:	f000 f809 	bl	8004a18 <Error_Handler>
  }
}
 8004a06:	bf00      	nop
 8004a08:	3750      	adds	r7, #80	; 0x50
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40007000 	.word	0x40007000

08004a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a1c:	b672      	cpsid	i
}
 8004a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a20:	e7fe      	b.n	8004a20 <Error_Handler+0x8>
	...

08004a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_MspInit+0x4c>)
 8004a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a32:	4a0f      	ldr	r2, [pc, #60]	; (8004a70 <HAL_MspInit+0x4c>)
 8004a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a38:	6453      	str	r3, [r2, #68]	; 0x44
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <HAL_MspInit+0x4c>)
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <HAL_MspInit+0x4c>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <HAL_MspInit+0x4c>)
 8004a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a54:	6413      	str	r3, [r2, #64]	; 0x40
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <HAL_MspInit+0x4c>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8004a62:	2005      	movs	r0, #5
 8004a64:	f000 fb6c 	bl	8005140 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a68:	bf00      	nop
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800

08004a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a78:	e7fe      	b.n	8004a78 <NMI_Handler+0x4>

08004a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a7e:	e7fe      	b.n	8004a7e <HardFault_Handler+0x4>

08004a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a84:	e7fe      	b.n	8004a84 <MemManage_Handler+0x4>

08004a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a8a:	e7fe      	b.n	8004a8a <BusFault_Handler+0x4>

08004a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a90:	e7fe      	b.n	8004a90 <UsageFault_Handler+0x4>

08004a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a92:	b480      	push	{r7}
 8004a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ac0:	f000 fa2a 	bl	8004f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ac4:	bf00      	nop
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004acc:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <USART1_IRQHandler+0x10>)
 8004ace:	f001 fc8f 	bl	80063f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	200001dc 	.word	0x200001dc

08004adc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	e00a      	b.n	8004b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004aee:	f3af 8000 	nop.w
 8004af2:	4601      	mov	r1, r0
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	60ba      	str	r2, [r7, #8]
 8004afa:	b2ca      	uxtb	r2, r1
 8004afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	3301      	adds	r3, #1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	dbf0      	blt.n	8004aee <_read+0x12>
  }

  return len;
 8004b0c:	687b      	ldr	r3, [r7, #4]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b086      	sub	sp, #24
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e009      	b.n	8004b3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	60ba      	str	r2, [r7, #8]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f889 	bl	8004c48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	dbf1      	blt.n	8004b28 <_write+0x12>
  }
  return len;
 8004b44:	687b      	ldr	r3, [r7, #4]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_close>:

int _close(int file)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b76:	605a      	str	r2, [r3, #4]
  return 0;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <_isatty>:

int _isatty(int file)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b8e:	2301      	movs	r3, #1
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <_sbrk+0x5c>)
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <_sbrk+0x60>)
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <_sbrk+0x64>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bd4:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <_sbrk+0x64>)
 8004bd6:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <_sbrk+0x68>)
 8004bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <_sbrk+0x64>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d207      	bcs.n	8004bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004be8:	f002 fe7c 	bl	80078e4 <__errno>
 8004bec:	4603      	mov	r3, r0
 8004bee:	220c      	movs	r2, #12
 8004bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf6:	e009      	b.n	8004c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <_sbrk+0x64>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bfe:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <_sbrk+0x64>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <_sbrk+0x64>)
 8004c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	20020000 	.word	0x20020000
 8004c18:	00000400 	.word	0x00000400
 8004c1c:	20000108 	.word	0x20000108
 8004c20:	20000378 	.word	0x20000378

08004c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <SystemInit+0x20>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <SystemInit+0x20>)
 8004c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004c50:	1d39      	adds	r1, r7, #4
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295
 8004c56:	2201      	movs	r2, #1
 8004c58:	4803      	ldr	r0, [pc, #12]	; (8004c68 <__io_putchar+0x20>)
 8004c5a:	f001 fb19 	bl	8006290 <HAL_UART_Transmit>
	return ch;
 8004c5e:	687b      	ldr	r3, [r7, #4]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	200001dc 	.word	0x200001dc

08004c6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004c72:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <MX_USART1_UART_Init+0x58>)
 8004c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004c76:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c7e:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c84:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004c92:	220c      	movs	r2, #12
 8004c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c9c:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ca2:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004ca4:	f001 faa4 	bl	80061f0 <HAL_UART_Init>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004cae:	f7ff feb3 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* This function enables the receive interrupt: flag UART_IT_RXNE and sets
   * the receive buffer and the maximum amount of data the receive buffer can receive */
   HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4904      	ldr	r1, [pc, #16]	; (8004cc8 <MX_USART1_UART_Init+0x5c>)
 8004cb6:	4802      	ldr	r0, [pc, #8]	; (8004cc0 <MX_USART1_UART_Init+0x54>)
 8004cb8:	f001 fb75 	bl	80063a6 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	200001dc 	.word	0x200001dc
 8004cc4:	40011000 	.word	0x40011000
 8004cc8:	200001d8 	.word	0x200001d8

08004ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd4:	f107 0314 	add.w	r3, r7, #20
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	60da      	str	r2, [r3, #12]
 8004ce2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <HAL_UART_MspInit+0x94>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d134      	bne.n	8004d58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <HAL_UART_MspInit+0x98>)
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <HAL_UART_MspInit+0x98>)
 8004cf8:	f043 0310 	orr.w	r3, r3, #16
 8004cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cfe:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_UART_MspInit+0x98>)
 8004d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <HAL_UART_MspInit+0x98>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	4a14      	ldr	r2, [pc, #80]	; (8004d64 <HAL_UART_MspInit+0x98>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_UART_MspInit+0x98>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d34:	2303      	movs	r3, #3
 8004d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d38:	2307      	movs	r3, #7
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d3c:	f107 0314 	add.w	r3, r7, #20
 8004d40:	4619      	mov	r1, r3
 8004d42:	4809      	ldr	r0, [pc, #36]	; (8004d68 <HAL_UART_MspInit+0x9c>)
 8004d44:	f000 fbcc 	bl	80054e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 2);
 8004d48:	2202      	movs	r2, #2
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	2025      	movs	r0, #37	; 0x25
 8004d4e:	f000 fa02 	bl	8005156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d52:	2025      	movs	r0, #37	; 0x25
 8004d54:	f000 fa1b 	bl	800518e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004d58:	bf00      	nop
 8004d5a:	3728      	adds	r7, #40	; 0x28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40011000 	.word	0x40011000
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40020000 	.word	0x40020000

08004d6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)                      /* if it is serial port USART1 */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a24      	ldr	r2, [pc, #144]	; (8004e0c <HAL_UART_RxCpltCallback+0xa0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d142      	bne.n	8004e04 <HAL_UART_RxCpltCallback+0x98>
    {
        if ((g_usart_rx_sta & 0x8000) == 0)             /* receipt not completed */
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b21b      	sxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	db38      	blt.n	8004dfa <HAL_UART_RxCpltCallback+0x8e>
        {
            if (g_usart_rx_sta & 0x4000)                /* 0x0d has been received (the Enter key). */
 8004d88:	4b21      	ldr	r3, [pc, #132]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d011      	beq.n	8004db8 <HAL_UART_RxCpltCallback+0x4c>
            {
                if (g_rx_buffer[0] != 0x0a)             /* this is not 0x0a (that is, not a newline key) */
 8004d94:	4b1f      	ldr	r3, [pc, #124]	; (8004e14 <HAL_UART_RxCpltCallback+0xa8>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b0a      	cmp	r3, #10
 8004d9a:	d003      	beq.n	8004da4 <HAL_UART_RxCpltCallback+0x38>
                {
                    g_usart_rx_sta = 0;                 /* receive error,restart */
 8004d9c:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	801a      	strh	r2, [r3, #0]
 8004da2:	e02a      	b.n	8004dfa <HAL_UART_RxCpltCallback+0x8e>
                }
                else                                    /* it gets 0x0a (the newline key) */
                {
                    g_usart_rx_sta |= 0x8000;           /* the reception is complete */
 8004da4:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004db4:	801a      	strh	r2, [r3, #0]
 8004db6:	e020      	b.n	8004dfa <HAL_UART_RxCpltCallback+0x8e>
                }
            }
            else                                        /* 0X0d has not been reached yet (the Enter key) */
            {
                if (g_rx_buffer[0] == 0x0d)
 8004db8:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <HAL_UART_RxCpltCallback+0xa8>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b0d      	cmp	r3, #13
 8004dbe:	d107      	bne.n	8004dd0 <HAL_UART_RxCpltCallback+0x64>
                    g_usart_rx_sta |= 0x4000;
 8004dc0:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	e014      	b.n	8004dfa <HAL_UART_RxCpltCallback+0x8e>
                else
                {
                    g_usart_rx_buf[g_usart_rx_sta & 0X3FFF] = g_rx_buffer[0];
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004dd8:	4a0e      	ldr	r2, [pc, #56]	; (8004e14 <HAL_UART_RxCpltCallback+0xa8>)
 8004dda:	7811      	ldrb	r1, [r2, #0]
 8004ddc:	4a0e      	ldr	r2, [pc, #56]	; (8004e18 <HAL_UART_RxCpltCallback+0xac>)
 8004dde:	54d1      	strb	r1, [r2, r3]
                    g_usart_rx_sta++;
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004dea:	801a      	strh	r2, [r3, #0]

                    if (g_usart_rx_sta > (USART_REC_LEN - 1))
 8004dec:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	2bc7      	cmp	r3, #199	; 0xc7
 8004df2:	d902      	bls.n	8004dfa <HAL_UART_RxCpltCallback+0x8e>
                    {
                        g_usart_rx_sta = 0;             /* receive data error, start receive again */
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_UART_RxCpltCallback+0xa4>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	4905      	ldr	r1, [pc, #20]	; (8004e14 <HAL_UART_RxCpltCallback+0xa8>)
 8004dfe:	4807      	ldr	r0, [pc, #28]	; (8004e1c <HAL_UART_RxCpltCallback+0xb0>)
 8004e00:	f001 fad1 	bl	80063a6 <HAL_UART_Receive_IT>
    }
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40011000 	.word	0x40011000
 8004e10:	200001d4 	.word	0x200001d4
 8004e14:	200001d8 	.word	0x200001d8
 8004e18:	2000010c 	.word	0x2000010c
 8004e1c:	200001dc 	.word	0x200001dc

08004e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004e24:	f7ff fefe 	bl	8004c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e28:	480c      	ldr	r0, [pc, #48]	; (8004e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e2a:	490d      	ldr	r1, [pc, #52]	; (8004e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e2c:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e30:	e002      	b.n	8004e38 <LoopCopyDataInit>

08004e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e36:	3304      	adds	r3, #4

08004e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e3c:	d3f9      	bcc.n	8004e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e40:	4c0a      	ldr	r4, [pc, #40]	; (8004e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e44:	e001      	b.n	8004e4a <LoopFillZerobss>

08004e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e48:	3204      	adds	r2, #4

08004e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e4c:	d3fb      	bcc.n	8004e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e4e:	f002 fd4f 	bl	80078f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e52:	f7ff fcbf 	bl	80047d4 <main>
  bx  lr    
 8004e56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004e64:	0800aeac 	.word	0x0800aeac
  ldr r2, =_sbss
 8004e68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004e6c:	20000374 	.word	0x20000374

08004e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e70:	e7fe      	b.n	8004e70 <ADC_IRQHandler>
	...

08004e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_Init+0x40>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a0d      	ldr	r2, [pc, #52]	; (8004eb4 <HAL_Init+0x40>)
 8004e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_Init+0x40>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a0a      	ldr	r2, [pc, #40]	; (8004eb4 <HAL_Init+0x40>)
 8004e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <HAL_Init+0x40>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a07      	ldr	r2, [pc, #28]	; (8004eb4 <HAL_Init+0x40>)
 8004e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e9c:	2003      	movs	r0, #3
 8004e9e:	f000 f94f 	bl	8005140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f000 f808 	bl	8004eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ea8:	f7ff fdbc 	bl	8004a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023c00 	.word	0x40023c00

08004eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ec0:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <HAL_InitTick+0x54>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_InitTick+0x58>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f967 	bl	80051aa <HAL_SYSTICK_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e00e      	b.n	8004f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b0f      	cmp	r3, #15
 8004eea:	d80a      	bhi.n	8004f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eec:	2200      	movs	r2, #0
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	f000 f92f 	bl	8005156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ef8:	4a06      	ldr	r2, [pc, #24]	; (8004f14 <HAL_InitTick+0x5c>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e000      	b.n	8004f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000008 	.word	0x20000008
 8004f10:	20000010 	.word	0x20000010
 8004f14:	2000000c 	.word	0x2000000c

08004f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_IncTick+0x20>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_IncTick+0x24>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4413      	add	r3, r2
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <HAL_IncTick+0x24>)
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000010 	.word	0x20000010
 8004f3c:	20000224 	.word	0x20000224

08004f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return uwTick;
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_GetTick+0x14>)
 8004f46:	681b      	ldr	r3, [r3, #0]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000224 	.word	0x20000224

08004f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f60:	f7ff ffee 	bl	8004f40 <HAL_GetTick>
 8004f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d005      	beq.n	8004f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <HAL_Delay+0x44>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f7e:	bf00      	nop
 8004f80:	f7ff ffde 	bl	8004f40 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d8f7      	bhi.n	8004f80 <HAL_Delay+0x28>
  {
  }
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000010 	.word	0x20000010

08004fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fd2:	4a04      	ldr	r2, [pc, #16]	; (8004fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	60d3      	str	r3, [r2, #12]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	e000ed00 	.word	0xe000ed00

08004fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fec:	4b04      	ldr	r3, [pc, #16]	; (8005000 <__NVIC_GetPriorityGrouping+0x18>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	0a1b      	lsrs	r3, r3, #8
 8004ff2:	f003 0307 	and.w	r3, r3, #7
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	2b00      	cmp	r3, #0
 8005014:	db0b      	blt.n	800502e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	f003 021f 	and.w	r2, r3, #31
 800501c:	4907      	ldr	r1, [pc, #28]	; (800503c <__NVIC_EnableIRQ+0x38>)
 800501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2001      	movs	r0, #1
 8005026:	fa00 f202 	lsl.w	r2, r0, r2
 800502a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	e000e100 	.word	0xe000e100

08005040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	6039      	str	r1, [r7, #0]
 800504a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800504c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005050:	2b00      	cmp	r3, #0
 8005052:	db0a      	blt.n	800506a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	490c      	ldr	r1, [pc, #48]	; (800508c <__NVIC_SetPriority+0x4c>)
 800505a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505e:	0112      	lsls	r2, r2, #4
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	440b      	add	r3, r1
 8005064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005068:	e00a      	b.n	8005080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4908      	ldr	r1, [pc, #32]	; (8005090 <__NVIC_SetPriority+0x50>)
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	3b04      	subs	r3, #4
 8005078:	0112      	lsls	r2, r2, #4
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	440b      	add	r3, r1
 800507e:	761a      	strb	r2, [r3, #24]
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	e000e100 	.word	0xe000e100
 8005090:	e000ed00 	.word	0xe000ed00

08005094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005094:	b480      	push	{r7}
 8005096:	b089      	sub	sp, #36	; 0x24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f1c3 0307 	rsb	r3, r3, #7
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	bf28      	it	cs
 80050b2:	2304      	movcs	r3, #4
 80050b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3304      	adds	r3, #4
 80050ba:	2b06      	cmp	r3, #6
 80050bc:	d902      	bls.n	80050c4 <NVIC_EncodePriority+0x30>
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3b03      	subs	r3, #3
 80050c2:	e000      	b.n	80050c6 <NVIC_EncodePriority+0x32>
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c8:	f04f 32ff 	mov.w	r2, #4294967295
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43da      	mvns	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	401a      	ands	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050dc:	f04f 31ff 	mov.w	r1, #4294967295
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	fa01 f303 	lsl.w	r3, r1, r3
 80050e6:	43d9      	mvns	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ec:	4313      	orrs	r3, r2
         );
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3724      	adds	r7, #36	; 0x24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3b01      	subs	r3, #1
 8005108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800510c:	d301      	bcc.n	8005112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800510e:	2301      	movs	r3, #1
 8005110:	e00f      	b.n	8005132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <SysTick_Config+0x40>)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3b01      	subs	r3, #1
 8005118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800511a:	210f      	movs	r1, #15
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	f7ff ff8e 	bl	8005040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <SysTick_Config+0x40>)
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800512a:	4b04      	ldr	r3, [pc, #16]	; (800513c <SysTick_Config+0x40>)
 800512c:	2207      	movs	r2, #7
 800512e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	e000e010 	.word	0xe000e010

08005140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff29 	bl	8004fa0 <__NVIC_SetPriorityGrouping>
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005156:	b580      	push	{r7, lr}
 8005158:	b086      	sub	sp, #24
 800515a:	af00      	add	r7, sp, #0
 800515c:	4603      	mov	r3, r0
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005168:	f7ff ff3e 	bl	8004fe8 <__NVIC_GetPriorityGrouping>
 800516c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	6978      	ldr	r0, [r7, #20]
 8005174:	f7ff ff8e 	bl	8005094 <NVIC_EncodePriority>
 8005178:	4602      	mov	r2, r0
 800517a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800517e:	4611      	mov	r1, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ff5d 	bl	8005040 <__NVIC_SetPriority>
}
 8005186:	bf00      	nop
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	4603      	mov	r3, r0
 8005196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff ff31 	bl	8005004 <__NVIC_EnableIRQ>
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff ffa2 	bl	80050fc <SysTick_Config>
 80051b8:	4603      	mov	r3, r0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e014      	b.n	80051fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	791b      	ldrb	r3, [r3, #4]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d105      	bne.n	80051ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff f8b3 	bl	8004350 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e046      	b.n	80052a8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	795b      	ldrb	r3, [r3, #5]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_DAC_Start+0x20>
 8005222:	2302      	movs	r3, #2
 8005224:	e040      	b.n	80052a8 <HAL_DAC_Start+0xa2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2201      	movs	r2, #1
 8005240:	409a      	lsls	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10f      	bne.n	8005270 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800525a:	2b3c      	cmp	r3, #60	; 0x3c
 800525c:	d11d      	bne.n	800529a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	e014      	b.n	800529a <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	213c      	movs	r1, #60	; 0x3c
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	429a      	cmp	r2, r3
 8005288:	d107      	bne.n	800529a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0202 	orr.w	r2, r2, #2
 8005298:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e015      	b.n	80052fc <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4413      	add	r3, r2
 80052e2:	3308      	adds	r3, #8
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e004      	b.n	80052f2 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	3314      	adds	r3, #20
 80052f0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	461a      	mov	r2, r3
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	371c      	adds	r7, #28
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <HAL_DAC_ConfigChannel+0x1c>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e042      	b.n	80053ae <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	795b      	ldrb	r3, [r3, #5]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_DAC_ConfigChannel+0x2c>
 8005330:	2302      	movs	r3, #2
 8005332:	e03c      	b.n	80053ae <HAL_DAC_ConfigChannel+0xa6>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2202      	movs	r2, #2
 800533e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4313      	orrs	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	22c0      	movs	r2, #192	; 0xc0
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	43da      	mvns	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	400a      	ands	r2, r1
 800539e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80053ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3724      	adds	r7, #36	; 0x24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053c8:	f7ff fdba 	bl	8004f40 <HAL_GetTick>
 80053cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d008      	beq.n	80053ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2280      	movs	r2, #128	; 0x80
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e052      	b.n	8005492 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0216 	bic.w	r2, r2, #22
 80053fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800540a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <HAL_DMA_Abort+0x62>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0208 	bic.w	r2, r2, #8
 800542a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800543c:	e013      	b.n	8005466 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800543e:	f7ff fd7f 	bl	8004f40 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b05      	cmp	r3, #5
 800544a:	d90c      	bls.n	8005466 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2203      	movs	r2, #3
 8005456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e015      	b.n	8005492 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e4      	bne.n	800543e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005478:	223f      	movs	r2, #63	; 0x3f
 800547a:	409a      	lsls	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d004      	beq.n	80054b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e00c      	b.n	80054d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2205      	movs	r2, #5
 80054bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0201 	bic.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b089      	sub	sp, #36	; 0x24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e16b      	b.n	80057d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054fc:	2201      	movs	r2, #1
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4013      	ands	r3, r2
 800550e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	429a      	cmp	r2, r3
 8005516:	f040 815a 	bne.w	80057ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d005      	beq.n	8005532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800552e:	2b02      	cmp	r3, #2
 8005530:	d130      	bne.n	8005594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	2203      	movs	r2, #3
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4313      	orrs	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005568:	2201      	movs	r2, #1
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 0201 	and.w	r2, r3, #1
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	4313      	orrs	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	2b03      	cmp	r3, #3
 800559e:	d017      	beq.n	80055d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	2203      	movs	r2, #3
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4013      	ands	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d123      	bne.n	8005624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	08da      	lsrs	r2, r3, #3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3208      	adds	r2, #8
 80055e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	220f      	movs	r2, #15
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	43db      	mvns	r3, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4013      	ands	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4313      	orrs	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	08da      	lsrs	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3208      	adds	r2, #8
 800561e:	69b9      	ldr	r1, [r7, #24]
 8005620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	2203      	movs	r2, #3
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 0203 	and.w	r2, r3, #3
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4313      	orrs	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80b4 	beq.w	80057ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	4b60      	ldr	r3, [pc, #384]	; (80057ec <HAL_GPIO_Init+0x30c>)
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	4a5f      	ldr	r2, [pc, #380]	; (80057ec <HAL_GPIO_Init+0x30c>)
 8005670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005674:	6453      	str	r3, [r2, #68]	; 0x44
 8005676:	4b5d      	ldr	r3, [pc, #372]	; (80057ec <HAL_GPIO_Init+0x30c>)
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005682:	4a5b      	ldr	r2, [pc, #364]	; (80057f0 <HAL_GPIO_Init+0x310>)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	3302      	adds	r3, #2
 800568a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	220f      	movs	r2, #15
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	43db      	mvns	r3, r3
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	4013      	ands	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a52      	ldr	r2, [pc, #328]	; (80057f4 <HAL_GPIO_Init+0x314>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d02b      	beq.n	8005706 <HAL_GPIO_Init+0x226>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a51      	ldr	r2, [pc, #324]	; (80057f8 <HAL_GPIO_Init+0x318>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d025      	beq.n	8005702 <HAL_GPIO_Init+0x222>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a50      	ldr	r2, [pc, #320]	; (80057fc <HAL_GPIO_Init+0x31c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01f      	beq.n	80056fe <HAL_GPIO_Init+0x21e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a4f      	ldr	r2, [pc, #316]	; (8005800 <HAL_GPIO_Init+0x320>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d019      	beq.n	80056fa <HAL_GPIO_Init+0x21a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a4e      	ldr	r2, [pc, #312]	; (8005804 <HAL_GPIO_Init+0x324>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_GPIO_Init+0x216>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4d      	ldr	r2, [pc, #308]	; (8005808 <HAL_GPIO_Init+0x328>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00d      	beq.n	80056f2 <HAL_GPIO_Init+0x212>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a4c      	ldr	r2, [pc, #304]	; (800580c <HAL_GPIO_Init+0x32c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <HAL_GPIO_Init+0x20e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a4b      	ldr	r2, [pc, #300]	; (8005810 <HAL_GPIO_Init+0x330>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d101      	bne.n	80056ea <HAL_GPIO_Init+0x20a>
 80056e6:	2307      	movs	r3, #7
 80056e8:	e00e      	b.n	8005708 <HAL_GPIO_Init+0x228>
 80056ea:	2308      	movs	r3, #8
 80056ec:	e00c      	b.n	8005708 <HAL_GPIO_Init+0x228>
 80056ee:	2306      	movs	r3, #6
 80056f0:	e00a      	b.n	8005708 <HAL_GPIO_Init+0x228>
 80056f2:	2305      	movs	r3, #5
 80056f4:	e008      	b.n	8005708 <HAL_GPIO_Init+0x228>
 80056f6:	2304      	movs	r3, #4
 80056f8:	e006      	b.n	8005708 <HAL_GPIO_Init+0x228>
 80056fa:	2303      	movs	r3, #3
 80056fc:	e004      	b.n	8005708 <HAL_GPIO_Init+0x228>
 80056fe:	2302      	movs	r3, #2
 8005700:	e002      	b.n	8005708 <HAL_GPIO_Init+0x228>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <HAL_GPIO_Init+0x228>
 8005706:	2300      	movs	r3, #0
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	f002 0203 	and.w	r2, r2, #3
 800570e:	0092      	lsls	r2, r2, #2
 8005710:	4093      	lsls	r3, r2
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4313      	orrs	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005718:	4935      	ldr	r1, [pc, #212]	; (80057f0 <HAL_GPIO_Init+0x310>)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	089b      	lsrs	r3, r3, #2
 800571e:	3302      	adds	r3, #2
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005726:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <HAL_GPIO_Init+0x334>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	43db      	mvns	r3, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4013      	ands	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800574a:	4a32      	ldr	r2, [pc, #200]	; (8005814 <HAL_GPIO_Init+0x334>)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005750:	4b30      	ldr	r3, [pc, #192]	; (8005814 <HAL_GPIO_Init+0x334>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	43db      	mvns	r3, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4013      	ands	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005774:	4a27      	ldr	r2, [pc, #156]	; (8005814 <HAL_GPIO_Init+0x334>)
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800577a:	4b26      	ldr	r3, [pc, #152]	; (8005814 <HAL_GPIO_Init+0x334>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	43db      	mvns	r3, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4013      	ands	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800579e:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <HAL_GPIO_Init+0x334>)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057a4:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <HAL_GPIO_Init+0x334>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	43db      	mvns	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4013      	ands	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057c8:	4a12      	ldr	r2, [pc, #72]	; (8005814 <HAL_GPIO_Init+0x334>)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	3301      	adds	r3, #1
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b0f      	cmp	r3, #15
 80057d8:	f67f ae90 	bls.w	80054fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	3724      	adds	r7, #36	; 0x24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40023800 	.word	0x40023800
 80057f0:	40013800 	.word	0x40013800
 80057f4:	40020000 	.word	0x40020000
 80057f8:	40020400 	.word	0x40020400
 80057fc:	40020800 	.word	0x40020800
 8005800:	40020c00 	.word	0x40020c00
 8005804:	40021000 	.word	0x40021000
 8005808:	40021400 	.word	0x40021400
 800580c:	40021800 	.word	0x40021800
 8005810:	40021c00 	.word	0x40021c00
 8005814:	40013c00 	.word	0x40013c00

08005818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	887b      	ldrh	r3, [r7, #2]
 800582a:	4013      	ands	r3, r2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e001      	b.n	800583a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
 8005854:	4613      	mov	r3, r2
 8005856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005858:	787b      	ldrb	r3, [r7, #1]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800585e:	887a      	ldrh	r2, [r7, #2]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005864:	e003      	b.n	800586e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005866:	887b      	ldrh	r3, [r7, #2]
 8005868:	041a      	lsls	r2, r3, #16
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	619a      	str	r2, [r3, #24]
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800588c:	887a      	ldrh	r2, [r7, #2]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4013      	ands	r3, r2
 8005892:	041a      	lsls	r2, r3, #16
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	43d9      	mvns	r1, r3
 8005898:	887b      	ldrh	r3, [r7, #2]
 800589a:	400b      	ands	r3, r1
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	619a      	str	r2, [r3, #24]
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e267      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d075      	beq.n	80059ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ce:	4b88      	ldr	r3, [pc, #544]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d00c      	beq.n	80058f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058da:	4b85      	ldr	r3, [pc, #532]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d112      	bne.n	800590c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e6:	4b82      	ldr	r3, [pc, #520]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f2:	d10b      	bne.n	800590c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f4:	4b7e      	ldr	r3, [pc, #504]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d05b      	beq.n	80059b8 <HAL_RCC_OscConfig+0x108>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d157      	bne.n	80059b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e242      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d106      	bne.n	8005924 <HAL_RCC_OscConfig+0x74>
 8005916:	4b76      	ldr	r3, [pc, #472]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a75      	ldr	r2, [pc, #468]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800591c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e01d      	b.n	8005960 <HAL_RCC_OscConfig+0xb0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800592c:	d10c      	bne.n	8005948 <HAL_RCC_OscConfig+0x98>
 800592e:	4b70      	ldr	r3, [pc, #448]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a6f      	ldr	r2, [pc, #444]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	4b6d      	ldr	r3, [pc, #436]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a6c      	ldr	r2, [pc, #432]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	e00b      	b.n	8005960 <HAL_RCC_OscConfig+0xb0>
 8005948:	4b69      	ldr	r3, [pc, #420]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a68      	ldr	r2, [pc, #416]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800594e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4b66      	ldr	r3, [pc, #408]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a65      	ldr	r2, [pc, #404]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 800595a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005968:	f7ff faea 	bl	8004f40 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005970:	f7ff fae6 	bl	8004f40 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	; 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e207      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005982:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0xc0>
 800598e:	e014      	b.n	80059ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005990:	f7ff fad6 	bl	8004f40 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005998:	f7ff fad2 	bl	8004f40 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	; 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e1f3      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059aa:	4b51      	ldr	r3, [pc, #324]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0xe8>
 80059b6:	e000      	b.n	80059ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d063      	beq.n	8005a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059c6:	4b4a      	ldr	r3, [pc, #296]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059d2:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d11c      	bne.n	8005a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059de:	4b44      	ldr	r3, [pc, #272]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d116      	bne.n	8005a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ea:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_RCC_OscConfig+0x152>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e1c7      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a02:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4937      	ldr	r1, [pc, #220]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a16:	e03a      	b.n	8005a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a20:	4b34      	ldr	r3, [pc, #208]	; (8005af4 <HAL_RCC_OscConfig+0x244>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7ff fa8b 	bl	8004f40 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2e:	f7ff fa87 	bl	8004f40 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e1a8      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a40:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4925      	ldr	r1, [pc, #148]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
 8005a60:	e015      	b.n	8005a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a62:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <HAL_RCC_OscConfig+0x244>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7ff fa6a 	bl	8004f40 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a70:	f7ff fa66 	bl	8004f40 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e187      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a82:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d036      	beq.n	8005b08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <HAL_RCC_OscConfig+0x248>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa8:	f7ff fa4a 	bl	8004f40 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ab0:	f7ff fa46 	bl	8004f40 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e167      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x200>
 8005ace:	e01b      	b.n	8005b08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <HAL_RCC_OscConfig+0x248>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad6:	f7ff fa33 	bl	8004f40 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005adc:	e00e      	b.n	8005afc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ade:	f7ff fa2f 	bl	8004f40 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d907      	bls.n	8005afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e150      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
 8005af0:	40023800 	.word	0x40023800
 8005af4:	42470000 	.word	0x42470000
 8005af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005afc:	4b88      	ldr	r3, [pc, #544]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1ea      	bne.n	8005ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8097 	beq.w	8005c44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b16:	2300      	movs	r3, #0
 8005b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b1a:	4b81      	ldr	r3, [pc, #516]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10f      	bne.n	8005b46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	4b7d      	ldr	r3, [pc, #500]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	4a7c      	ldr	r2, [pc, #496]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b34:	6413      	str	r3, [r2, #64]	; 0x40
 8005b36:	4b7a      	ldr	r3, [pc, #488]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	60bb      	str	r3, [r7, #8]
 8005b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b46:	4b77      	ldr	r3, [pc, #476]	; (8005d24 <HAL_RCC_OscConfig+0x474>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d118      	bne.n	8005b84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b52:	4b74      	ldr	r3, [pc, #464]	; (8005d24 <HAL_RCC_OscConfig+0x474>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a73      	ldr	r2, [pc, #460]	; (8005d24 <HAL_RCC_OscConfig+0x474>)
 8005b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b5e:	f7ff f9ef 	bl	8004f40 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b66:	f7ff f9eb 	bl	8004f40 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e10c      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b78:	4b6a      	ldr	r3, [pc, #424]	; (8005d24 <HAL_RCC_OscConfig+0x474>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f0      	beq.n	8005b66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d106      	bne.n	8005b9a <HAL_RCC_OscConfig+0x2ea>
 8005b8c:	4b64      	ldr	r3, [pc, #400]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	4a63      	ldr	r2, [pc, #396]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	6713      	str	r3, [r2, #112]	; 0x70
 8005b98:	e01c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x324>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b05      	cmp	r3, #5
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCC_OscConfig+0x30c>
 8005ba2:	4b5f      	ldr	r3, [pc, #380]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	4a5e      	ldr	r2, [pc, #376]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005ba8:	f043 0304 	orr.w	r3, r3, #4
 8005bac:	6713      	str	r3, [r2, #112]	; 0x70
 8005bae:	4b5c      	ldr	r3, [pc, #368]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb2:	4a5b      	ldr	r2, [pc, #364]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bb4:	f043 0301 	orr.w	r3, r3, #1
 8005bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bba:	e00b      	b.n	8005bd4 <HAL_RCC_OscConfig+0x324>
 8005bbc:	4b58      	ldr	r3, [pc, #352]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	4a57      	ldr	r2, [pc, #348]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc8:	4b55      	ldr	r3, [pc, #340]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	4a54      	ldr	r2, [pc, #336]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bce:	f023 0304 	bic.w	r3, r3, #4
 8005bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d015      	beq.n	8005c08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7ff f9b0 	bl	8004f40 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be4:	f7ff f9ac 	bl	8004f40 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e0cb      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfa:	4b49      	ldr	r3, [pc, #292]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ee      	beq.n	8005be4 <HAL_RCC_OscConfig+0x334>
 8005c06:	e014      	b.n	8005c32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c08:	f7ff f99a 	bl	8004f40 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c0e:	e00a      	b.n	8005c26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c10:	f7ff f996 	bl	8004f40 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e0b5      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c26:	4b3e      	ldr	r3, [pc, #248]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1ee      	bne.n	8005c10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d105      	bne.n	8005c44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c38:	4b39      	ldr	r3, [pc, #228]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	4a38      	ldr	r2, [pc, #224]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80a1 	beq.w	8005d90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c4e:	4b34      	ldr	r3, [pc, #208]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	d05c      	beq.n	8005d14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d141      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c62:	4b31      	ldr	r3, [pc, #196]	; (8005d28 <HAL_RCC_OscConfig+0x478>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c68:	f7ff f96a 	bl	8004f40 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c70:	f7ff f966 	bl	8004f40 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e087      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c82:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	061b      	lsls	r3, r3, #24
 8005cb2:	491b      	ldr	r1, [pc, #108]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cb8:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <HAL_RCC_OscConfig+0x478>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cbe:	f7ff f93f 	bl	8004f40 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc6:	f7ff f93b 	bl	8004f40 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e05c      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd8:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f0      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x416>
 8005ce4:	e054      	b.n	8005d90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <HAL_RCC_OscConfig+0x478>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cec:	f7ff f928 	bl	8004f40 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7ff f924 	bl	8004f40 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e045      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <HAL_RCC_OscConfig+0x470>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x444>
 8005d12:	e03d      	b.n	8005d90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d107      	bne.n	8005d2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e038      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
 8005d20:	40023800 	.word	0x40023800
 8005d24:	40007000 	.word	0x40007000
 8005d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <HAL_RCC_OscConfig+0x4ec>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d028      	beq.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d121      	bne.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d11a      	bne.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d111      	bne.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	3b01      	subs	r3, #1
 8005d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d107      	bne.n	8005d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40023800 	.word	0x40023800

08005da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0cc      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005db4:	4b68      	ldr	r3, [pc, #416]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d90c      	bls.n	8005ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc2:	4b65      	ldr	r3, [pc, #404]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dca:	4b63      	ldr	r3, [pc, #396]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d001      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0b8      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005df4:	4b59      	ldr	r3, [pc, #356]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	4a58      	ldr	r2, [pc, #352]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e0c:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	4a52      	ldr	r2, [pc, #328]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e18:	4b50      	ldr	r3, [pc, #320]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	494d      	ldr	r1, [pc, #308]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d044      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3e:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d119      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e07f      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d003      	beq.n	8005e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5e:	4b3f      	ldr	r3, [pc, #252]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e06f      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6e:	4b3b      	ldr	r3, [pc, #236]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e067      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e7e:	4b37      	ldr	r3, [pc, #220]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 0203 	bic.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	4934      	ldr	r1, [pc, #208]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e90:	f7ff f856 	bl	8004f40 <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	e00a      	b.n	8005eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e98:	f7ff f852 	bl	8004f40 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e04f      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eae:	4b2b      	ldr	r3, [pc, #172]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 020c 	and.w	r2, r3, #12
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d1eb      	bne.n	8005e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec0:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d20c      	bcs.n	8005ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed6:	4b20      	ldr	r3, [pc, #128]	; (8005f58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d001      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e032      	b.n	8005f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef4:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4916      	ldr	r1, [pc, #88]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f12:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	490e      	ldr	r1, [pc, #56]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f26:	f000 f821 	bl	8005f6c <HAL_RCC_GetSysClockFreq>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	490a      	ldr	r1, [pc, #40]	; (8005f60 <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	5ccb      	ldrb	r3, [r1, r3]
 8005f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3e:	4a09      	ldr	r2, [pc, #36]	; (8005f64 <HAL_RCC_ClockConfig+0x1c4>)
 8005f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <HAL_RCC_ClockConfig+0x1c8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe ffb6 	bl	8004eb8 <HAL_InitTick>

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40023c00 	.word	0x40023c00
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	0800ae84 	.word	0x0800ae84
 8005f64:	20000008 	.word	0x20000008
 8005f68:	2000000c 	.word	0x2000000c

08005f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f70:	b090      	sub	sp, #64	; 0x40
 8005f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	637b      	str	r3, [r7, #52]	; 0x34
 8005f78:	2300      	movs	r3, #0
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f84:	4b59      	ldr	r3, [pc, #356]	; (80060ec <HAL_RCC_GetSysClockFreq+0x180>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 030c 	and.w	r3, r3, #12
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d00d      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x40>
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	f200 80a1 	bhi.w	80060d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f9e:	e09b      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fa0:	4b53      	ldr	r3, [pc, #332]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005fa2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005fa4:	e09b      	b.n	80060de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fa6:	4b53      	ldr	r3, [pc, #332]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fa8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005faa:	e098      	b.n	80060de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fac:	4b4f      	ldr	r3, [pc, #316]	; (80060ec <HAL_RCC_GetSysClockFreq+0x180>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fb6:	4b4d      	ldr	r3, [pc, #308]	; (80060ec <HAL_RCC_GetSysClockFreq+0x180>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d028      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc2:	4b4a      	ldr	r3, [pc, #296]	; (80060ec <HAL_RCC_GetSysClockFreq+0x180>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	099b      	lsrs	r3, r3, #6
 8005fc8:	2200      	movs	r2, #0
 8005fca:	623b      	str	r3, [r7, #32]
 8005fcc:	627a      	str	r2, [r7, #36]	; 0x24
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4b47      	ldr	r3, [pc, #284]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fd8:	fb03 f201 	mul.w	r2, r3, r1
 8005fdc:	2300      	movs	r3, #0
 8005fde:	fb00 f303 	mul.w	r3, r0, r3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	4a43      	ldr	r2, [pc, #268]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005fe6:	fba0 1202 	umull	r1, r2, r0, r2
 8005fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fec:	460a      	mov	r2, r1
 8005fee:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff2:	4413      	add	r3, r2
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	61fa      	str	r2, [r7, #28]
 8005ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006002:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006006:	f7fa fbe5 	bl	80007d4 <__aeabi_uldivmod>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4613      	mov	r3, r2
 8006010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006012:	e053      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006014:	4b35      	ldr	r3, [pc, #212]	; (80060ec <HAL_RCC_GetSysClockFreq+0x180>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	099b      	lsrs	r3, r3, #6
 800601a:	2200      	movs	r2, #0
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	617a      	str	r2, [r7, #20]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006026:	f04f 0b00 	mov.w	fp, #0
 800602a:	4652      	mov	r2, sl
 800602c:	465b      	mov	r3, fp
 800602e:	f04f 0000 	mov.w	r0, #0
 8006032:	f04f 0100 	mov.w	r1, #0
 8006036:	0159      	lsls	r1, r3, #5
 8006038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800603c:	0150      	lsls	r0, r2, #5
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	ebb2 080a 	subs.w	r8, r2, sl
 8006046:	eb63 090b 	sbc.w	r9, r3, fp
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006056:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800605a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800605e:	ebb2 0408 	subs.w	r4, r2, r8
 8006062:	eb63 0509 	sbc.w	r5, r3, r9
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	00eb      	lsls	r3, r5, #3
 8006070:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006074:	00e2      	lsls	r2, r4, #3
 8006076:	4614      	mov	r4, r2
 8006078:	461d      	mov	r5, r3
 800607a:	eb14 030a 	adds.w	r3, r4, sl
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	eb45 030b 	adc.w	r3, r5, fp
 8006084:	607b      	str	r3, [r7, #4]
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006092:	4629      	mov	r1, r5
 8006094:	028b      	lsls	r3, r1, #10
 8006096:	4621      	mov	r1, r4
 8006098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800609c:	4621      	mov	r1, r4
 800609e:	028a      	lsls	r2, r1, #10
 80060a0:	4610      	mov	r0, r2
 80060a2:	4619      	mov	r1, r3
 80060a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a6:	2200      	movs	r2, #0
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	60fa      	str	r2, [r7, #12]
 80060ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060b0:	f7fa fb90 	bl	80007d4 <__aeabi_uldivmod>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4613      	mov	r3, r2
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <HAL_RCC_GetSysClockFreq+0x180>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	0c1b      	lsrs	r3, r3, #16
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	3301      	adds	r3, #1
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80060cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060d6:	e002      	b.n	80060de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80060da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3740      	adds	r7, #64	; 0x40
 80060e4:	46bd      	mov	sp, r7
 80060e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ea:	bf00      	nop
 80060ec:	40023800 	.word	0x40023800
 80060f0:	00f42400 	.word	0x00f42400
 80060f4:	017d7840 	.word	0x017d7840

080060f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060fc:	4b03      	ldr	r3, [pc, #12]	; (800610c <HAL_RCC_GetHCLKFreq+0x14>)
 80060fe:	681b      	ldr	r3, [r3, #0]
}
 8006100:	4618      	mov	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	20000008 	.word	0x20000008

08006110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006114:	f7ff fff0 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 8006118:	4602      	mov	r2, r0
 800611a:	4b05      	ldr	r3, [pc, #20]	; (8006130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	0a9b      	lsrs	r3, r3, #10
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	4903      	ldr	r1, [pc, #12]	; (8006134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006126:	5ccb      	ldrb	r3, [r1, r3]
 8006128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800612c:	4618      	mov	r0, r3
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40023800 	.word	0x40023800
 8006134:	0800ae94 	.word	0x0800ae94

08006138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800613c:	f7ff ffdc 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 8006140:	4602      	mov	r2, r0
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	0b5b      	lsrs	r3, r3, #13
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	4903      	ldr	r1, [pc, #12]	; (800615c <HAL_RCC_GetPCLK2Freq+0x24>)
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006154:	4618      	mov	r0, r3
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	0800ae94 	.word	0x0800ae94

08006160 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e038      	b.n	80061e8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7fe fa56 	bl	800463c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3308      	adds	r3, #8
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f001 f87e 	bl	800729c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	461a      	mov	r2, r3
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	f001 f8e0 	bl	8007370 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6858      	ldr	r0, [r3, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	f001 f90d 	bl	80073dc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	6892      	ldr	r2, [r2, #8]
 80061ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	6892      	ldr	r2, [r2, #8]
 80061d6:	f041 0101 	orr.w	r1, r1, #1
 80061da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e042      	b.n	8006288 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fe fd58 	bl	8004ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2224      	movs	r2, #36	; 0x24
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fdbd 	bl	8006db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695a      	ldr	r2, [r3, #20]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d175      	bne.n	800639c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_UART_Transmit+0x2c>
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e06e      	b.n	800639e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2221      	movs	r2, #33	; 0x21
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062ce:	f7fe fe37 	bl	8004f40 <HAL_GetTick>
 80062d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e8:	d108      	bne.n	80062fc <HAL_UART_Transmit+0x6c>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	e003      	b.n	8006304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006304:	e02e      	b.n	8006364 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2200      	movs	r2, #0
 800630e:	2180      	movs	r1, #128	; 0x80
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fb1f 	bl	8006954 <UART_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e03a      	b.n	800639e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800633c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	3302      	adds	r3, #2
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	e007      	b.n	8006356 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	781a      	ldrb	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3301      	adds	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1cb      	bne.n	8006306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2200      	movs	r2, #0
 8006376:	2140      	movs	r1, #64	; 0x40
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 faeb 	bl	8006954 <UART_WaitOnFlagUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e006      	b.n	800639e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	e000      	b.n	800639e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800639c:	2302      	movs	r3, #2
  }
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	4613      	mov	r3, r2
 80063b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d112      	bne.n	80063e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_UART_Receive_IT+0x26>
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e00b      	b.n	80063e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	461a      	mov	r2, r3
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fb12 	bl	8006a06 <UART_Start_Receive_IT>
 80063e2:	4603      	mov	r3, r0
 80063e4:	e000      	b.n	80063e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80063e6:	2302      	movs	r3, #2
  }
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b0ba      	sub	sp, #232	; 0xe8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006416:	2300      	movs	r3, #0
 8006418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800641c:	2300      	movs	r3, #0
 800641e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800642e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10f      	bne.n	8006456 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_UART_IRQHandler+0x66>
 8006442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fbf2 	bl	8006c38 <UART_Receive_IT>
      return;
 8006454:	e25b      	b.n	800690e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80de 	beq.w	800661c <HAL_UART_IRQHandler+0x22c>
 8006460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800646c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006470:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80d1 	beq.w	800661c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00b      	beq.n	800649e <HAL_UART_IRQHandler+0xae>
 8006486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800648a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006496:	f043 0201 	orr.w	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800649e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_UART_IRQHandler+0xd2>
 80064aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	f043 0202 	orr.w	r2, r3, #2
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <HAL_UART_IRQHandler+0xf6>
 80064ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064de:	f043 0204 	orr.w	r2, r3, #4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d011      	beq.n	8006516 <HAL_UART_IRQHandler+0x126>
 80064f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650e:	f043 0208 	orr.w	r2, r3, #8
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 81f2 	beq.w	8006904 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d008      	beq.n	800653e <HAL_UART_IRQHandler+0x14e>
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fb7d 	bl	8006c38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <HAL_UART_IRQHandler+0x17a>
 8006562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d04f      	beq.n	800660a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa85 	bl	8006a7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d141      	bne.n	8006602 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3314      	adds	r3, #20
 8006584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1d9      	bne.n	800657e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d013      	beq.n	80065fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	4a7e      	ldr	r2, [pc, #504]	; (80067d0 <HAL_UART_IRQHandler+0x3e0>)
 80065d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe ff5b 	bl	800549a <HAL_DMA_Abort_IT>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d016      	beq.n	8006618 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80065f4:	4610      	mov	r0, r2
 80065f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f8:	e00e      	b.n	8006618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f994 	bl	8006928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006600:	e00a      	b.n	8006618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f990 	bl	8006928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	e006      	b.n	8006618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f98c 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006616:	e175      	b.n	8006904 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006618:	bf00      	nop
    return;
 800661a:	e173      	b.n	8006904 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	2b01      	cmp	r3, #1
 8006622:	f040 814f 	bne.w	80068c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8148 	beq.w	80068c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8141 	beq.w	80068c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	f040 80b6 	bne.w	80067d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006674:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8145 	beq.w	8006908 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006686:	429a      	cmp	r2, r3
 8006688:	f080 813e 	bcs.w	8006908 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006692:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669e:	f000 8088 	beq.w	80067b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	330c      	adds	r3, #12
 80066a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	330c      	adds	r3, #12
 80066ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1d9      	bne.n	80066a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3314      	adds	r3, #20
 80066f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3314      	adds	r3, #20
 800670e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006712:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006716:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800671a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800671e:	e841 2300 	strex	r3, r2, [r1]
 8006722:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1e1      	bne.n	80066ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3314      	adds	r3, #20
 8006730:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800673a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800673c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3314      	adds	r3, #20
 800674a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800674e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006750:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006754:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800675c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e3      	bne.n	800672a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006782:	f023 0310 	bic.w	r3, r3, #16
 8006786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006794:	65ba      	str	r2, [r7, #88]	; 0x58
 8006796:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800679a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e3      	bne.n	8006770 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fe04 	bl	80053ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f8b7 	bl	800693c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067ce:	e09b      	b.n	8006908 <HAL_UART_IRQHandler+0x518>
 80067d0:	08006b41 	.word	0x08006b41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067dc:	b29b      	uxth	r3, r3
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 808e 	beq.w	800690c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80067f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8089 	beq.w	800690c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	330c      	adds	r3, #12
 8006800:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800681e:	647a      	str	r2, [r7, #68]	; 0x44
 8006820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e3      	bne.n	80067fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3314      	adds	r3, #20
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	623b      	str	r3, [r7, #32]
   return(result);
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	f023 0301 	bic.w	r3, r3, #1
 8006848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3314      	adds	r3, #20
 8006852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006856:	633a      	str	r2, [r7, #48]	; 0x30
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e3      	bne.n	8006832 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	60fb      	str	r3, [r7, #12]
   return(result);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0310 	bic.w	r3, r3, #16
 800688e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	330c      	adds	r3, #12
 8006898:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800689c:	61fa      	str	r2, [r7, #28]
 800689e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	69b9      	ldr	r1, [r7, #24]
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	617b      	str	r3, [r7, #20]
   return(result);
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e3      	bne.n	8006878 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f83d 	bl	800693c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068c2:	e023      	b.n	800690c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d009      	beq.n	80068e4 <HAL_UART_IRQHandler+0x4f4>
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f943 	bl	8006b68 <UART_Transmit_IT>
    return;
 80068e2:	e014      	b.n	800690e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00e      	beq.n	800690e <HAL_UART_IRQHandler+0x51e>
 80068f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f983 	bl	8006c08 <UART_EndTransmit_IT>
    return;
 8006902:	e004      	b.n	800690e <HAL_UART_IRQHandler+0x51e>
    return;
 8006904:	bf00      	nop
 8006906:	e002      	b.n	800690e <HAL_UART_IRQHandler+0x51e>
      return;
 8006908:	bf00      	nop
 800690a:	e000      	b.n	800690e <HAL_UART_IRQHandler+0x51e>
      return;
 800690c:	bf00      	nop
  }
}
 800690e:	37e8      	adds	r7, #232	; 0xe8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	4613      	mov	r3, r2
 8006962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006964:	e03b      	b.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d037      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696e:	f7fe fae7 	bl	8004f40 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	429a      	cmp	r2, r3
 800697c:	d302      	bcc.n	8006984 <UART_WaitOnFlagUntilTimeout+0x30>
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e03a      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	d023      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b80      	cmp	r3, #128	; 0x80
 800699a:	d020      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d01d      	beq.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d116      	bne.n	80069de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f857 	bl	8006a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2208      	movs	r2, #8
 80069d0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e00f      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4013      	ands	r3, r2
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d0b4      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	4613      	mov	r3, r2
 8006a12:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	88fa      	ldrh	r2, [r7, #6]
 8006a1e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	88fa      	ldrh	r2, [r7, #6]
 8006a24:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2222      	movs	r2, #34	; 0x22
 8006a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d007      	beq.n	8006a4c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a4a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0201 	orr.w	r2, r2, #1
 8006a5a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0220 	orr.w	r2, r2, #32
 8006a6a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b095      	sub	sp, #84	; 0x54
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	330c      	adds	r3, #12
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	330c      	adds	r3, #12
 8006aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006aa2:	643a      	str	r2, [r7, #64]	; 0x40
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3314      	adds	r3, #20
 8006abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3314      	adds	r3, #20
 8006ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e5      	bne.n	8006ab6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d119      	bne.n	8006b26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	330c      	adds	r3, #12
 8006af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f023 0310 	bic.w	r3, r3, #16
 8006b08:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	330c      	adds	r3, #12
 8006b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b12:	61ba      	str	r2, [r7, #24]
 8006b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6979      	ldr	r1, [r7, #20]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e5      	bne.n	8006af2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b34:	bf00      	nop
 8006b36:	3754      	adds	r7, #84	; 0x54
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fee4 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b21      	cmp	r3, #33	; 0x21
 8006b7a:	d13e      	bne.n	8006bfa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b84:	d114      	bne.n	8006bb0 <UART_Transmit_IT+0x48>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d110      	bne.n	8006bb0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ba2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	1c9a      	adds	r2, r3, #2
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	621a      	str	r2, [r3, #32]
 8006bae:	e008      	b.n	8006bc2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6211      	str	r1, [r2, #32]
 8006bba:	781a      	ldrb	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10f      	bne.n	8006bf6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006be4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e000      	b.n	8006bfc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bfa:	2302      	movs	r3, #2
  }
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fe73 	bl	8006914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b22      	cmp	r3, #34	; 0x22
 8006c4a:	f040 80ae 	bne.w	8006daa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c56:	d117      	bne.n	8006c88 <UART_Receive_IT+0x50>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d113      	bne.n	8006c88 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	1c9a      	adds	r2, r3, #2
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	629a      	str	r2, [r3, #40]	; 0x28
 8006c86:	e026      	b.n	8006cd6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9a:	d007      	beq.n	8006cac <UART_Receive_IT+0x74>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <UART_Receive_IT+0x82>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	e008      	b.n	8006ccc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d15d      	bne.n	8006da6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0220 	bic.w	r2, r2, #32
 8006cf8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695a      	ldr	r2, [r3, #20]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0201 	bic.w	r2, r2, #1
 8006d18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d135      	bne.n	8006d9c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	330c      	adds	r3, #12
 8006d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	613b      	str	r3, [r7, #16]
   return(result);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f023 0310 	bic.w	r3, r3, #16
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d56:	623a      	str	r2, [r7, #32]
 8006d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	69f9      	ldr	r1, [r7, #28]
 8006d5c:	6a3a      	ldr	r2, [r7, #32]
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d10a      	bne.n	8006d8e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff fdd1 	bl	800693c <HAL_UARTEx_RxEventCallback>
 8006d9a:	e002      	b.n	8006da2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fd ffe5 	bl	8004d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e002      	b.n	8006dac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	e000      	b.n	8006dac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006daa:	2302      	movs	r3, #2
  }
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3730      	adds	r7, #48	; 0x30
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db8:	b0c0      	sub	sp, #256	; 0x100
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd0:	68d9      	ldr	r1, [r3, #12]
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	ea40 0301 	orr.w	r3, r0, r1
 8006ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e0c:	f021 010c 	bic.w	r1, r1, #12
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2e:	6999      	ldr	r1, [r3, #24]
 8006e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	ea40 0301 	orr.w	r3, r0, r1
 8006e3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4b8f      	ldr	r3, [pc, #572]	; (8007080 <UART_SetConfig+0x2cc>)
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d005      	beq.n	8006e54 <UART_SetConfig+0xa0>
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b8d      	ldr	r3, [pc, #564]	; (8007084 <UART_SetConfig+0x2d0>)
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d104      	bne.n	8006e5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e54:	f7ff f970 	bl	8006138 <HAL_RCC_GetPCLK2Freq>
 8006e58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e5c:	e003      	b.n	8006e66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e5e:	f7ff f957 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 8006e62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e70:	f040 810c 	bne.w	800708c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e86:	4622      	mov	r2, r4
 8006e88:	462b      	mov	r3, r5
 8006e8a:	1891      	adds	r1, r2, r2
 8006e8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e8e:	415b      	adcs	r3, r3
 8006e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e96:	4621      	mov	r1, r4
 8006e98:	eb12 0801 	adds.w	r8, r2, r1
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	eb43 0901 	adc.w	r9, r3, r1
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eb6:	4690      	mov	r8, r2
 8006eb8:	4699      	mov	r9, r3
 8006eba:	4623      	mov	r3, r4
 8006ebc:	eb18 0303 	adds.w	r3, r8, r3
 8006ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ec4:	462b      	mov	r3, r5
 8006ec6:	eb49 0303 	adc.w	r3, r9, r3
 8006eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	18db      	adds	r3, r3, r3
 8006ee6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ee8:	4613      	mov	r3, r2
 8006eea:	eb42 0303 	adc.w	r3, r2, r3
 8006eee:	657b      	str	r3, [r7, #84]	; 0x54
 8006ef0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ef8:	f7f9 fc6c 	bl	80007d4 <__aeabi_uldivmod>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4b61      	ldr	r3, [pc, #388]	; (8007088 <UART_SetConfig+0x2d4>)
 8006f02:	fba3 2302 	umull	r2, r3, r3, r2
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	011c      	lsls	r4, r3, #4
 8006f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	464b      	mov	r3, r9
 8006f20:	1891      	adds	r1, r2, r2
 8006f22:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f24:	415b      	adcs	r3, r3
 8006f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f2c:	4641      	mov	r1, r8
 8006f2e:	eb12 0a01 	adds.w	sl, r2, r1
 8006f32:	4649      	mov	r1, r9
 8006f34:	eb43 0b01 	adc.w	fp, r3, r1
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f4c:	4692      	mov	sl, r2
 8006f4e:	469b      	mov	fp, r3
 8006f50:	4643      	mov	r3, r8
 8006f52:	eb1a 0303 	adds.w	r3, sl, r3
 8006f56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	eb4b 0303 	adc.w	r3, fp, r3
 8006f60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	18db      	adds	r3, r3, r3
 8006f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f7e:	4613      	mov	r3, r2
 8006f80:	eb42 0303 	adc.w	r3, r2, r3
 8006f84:	647b      	str	r3, [r7, #68]	; 0x44
 8006f86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f8e:	f7f9 fc21 	bl	80007d4 <__aeabi_uldivmod>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4611      	mov	r1, r2
 8006f98:	4b3b      	ldr	r3, [pc, #236]	; (8007088 <UART_SetConfig+0x2d4>)
 8006f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	2264      	movs	r2, #100	; 0x64
 8006fa2:	fb02 f303 	mul.w	r3, r2, r3
 8006fa6:	1acb      	subs	r3, r1, r3
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fae:	4b36      	ldr	r3, [pc, #216]	; (8007088 <UART_SetConfig+0x2d4>)
 8006fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fbc:	441c      	add	r4, r3
 8006fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006fcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	1891      	adds	r1, r2, r2
 8006fd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fd8:	415b      	adcs	r3, r3
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	1851      	adds	r1, r2, r1
 8006fe4:	6339      	str	r1, [r7, #48]	; 0x30
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	414b      	adcs	r3, r1
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ff8:	4659      	mov	r1, fp
 8006ffa:	00cb      	lsls	r3, r1, #3
 8006ffc:	4651      	mov	r1, sl
 8006ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007002:	4651      	mov	r1, sl
 8007004:	00ca      	lsls	r2, r1, #3
 8007006:	4610      	mov	r0, r2
 8007008:	4619      	mov	r1, r3
 800700a:	4603      	mov	r3, r0
 800700c:	4642      	mov	r2, r8
 800700e:	189b      	adds	r3, r3, r2
 8007010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007014:	464b      	mov	r3, r9
 8007016:	460a      	mov	r2, r1
 8007018:	eb42 0303 	adc.w	r3, r2, r3
 800701c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800702c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007034:	460b      	mov	r3, r1
 8007036:	18db      	adds	r3, r3, r3
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28
 800703a:	4613      	mov	r3, r2
 800703c:	eb42 0303 	adc.w	r3, r2, r3
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007046:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800704a:	f7f9 fbc3 	bl	80007d4 <__aeabi_uldivmod>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <UART_SetConfig+0x2d4>)
 8007054:	fba3 1302 	umull	r1, r3, r3, r2
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	2164      	movs	r1, #100	; 0x64
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	3332      	adds	r3, #50	; 0x32
 8007066:	4a08      	ldr	r2, [pc, #32]	; (8007088 <UART_SetConfig+0x2d4>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	f003 0207 	and.w	r2, r3, #7
 8007072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4422      	add	r2, r4
 800707a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800707c:	e106      	b.n	800728c <UART_SetConfig+0x4d8>
 800707e:	bf00      	nop
 8007080:	40011000 	.word	0x40011000
 8007084:	40011400 	.word	0x40011400
 8007088:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800708c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007090:	2200      	movs	r2, #0
 8007092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007096:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800709a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800709e:	4642      	mov	r2, r8
 80070a0:	464b      	mov	r3, r9
 80070a2:	1891      	adds	r1, r2, r2
 80070a4:	6239      	str	r1, [r7, #32]
 80070a6:	415b      	adcs	r3, r3
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
 80070aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070ae:	4641      	mov	r1, r8
 80070b0:	1854      	adds	r4, r2, r1
 80070b2:	4649      	mov	r1, r9
 80070b4:	eb43 0501 	adc.w	r5, r3, r1
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f04f 0300 	mov.w	r3, #0
 80070c0:	00eb      	lsls	r3, r5, #3
 80070c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070c6:	00e2      	lsls	r2, r4, #3
 80070c8:	4614      	mov	r4, r2
 80070ca:	461d      	mov	r5, r3
 80070cc:	4643      	mov	r3, r8
 80070ce:	18e3      	adds	r3, r4, r3
 80070d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070d4:	464b      	mov	r3, r9
 80070d6:	eb45 0303 	adc.w	r3, r5, r3
 80070da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	f04f 0300 	mov.w	r3, #0
 80070f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070fa:	4629      	mov	r1, r5
 80070fc:	008b      	lsls	r3, r1, #2
 80070fe:	4621      	mov	r1, r4
 8007100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007104:	4621      	mov	r1, r4
 8007106:	008a      	lsls	r2, r1, #2
 8007108:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800710c:	f7f9 fb62 	bl	80007d4 <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4b60      	ldr	r3, [pc, #384]	; (8007298 <UART_SetConfig+0x4e4>)
 8007116:	fba3 2302 	umull	r2, r3, r3, r2
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	011c      	lsls	r4, r3, #4
 800711e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007128:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800712c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	1891      	adds	r1, r2, r2
 8007136:	61b9      	str	r1, [r7, #24]
 8007138:	415b      	adcs	r3, r3
 800713a:	61fb      	str	r3, [r7, #28]
 800713c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007140:	4641      	mov	r1, r8
 8007142:	1851      	adds	r1, r2, r1
 8007144:	6139      	str	r1, [r7, #16]
 8007146:	4649      	mov	r1, r9
 8007148:	414b      	adcs	r3, r1
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007158:	4659      	mov	r1, fp
 800715a:	00cb      	lsls	r3, r1, #3
 800715c:	4651      	mov	r1, sl
 800715e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007162:	4651      	mov	r1, sl
 8007164:	00ca      	lsls	r2, r1, #3
 8007166:	4610      	mov	r0, r2
 8007168:	4619      	mov	r1, r3
 800716a:	4603      	mov	r3, r0
 800716c:	4642      	mov	r2, r8
 800716e:	189b      	adds	r3, r3, r2
 8007170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007174:	464b      	mov	r3, r9
 8007176:	460a      	mov	r2, r1
 8007178:	eb42 0303 	adc.w	r3, r2, r3
 800717c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	67bb      	str	r3, [r7, #120]	; 0x78
 800718a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	f04f 0300 	mov.w	r3, #0
 8007194:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007198:	4649      	mov	r1, r9
 800719a:	008b      	lsls	r3, r1, #2
 800719c:	4641      	mov	r1, r8
 800719e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071a2:	4641      	mov	r1, r8
 80071a4:	008a      	lsls	r2, r1, #2
 80071a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071aa:	f7f9 fb13 	bl	80007d4 <__aeabi_uldivmod>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4611      	mov	r1, r2
 80071b4:	4b38      	ldr	r3, [pc, #224]	; (8007298 <UART_SetConfig+0x4e4>)
 80071b6:	fba3 2301 	umull	r2, r3, r3, r1
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	2264      	movs	r2, #100	; 0x64
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	1acb      	subs	r3, r1, r3
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	3332      	adds	r3, #50	; 0x32
 80071c8:	4a33      	ldr	r2, [pc, #204]	; (8007298 <UART_SetConfig+0x4e4>)
 80071ca:	fba2 2303 	umull	r2, r3, r2, r3
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071d4:	441c      	add	r4, r3
 80071d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071da:	2200      	movs	r2, #0
 80071dc:	673b      	str	r3, [r7, #112]	; 0x70
 80071de:	677a      	str	r2, [r7, #116]	; 0x74
 80071e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	1891      	adds	r1, r2, r2
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	415b      	adcs	r3, r3
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071f4:	4641      	mov	r1, r8
 80071f6:	1851      	adds	r1, r2, r1
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	4649      	mov	r1, r9
 80071fc:	414b      	adcs	r3, r1
 80071fe:	607b      	str	r3, [r7, #4]
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800720c:	4659      	mov	r1, fp
 800720e:	00cb      	lsls	r3, r1, #3
 8007210:	4651      	mov	r1, sl
 8007212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007216:	4651      	mov	r1, sl
 8007218:	00ca      	lsls	r2, r1, #3
 800721a:	4610      	mov	r0, r2
 800721c:	4619      	mov	r1, r3
 800721e:	4603      	mov	r3, r0
 8007220:	4642      	mov	r2, r8
 8007222:	189b      	adds	r3, r3, r2
 8007224:	66bb      	str	r3, [r7, #104]	; 0x68
 8007226:	464b      	mov	r3, r9
 8007228:	460a      	mov	r2, r1
 800722a:	eb42 0303 	adc.w	r3, r2, r3
 800722e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	663b      	str	r3, [r7, #96]	; 0x60
 800723a:	667a      	str	r2, [r7, #100]	; 0x64
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007248:	4649      	mov	r1, r9
 800724a:	008b      	lsls	r3, r1, #2
 800724c:	4641      	mov	r1, r8
 800724e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007252:	4641      	mov	r1, r8
 8007254:	008a      	lsls	r2, r1, #2
 8007256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800725a:	f7f9 fabb 	bl	80007d4 <__aeabi_uldivmod>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <UART_SetConfig+0x4e4>)
 8007264:	fba3 1302 	umull	r1, r3, r3, r2
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	2164      	movs	r1, #100	; 0x64
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	3332      	adds	r3, #50	; 0x32
 8007276:	4a08      	ldr	r2, [pc, #32]	; (8007298 <UART_SetConfig+0x4e4>)
 8007278:	fba2 2303 	umull	r2, r3, r2, r3
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	f003 020f 	and.w	r2, r3, #15
 8007282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4422      	add	r2, r4
 800728a:	609a      	str	r2, [r3, #8]
}
 800728c:	bf00      	nop
 800728e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007292:	46bd      	mov	sp, r7
 8007294:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007298:	51eb851f 	.word	0x51eb851f

0800729c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	f023 0101 	bic.w	r1, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d102      	bne.n	80072cc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80072c6:	2340      	movs	r3, #64	; 0x40
 80072c8:	617b      	str	r3, [r7, #20]
 80072ca:	e001      	b.n	80072d0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80072dc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80072e2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80072e8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80072ee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80072f4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80072fa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8007300:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007306:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800730c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800732a:	4b10      	ldr	r3, [pc, #64]	; (800736c <FSMC_NORSRAM_Init+0xd0>)
 800732c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007334:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800733c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	43db      	mvns	r3, r3
 800734c:	ea02 0103 	and.w	r1, r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4319      	orrs	r1, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	371c      	adds	r7, #28
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	0008fb7f 	.word	0x0008fb7f

08007370 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007386:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	431a      	orrs	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	431a      	orrs	r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	041b      	lsls	r3, r3, #16
 80073a4:	431a      	orrs	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	051b      	lsls	r3, r3, #20
 80073ae:	431a      	orrs	r2, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	3b02      	subs	r3, #2
 80073b6:	061b      	lsls	r3, r3, #24
 80073b8:	431a      	orrs	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	4313      	orrs	r3, r2
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	3201      	adds	r2, #1
 80073c4:	4319      	orrs	r1, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073f0:	d11d      	bne.n	800742e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073fa:	4b13      	ldr	r3, [pc, #76]	; (8007448 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	6811      	ldr	r1, [r2, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	6852      	ldr	r2, [r2, #4]
 8007406:	0112      	lsls	r2, r2, #4
 8007408:	4311      	orrs	r1, r2
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	6892      	ldr	r2, [r2, #8]
 800740e:	0212      	lsls	r2, r2, #8
 8007410:	4311      	orrs	r1, r2
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	6992      	ldr	r2, [r2, #24]
 8007416:	4311      	orrs	r1, r2
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	68d2      	ldr	r2, [r2, #12]
 800741c:	0412      	lsls	r2, r2, #16
 800741e:	430a      	orrs	r2, r1
 8007420:	ea43 0102 	orr.w	r1, r3, r2
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800742c:	e005      	b.n	800743a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	cff00000 	.word	0xcff00000

0800744c <std>:
 800744c:	2300      	movs	r3, #0
 800744e:	b510      	push	{r4, lr}
 8007450:	4604      	mov	r4, r0
 8007452:	e9c0 3300 	strd	r3, r3, [r0]
 8007456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800745a:	6083      	str	r3, [r0, #8]
 800745c:	8181      	strh	r1, [r0, #12]
 800745e:	6643      	str	r3, [r0, #100]	; 0x64
 8007460:	81c2      	strh	r2, [r0, #14]
 8007462:	6183      	str	r3, [r0, #24]
 8007464:	4619      	mov	r1, r3
 8007466:	2208      	movs	r2, #8
 8007468:	305c      	adds	r0, #92	; 0x5c
 800746a:	f000 f9ed 	bl	8007848 <memset>
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <std+0x58>)
 8007470:	6263      	str	r3, [r4, #36]	; 0x24
 8007472:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <std+0x5c>)
 8007474:	62a3      	str	r3, [r4, #40]	; 0x28
 8007476:	4b0d      	ldr	r3, [pc, #52]	; (80074ac <std+0x60>)
 8007478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800747a:	4b0d      	ldr	r3, [pc, #52]	; (80074b0 <std+0x64>)
 800747c:	6323      	str	r3, [r4, #48]	; 0x30
 800747e:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <std+0x68>)
 8007480:	6224      	str	r4, [r4, #32]
 8007482:	429c      	cmp	r4, r3
 8007484:	d006      	beq.n	8007494 <std+0x48>
 8007486:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800748a:	4294      	cmp	r4, r2
 800748c:	d002      	beq.n	8007494 <std+0x48>
 800748e:	33d0      	adds	r3, #208	; 0xd0
 8007490:	429c      	cmp	r4, r3
 8007492:	d105      	bne.n	80074a0 <std+0x54>
 8007494:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800749c:	f000 ba4c 	b.w	8007938 <__retarget_lock_init_recursive>
 80074a0:	bd10      	pop	{r4, pc}
 80074a2:	bf00      	nop
 80074a4:	08007699 	.word	0x08007699
 80074a8:	080076bb 	.word	0x080076bb
 80074ac:	080076f3 	.word	0x080076f3
 80074b0:	08007717 	.word	0x08007717
 80074b4:	20000228 	.word	0x20000228

080074b8 <stdio_exit_handler>:
 80074b8:	4a02      	ldr	r2, [pc, #8]	; (80074c4 <stdio_exit_handler+0xc>)
 80074ba:	4903      	ldr	r1, [pc, #12]	; (80074c8 <stdio_exit_handler+0x10>)
 80074bc:	4803      	ldr	r0, [pc, #12]	; (80074cc <stdio_exit_handler+0x14>)
 80074be:	f000 b869 	b.w	8007594 <_fwalk_sglue>
 80074c2:	bf00      	nop
 80074c4:	20000014 	.word	0x20000014
 80074c8:	08007c3d 	.word	0x08007c3d
 80074cc:	20000020 	.word	0x20000020

080074d0 <cleanup_stdio>:
 80074d0:	6841      	ldr	r1, [r0, #4]
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <cleanup_stdio+0x34>)
 80074d4:	4299      	cmp	r1, r3
 80074d6:	b510      	push	{r4, lr}
 80074d8:	4604      	mov	r4, r0
 80074da:	d001      	beq.n	80074e0 <cleanup_stdio+0x10>
 80074dc:	f000 fbae 	bl	8007c3c <_fflush_r>
 80074e0:	68a1      	ldr	r1, [r4, #8]
 80074e2:	4b09      	ldr	r3, [pc, #36]	; (8007508 <cleanup_stdio+0x38>)
 80074e4:	4299      	cmp	r1, r3
 80074e6:	d002      	beq.n	80074ee <cleanup_stdio+0x1e>
 80074e8:	4620      	mov	r0, r4
 80074ea:	f000 fba7 	bl	8007c3c <_fflush_r>
 80074ee:	68e1      	ldr	r1, [r4, #12]
 80074f0:	4b06      	ldr	r3, [pc, #24]	; (800750c <cleanup_stdio+0x3c>)
 80074f2:	4299      	cmp	r1, r3
 80074f4:	d004      	beq.n	8007500 <cleanup_stdio+0x30>
 80074f6:	4620      	mov	r0, r4
 80074f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074fc:	f000 bb9e 	b.w	8007c3c <_fflush_r>
 8007500:	bd10      	pop	{r4, pc}
 8007502:	bf00      	nop
 8007504:	20000228 	.word	0x20000228
 8007508:	20000290 	.word	0x20000290
 800750c:	200002f8 	.word	0x200002f8

08007510 <global_stdio_init.part.0>:
 8007510:	b510      	push	{r4, lr}
 8007512:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <global_stdio_init.part.0+0x30>)
 8007514:	4c0b      	ldr	r4, [pc, #44]	; (8007544 <global_stdio_init.part.0+0x34>)
 8007516:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <global_stdio_init.part.0+0x38>)
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	4620      	mov	r0, r4
 800751c:	2200      	movs	r2, #0
 800751e:	2104      	movs	r1, #4
 8007520:	f7ff ff94 	bl	800744c <std>
 8007524:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007528:	2201      	movs	r2, #1
 800752a:	2109      	movs	r1, #9
 800752c:	f7ff ff8e 	bl	800744c <std>
 8007530:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007534:	2202      	movs	r2, #2
 8007536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800753a:	2112      	movs	r1, #18
 800753c:	f7ff bf86 	b.w	800744c <std>
 8007540:	20000360 	.word	0x20000360
 8007544:	20000228 	.word	0x20000228
 8007548:	080074b9 	.word	0x080074b9

0800754c <__sfp_lock_acquire>:
 800754c:	4801      	ldr	r0, [pc, #4]	; (8007554 <__sfp_lock_acquire+0x8>)
 800754e:	f000 b9f4 	b.w	800793a <__retarget_lock_acquire_recursive>
 8007552:	bf00      	nop
 8007554:	20000369 	.word	0x20000369

08007558 <__sfp_lock_release>:
 8007558:	4801      	ldr	r0, [pc, #4]	; (8007560 <__sfp_lock_release+0x8>)
 800755a:	f000 b9ef 	b.w	800793c <__retarget_lock_release_recursive>
 800755e:	bf00      	nop
 8007560:	20000369 	.word	0x20000369

08007564 <__sinit>:
 8007564:	b510      	push	{r4, lr}
 8007566:	4604      	mov	r4, r0
 8007568:	f7ff fff0 	bl	800754c <__sfp_lock_acquire>
 800756c:	6a23      	ldr	r3, [r4, #32]
 800756e:	b11b      	cbz	r3, 8007578 <__sinit+0x14>
 8007570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007574:	f7ff bff0 	b.w	8007558 <__sfp_lock_release>
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <__sinit+0x28>)
 800757a:	6223      	str	r3, [r4, #32]
 800757c:	4b04      	ldr	r3, [pc, #16]	; (8007590 <__sinit+0x2c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f5      	bne.n	8007570 <__sinit+0xc>
 8007584:	f7ff ffc4 	bl	8007510 <global_stdio_init.part.0>
 8007588:	e7f2      	b.n	8007570 <__sinit+0xc>
 800758a:	bf00      	nop
 800758c:	080074d1 	.word	0x080074d1
 8007590:	20000360 	.word	0x20000360

08007594 <_fwalk_sglue>:
 8007594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007598:	4607      	mov	r7, r0
 800759a:	4688      	mov	r8, r1
 800759c:	4614      	mov	r4, r2
 800759e:	2600      	movs	r6, #0
 80075a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075a4:	f1b9 0901 	subs.w	r9, r9, #1
 80075a8:	d505      	bpl.n	80075b6 <_fwalk_sglue+0x22>
 80075aa:	6824      	ldr	r4, [r4, #0]
 80075ac:	2c00      	cmp	r4, #0
 80075ae:	d1f7      	bne.n	80075a0 <_fwalk_sglue+0xc>
 80075b0:	4630      	mov	r0, r6
 80075b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d907      	bls.n	80075cc <_fwalk_sglue+0x38>
 80075bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075c0:	3301      	adds	r3, #1
 80075c2:	d003      	beq.n	80075cc <_fwalk_sglue+0x38>
 80075c4:	4629      	mov	r1, r5
 80075c6:	4638      	mov	r0, r7
 80075c8:	47c0      	blx	r8
 80075ca:	4306      	orrs	r6, r0
 80075cc:	3568      	adds	r5, #104	; 0x68
 80075ce:	e7e9      	b.n	80075a4 <_fwalk_sglue+0x10>

080075d0 <putchar>:
 80075d0:	4b02      	ldr	r3, [pc, #8]	; (80075dc <putchar+0xc>)
 80075d2:	4601      	mov	r1, r0
 80075d4:	6818      	ldr	r0, [r3, #0]
 80075d6:	6882      	ldr	r2, [r0, #8]
 80075d8:	f000 bbba 	b.w	8007d50 <_putc_r>
 80075dc:	2000006c 	.word	0x2000006c

080075e0 <_puts_r>:
 80075e0:	6a03      	ldr	r3, [r0, #32]
 80075e2:	b570      	push	{r4, r5, r6, lr}
 80075e4:	6884      	ldr	r4, [r0, #8]
 80075e6:	4605      	mov	r5, r0
 80075e8:	460e      	mov	r6, r1
 80075ea:	b90b      	cbnz	r3, 80075f0 <_puts_r+0x10>
 80075ec:	f7ff ffba 	bl	8007564 <__sinit>
 80075f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075f2:	07db      	lsls	r3, r3, #31
 80075f4:	d405      	bmi.n	8007602 <_puts_r+0x22>
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	0598      	lsls	r0, r3, #22
 80075fa:	d402      	bmi.n	8007602 <_puts_r+0x22>
 80075fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075fe:	f000 f99c 	bl	800793a <__retarget_lock_acquire_recursive>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	0719      	lsls	r1, r3, #28
 8007606:	d513      	bpl.n	8007630 <_puts_r+0x50>
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	b18b      	cbz	r3, 8007630 <_puts_r+0x50>
 800760c:	3e01      	subs	r6, #1
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007614:	3b01      	subs	r3, #1
 8007616:	60a3      	str	r3, [r4, #8]
 8007618:	b9e9      	cbnz	r1, 8007656 <_puts_r+0x76>
 800761a:	2b00      	cmp	r3, #0
 800761c:	da2e      	bge.n	800767c <_puts_r+0x9c>
 800761e:	4622      	mov	r2, r4
 8007620:	210a      	movs	r1, #10
 8007622:	4628      	mov	r0, r5
 8007624:	f000 f87b 	bl	800771e <__swbuf_r>
 8007628:	3001      	adds	r0, #1
 800762a:	d007      	beq.n	800763c <_puts_r+0x5c>
 800762c:	250a      	movs	r5, #10
 800762e:	e007      	b.n	8007640 <_puts_r+0x60>
 8007630:	4621      	mov	r1, r4
 8007632:	4628      	mov	r0, r5
 8007634:	f000 f8b0 	bl	8007798 <__swsetup_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	d0e7      	beq.n	800760c <_puts_r+0x2c>
 800763c:	f04f 35ff 	mov.w	r5, #4294967295
 8007640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007642:	07da      	lsls	r2, r3, #31
 8007644:	d405      	bmi.n	8007652 <_puts_r+0x72>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	059b      	lsls	r3, r3, #22
 800764a:	d402      	bmi.n	8007652 <_puts_r+0x72>
 800764c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800764e:	f000 f975 	bl	800793c <__retarget_lock_release_recursive>
 8007652:	4628      	mov	r0, r5
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	2b00      	cmp	r3, #0
 8007658:	da04      	bge.n	8007664 <_puts_r+0x84>
 800765a:	69a2      	ldr	r2, [r4, #24]
 800765c:	429a      	cmp	r2, r3
 800765e:	dc06      	bgt.n	800766e <_puts_r+0x8e>
 8007660:	290a      	cmp	r1, #10
 8007662:	d004      	beq.n	800766e <_puts_r+0x8e>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	6022      	str	r2, [r4, #0]
 800766a:	7019      	strb	r1, [r3, #0]
 800766c:	e7cf      	b.n	800760e <_puts_r+0x2e>
 800766e:	4622      	mov	r2, r4
 8007670:	4628      	mov	r0, r5
 8007672:	f000 f854 	bl	800771e <__swbuf_r>
 8007676:	3001      	adds	r0, #1
 8007678:	d1c9      	bne.n	800760e <_puts_r+0x2e>
 800767a:	e7df      	b.n	800763c <_puts_r+0x5c>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	250a      	movs	r5, #10
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	6022      	str	r2, [r4, #0]
 8007684:	701d      	strb	r5, [r3, #0]
 8007686:	e7db      	b.n	8007640 <_puts_r+0x60>

08007688 <puts>:
 8007688:	4b02      	ldr	r3, [pc, #8]	; (8007694 <puts+0xc>)
 800768a:	4601      	mov	r1, r0
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	f7ff bfa7 	b.w	80075e0 <_puts_r>
 8007692:	bf00      	nop
 8007694:	2000006c 	.word	0x2000006c

08007698 <__sread>:
 8007698:	b510      	push	{r4, lr}
 800769a:	460c      	mov	r4, r1
 800769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a0:	f000 f8fc 	bl	800789c <_read_r>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	bfab      	itete	ge
 80076a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076aa:	89a3      	ldrhlt	r3, [r4, #12]
 80076ac:	181b      	addge	r3, r3, r0
 80076ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076b2:	bfac      	ite	ge
 80076b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80076b6:	81a3      	strhlt	r3, [r4, #12]
 80076b8:	bd10      	pop	{r4, pc}

080076ba <__swrite>:
 80076ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076be:	461f      	mov	r7, r3
 80076c0:	898b      	ldrh	r3, [r1, #12]
 80076c2:	05db      	lsls	r3, r3, #23
 80076c4:	4605      	mov	r5, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	4616      	mov	r6, r2
 80076ca:	d505      	bpl.n	80076d8 <__swrite+0x1e>
 80076cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d0:	2302      	movs	r3, #2
 80076d2:	2200      	movs	r2, #0
 80076d4:	f000 f8d0 	bl	8007878 <_lseek_r>
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	4632      	mov	r2, r6
 80076e6:	463b      	mov	r3, r7
 80076e8:	4628      	mov	r0, r5
 80076ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ee:	f000 b8e7 	b.w	80078c0 <_write_r>

080076f2 <__sseek>:
 80076f2:	b510      	push	{r4, lr}
 80076f4:	460c      	mov	r4, r1
 80076f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fa:	f000 f8bd 	bl	8007878 <_lseek_r>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	bf15      	itete	ne
 8007704:	6560      	strne	r0, [r4, #84]	; 0x54
 8007706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800770a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800770e:	81a3      	strheq	r3, [r4, #12]
 8007710:	bf18      	it	ne
 8007712:	81a3      	strhne	r3, [r4, #12]
 8007714:	bd10      	pop	{r4, pc}

08007716 <__sclose>:
 8007716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800771a:	f000 b89d 	b.w	8007858 <_close_r>

0800771e <__swbuf_r>:
 800771e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007720:	460e      	mov	r6, r1
 8007722:	4614      	mov	r4, r2
 8007724:	4605      	mov	r5, r0
 8007726:	b118      	cbz	r0, 8007730 <__swbuf_r+0x12>
 8007728:	6a03      	ldr	r3, [r0, #32]
 800772a:	b90b      	cbnz	r3, 8007730 <__swbuf_r+0x12>
 800772c:	f7ff ff1a 	bl	8007564 <__sinit>
 8007730:	69a3      	ldr	r3, [r4, #24]
 8007732:	60a3      	str	r3, [r4, #8]
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	071a      	lsls	r2, r3, #28
 8007738:	d525      	bpl.n	8007786 <__swbuf_r+0x68>
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	b31b      	cbz	r3, 8007786 <__swbuf_r+0x68>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	6922      	ldr	r2, [r4, #16]
 8007742:	1a98      	subs	r0, r3, r2
 8007744:	6963      	ldr	r3, [r4, #20]
 8007746:	b2f6      	uxtb	r6, r6
 8007748:	4283      	cmp	r3, r0
 800774a:	4637      	mov	r7, r6
 800774c:	dc04      	bgt.n	8007758 <__swbuf_r+0x3a>
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f000 fa73 	bl	8007c3c <_fflush_r>
 8007756:	b9e0      	cbnz	r0, 8007792 <__swbuf_r+0x74>
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	3b01      	subs	r3, #1
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	6022      	str	r2, [r4, #0]
 8007764:	701e      	strb	r6, [r3, #0]
 8007766:	6962      	ldr	r2, [r4, #20]
 8007768:	1c43      	adds	r3, r0, #1
 800776a:	429a      	cmp	r2, r3
 800776c:	d004      	beq.n	8007778 <__swbuf_r+0x5a>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	07db      	lsls	r3, r3, #31
 8007772:	d506      	bpl.n	8007782 <__swbuf_r+0x64>
 8007774:	2e0a      	cmp	r6, #10
 8007776:	d104      	bne.n	8007782 <__swbuf_r+0x64>
 8007778:	4621      	mov	r1, r4
 800777a:	4628      	mov	r0, r5
 800777c:	f000 fa5e 	bl	8007c3c <_fflush_r>
 8007780:	b938      	cbnz	r0, 8007792 <__swbuf_r+0x74>
 8007782:	4638      	mov	r0, r7
 8007784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007786:	4621      	mov	r1, r4
 8007788:	4628      	mov	r0, r5
 800778a:	f000 f805 	bl	8007798 <__swsetup_r>
 800778e:	2800      	cmp	r0, #0
 8007790:	d0d5      	beq.n	800773e <__swbuf_r+0x20>
 8007792:	f04f 37ff 	mov.w	r7, #4294967295
 8007796:	e7f4      	b.n	8007782 <__swbuf_r+0x64>

08007798 <__swsetup_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4b2a      	ldr	r3, [pc, #168]	; (8007844 <__swsetup_r+0xac>)
 800779c:	4605      	mov	r5, r0
 800779e:	6818      	ldr	r0, [r3, #0]
 80077a0:	460c      	mov	r4, r1
 80077a2:	b118      	cbz	r0, 80077ac <__swsetup_r+0x14>
 80077a4:	6a03      	ldr	r3, [r0, #32]
 80077a6:	b90b      	cbnz	r3, 80077ac <__swsetup_r+0x14>
 80077a8:	f7ff fedc 	bl	8007564 <__sinit>
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077b2:	0718      	lsls	r0, r3, #28
 80077b4:	d422      	bmi.n	80077fc <__swsetup_r+0x64>
 80077b6:	06d9      	lsls	r1, r3, #27
 80077b8:	d407      	bmi.n	80077ca <__swsetup_r+0x32>
 80077ba:	2309      	movs	r3, #9
 80077bc:	602b      	str	r3, [r5, #0]
 80077be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077c2:	81a3      	strh	r3, [r4, #12]
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	e034      	b.n	8007834 <__swsetup_r+0x9c>
 80077ca:	0758      	lsls	r0, r3, #29
 80077cc:	d512      	bpl.n	80077f4 <__swsetup_r+0x5c>
 80077ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077d0:	b141      	cbz	r1, 80077e4 <__swsetup_r+0x4c>
 80077d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077d6:	4299      	cmp	r1, r3
 80077d8:	d002      	beq.n	80077e0 <__swsetup_r+0x48>
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f8b0 	bl	8007940 <_free_r>
 80077e0:	2300      	movs	r3, #0
 80077e2:	6363      	str	r3, [r4, #52]	; 0x34
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	2300      	movs	r3, #0
 80077ee:	6063      	str	r3, [r4, #4]
 80077f0:	6923      	ldr	r3, [r4, #16]
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f043 0308 	orr.w	r3, r3, #8
 80077fa:	81a3      	strh	r3, [r4, #12]
 80077fc:	6923      	ldr	r3, [r4, #16]
 80077fe:	b94b      	cbnz	r3, 8007814 <__swsetup_r+0x7c>
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800780a:	d003      	beq.n	8007814 <__swsetup_r+0x7c>
 800780c:	4621      	mov	r1, r4
 800780e:	4628      	mov	r0, r5
 8007810:	f000 fa62 	bl	8007cd8 <__smakebuf_r>
 8007814:	89a0      	ldrh	r0, [r4, #12]
 8007816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800781a:	f010 0301 	ands.w	r3, r0, #1
 800781e:	d00a      	beq.n	8007836 <__swsetup_r+0x9e>
 8007820:	2300      	movs	r3, #0
 8007822:	60a3      	str	r3, [r4, #8]
 8007824:	6963      	ldr	r3, [r4, #20]
 8007826:	425b      	negs	r3, r3
 8007828:	61a3      	str	r3, [r4, #24]
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	b943      	cbnz	r3, 8007840 <__swsetup_r+0xa8>
 800782e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007832:	d1c4      	bne.n	80077be <__swsetup_r+0x26>
 8007834:	bd38      	pop	{r3, r4, r5, pc}
 8007836:	0781      	lsls	r1, r0, #30
 8007838:	bf58      	it	pl
 800783a:	6963      	ldrpl	r3, [r4, #20]
 800783c:	60a3      	str	r3, [r4, #8]
 800783e:	e7f4      	b.n	800782a <__swsetup_r+0x92>
 8007840:	2000      	movs	r0, #0
 8007842:	e7f7      	b.n	8007834 <__swsetup_r+0x9c>
 8007844:	2000006c 	.word	0x2000006c

08007848 <memset>:
 8007848:	4402      	add	r2, r0
 800784a:	4603      	mov	r3, r0
 800784c:	4293      	cmp	r3, r2
 800784e:	d100      	bne.n	8007852 <memset+0xa>
 8007850:	4770      	bx	lr
 8007852:	f803 1b01 	strb.w	r1, [r3], #1
 8007856:	e7f9      	b.n	800784c <memset+0x4>

08007858 <_close_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d06      	ldr	r5, [pc, #24]	; (8007874 <_close_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7fd f973 	bl	8004b4e <_close>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_close_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_close_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	20000364 	.word	0x20000364

08007878 <_lseek_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d07      	ldr	r5, [pc, #28]	; (8007898 <_lseek_r+0x20>)
 800787c:	4604      	mov	r4, r0
 800787e:	4608      	mov	r0, r1
 8007880:	4611      	mov	r1, r2
 8007882:	2200      	movs	r2, #0
 8007884:	602a      	str	r2, [r5, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	f7fd f988 	bl	8004b9c <_lseek>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_lseek_r+0x1e>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_lseek_r+0x1e>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20000364 	.word	0x20000364

0800789c <_read_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4d07      	ldr	r5, [pc, #28]	; (80078bc <_read_r+0x20>)
 80078a0:	4604      	mov	r4, r0
 80078a2:	4608      	mov	r0, r1
 80078a4:	4611      	mov	r1, r2
 80078a6:	2200      	movs	r2, #0
 80078a8:	602a      	str	r2, [r5, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f7fd f916 	bl	8004adc <_read>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_read_r+0x1e>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_read_r+0x1e>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	20000364 	.word	0x20000364

080078c0 <_write_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4d07      	ldr	r5, [pc, #28]	; (80078e0 <_write_r+0x20>)
 80078c4:	4604      	mov	r4, r0
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	2200      	movs	r2, #0
 80078cc:	602a      	str	r2, [r5, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f7fd f921 	bl	8004b16 <_write>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_write_r+0x1e>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_write_r+0x1e>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20000364 	.word	0x20000364

080078e4 <__errno>:
 80078e4:	4b01      	ldr	r3, [pc, #4]	; (80078ec <__errno+0x8>)
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	2000006c 	.word	0x2000006c

080078f0 <__libc_init_array>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	4d0d      	ldr	r5, [pc, #52]	; (8007928 <__libc_init_array+0x38>)
 80078f4:	4c0d      	ldr	r4, [pc, #52]	; (800792c <__libc_init_array+0x3c>)
 80078f6:	1b64      	subs	r4, r4, r5
 80078f8:	10a4      	asrs	r4, r4, #2
 80078fa:	2600      	movs	r6, #0
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	d109      	bne.n	8007914 <__libc_init_array+0x24>
 8007900:	4d0b      	ldr	r5, [pc, #44]	; (8007930 <__libc_init_array+0x40>)
 8007902:	4c0c      	ldr	r4, [pc, #48]	; (8007934 <__libc_init_array+0x44>)
 8007904:	f000 fa8a 	bl	8007e1c <_init>
 8007908:	1b64      	subs	r4, r4, r5
 800790a:	10a4      	asrs	r4, r4, #2
 800790c:	2600      	movs	r6, #0
 800790e:	42a6      	cmp	r6, r4
 8007910:	d105      	bne.n	800791e <__libc_init_array+0x2e>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	f855 3b04 	ldr.w	r3, [r5], #4
 8007918:	4798      	blx	r3
 800791a:	3601      	adds	r6, #1
 800791c:	e7ee      	b.n	80078fc <__libc_init_array+0xc>
 800791e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007922:	4798      	blx	r3
 8007924:	3601      	adds	r6, #1
 8007926:	e7f2      	b.n	800790e <__libc_init_array+0x1e>
 8007928:	0800aea4 	.word	0x0800aea4
 800792c:	0800aea4 	.word	0x0800aea4
 8007930:	0800aea4 	.word	0x0800aea4
 8007934:	0800aea8 	.word	0x0800aea8

08007938 <__retarget_lock_init_recursive>:
 8007938:	4770      	bx	lr

0800793a <__retarget_lock_acquire_recursive>:
 800793a:	4770      	bx	lr

0800793c <__retarget_lock_release_recursive>:
 800793c:	4770      	bx	lr
	...

08007940 <_free_r>:
 8007940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007942:	2900      	cmp	r1, #0
 8007944:	d044      	beq.n	80079d0 <_free_r+0x90>
 8007946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800794a:	9001      	str	r0, [sp, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f1a1 0404 	sub.w	r4, r1, #4
 8007952:	bfb8      	it	lt
 8007954:	18e4      	addlt	r4, r4, r3
 8007956:	f000 f8df 	bl	8007b18 <__malloc_lock>
 800795a:	4a1e      	ldr	r2, [pc, #120]	; (80079d4 <_free_r+0x94>)
 800795c:	9801      	ldr	r0, [sp, #4]
 800795e:	6813      	ldr	r3, [r2, #0]
 8007960:	b933      	cbnz	r3, 8007970 <_free_r+0x30>
 8007962:	6063      	str	r3, [r4, #4]
 8007964:	6014      	str	r4, [r2, #0]
 8007966:	b003      	add	sp, #12
 8007968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800796c:	f000 b8da 	b.w	8007b24 <__malloc_unlock>
 8007970:	42a3      	cmp	r3, r4
 8007972:	d908      	bls.n	8007986 <_free_r+0x46>
 8007974:	6825      	ldr	r5, [r4, #0]
 8007976:	1961      	adds	r1, r4, r5
 8007978:	428b      	cmp	r3, r1
 800797a:	bf01      	itttt	eq
 800797c:	6819      	ldreq	r1, [r3, #0]
 800797e:	685b      	ldreq	r3, [r3, #4]
 8007980:	1949      	addeq	r1, r1, r5
 8007982:	6021      	streq	r1, [r4, #0]
 8007984:	e7ed      	b.n	8007962 <_free_r+0x22>
 8007986:	461a      	mov	r2, r3
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	b10b      	cbz	r3, 8007990 <_free_r+0x50>
 800798c:	42a3      	cmp	r3, r4
 800798e:	d9fa      	bls.n	8007986 <_free_r+0x46>
 8007990:	6811      	ldr	r1, [r2, #0]
 8007992:	1855      	adds	r5, r2, r1
 8007994:	42a5      	cmp	r5, r4
 8007996:	d10b      	bne.n	80079b0 <_free_r+0x70>
 8007998:	6824      	ldr	r4, [r4, #0]
 800799a:	4421      	add	r1, r4
 800799c:	1854      	adds	r4, r2, r1
 800799e:	42a3      	cmp	r3, r4
 80079a0:	6011      	str	r1, [r2, #0]
 80079a2:	d1e0      	bne.n	8007966 <_free_r+0x26>
 80079a4:	681c      	ldr	r4, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	6053      	str	r3, [r2, #4]
 80079aa:	440c      	add	r4, r1
 80079ac:	6014      	str	r4, [r2, #0]
 80079ae:	e7da      	b.n	8007966 <_free_r+0x26>
 80079b0:	d902      	bls.n	80079b8 <_free_r+0x78>
 80079b2:	230c      	movs	r3, #12
 80079b4:	6003      	str	r3, [r0, #0]
 80079b6:	e7d6      	b.n	8007966 <_free_r+0x26>
 80079b8:	6825      	ldr	r5, [r4, #0]
 80079ba:	1961      	adds	r1, r4, r5
 80079bc:	428b      	cmp	r3, r1
 80079be:	bf04      	itt	eq
 80079c0:	6819      	ldreq	r1, [r3, #0]
 80079c2:	685b      	ldreq	r3, [r3, #4]
 80079c4:	6063      	str	r3, [r4, #4]
 80079c6:	bf04      	itt	eq
 80079c8:	1949      	addeq	r1, r1, r5
 80079ca:	6021      	streq	r1, [r4, #0]
 80079cc:	6054      	str	r4, [r2, #4]
 80079ce:	e7ca      	b.n	8007966 <_free_r+0x26>
 80079d0:	b003      	add	sp, #12
 80079d2:	bd30      	pop	{r4, r5, pc}
 80079d4:	2000036c 	.word	0x2000036c

080079d8 <sbrk_aligned>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4e0e      	ldr	r6, [pc, #56]	; (8007a14 <sbrk_aligned+0x3c>)
 80079dc:	460c      	mov	r4, r1
 80079de:	6831      	ldr	r1, [r6, #0]
 80079e0:	4605      	mov	r5, r0
 80079e2:	b911      	cbnz	r1, 80079ea <sbrk_aligned+0x12>
 80079e4:	f000 fa0a 	bl	8007dfc <_sbrk_r>
 80079e8:	6030      	str	r0, [r6, #0]
 80079ea:	4621      	mov	r1, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	f000 fa05 	bl	8007dfc <_sbrk_r>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d00a      	beq.n	8007a0c <sbrk_aligned+0x34>
 80079f6:	1cc4      	adds	r4, r0, #3
 80079f8:	f024 0403 	bic.w	r4, r4, #3
 80079fc:	42a0      	cmp	r0, r4
 80079fe:	d007      	beq.n	8007a10 <sbrk_aligned+0x38>
 8007a00:	1a21      	subs	r1, r4, r0
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 f9fa 	bl	8007dfc <_sbrk_r>
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d101      	bne.n	8007a10 <sbrk_aligned+0x38>
 8007a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a10:	4620      	mov	r0, r4
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	20000370 	.word	0x20000370

08007a18 <_malloc_r>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	1ccd      	adds	r5, r1, #3
 8007a1e:	f025 0503 	bic.w	r5, r5, #3
 8007a22:	3508      	adds	r5, #8
 8007a24:	2d0c      	cmp	r5, #12
 8007a26:	bf38      	it	cc
 8007a28:	250c      	movcc	r5, #12
 8007a2a:	2d00      	cmp	r5, #0
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	db01      	blt.n	8007a34 <_malloc_r+0x1c>
 8007a30:	42a9      	cmp	r1, r5
 8007a32:	d905      	bls.n	8007a40 <_malloc_r+0x28>
 8007a34:	230c      	movs	r3, #12
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	2600      	movs	r6, #0
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b14 <_malloc_r+0xfc>
 8007a44:	f000 f868 	bl	8007b18 <__malloc_lock>
 8007a48:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4c:	461c      	mov	r4, r3
 8007a4e:	bb5c      	cbnz	r4, 8007aa8 <_malloc_r+0x90>
 8007a50:	4629      	mov	r1, r5
 8007a52:	4638      	mov	r0, r7
 8007a54:	f7ff ffc0 	bl	80079d8 <sbrk_aligned>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	d155      	bne.n	8007b0a <_malloc_r+0xf2>
 8007a5e:	f8d8 4000 	ldr.w	r4, [r8]
 8007a62:	4626      	mov	r6, r4
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	d145      	bne.n	8007af4 <_malloc_r+0xdc>
 8007a68:	2c00      	cmp	r4, #0
 8007a6a:	d048      	beq.n	8007afe <_malloc_r+0xe6>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4638      	mov	r0, r7
 8007a72:	eb04 0903 	add.w	r9, r4, r3
 8007a76:	f000 f9c1 	bl	8007dfc <_sbrk_r>
 8007a7a:	4581      	cmp	r9, r0
 8007a7c:	d13f      	bne.n	8007afe <_malloc_r+0xe6>
 8007a7e:	6821      	ldr	r1, [r4, #0]
 8007a80:	1a6d      	subs	r5, r5, r1
 8007a82:	4629      	mov	r1, r5
 8007a84:	4638      	mov	r0, r7
 8007a86:	f7ff ffa7 	bl	80079d8 <sbrk_aligned>
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	d037      	beq.n	8007afe <_malloc_r+0xe6>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	442b      	add	r3, r5
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	f8d8 3000 	ldr.w	r3, [r8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d038      	beq.n	8007b0e <_malloc_r+0xf6>
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	42a2      	cmp	r2, r4
 8007aa0:	d12b      	bne.n	8007afa <_malloc_r+0xe2>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	605a      	str	r2, [r3, #4]
 8007aa6:	e00f      	b.n	8007ac8 <_malloc_r+0xb0>
 8007aa8:	6822      	ldr	r2, [r4, #0]
 8007aaa:	1b52      	subs	r2, r2, r5
 8007aac:	d41f      	bmi.n	8007aee <_malloc_r+0xd6>
 8007aae:	2a0b      	cmp	r2, #11
 8007ab0:	d917      	bls.n	8007ae2 <_malloc_r+0xca>
 8007ab2:	1961      	adds	r1, r4, r5
 8007ab4:	42a3      	cmp	r3, r4
 8007ab6:	6025      	str	r5, [r4, #0]
 8007ab8:	bf18      	it	ne
 8007aba:	6059      	strne	r1, [r3, #4]
 8007abc:	6863      	ldr	r3, [r4, #4]
 8007abe:	bf08      	it	eq
 8007ac0:	f8c8 1000 	streq.w	r1, [r8]
 8007ac4:	5162      	str	r2, [r4, r5]
 8007ac6:	604b      	str	r3, [r1, #4]
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f104 060b 	add.w	r6, r4, #11
 8007ace:	f000 f829 	bl	8007b24 <__malloc_unlock>
 8007ad2:	f026 0607 	bic.w	r6, r6, #7
 8007ad6:	1d23      	adds	r3, r4, #4
 8007ad8:	1af2      	subs	r2, r6, r3
 8007ada:	d0ae      	beq.n	8007a3a <_malloc_r+0x22>
 8007adc:	1b9b      	subs	r3, r3, r6
 8007ade:	50a3      	str	r3, [r4, r2]
 8007ae0:	e7ab      	b.n	8007a3a <_malloc_r+0x22>
 8007ae2:	42a3      	cmp	r3, r4
 8007ae4:	6862      	ldr	r2, [r4, #4]
 8007ae6:	d1dd      	bne.n	8007aa4 <_malloc_r+0x8c>
 8007ae8:	f8c8 2000 	str.w	r2, [r8]
 8007aec:	e7ec      	b.n	8007ac8 <_malloc_r+0xb0>
 8007aee:	4623      	mov	r3, r4
 8007af0:	6864      	ldr	r4, [r4, #4]
 8007af2:	e7ac      	b.n	8007a4e <_malloc_r+0x36>
 8007af4:	4634      	mov	r4, r6
 8007af6:	6876      	ldr	r6, [r6, #4]
 8007af8:	e7b4      	b.n	8007a64 <_malloc_r+0x4c>
 8007afa:	4613      	mov	r3, r2
 8007afc:	e7cc      	b.n	8007a98 <_malloc_r+0x80>
 8007afe:	230c      	movs	r3, #12
 8007b00:	603b      	str	r3, [r7, #0]
 8007b02:	4638      	mov	r0, r7
 8007b04:	f000 f80e 	bl	8007b24 <__malloc_unlock>
 8007b08:	e797      	b.n	8007a3a <_malloc_r+0x22>
 8007b0a:	6025      	str	r5, [r4, #0]
 8007b0c:	e7dc      	b.n	8007ac8 <_malloc_r+0xb0>
 8007b0e:	605b      	str	r3, [r3, #4]
 8007b10:	deff      	udf	#255	; 0xff
 8007b12:	bf00      	nop
 8007b14:	2000036c 	.word	0x2000036c

08007b18 <__malloc_lock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	; (8007b20 <__malloc_lock+0x8>)
 8007b1a:	f7ff bf0e 	b.w	800793a <__retarget_lock_acquire_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20000368 	.word	0x20000368

08007b24 <__malloc_unlock>:
 8007b24:	4801      	ldr	r0, [pc, #4]	; (8007b2c <__malloc_unlock+0x8>)
 8007b26:	f7ff bf09 	b.w	800793c <__retarget_lock_release_recursive>
 8007b2a:	bf00      	nop
 8007b2c:	20000368 	.word	0x20000368

08007b30 <__sflush_r>:
 8007b30:	898a      	ldrh	r2, [r1, #12]
 8007b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b36:	4605      	mov	r5, r0
 8007b38:	0710      	lsls	r0, r2, #28
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	d458      	bmi.n	8007bf0 <__sflush_r+0xc0>
 8007b3e:	684b      	ldr	r3, [r1, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dc05      	bgt.n	8007b50 <__sflush_r+0x20>
 8007b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dc02      	bgt.n	8007b50 <__sflush_r+0x20>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b52:	2e00      	cmp	r6, #0
 8007b54:	d0f9      	beq.n	8007b4a <__sflush_r+0x1a>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b5c:	682f      	ldr	r7, [r5, #0]
 8007b5e:	6a21      	ldr	r1, [r4, #32]
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	d032      	beq.n	8007bca <__sflush_r+0x9a>
 8007b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	075a      	lsls	r2, r3, #29
 8007b6a:	d505      	bpl.n	8007b78 <__sflush_r+0x48>
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	1ac0      	subs	r0, r0, r3
 8007b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b72:	b10b      	cbz	r3, 8007b78 <__sflush_r+0x48>
 8007b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b76:	1ac0      	subs	r0, r0, r3
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b7e:	6a21      	ldr	r1, [r4, #32]
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b0      	blx	r6
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	d106      	bne.n	8007b98 <__sflush_r+0x68>
 8007b8a:	6829      	ldr	r1, [r5, #0]
 8007b8c:	291d      	cmp	r1, #29
 8007b8e:	d82b      	bhi.n	8007be8 <__sflush_r+0xb8>
 8007b90:	4a29      	ldr	r2, [pc, #164]	; (8007c38 <__sflush_r+0x108>)
 8007b92:	410a      	asrs	r2, r1
 8007b94:	07d6      	lsls	r6, r2, #31
 8007b96:	d427      	bmi.n	8007be8 <__sflush_r+0xb8>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	6062      	str	r2, [r4, #4]
 8007b9c:	04d9      	lsls	r1, r3, #19
 8007b9e:	6922      	ldr	r2, [r4, #16]
 8007ba0:	6022      	str	r2, [r4, #0]
 8007ba2:	d504      	bpl.n	8007bae <__sflush_r+0x7e>
 8007ba4:	1c42      	adds	r2, r0, #1
 8007ba6:	d101      	bne.n	8007bac <__sflush_r+0x7c>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b903      	cbnz	r3, 8007bae <__sflush_r+0x7e>
 8007bac:	6560      	str	r0, [r4, #84]	; 0x54
 8007bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bb0:	602f      	str	r7, [r5, #0]
 8007bb2:	2900      	cmp	r1, #0
 8007bb4:	d0c9      	beq.n	8007b4a <__sflush_r+0x1a>
 8007bb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	d002      	beq.n	8007bc4 <__sflush_r+0x94>
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f7ff febe 	bl	8007940 <_free_r>
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	6360      	str	r0, [r4, #52]	; 0x34
 8007bc8:	e7c0      	b.n	8007b4c <__sflush_r+0x1c>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b0      	blx	r6
 8007bd0:	1c41      	adds	r1, r0, #1
 8007bd2:	d1c8      	bne.n	8007b66 <__sflush_r+0x36>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0c5      	beq.n	8007b66 <__sflush_r+0x36>
 8007bda:	2b1d      	cmp	r3, #29
 8007bdc:	d001      	beq.n	8007be2 <__sflush_r+0xb2>
 8007bde:	2b16      	cmp	r3, #22
 8007be0:	d101      	bne.n	8007be6 <__sflush_r+0xb6>
 8007be2:	602f      	str	r7, [r5, #0]
 8007be4:	e7b1      	b.n	8007b4a <__sflush_r+0x1a>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	e7ad      	b.n	8007b4c <__sflush_r+0x1c>
 8007bf0:	690f      	ldr	r7, [r1, #16]
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	d0a9      	beq.n	8007b4a <__sflush_r+0x1a>
 8007bf6:	0793      	lsls	r3, r2, #30
 8007bf8:	680e      	ldr	r6, [r1, #0]
 8007bfa:	bf08      	it	eq
 8007bfc:	694b      	ldreq	r3, [r1, #20]
 8007bfe:	600f      	str	r7, [r1, #0]
 8007c00:	bf18      	it	ne
 8007c02:	2300      	movne	r3, #0
 8007c04:	eba6 0807 	sub.w	r8, r6, r7
 8007c08:	608b      	str	r3, [r1, #8]
 8007c0a:	f1b8 0f00 	cmp.w	r8, #0
 8007c0e:	dd9c      	ble.n	8007b4a <__sflush_r+0x1a>
 8007c10:	6a21      	ldr	r1, [r4, #32]
 8007c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c14:	4643      	mov	r3, r8
 8007c16:	463a      	mov	r2, r7
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b0      	blx	r6
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	dc06      	bgt.n	8007c2e <__sflush_r+0xfe>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c26:	81a3      	strh	r3, [r4, #12]
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	e78e      	b.n	8007b4c <__sflush_r+0x1c>
 8007c2e:	4407      	add	r7, r0
 8007c30:	eba8 0800 	sub.w	r8, r8, r0
 8007c34:	e7e9      	b.n	8007c0a <__sflush_r+0xda>
 8007c36:	bf00      	nop
 8007c38:	dfbffffe 	.word	0xdfbffffe

08007c3c <_fflush_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	690b      	ldr	r3, [r1, #16]
 8007c40:	4605      	mov	r5, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	b913      	cbnz	r3, 8007c4c <_fflush_r+0x10>
 8007c46:	2500      	movs	r5, #0
 8007c48:	4628      	mov	r0, r5
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	b118      	cbz	r0, 8007c56 <_fflush_r+0x1a>
 8007c4e:	6a03      	ldr	r3, [r0, #32]
 8007c50:	b90b      	cbnz	r3, 8007c56 <_fflush_r+0x1a>
 8007c52:	f7ff fc87 	bl	8007564 <__sinit>
 8007c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0f3      	beq.n	8007c46 <_fflush_r+0xa>
 8007c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c60:	07d0      	lsls	r0, r2, #31
 8007c62:	d404      	bmi.n	8007c6e <_fflush_r+0x32>
 8007c64:	0599      	lsls	r1, r3, #22
 8007c66:	d402      	bmi.n	8007c6e <_fflush_r+0x32>
 8007c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c6a:	f7ff fe66 	bl	800793a <__retarget_lock_acquire_recursive>
 8007c6e:	4628      	mov	r0, r5
 8007c70:	4621      	mov	r1, r4
 8007c72:	f7ff ff5d 	bl	8007b30 <__sflush_r>
 8007c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c78:	07da      	lsls	r2, r3, #31
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	d4e4      	bmi.n	8007c48 <_fflush_r+0xc>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	059b      	lsls	r3, r3, #22
 8007c82:	d4e1      	bmi.n	8007c48 <_fflush_r+0xc>
 8007c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c86:	f7ff fe59 	bl	800793c <__retarget_lock_release_recursive>
 8007c8a:	e7dd      	b.n	8007c48 <_fflush_r+0xc>

08007c8c <__swhatbuf_r>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c94:	2900      	cmp	r1, #0
 8007c96:	b096      	sub	sp, #88	; 0x58
 8007c98:	4615      	mov	r5, r2
 8007c9a:	461e      	mov	r6, r3
 8007c9c:	da0d      	bge.n	8007cba <__swhatbuf_r+0x2e>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ca4:	f04f 0100 	mov.w	r1, #0
 8007ca8:	bf0c      	ite	eq
 8007caa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007cae:	2340      	movne	r3, #64	; 0x40
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	6031      	str	r1, [r6, #0]
 8007cb4:	602b      	str	r3, [r5, #0]
 8007cb6:	b016      	add	sp, #88	; 0x58
 8007cb8:	bd70      	pop	{r4, r5, r6, pc}
 8007cba:	466a      	mov	r2, sp
 8007cbc:	f000 f87c 	bl	8007db8 <_fstat_r>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	dbec      	blt.n	8007c9e <__swhatbuf_r+0x12>
 8007cc4:	9901      	ldr	r1, [sp, #4]
 8007cc6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007cca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007cce:	4259      	negs	r1, r3
 8007cd0:	4159      	adcs	r1, r3
 8007cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd6:	e7eb      	b.n	8007cb0 <__swhatbuf_r+0x24>

08007cd8 <__smakebuf_r>:
 8007cd8:	898b      	ldrh	r3, [r1, #12]
 8007cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cdc:	079d      	lsls	r5, r3, #30
 8007cde:	4606      	mov	r6, r0
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	d507      	bpl.n	8007cf4 <__smakebuf_r+0x1c>
 8007ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	6123      	str	r3, [r4, #16]
 8007cec:	2301      	movs	r3, #1
 8007cee:	6163      	str	r3, [r4, #20]
 8007cf0:	b002      	add	sp, #8
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}
 8007cf4:	ab01      	add	r3, sp, #4
 8007cf6:	466a      	mov	r2, sp
 8007cf8:	f7ff ffc8 	bl	8007c8c <__swhatbuf_r>
 8007cfc:	9900      	ldr	r1, [sp, #0]
 8007cfe:	4605      	mov	r5, r0
 8007d00:	4630      	mov	r0, r6
 8007d02:	f7ff fe89 	bl	8007a18 <_malloc_r>
 8007d06:	b948      	cbnz	r0, 8007d1c <__smakebuf_r+0x44>
 8007d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0c:	059a      	lsls	r2, r3, #22
 8007d0e:	d4ef      	bmi.n	8007cf0 <__smakebuf_r+0x18>
 8007d10:	f023 0303 	bic.w	r3, r3, #3
 8007d14:	f043 0302 	orr.w	r3, r3, #2
 8007d18:	81a3      	strh	r3, [r4, #12]
 8007d1a:	e7e3      	b.n	8007ce4 <__smakebuf_r+0xc>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	6020      	str	r0, [r4, #0]
 8007d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	9b00      	ldr	r3, [sp, #0]
 8007d28:	6163      	str	r3, [r4, #20]
 8007d2a:	9b01      	ldr	r3, [sp, #4]
 8007d2c:	6120      	str	r0, [r4, #16]
 8007d2e:	b15b      	cbz	r3, 8007d48 <__smakebuf_r+0x70>
 8007d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d34:	4630      	mov	r0, r6
 8007d36:	f000 f851 	bl	8007ddc <_isatty_r>
 8007d3a:	b128      	cbz	r0, 8007d48 <__smakebuf_r+0x70>
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	f023 0303 	bic.w	r3, r3, #3
 8007d42:	f043 0301 	orr.w	r3, r3, #1
 8007d46:	81a3      	strh	r3, [r4, #12]
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	431d      	orrs	r5, r3
 8007d4c:	81a5      	strh	r5, [r4, #12]
 8007d4e:	e7cf      	b.n	8007cf0 <__smakebuf_r+0x18>

08007d50 <_putc_r>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	460d      	mov	r5, r1
 8007d54:	4614      	mov	r4, r2
 8007d56:	4606      	mov	r6, r0
 8007d58:	b118      	cbz	r0, 8007d62 <_putc_r+0x12>
 8007d5a:	6a03      	ldr	r3, [r0, #32]
 8007d5c:	b90b      	cbnz	r3, 8007d62 <_putc_r+0x12>
 8007d5e:	f7ff fc01 	bl	8007564 <__sinit>
 8007d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d64:	07d8      	lsls	r0, r3, #31
 8007d66:	d405      	bmi.n	8007d74 <_putc_r+0x24>
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	0599      	lsls	r1, r3, #22
 8007d6c:	d402      	bmi.n	8007d74 <_putc_r+0x24>
 8007d6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d70:	f7ff fde3 	bl	800793a <__retarget_lock_acquire_recursive>
 8007d74:	68a3      	ldr	r3, [r4, #8]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	60a3      	str	r3, [r4, #8]
 8007d7c:	da05      	bge.n	8007d8a <_putc_r+0x3a>
 8007d7e:	69a2      	ldr	r2, [r4, #24]
 8007d80:	4293      	cmp	r3, r2
 8007d82:	db12      	blt.n	8007daa <_putc_r+0x5a>
 8007d84:	b2eb      	uxtb	r3, r5
 8007d86:	2b0a      	cmp	r3, #10
 8007d88:	d00f      	beq.n	8007daa <_putc_r+0x5a>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	6022      	str	r2, [r4, #0]
 8007d90:	701d      	strb	r5, [r3, #0]
 8007d92:	b2ed      	uxtb	r5, r5
 8007d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d96:	07da      	lsls	r2, r3, #31
 8007d98:	d405      	bmi.n	8007da6 <_putc_r+0x56>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	059b      	lsls	r3, r3, #22
 8007d9e:	d402      	bmi.n	8007da6 <_putc_r+0x56>
 8007da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007da2:	f7ff fdcb 	bl	800793c <__retarget_lock_release_recursive>
 8007da6:	4628      	mov	r0, r5
 8007da8:	bd70      	pop	{r4, r5, r6, pc}
 8007daa:	4629      	mov	r1, r5
 8007dac:	4622      	mov	r2, r4
 8007dae:	4630      	mov	r0, r6
 8007db0:	f7ff fcb5 	bl	800771e <__swbuf_r>
 8007db4:	4605      	mov	r5, r0
 8007db6:	e7ed      	b.n	8007d94 <_putc_r+0x44>

08007db8 <_fstat_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d07      	ldr	r5, [pc, #28]	; (8007dd8 <_fstat_r+0x20>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	f7fc fece 	bl	8004b66 <_fstat>
 8007dca:	1c43      	adds	r3, r0, #1
 8007dcc:	d102      	bne.n	8007dd4 <_fstat_r+0x1c>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	b103      	cbz	r3, 8007dd4 <_fstat_r+0x1c>
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	bd38      	pop	{r3, r4, r5, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000364 	.word	0x20000364

08007ddc <_isatty_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4d06      	ldr	r5, [pc, #24]	; (8007df8 <_isatty_r+0x1c>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	4604      	mov	r4, r0
 8007de4:	4608      	mov	r0, r1
 8007de6:	602b      	str	r3, [r5, #0]
 8007de8:	f7fc fecd 	bl	8004b86 <_isatty>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_isatty_r+0x1a>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_isatty_r+0x1a>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	20000364 	.word	0x20000364

08007dfc <_sbrk_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4d06      	ldr	r5, [pc, #24]	; (8007e18 <_sbrk_r+0x1c>)
 8007e00:	2300      	movs	r3, #0
 8007e02:	4604      	mov	r4, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	602b      	str	r3, [r5, #0]
 8007e08:	f7fc fed6 	bl	8004bb8 <_sbrk>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d102      	bne.n	8007e16 <_sbrk_r+0x1a>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	b103      	cbz	r3, 8007e16 <_sbrk_r+0x1a>
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	20000364 	.word	0x20000364

08007e1c <_init>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	bf00      	nop
 8007e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e22:	bc08      	pop	{r3}
 8007e24:	469e      	mov	lr, r3
 8007e26:	4770      	bx	lr

08007e28 <_fini>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr
