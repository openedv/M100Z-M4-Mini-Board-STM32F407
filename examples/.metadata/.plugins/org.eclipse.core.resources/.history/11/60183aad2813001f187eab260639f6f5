
13_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003900  0800afac  0800afac  0001afac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8ac  0800e8ac  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8ac  0800e8ac  0001e8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b4  0800e8b4  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8b4  0800e8b4  0001e8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8b8  0800e8b8  0001e8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800e8bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002019c  2**0
                  CONTENTS
 10 .bss          00000354  2000019c  2000019c  0002019c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f0  200004f0  0002019c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000153c5  00000000  00000000  0002020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ae5  00000000  00000000  000355d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001408  00000000  00000000  000390c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f5e  00000000  00000000  0003a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025733  00000000  00000000  0003b426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c854  00000000  00000000  00060b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7ffd  00000000  00000000  0007d3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005cd0  00000000  00000000  001553ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0015b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000019c 	.word	0x2000019c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af94 	.word	0x0800af94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	0800af94 	.word	0x0800af94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b970 	b.w	8000b74 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9e08      	ldr	r6, [sp, #32]
 80008b2:	460d      	mov	r5, r1
 80008b4:	4604      	mov	r4, r0
 80008b6:	460f      	mov	r7, r1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d14a      	bne.n	8000952 <__udivmoddi4+0xa6>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4694      	mov	ip, r2
 80008c0:	d965      	bls.n	800098e <__udivmoddi4+0xe2>
 80008c2:	fab2 f382 	clz	r3, r2
 80008c6:	b143      	cbz	r3, 80008da <__udivmoddi4+0x2e>
 80008c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008cc:	f1c3 0220 	rsb	r2, r3, #32
 80008d0:	409f      	lsls	r7, r3
 80008d2:	fa20 f202 	lsr.w	r2, r0, r2
 80008d6:	4317      	orrs	r7, r2
 80008d8:	409c      	lsls	r4, r3
 80008da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008de:	fa1f f58c 	uxth.w	r5, ip
 80008e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f0:	fb01 f005 	mul.w	r0, r1, r5
 80008f4:	4290      	cmp	r0, r2
 80008f6:	d90a      	bls.n	800090e <__udivmoddi4+0x62>
 80008f8:	eb1c 0202 	adds.w	r2, ip, r2
 80008fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000900:	f080 811c 	bcs.w	8000b3c <__udivmoddi4+0x290>
 8000904:	4290      	cmp	r0, r2
 8000906:	f240 8119 	bls.w	8000b3c <__udivmoddi4+0x290>
 800090a:	3902      	subs	r1, #2
 800090c:	4462      	add	r2, ip
 800090e:	1a12      	subs	r2, r2, r0
 8000910:	b2a4      	uxth	r4, r4
 8000912:	fbb2 f0fe 	udiv	r0, r2, lr
 8000916:	fb0e 2210 	mls	r2, lr, r0, r2
 800091a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800091e:	fb00 f505 	mul.w	r5, r0, r5
 8000922:	42a5      	cmp	r5, r4
 8000924:	d90a      	bls.n	800093c <__udivmoddi4+0x90>
 8000926:	eb1c 0404 	adds.w	r4, ip, r4
 800092a:	f100 32ff 	add.w	r2, r0, #4294967295
 800092e:	f080 8107 	bcs.w	8000b40 <__udivmoddi4+0x294>
 8000932:	42a5      	cmp	r5, r4
 8000934:	f240 8104 	bls.w	8000b40 <__udivmoddi4+0x294>
 8000938:	4464      	add	r4, ip
 800093a:	3802      	subs	r0, #2
 800093c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	2100      	movs	r1, #0
 8000944:	b11e      	cbz	r6, 800094e <__udivmoddi4+0xa2>
 8000946:	40dc      	lsrs	r4, r3
 8000948:	2300      	movs	r3, #0
 800094a:	e9c6 4300 	strd	r4, r3, [r6]
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	428b      	cmp	r3, r1
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0xbc>
 8000956:	2e00      	cmp	r6, #0
 8000958:	f000 80ed 	beq.w	8000b36 <__udivmoddi4+0x28a>
 800095c:	2100      	movs	r1, #0
 800095e:	e9c6 0500 	strd	r0, r5, [r6]
 8000962:	4608      	mov	r0, r1
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000968:	fab3 f183 	clz	r1, r3
 800096c:	2900      	cmp	r1, #0
 800096e:	d149      	bne.n	8000a04 <__udivmoddi4+0x158>
 8000970:	42ab      	cmp	r3, r5
 8000972:	d302      	bcc.n	800097a <__udivmoddi4+0xce>
 8000974:	4282      	cmp	r2, r0
 8000976:	f200 80f8 	bhi.w	8000b6a <__udivmoddi4+0x2be>
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb65 0203 	sbc.w	r2, r5, r3
 8000980:	2001      	movs	r0, #1
 8000982:	4617      	mov	r7, r2
 8000984:	2e00      	cmp	r6, #0
 8000986:	d0e2      	beq.n	800094e <__udivmoddi4+0xa2>
 8000988:	e9c6 4700 	strd	r4, r7, [r6]
 800098c:	e7df      	b.n	800094e <__udivmoddi4+0xa2>
 800098e:	b902      	cbnz	r2, 8000992 <__udivmoddi4+0xe6>
 8000990:	deff      	udf	#255	; 0xff
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8090 	bne.w	8000abc <__udivmoddi4+0x210>
 800099c:	1a8a      	subs	r2, r1, r2
 800099e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a2:	fa1f fe8c 	uxth.w	lr, ip
 80009a6:	2101      	movs	r1, #1
 80009a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ac:	fb07 2015 	mls	r0, r7, r5, r2
 80009b0:	0c22      	lsrs	r2, r4, #16
 80009b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009b6:	fb0e f005 	mul.w	r0, lr, r5
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d908      	bls.n	80009d0 <__udivmoddi4+0x124>
 80009be:	eb1c 0202 	adds.w	r2, ip, r2
 80009c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0x122>
 80009c8:	4290      	cmp	r0, r2
 80009ca:	f200 80cb 	bhi.w	8000b64 <__udivmoddi4+0x2b8>
 80009ce:	4645      	mov	r5, r8
 80009d0:	1a12      	subs	r2, r2, r0
 80009d2:	b2a4      	uxth	r4, r4
 80009d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009d8:	fb07 2210 	mls	r2, r7, r0, r2
 80009dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e0:	fb0e fe00 	mul.w	lr, lr, r0
 80009e4:	45a6      	cmp	lr, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x14e>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f0:	d202      	bcs.n	80009f8 <__udivmoddi4+0x14c>
 80009f2:	45a6      	cmp	lr, r4
 80009f4:	f200 80bb 	bhi.w	8000b6e <__udivmoddi4+0x2c2>
 80009f8:	4610      	mov	r0, r2
 80009fa:	eba4 040e 	sub.w	r4, r4, lr
 80009fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a02:	e79f      	b.n	8000944 <__udivmoddi4+0x98>
 8000a04:	f1c1 0720 	rsb	r7, r1, #32
 8000a08:	408b      	lsls	r3, r1
 8000a0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a12:	fa05 f401 	lsl.w	r4, r5, r1
 8000a16:	fa20 f307 	lsr.w	r3, r0, r7
 8000a1a:	40fd      	lsrs	r5, r7
 8000a1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a20:	4323      	orrs	r3, r4
 8000a22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a26:	fa1f fe8c 	uxth.w	lr, ip
 8000a2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a2e:	0c1c      	lsrs	r4, r3, #16
 8000a30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a34:	fb08 f50e 	mul.w	r5, r8, lr
 8000a38:	42a5      	cmp	r5, r4
 8000a3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a42:	d90b      	bls.n	8000a5c <__udivmoddi4+0x1b0>
 8000a44:	eb1c 0404 	adds.w	r4, ip, r4
 8000a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a4c:	f080 8088 	bcs.w	8000b60 <__udivmoddi4+0x2b4>
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	f240 8085 	bls.w	8000b60 <__udivmoddi4+0x2b4>
 8000a56:	f1a8 0802 	sub.w	r8, r8, #2
 8000a5a:	4464      	add	r4, ip
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	b29d      	uxth	r5, r3
 8000a60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a64:	fb09 4413 	mls	r4, r9, r3, r4
 8000a68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x1da>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a7c:	d26c      	bcs.n	8000b58 <__udivmoddi4+0x2ac>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	d96a      	bls.n	8000b58 <__udivmoddi4+0x2ac>
 8000a82:	3b02      	subs	r3, #2
 8000a84:	4464      	add	r4, ip
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	46c8      	mov	r8, r9
 8000a96:	46ae      	mov	lr, r5
 8000a98:	d356      	bcc.n	8000b48 <__udivmoddi4+0x29c>
 8000a9a:	d053      	beq.n	8000b44 <__udivmoddi4+0x298>
 8000a9c:	b156      	cbz	r6, 8000ab4 <__udivmoddi4+0x208>
 8000a9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000aa2:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aaa:	40ca      	lsrs	r2, r1
 8000aac:	40cc      	lsrs	r4, r1
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abc:	f1c3 0120 	rsb	r1, r3, #32
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ac8:	fa25 f101 	lsr.w	r1, r5, r1
 8000acc:	409d      	lsls	r5, r3
 8000ace:	432a      	orrs	r2, r5
 8000ad0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000adc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae0:	0c11      	lsrs	r1, r2, #16
 8000ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ae6:	fb00 f50e 	mul.w	r5, r0, lr
 8000aea:	428d      	cmp	r5, r1
 8000aec:	fa04 f403 	lsl.w	r4, r4, r3
 8000af0:	d908      	bls.n	8000b04 <__udivmoddi4+0x258>
 8000af2:	eb1c 0101 	adds.w	r1, ip, r1
 8000af6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000afa:	d22f      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000afc:	428d      	cmp	r5, r1
 8000afe:	d92d      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b00:	3802      	subs	r0, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1b49      	subs	r1, r1, r5
 8000b06:	b292      	uxth	r2, r2
 8000b08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b14:	fb05 f10e 	mul.w	r1, r5, lr
 8000b18:	4291      	cmp	r1, r2
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x282>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b24:	d216      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d914      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a52      	subs	r2, r2, r1
 8000b30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b34:	e738      	b.n	80009a8 <__udivmoddi4+0xfc>
 8000b36:	4631      	mov	r1, r6
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e708      	b.n	800094e <__udivmoddi4+0xa2>
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e6e6      	b.n	800090e <__udivmoddi4+0x62>
 8000b40:	4610      	mov	r0, r2
 8000b42:	e6fb      	b.n	800093c <__udivmoddi4+0x90>
 8000b44:	4548      	cmp	r0, r9
 8000b46:	d2a9      	bcs.n	8000a9c <__udivmoddi4+0x1f0>
 8000b48:	ebb9 0802 	subs.w	r8, r9, r2
 8000b4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b50:	3b01      	subs	r3, #1
 8000b52:	e7a3      	b.n	8000a9c <__udivmoddi4+0x1f0>
 8000b54:	4645      	mov	r5, r8
 8000b56:	e7ea      	b.n	8000b2e <__udivmoddi4+0x282>
 8000b58:	462b      	mov	r3, r5
 8000b5a:	e794      	b.n	8000a86 <__udivmoddi4+0x1da>
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	e7d1      	b.n	8000b04 <__udivmoddi4+0x258>
 8000b60:	46d0      	mov	r8, sl
 8000b62:	e77b      	b.n	8000a5c <__udivmoddi4+0x1b0>
 8000b64:	3d02      	subs	r5, #2
 8000b66:	4462      	add	r2, ip
 8000b68:	e732      	b.n	80009d0 <__udivmoddi4+0x124>
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	e70a      	b.n	8000984 <__udivmoddi4+0xd8>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	e742      	b.n	80009fa <__udivmoddi4+0x14e>

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <usmart_sys_cmd_exe>:
 * @brief   handles system instructions
 * @param   str : String pointer
 * @retval  0, processed successfully; Other, error code
 */
uint8_t usmart_sys_cmd_exe(char *str)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    char sfname[MAX_FNAME_LEN];                   /* Store local function names */
    uint8_t pnum;
    uint8_t rval;
    uint32_t res;
    res = usmart_get_cmdname(str, sfname, &i, MAX_FNAME_LEN);   /* Get the instruction and its length */
 8000b80:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000b84:	f107 0110 	add.w	r1, r7, #16
 8000b88:	231e      	movs	r3, #30
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fe68 	bl	8001860 <usmart_get_cmdname>
 8000b90:	4603      	mov	r3, r0
 8000b92:	60bb      	str	r3, [r7, #8]

    if (res)return USMART_FUNCERR;                /* Wrong instruction */
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <usmart_sys_cmd_exe+0x26>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e176      	b.n	8000e8c <usmart_sys_cmd_exe+0x314>

    str += i;
 8000b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	607b      	str	r3, [r7, #4]

    for (i = 0; i < sizeof(sys_cmd_tab) / 4; i++) /* Supported system commands */
 8000baa:	2300      	movs	r3, #0
 8000bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bb0:	e014      	b.n	8000bdc <usmart_sys_cmd_exe+0x64>
    {
        if (usmart_strcmp(sfname, sys_cmd_tab[i]) == 0)break;
 8000bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4bb6      	ldr	r3, [pc, #728]	; (8000e94 <usmart_sys_cmd_exe+0x31c>)
 8000bba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fd21 	bl	800160c <usmart_strcmp>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00a      	beq.n	8000be6 <usmart_sys_cmd_exe+0x6e>
    for (i = 0; i < sizeof(sys_cmd_tab) / 4; i++) /* Supported system commands */
 8000bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000be0:	2b06      	cmp	r3, #6
 8000be2:	d9e6      	bls.n	8000bb2 <usmart_sys_cmd_exe+0x3a>
 8000be4:	e000      	b.n	8000be8 <usmart_sys_cmd_exe+0x70>
        if (usmart_strcmp(sfname, sys_cmd_tab[i]) == 0)break;
 8000be6:	bf00      	nop
    }

    switch (i)
 8000be8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bec:	2b06      	cmp	r3, #6
 8000bee:	f200 814a 	bhi.w	8000e86 <usmart_sys_cmd_exe+0x30e>
 8000bf2:	a201      	add	r2, pc, #4	; (adr r2, 8000bf8 <usmart_sys_cmd_exe+0x80>)
 8000bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf8:	08000c15 	.word	0x08000c15
 8000bfc:	08000c15 	.word	0x08000c15
 8000c00:	08000c83 	.word	0x08000c83
 8000c04:	08000ccd 	.word	0x08000ccd
 8000c08:	08000d3b 	.word	0x08000d3b
 8000c0c:	08000da9 	.word	0x08000da9
 8000c10:	08000e17 	.word	0x08000e17
    {
        case 0:
        case 1: /* help command */
            USMART_PRINTF("\r\n");
 8000c14:	48a0      	ldr	r0, [pc, #640]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000c16:	f009 f947 	bl	8009ea8 <puts>
#if USMART_USE_HELP
            USMART_PRINTF("------------------------USMART V3.5------------------------ \r\n");
 8000c1a:	48a0      	ldr	r0, [pc, #640]	; (8000e9c <usmart_sys_cmd_exe+0x324>)
 8000c1c:	f009 f944 	bl	8009ea8 <puts>
            USMART_PRINTF("    USMART is developed by ALIENTEK a clever serial debugging intercom component, through \r\n");
 8000c20:	489f      	ldr	r0, [pc, #636]	; (8000ea0 <usmart_sys_cmd_exe+0x328>)
 8000c22:	f009 f941 	bl	8009ea8 <puts>
            USMART_PRINTF("It allows you to call any function in the program through the serial assistant and execute it. So, you can\r\n");
 8000c26:	489f      	ldr	r0, [pc, #636]	; (8000ea4 <usmart_sys_cmd_exe+0x32c>)
 8000c28:	f009 f93e 	bl	8009ea8 <puts>
            USMART_PRINTF("To arbitrarily change the input parameters of the function (support numbers (10/16 base, support negative numbers), strings\r\n"),
 8000c2c:	489e      	ldr	r0, [pc, #632]	; (8000ea8 <usmart_sys_cmd_exe+0x330>)
 8000c2e:	f009 f93b 	bl	8009ea8 <puts>
            USMART_PRINTF(", function entry address, etc. as arguments), a single function supports up to 10 input arguments, and supports\r\n"),
 8000c32:	489e      	ldr	r0, [pc, #632]	; (8000eac <usmart_sys_cmd_exe+0x334>)
 8000c34:	f009 f938 	bl	8009ea8 <puts>
            USMART_PRINTF("Function return values are displayed. Support parameter display base setting function, support base conversion function.\r\n");
 8000c38:	489d      	ldr	r0, [pc, #628]	; (8000eb0 <usmart_sys_cmd_exe+0x338>)
 8000c3a:	f009 f935 	bl	8009ea8 <puts>
            USMART_PRINTF("technical support:www.openedv.com\r\n");
 8000c3e:	489d      	ldr	r0, [pc, #628]	; (8000eb4 <usmart_sys_cmd_exe+0x33c>)
 8000c40:	f009 f932 	bl	8009ea8 <puts>
            USMART_PRINTF("USMART has seven system commands (must be lowercase):\r\n");
 8000c44:	489c      	ldr	r0, [pc, #624]	; (8000eb8 <usmart_sys_cmd_exe+0x340>)
 8000c46:	f009 f92f 	bl	8009ea8 <puts>
            USMART_PRINTF("?   :   Get help\r\n");
 8000c4a:	489c      	ldr	r0, [pc, #624]	; (8000ebc <usmart_sys_cmd_exe+0x344>)
 8000c4c:	f009 f92c 	bl	8009ea8 <puts>
            USMART_PRINTF("help:   Get help\r\n");
 8000c50:	489b      	ldr	r0, [pc, #620]	; (8000ec0 <usmart_sys_cmd_exe+0x348>)
 8000c52:	f009 f929 	bl	8009ea8 <puts>
            USMART_PRINTF("list:   A list of available functions\r\n\n");
 8000c56:	489b      	ldr	r0, [pc, #620]	; (8000ec4 <usmart_sys_cmd_exe+0x34c>)
 8000c58:	f009 f926 	bl	8009ea8 <puts>
            USMART_PRINTF("id:     A list of IDs of the available functions\r\n\n");
 8000c5c:	489a      	ldr	r0, [pc, #616]	; (8000ec8 <usmart_sys_cmd_exe+0x350>)
 8000c5e:	f009 f923 	bl	8009ea8 <puts>
            USMART_PRINTF("hex:    Argument hexadecimal display, followed by the space + number is the execution of the base conversion\r\n\n");
 8000c62:	489a      	ldr	r0, [pc, #616]	; (8000ecc <usmart_sys_cmd_exe+0x354>)
 8000c64:	f009 f920 	bl	8009ea8 <puts>
            USMART_PRINTF("dec:    The argument is displayed in decimal, followed by a space + number to perform the base conversion\r\n\n");
 8000c68:	4899      	ldr	r0, [pc, #612]	; (8000ed0 <usmart_sys_cmd_exe+0x358>)
 8000c6a:	f009 f91d 	bl	8009ea8 <puts>
            USMART_PRINTF("runtime:1, enable function run timing. 0, turns off the function run time.\r\n\n");
 8000c6e:	4899      	ldr	r0, [pc, #612]	; (8000ed4 <usmart_sys_cmd_exe+0x35c>)
 8000c70:	f009 f91a 	bl	8009ea8 <puts>
            USMART_PRINTF("Please enter the name and parameters of the function in the program format and end with the ENTER key.\r\n");
 8000c74:	4898      	ldr	r0, [pc, #608]	; (8000ed8 <usmart_sys_cmd_exe+0x360>)
 8000c76:	f009 f917 	bl	8009ea8 <puts>
            USMART_PRINTF("--------------------------ALIENTEK------------------------- \r\n");
 8000c7a:	4898      	ldr	r0, [pc, #608]	; (8000edc <usmart_sys_cmd_exe+0x364>)
 8000c7c:	f009 f914 	bl	8009ea8 <puts>
#else
            USMART_PRINTF("Instruction invalidation\r\n");
#endif
            break;
 8000c80:	e103      	b.n	8000e8a <usmart_sys_cmd_exe+0x312>

        case 2: /* Query instructions */
            USMART_PRINTF("\r\n");
 8000c82:	4885      	ldr	r0, [pc, #532]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000c84:	f009 f910 	bl	8009ea8 <puts>
            USMART_PRINTF("------------------------Function listing--------------------------- \r\n");
 8000c88:	4895      	ldr	r0, [pc, #596]	; (8000ee0 <usmart_sys_cmd_exe+0x368>)
 8000c8a:	f009 f90d 	bl	8009ea8 <puts>

            for (i = 0; i < usmart_dev.fnum; i++)USMART_PRINTF("%s\r\n", usmart_dev.funs[i].name);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c94:	e010      	b.n	8000cb8 <usmart_sys_cmd_exe+0x140>
 8000c96:	4b93      	ldr	r3, [pc, #588]	; (8000ee4 <usmart_sys_cmd_exe+0x36c>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4890      	ldr	r0, [pc, #576]	; (8000ee8 <usmart_sys_cmd_exe+0x370>)
 8000ca8:	f009 f890 	bl	8009dcc <iprintf>
 8000cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000cb8:	4b8a      	ldr	r3, [pc, #552]	; (8000ee4 <usmart_sys_cmd_exe+0x36c>)
 8000cba:	7d1a      	ldrb	r2, [r3, #20]
 8000cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8e8      	bhi.n	8000c96 <usmart_sys_cmd_exe+0x11e>

            USMART_PRINTF("\r\n");
 8000cc4:	4874      	ldr	r0, [pc, #464]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000cc6:	f009 f8ef 	bl	8009ea8 <puts>
            break;
 8000cca:	e0de      	b.n	8000e8a <usmart_sys_cmd_exe+0x312>

        case 3: /* Query ID */
            USMART_PRINTF("\r\n");
 8000ccc:	4872      	ldr	r0, [pc, #456]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000cce:	f009 f8eb 	bl	8009ea8 <puts>
            USMART_PRINTF("-------------------------Function ID --------------------------- \r\n");
 8000cd2:	4886      	ldr	r0, [pc, #536]	; (8000eec <usmart_sys_cmd_exe+0x374>)
 8000cd4:	f009 f8e8 	bl	8009ea8 <puts>

            for (i = 0; i < usmart_dev.fnum; i++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000cde:	e022      	b.n	8000d26 <usmart_sys_cmd_exe+0x1ae>
            {
                usmart_get_fname((char *)usmart_dev.funs[i].name, sfname, &pnum, &rval); /* Get the local function name */
 8000ce0:	4b80      	ldr	r3, [pc, #512]	; (8000ee4 <usmart_sys_cmd_exe+0x36c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	4413      	add	r3, r2
 8000cec:	6858      	ldr	r0, [r3, #4]
 8000cee:	f107 030e 	add.w	r3, r7, #14
 8000cf2:	f107 020f 	add.w	r2, r7, #15
 8000cf6:	f107 0110 	add.w	r1, r7, #16
 8000cfa:	f000 fdff 	bl	80018fc <usmart_get_fname>
                USMART_PRINTF("%s id is:\r\n0X%08X\r\n", sfname, (unsigned int)usmart_dev.funs[i].func);  /* Display ID */
 8000cfe:	4b79      	ldr	r3, [pc, #484]	; (8000ee4 <usmart_sys_cmd_exe+0x36c>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4413      	add	r3, r2
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4619      	mov	r1, r3
 8000d14:	4876      	ldr	r0, [pc, #472]	; (8000ef0 <usmart_sys_cmd_exe+0x378>)
 8000d16:	f009 f859 	bl	8009dcc <iprintf>
            for (i = 0; i < usmart_dev.fnum; i++)
 8000d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d26:	4b6f      	ldr	r3, [pc, #444]	; (8000ee4 <usmart_sys_cmd_exe+0x36c>)
 8000d28:	7d1a      	ldrb	r2, [r3, #20]
 8000d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d8d6      	bhi.n	8000ce0 <usmart_sys_cmd_exe+0x168>
            }

            USMART_PRINTF("\r\n");
 8000d32:	4859      	ldr	r0, [pc, #356]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000d34:	f009 f8b8 	bl	8009ea8 <puts>
            break;
 8000d38:	e0a7      	b.n	8000e8a <usmart_sys_cmd_exe+0x312>

        case 4: /* hex instruction */
            USMART_PRINTF("\r\n");
 8000d3a:	4857      	ldr	r0, [pc, #348]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000d3c:	f009 f8b4 	bl	8009ea8 <puts>
            usmart_get_aparm(str, sfname, &i);
 8000d40:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 ff1a 	bl	8001b84 <usmart_get_aparm>

            if (i == 0)     /* Parameters are normal */
 8000d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d121      	bne.n	8000d9c <usmart_sys_cmd_exe+0x224>
            {
                i = usmart_str2num(sfname, &res);       /* Record the parameter */
 8000d58:	f107 0208 	add.w	r2, r7, #8
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fcc2 	bl	80016ec <usmart_str2num>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if (i == 0) /* Base conversion function */
 8000d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d105      	bne.n	8000d82 <usmart_sys_cmd_exe+0x20a>
                {
                    USMART_PRINTF("HEX:0X%X\r\n", (unsigned int)res); /* Convert to hexadecimal */
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	485e      	ldr	r0, [pc, #376]	; (8000ef4 <usmart_sys_cmd_exe+0x37c>)
 8000d7c:	f009 f826 	bl	8009dcc <iprintf>
 8000d80:	e00e      	b.n	8000da0 <usmart_sys_cmd_exe+0x228>
                }
                else if (i != 4)return USMART_PARMERR;  /* Parameter error. */
 8000d82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d001      	beq.n	8000d8e <usmart_sys_cmd_exe+0x216>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e07e      	b.n	8000e8c <usmart_sys_cmd_exe+0x314>
                else        /* Parameter display setting function */
                {
                    USMART_PRINTF("Hexadecimal parameter display!\r\n");
 8000d8e:	485a      	ldr	r0, [pc, #360]	; (8000ef8 <usmart_sys_cmd_exe+0x380>)
 8000d90:	f009 f88a 	bl	8009ea8 <puts>
                    usmart_dev.sptype = SP_TYPE_HEX;
 8000d94:	4b53      	ldr	r3, [pc, #332]	; (8000ee4 <usmart_sys_cmd_exe+0x36c>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	75da      	strb	r2, [r3, #23]
 8000d9a:	e001      	b.n	8000da0 <usmart_sys_cmd_exe+0x228>
                }

            }
            else return USMART_PARMERR; /* Parameter error. */
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e075      	b.n	8000e8c <usmart_sys_cmd_exe+0x314>

            USMART_PRINTF("\r\n");
 8000da0:	483d      	ldr	r0, [pc, #244]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000da2:	f009 f881 	bl	8009ea8 <puts>
            break;
 8000da6:	e070      	b.n	8000e8a <usmart_sys_cmd_exe+0x312>

        case 5: /* dec directive */
            USMART_PRINTF("\r\n");
 8000da8:	483b      	ldr	r0, [pc, #236]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000daa:	f009 f87d 	bl	8009ea8 <puts>
            usmart_get_aparm(str, sfname, &i);
 8000dae:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	4619      	mov	r1, r3
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 fee3 	bl	8001b84 <usmart_get_aparm>

            if (i == 0)     /* Parameters are normal */
 8000dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d121      	bne.n	8000e0a <usmart_sys_cmd_exe+0x292>
            {
                i = usmart_str2num(sfname, &res);       /* Record the parameter */
 8000dc6:	f107 0208 	add.w	r2, r7, #8
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fc8b 	bl	80016ec <usmart_str2num>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if (i == 0) /* Base conversion function */
 8000ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d105      	bne.n	8000df0 <usmart_sys_cmd_exe+0x278>
                {
                    USMART_PRINTF("DEC:%lu\r\n", (unsigned long)res);  /* Converting to decimal */
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4844      	ldr	r0, [pc, #272]	; (8000efc <usmart_sys_cmd_exe+0x384>)
 8000dea:	f008 ffef 	bl	8009dcc <iprintf>
 8000dee:	e00e      	b.n	8000e0e <usmart_sys_cmd_exe+0x296>
                }
                else if (i != 4)
 8000df0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d001      	beq.n	8000dfc <usmart_sys_cmd_exe+0x284>
                {
                    return USMART_PARMERR;  /* Parameter error. */
 8000df8:	2302      	movs	r3, #2
 8000dfa:	e047      	b.n	8000e8c <usmart_sys_cmd_exe+0x314>
                }
                else        /* Parameter display setting function */
                {
                    USMART_PRINTF("Decimal parameter display!\r\n");
 8000dfc:	4840      	ldr	r0, [pc, #256]	; (8000f00 <usmart_sys_cmd_exe+0x388>)
 8000dfe:	f009 f853 	bl	8009ea8 <puts>
                    usmart_dev.sptype = SP_TYPE_DEC;
 8000e02:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <usmart_sys_cmd_exe+0x36c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	75da      	strb	r2, [r3, #23]
 8000e08:	e001      	b.n	8000e0e <usmart_sys_cmd_exe+0x296>
                }

            }
            else 
            {
                return USMART_PARMERR;  /* Parameter error. */
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e03e      	b.n	8000e8c <usmart_sys_cmd_exe+0x314>
            }
                
            USMART_PRINTF("\r\n");
 8000e0e:	4822      	ldr	r0, [pc, #136]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000e10:	f009 f84a 	bl	8009ea8 <puts>
            break;
 8000e14:	e039      	b.n	8000e8a <usmart_sys_cmd_exe+0x312>

        case 6: /* runtime directive, which sets whether the function execution time should be displayed */
            USMART_PRINTF("\r\n");
 8000e16:	4820      	ldr	r0, [pc, #128]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000e18:	f009 f846 	bl	8009ea8 <puts>
            usmart_get_aparm(str, sfname, &i);
 8000e1c:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 feac 	bl	8001b84 <usmart_get_aparm>

            if (i == 0) /* Parameters are normal */
 8000e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d122      	bne.n	8000e7a <usmart_sys_cmd_exe+0x302>
            {
                i = usmart_str2num(sfname, &res);   /* Log the argument */
 8000e34:	f107 0208 	add.w	r2, r7, #8
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fc54 	bl	80016ec <usmart_str2num>
 8000e44:	4603      	mov	r3, r0
 8000e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if (i == 0) /* Read data at specified location */
 8000e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d111      	bne.n	8000e76 <usmart_sys_cmd_exe+0x2fe>
                    {
                        USMART_PRINTF("\r\nError! \r\nTo EN RunTime function,Please set USMART_ENTIMX_SCAN = 1 first!\r\n");/* report an error */
                    }
                    else
                    {
                        usmart_dev.runtimeflag = res;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <usmart_sys_cmd_exe+0x36c>)
 8000e58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

                        if (usmart_dev.runtimeflag)
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <usmart_sys_cmd_exe+0x36c>)
 8000e5e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <usmart_sys_cmd_exe+0x2f6>
                        {
                            USMART_PRINTF("Run Time Calculation ON\r\n");
 8000e66:	4827      	ldr	r0, [pc, #156]	; (8000f04 <usmart_sys_cmd_exe+0x38c>)
 8000e68:	f009 f81e 	bl	8009ea8 <puts>
 8000e6c:	e007      	b.n	8000e7e <usmart_sys_cmd_exe+0x306>
                        }
                        else 
                        {
                            USMART_PRINTF("Run Time Calculation OFF\r\n");
 8000e6e:	4826      	ldr	r0, [pc, #152]	; (8000f08 <usmart_sys_cmd_exe+0x390>)
 8000e70:	f009 f81a 	bl	8009ea8 <puts>
 8000e74:	e003      	b.n	8000e7e <usmart_sys_cmd_exe+0x306>
                        }
                    }
                }
                else 
                {
                    return USMART_PARMERR;  /* No parameters, or wrong parameters */
 8000e76:	2302      	movs	r3, #2
 8000e78:	e008      	b.n	8000e8c <usmart_sys_cmd_exe+0x314>
                }
            }
            else 
            {
                return USMART_PARMERR;      /* Parameter error. */
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e006      	b.n	8000e8c <usmart_sys_cmd_exe+0x314>
            }
            
            USMART_PRINTF("\r\n");
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <usmart_sys_cmd_exe+0x320>)
 8000e80:	f009 f812 	bl	8009ea8 <puts>
            break;
 8000e84:	e001      	b.n	8000e8a <usmart_sys_cmd_exe+0x312>

        default:/* Disable instruction */
            return USMART_FUNCERR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <usmart_sys_cmd_exe+0x314>
    }

    return 0;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3730      	adds	r7, #48	; 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	0800afd4 	.word	0x0800afd4
 8000e9c:	0800afd8 	.word	0x0800afd8
 8000ea0:	0800b018 	.word	0x0800b018
 8000ea4:	0800b074 	.word	0x0800b074
 8000ea8:	0800b0e0 	.word	0x0800b0e0
 8000eac:	0800b160 	.word	0x0800b160
 8000eb0:	0800b1d4 	.word	0x0800b1d4
 8000eb4:	0800b250 	.word	0x0800b250
 8000eb8:	0800b274 	.word	0x0800b274
 8000ebc:	0800b2ac 	.word	0x0800b2ac
 8000ec0:	0800b2c0 	.word	0x0800b2c0
 8000ec4:	0800b2d4 	.word	0x0800b2d4
 8000ec8:	0800b2fc 	.word	0x0800b2fc
 8000ecc:	0800b330 	.word	0x0800b330
 8000ed0:	0800b3a0 	.word	0x0800b3a0
 8000ed4:	0800b40c 	.word	0x0800b40c
 8000ed8:	0800b45c 	.word	0x0800b45c
 8000edc:	0800b4c4 	.word	0x0800b4c4
 8000ee0:	0800b504 	.word	0x0800b504
 8000ee4:	2000003c 	.word	0x2000003c
 8000ee8:	0800b54c 	.word	0x0800b54c
 8000eec:	0800b554 	.word	0x0800b554
 8000ef0:	0800b598 	.word	0x0800b598
 8000ef4:	0800b5ac 	.word	0x0800b5ac
 8000ef8:	0800b5b8 	.word	0x0800b5b8
 8000efc:	0800b5d8 	.word	0x0800b5d8
 8000f00:	0800b5e4 	.word	0x0800b5e4
 8000f04:	0800b600 	.word	0x0800b600
 8000f08:	0800b61c 	.word	0x0800b61c

08000f0c <usmart_init>:
 * @brief    Initializes USMART
 * @param    tclk : The operating frequency (in Mhz) of the timer.
 * @retval   None
 */
void usmart_init(uint16_t tclk)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
#if USMART_ENTIMX_SCAN == 1
	MX_TIM4_Init();			/* Initialization of the timer */
 8000f16:	f005 f965 	bl	80061e4 <MX_TIM4_Init>
#endif
    usmart_dev.sptype = 1;  /* Hexadecimal display parameters */
 8000f1a:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <usmart_init+0x1c>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	75da      	strb	r2, [r3, #23]
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000003c 	.word	0x2000003c

08000f2c <usmart_cmd_rec>:
 * @brief   gets the function name,id, and arguments from str
 * @param   str : String pointer.
 * @retval  0, successful recognition; Other, error code.
 */
uint8_t usmart_cmd_rec(char *str)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    uint8_t sta, i, rval;   /* State */
    uint8_t rpnum, spnum;
    char rfname[MAX_FNAME_LEN];  /* Staging space for the received function name */
    char sfname[MAX_FNAME_LEN];  /* Store local function names */
    sta = usmart_get_fname(str, rfname, &rpnum, &rval); /* The name of the function that received the data and the number of arguments */
 8000f34:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8000f38:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000f3c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fcdb 	bl	80018fc <usmart_get_fname>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (sta)return sta;    /* Error */
 8000f4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <usmart_cmd_rec+0x2e>
 8000f54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f58:	e05d      	b.n	8001016 <usmart_cmd_rec+0xea>

    for (i = 0; i < usmart_dev.fnum; i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000f60:	e036      	b.n	8000fd0 <usmart_cmd_rec+0xa4>
    {
        sta = usmart_get_fname((char *)usmart_dev.funs[i].name, sfname, &spnum, &rval); /* Get the name of the local function and the number of arguments */
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <usmart_cmd_rec+0xf4>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	6858      	ldr	r0, [r3, #4]
 8000f70:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8000f74:	f107 024b 	add.w	r2, r7, #75	; 0x4b
 8000f78:	f107 010c 	add.w	r1, r7, #12
 8000f7c:	f000 fcbe 	bl	80018fc <usmart_get_fname>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if (sta)return sta; /* Error in local parsing */
 8000f86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <usmart_cmd_rec+0x68>
 8000f8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f92:	e040      	b.n	8001016 <usmart_cmd_rec+0xea>

        if (usmart_strcmp(sfname, rfname) == 0) /* Equality */
 8000f94:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fb34 	bl	800160c <usmart_strcmp>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10c      	bne.n	8000fc4 <usmart_cmd_rec+0x98>
        {
            if (spnum > rpnum)return USMART_PARMERR;/* Parameter errors (fewer input parameters than source function parameters) */
 8000faa:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000fae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d901      	bls.n	8000fba <usmart_cmd_rec+0x8e>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e02d      	b.n	8001016 <usmart_cmd_rec+0xea>

            usmart_dev.id = i;  /* Logging function ids */
 8000fba:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <usmart_cmd_rec+0xf4>)
 8000fc0:	759a      	strb	r2, [r3, #22]
            break;              /* Run out */
 8000fc2:	e00b      	b.n	8000fdc <usmart_cmd_rec+0xb0>
    for (i = 0; i < usmart_dev.fnum; i++)
 8000fc4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <usmart_cmd_rec+0xf4>)
 8000fd2:	7d1a      	ldrb	r2, [r3, #20]
 8000fd4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8c2      	bhi.n	8000f62 <usmart_cmd_rec+0x36>
        }
    }

    if (i == usmart_dev.fnum)return USMART_NOFUNCFIND;  /* No matching function found */
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <usmart_cmd_rec+0xf4>)
 8000fde:	7d1a      	ldrb	r2, [r3, #20]
 8000fe0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d101      	bne.n	8000fec <usmart_cmd_rec+0xc0>
 8000fe8:	2304      	movs	r3, #4
 8000fea:	e014      	b.n	8001016 <usmart_cmd_rec+0xea>

    sta = usmart_get_fparam(str, &i);   /* Get the number of function arguments */
 8000fec:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fe9a 	bl	8001d2c <usmart_get_fparam>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (sta)return sta;     /* Return error */
 8000ffe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <usmart_cmd_rec+0xe0>
 8001006:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800100a:	e004      	b.n	8001016 <usmart_cmd_rec+0xea>

    usmart_dev.pnum = i;    /* Record the number of parameters */
 800100c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <usmart_cmd_rec+0xf4>)
 8001012:	755a      	strb	r2, [r3, #21]
    return USMART_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3750      	adds	r7, #80	; 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000003c 	.word	0x2000003c

08001024 <usmart_exe>:
 *
 * @param  None
 * @retval None
 */
void usmart_exe(void)
{
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b0a1      	sub	sp, #132	; 0x84
 8001028:	af06      	add	r7, sp, #24
    uint8_t id, i;
    uint32_t res;
    uint32_t temp[MAX_PARM];        /* Argument converted to support strings */
    char sfname[MAX_FNAME_LEN];     /* Store local function names */
    uint8_t pnum, rval;
    id = usmart_dev.id;
 800102a:	4bb0      	ldr	r3, [pc, #704]	; (80012ec <usmart_exe+0x2c8>)
 800102c:	7d9b      	ldrb	r3, [r3, #22]
 800102e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if (id >= usmart_dev.fnum)return;   /* No execution. */
 8001032:	4bae      	ldr	r3, [pc, #696]	; (80012ec <usmart_exe+0x2c8>)
 8001034:	7d1b      	ldrb	r3, [r3, #20]
 8001036:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800103a:	429a      	cmp	r2, r3
 800103c:	f080 81db 	bcs.w	80013f6 <usmart_exe+0x3d2>

    usmart_get_fname((char *)usmart_dev.funs[id].name, sfname, &pnum, &rval);    /* Get the name of the local function and the number of arguments */
 8001040:	4baa      	ldr	r3, [pc, #680]	; (80012ec <usmart_exe+0x2c8>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4413      	add	r3, r2
 800104c:	6858      	ldr	r0, [r3, #4]
 800104e:	f107 0312 	add.w	r3, r7, #18
 8001052:	f107 0213 	add.w	r2, r7, #19
 8001056:	f107 0114 	add.w	r1, r7, #20
 800105a:	f000 fc4f 	bl	80018fc <usmart_get_fname>
    USMART_PRINTF("\r\n%s(", sfname);   /* Prints the name of the function that is being executed */
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	48a2      	ldr	r0, [pc, #648]	; (80012f0 <usmart_exe+0x2cc>)
 8001066:	f008 feb1 	bl	8009dcc <iprintf>

    for (i = 0; i < pnum; i++)          /* Output parameter */
 800106a:	2300      	movs	r3, #0
 800106c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001070:	e071      	b.n	8001156 <usmart_exe+0x132>
    {
        if (usmart_dev.parmtype & (1 << i)) /* The argument is a string */
 8001072:	4b9e      	ldr	r3, [pc, #632]	; (80012ec <usmart_exe+0x2c8>)
 8001074:	8b1b      	ldrh	r3, [r3, #24]
 8001076:	461a      	mov	r2, r3
 8001078:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800107c:	fa42 f303 	asr.w	r3, r2, r3
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d026      	beq.n	80010d6 <usmart_exe+0xb2>
        {
            USMART_PRINTF("%c", '"');
 8001088:	2022      	movs	r0, #34	; 0x22
 800108a:	f008 feb1 	bl	8009df0 <putchar>
            USMART_PRINTF("%s", usmart_dev.parm + usmart_get_parmpos(i));
 800108e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fe28 	bl	8001ce8 <usmart_get_parmpos>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b95      	ldr	r3, [pc, #596]	; (80012f4 <usmart_exe+0x2d0>)
 800109e:	4413      	add	r3, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	4895      	ldr	r0, [pc, #596]	; (80012f8 <usmart_exe+0x2d4>)
 80010a4:	f008 fe92 	bl	8009dcc <iprintf>
            USMART_PRINTF("%c", '"');
 80010a8:	2022      	movs	r0, #34	; 0x22
 80010aa:	f008 fea1 	bl	8009df0 <putchar>
            temp[i] = (uint32_t) & (usmart_dev.parm[usmart_get_parmpos(i)]);
 80010ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fe18 	bl	8001ce8 <usmart_get_parmpos>
 80010b8:	4603      	mov	r3, r0
 80010ba:	3320      	adds	r3, #32
 80010bc:	4a8b      	ldr	r2, [pc, #556]	; (80012ec <usmart_exe+0x2c8>)
 80010be:	4413      	add	r3, r2
 80010c0:	1d1a      	adds	r2, r3, #4
 80010c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3358      	adds	r3, #88	; 0x58
 80010ca:	f107 0110 	add.w	r1, r7, #16
 80010ce:	440b      	add	r3, r1
 80010d0:	f843 2c34 	str.w	r2, [r3, #-52]
 80010d4:	e031      	b.n	800113a <usmart_exe+0x116>
        }
        else    /* The arguments are numbers */
        {
            temp[i] = *(uint32_t *)(usmart_dev.parm + usmart_get_parmpos(i));
 80010d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fe04 	bl	8001ce8 <usmart_get_parmpos>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <usmart_exe+0x2d0>)
 80010e6:	441a      	add	r2, r3
 80010e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	3358      	adds	r3, #88	; 0x58
 80010f2:	f107 0110 	add.w	r1, r7, #16
 80010f6:	440b      	add	r3, r1
 80010f8:	f843 2c34 	str.w	r2, [r3, #-52]

            if (usmart_dev.sptype == SP_TYPE_DEC)
 80010fc:	4b7b      	ldr	r3, [pc, #492]	; (80012ec <usmart_exe+0x2c8>)
 80010fe:	7ddb      	ldrb	r3, [r3, #23]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10d      	bne.n	8001120 <usmart_exe+0xfc>
            {
                USMART_PRINTF("%ld", (long)temp[i]); /* Decimal argument display */
 8001104:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	3358      	adds	r3, #88	; 0x58
 800110c:	f107 0210 	add.w	r2, r7, #16
 8001110:	4413      	add	r3, r2
 8001112:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001116:	4619      	mov	r1, r3
 8001118:	4878      	ldr	r0, [pc, #480]	; (80012fc <usmart_exe+0x2d8>)
 800111a:	f008 fe57 	bl	8009dcc <iprintf>
 800111e:	e00c      	b.n	800113a <usmart_exe+0x116>
            }
            else 
            {
                USMART_PRINTF("0X%X", (unsigned int)temp[i]);      /* Hexadecimal parameter display */
 8001120:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	3358      	adds	r3, #88	; 0x58
 8001128:	f107 0210 	add.w	r2, r7, #16
 800112c:	4413      	add	r3, r2
 800112e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001132:	4619      	mov	r1, r3
 8001134:	4872      	ldr	r0, [pc, #456]	; (8001300 <usmart_exe+0x2dc>)
 8001136:	f008 fe49 	bl	8009dcc <iprintf>
            }
        }

        if (i != pnum - 1)USMART_PRINTF(",");
 800113a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800113e:	7cfb      	ldrb	r3, [r7, #19]
 8001140:	3b01      	subs	r3, #1
 8001142:	429a      	cmp	r2, r3
 8001144:	d002      	beq.n	800114c <usmart_exe+0x128>
 8001146:	202c      	movs	r0, #44	; 0x2c
 8001148:	f008 fe52 	bl	8009df0 <putchar>
    for (i = 0; i < pnum; i++)          /* Output parameter */
 800114c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001150:	3301      	adds	r3, #1
 8001152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001156:	7cfb      	ldrb	r3, [r7, #19]
 8001158:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800115c:	429a      	cmp	r2, r3
 800115e:	d388      	bcc.n	8001072 <usmart_exe+0x4e>
    }

    USMART_PRINTF(")");
 8001160:	2029      	movs	r0, #41	; 0x29
 8001162:	f008 fe45 	bl	8009df0 <putchar>
#if USMART_ENTIMX_SCAN==1
    usmart_timx_reset_time();   /* The timer is reset and the clock starts */
 8001166:	f000 f9e5 	bl	8001534 <usmart_timx_reset_time>
#endif

    switch (usmart_dev.pnum)
 800116a:	4b60      	ldr	r3, [pc, #384]	; (80012ec <usmart_exe+0x2c8>)
 800116c:	7d5b      	ldrb	r3, [r3, #21]
 800116e:	2b0a      	cmp	r3, #10
 8001170:	f200 810b 	bhi.w	800138a <usmart_exe+0x366>
 8001174:	a201      	add	r2, pc, #4	; (adr r2, 800117c <usmart_exe+0x158>)
 8001176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117a:	bf00      	nop
 800117c:	080011a9 	.word	0x080011a9
 8001180:	080011bd 	.word	0x080011bd
 8001184:	080011d7 	.word	0x080011d7
 8001188:	080011f5 	.word	0x080011f5
 800118c:	08001213 	.word	0x08001213
 8001190:	08001231 	.word	0x08001231
 8001194:	08001255 	.word	0x08001255
 8001198:	0800127f 	.word	0x0800127f
 800119c:	080012b1 	.word	0x080012b1
 80011a0:	08001305 	.word	0x08001305
 80011a4:	08001345 	.word	0x08001345
    {
        case 0: /* No arguments (void type) */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)();
 80011a8:	4b50      	ldr	r3, [pc, #320]	; (80012ec <usmart_exe+0x2c8>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4798      	blx	r3
 80011b8:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 80011ba:	e0e6      	b.n	800138a <usmart_exe+0x366>

        case 1: /* There is one parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0]);
 80011bc:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <usmart_exe+0x2c8>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4413      	add	r3, r2
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ce:	4618      	mov	r0, r3
 80011d0:	4790      	blx	r2
 80011d2:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 80011d4:	e0d9      	b.n	800138a <usmart_exe+0x366>

        case 2: /* There is two parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1]);
 80011d6:	4b45      	ldr	r3, [pc, #276]	; (80012ec <usmart_exe+0x2c8>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	461c      	mov	r4, r3
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	47a0      	blx	r4
 80011f0:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 80011f2:	e0ca      	b.n	800138a <usmart_exe+0x366>

        case 3: /* There is three parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2]);
 80011f4:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <usmart_exe+0x2c8>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461c      	mov	r4, r3
 8001204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001206:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800120a:	4618      	mov	r0, r3
 800120c:	47a0      	blx	r4
 800120e:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 8001210:	e0bb      	b.n	800138a <usmart_exe+0x366>

        case 4: /* There is four parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3]);
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <usmart_exe+0x2c8>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	461c      	mov	r4, r3
 8001222:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001224:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800122a:	47a0      	blx	r4
 800122c:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 800122e:	e0ac      	b.n	800138a <usmart_exe+0x366>

        case 5: /* There is five parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4]);
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <usmart_exe+0x2c8>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	461d      	mov	r5, r3
 8001240:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001244:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001246:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4623      	mov	r3, r4
 800124e:	47a8      	blx	r5
 8001250:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 8001252:	e09a      	b.n	800138a <usmart_exe+0x366>

        case 6: /* There is six parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <usmart_exe+0x2c8>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	461e      	mov	r6, r3
 8001264:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001268:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800126a:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 800126c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800126e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001270:	9201      	str	r2, [sp, #4]
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	462b      	mov	r3, r5
 8001276:	4622      	mov	r2, r4
 8001278:	47b0      	blx	r6
 800127a:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5]);
            break;
 800127c:	e085      	b.n	800138a <usmart_exe+0x366>

        case 7: /* There is seven parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <usmart_exe+0x2c8>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001290:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8001292:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8001294:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8001296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800129a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800129c:	9102      	str	r1, [sp, #8]
 800129e:	9201      	str	r2, [sp, #4]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4633      	mov	r3, r6
 80012a4:	462a      	mov	r2, r5
 80012a6:	4621      	mov	r1, r4
 80012a8:	68fc      	ldr	r4, [r7, #12]
 80012aa:	47a0      	blx	r4
 80012ac:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5], temp[6]);
            break;
 80012ae:	e06c      	b.n	800138a <usmart_exe+0x366>

        case 8: /* There is eight parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <usmart_exe+0x2c8>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80012c2:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 80012c4:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 80012c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012c8:	60ba      	str	r2, [r7, #8]
 80012ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80012d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80012d2:	9003      	str	r0, [sp, #12]
 80012d4:	9102      	str	r1, [sp, #8]
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	4632      	mov	r2, r6
 80012de:	4629      	mov	r1, r5
 80012e0:	4620      	mov	r0, r4
 80012e2:	68fc      	ldr	r4, [r7, #12]
 80012e4:	47a0      	blx	r4
 80012e6:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5], temp[6], temp[7]);
            break;
 80012e8:	e04f      	b.n	800138a <usmart_exe+0x366>
 80012ea:	bf00      	nop
 80012ec:	2000003c 	.word	0x2000003c
 80012f0:	0800b638 	.word	0x0800b638
 80012f4:	20000060 	.word	0x20000060
 80012f8:	0800b640 	.word	0x0800b640
 80012fc:	0800b644 	.word	0x0800b644
 8001300:	0800b648 	.word	0x0800b648

        case 9: /* There is nine parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 8001304:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <usmart_exe+0x3dc>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8001316:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8001318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800131a:	60ba      	str	r2, [r7, #8]
 800131c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800131e:	6079      	str	r1, [r7, #4]
 8001320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001324:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001326:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001328:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800132a:	9404      	str	r4, [sp, #16]
 800132c:	9003      	str	r0, [sp, #12]
 800132e:	9102      	str	r1, [sp, #8]
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	4631      	mov	r1, r6
 800133a:	4628      	mov	r0, r5
 800133c:	68fc      	ldr	r4, [r7, #12]
 800133e:	47a0      	blx	r4
 8001340:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5], temp[6], temp[7], temp[8]);
            break;
 8001342:	e022      	b.n	800138a <usmart_exe+0x366>

        case 10:/* There is ten parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <usmart_exe+0x3dc>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8001356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001358:	60ba      	str	r2, [r7, #8]
 800135a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001360:	603c      	str	r4, [r7, #0]
 8001362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001366:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001368:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800136a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800136c:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 800136e:	9505      	str	r5, [sp, #20]
 8001370:	9404      	str	r4, [sp, #16]
 8001372:	9003      	str	r0, [sp, #12]
 8001374:	9102      	str	r1, [sp, #8]
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	4630      	mov	r0, r6
 8001382:	68fc      	ldr	r4, [r7, #12]
 8001384:	47a0      	blx	r4
 8001386:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5], temp[6], temp[7], temp[8], temp[9]);
            break;
 8001388:	bf00      	nop
    }

#if USMART_ENTIMX_SCAN==1
    usmart_timx_get_time(); /* Get the function execution time */
 800138a:	f000 f8f5 	bl	8001578 <usmart_timx_get_time>
#endif

    if (rval == 1)          /* Need to return a value */
 800138e:	7cbb      	ldrb	r3, [r7, #18]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10d      	bne.n	80013b0 <usmart_exe+0x38c>
    {
        if (usmart_dev.sptype == SP_TYPE_DEC)USMART_PRINTF("=%lu;\r\n", (unsigned long)res);   /* Output execution result (decimal argument display) */
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <usmart_exe+0x3dc>)
 8001396:	7ddb      	ldrb	r3, [r3, #23]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d104      	bne.n	80013a6 <usmart_exe+0x382>
 800139c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800139e:	4819      	ldr	r0, [pc, #100]	; (8001404 <usmart_exe+0x3e0>)
 80013a0:	f008 fd14 	bl	8009dcc <iprintf>
 80013a4:	e007      	b.n	80013b6 <usmart_exe+0x392>
        else USMART_PRINTF("=0X%X;\r\n", (unsigned int)res);  /* Output execution result (hexadecimal parameter display) */
 80013a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013a8:	4817      	ldr	r0, [pc, #92]	; (8001408 <usmart_exe+0x3e4>)
 80013aa:	f008 fd0f 	bl	8009dcc <iprintf>
 80013ae:	e002      	b.n	80013b6 <usmart_exe+0x392>
    }
    else USMART_PRINTF(";\r\n");    /* No return value is needed, and the output ends directly */
 80013b0:	4816      	ldr	r0, [pc, #88]	; (800140c <usmart_exe+0x3e8>)
 80013b2:	f008 fd79 	bl	8009ea8 <puts>

    if (usmart_dev.runtimeflag)     /* Need to display function execution time */
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <usmart_exe+0x3dc>)
 80013b8:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01b      	beq.n	80013f8 <usmart_exe+0x3d4>
    {
        USMART_PRINTF("Function Run Time:%d.%1dms\r\n", ((int)(usmart_dev.runtime / 10)), (int)(usmart_dev.runtime % 10));  /* Print the execution time of the function */
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <usmart_exe+0x3dc>)
 80013c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <usmart_exe+0x3ec>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	4618      	mov	r0, r3
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <usmart_exe+0x3dc>)
 80013d2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <usmart_exe+0x3ec>)
 80013d8:	fba3 2301 	umull	r2, r3, r3, r1
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	1aca      	subs	r2, r1, r3
 80013e8:	4613      	mov	r3, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	4601      	mov	r1, r0
 80013ee:	4809      	ldr	r0, [pc, #36]	; (8001414 <usmart_exe+0x3f0>)
 80013f0:	f008 fcec 	bl	8009dcc <iprintf>
 80013f4:	e000      	b.n	80013f8 <usmart_exe+0x3d4>
    if (id >= usmart_dev.fnum)return;   /* No execution. */
 80013f6:	bf00      	nop
    }
}
 80013f8:	376c      	adds	r7, #108	; 0x6c
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000003c 	.word	0x2000003c
 8001404:	0800b650 	.word	0x0800b650
 8001408:	0800b658 	.word	0x0800b658
 800140c:	0800b664 	.word	0x0800b664
 8001410:	cccccccd 	.word	0xcccccccd
 8001414:	0800b668 	.word	0x0800b668

08001418 <usmart_scan>:
 *
 * @param  None
 * @retval None
 */
void usmart_scan(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
    uint8_t sta, len;
    char *pbuf = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]

    pbuf = usmart_get_input_string();   /* Get the data stream */
 8001422:	f000 f865 	bl	80014f0 <usmart_get_input_string>
 8001426:	60b8      	str	r0, [r7, #8]
    if (pbuf == 0) return ;             /* Data stream is empty, return directly */
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d038      	beq.n	80014a0 <usmart_scan+0x88>
     
    sta = usmart_dev.cmd_rec(pbuf);     /* Get information about the function */
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <usmart_scan+0x90>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	68b8      	ldr	r0, [r7, #8]
 8001434:	4798      	blx	r3
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]

    if (sta == 0)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d103      	bne.n	8001448 <usmart_scan+0x30>
    {
        usmart_dev.exe();               /* Executing the function */
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <usmart_scan+0x90>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4798      	blx	r3
 8001446:	e02c      	b.n	80014a2 <usmart_scan+0x8a>
    }
    else
    {
        len = usmart_sys_cmd_exe(pbuf);
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f7ff fb95 	bl	8000b78 <usmart_sys_cmd_exe>
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]

        if (len != USMART_FUNCERR)sta = len;
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d001      	beq.n	800145c <usmart_scan+0x44>
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	73fb      	strb	r3, [r7, #15]

        if (sta)
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01f      	beq.n	80014a2 <usmart_scan+0x8a>
        {
            switch (sta)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	3b01      	subs	r3, #1
 8001466:	2b03      	cmp	r3, #3
 8001468:	d81b      	bhi.n	80014a2 <usmart_scan+0x8a>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <usmart_scan+0x58>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	08001481 	.word	0x08001481
 8001474:	08001489 	.word	0x08001489
 8001478:	08001491 	.word	0x08001491
 800147c:	08001499 	.word	0x08001499
            {
                case USMART_FUNCERR:
                    USMART_PRINTF("Function error!\r\n");
 8001480:	480a      	ldr	r0, [pc, #40]	; (80014ac <usmart_scan+0x94>)
 8001482:	f008 fd11 	bl	8009ea8 <puts>
                    break;
 8001486:	e00c      	b.n	80014a2 <usmart_scan+0x8a>

                case USMART_PARMERR:
                    USMART_PRINTF("Parameter error\r\n");
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <usmart_scan+0x98>)
 800148a:	f008 fd0d 	bl	8009ea8 <puts>
                    break;
 800148e:	e008      	b.n	80014a2 <usmart_scan+0x8a>

                case USMART_PARMOVER:
                    USMART_PRINTF("Parameter number too much\r\n");
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <usmart_scan+0x9c>)
 8001492:	f008 fd09 	bl	8009ea8 <puts>
                    break;
 8001496:	e004      	b.n	80014a2 <usmart_scan+0x8a>

                case USMART_NOFUNCFIND:
                    USMART_PRINTF("No matching function found!\r\n");
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <usmart_scan+0xa0>)
 800149a:	f008 fd05 	bl	8009ea8 <puts>
                    break;
 800149e:	e000      	b.n	80014a2 <usmart_scan+0x8a>
    if (pbuf == 0) return ;             /* Data stream is empty, return directly */
 80014a0:	bf00      	nop
            }
        }
    } 
 
}
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000003c 	.word	0x2000003c
 80014ac:	0800b688 	.word	0x0800b688
 80014b0:	0800b69c 	.word	0x0800b69c
 80014b4:	0800b6b0 	.word	0x0800b6b0
 80014b8:	0800b6cc 	.word	0x0800b6cc

080014bc <read_addr>:
 * @brief  Reads the value at the specified address
 * @param  addr : the value at the specified address
 * @retval address
 */ 
uint32_t read_addr(uint32_t addr)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    return *(uint32_t *)addr;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <write_addr>:
 * @param  addr : the value at the specified address
 * @param  val  : the value
 * @retval address
 */
void write_addr(uint32_t addr, uint32_t val)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    *(uint32_t *)addr = val;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <usmart_get_input_string>:
 * @retval
 * @arg        0, no data received
 * @arg        Other, stream start address (cannot be 0)
 */
char *usmart_get_input_string(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
    uint8_t len;
    char *pbuf = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]

    if (g_usart_rx_sta & 0x8000)        /* Complete serial port reception? */
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <usmart_get_input_string+0x3c>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	da0b      	bge.n	800151c <usmart_get_input_string+0x2c>
    {
        len = g_usart_rx_sta & 0x3fff;  /* Get the length of the received data */
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <usmart_get_input_string+0x3c>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	70fb      	strb	r3, [r7, #3]
        g_usart_rx_buf[len] = '\0';     /* Add the terminator at the end. */
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	4a08      	ldr	r2, [pc, #32]	; (8001530 <usmart_get_input_string+0x40>)
 800150e:	2100      	movs	r1, #0
 8001510:	54d1      	strb	r1, [r2, r3]
        pbuf = (char*)g_usart_rx_buf;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <usmart_get_input_string+0x40>)
 8001514:	607b      	str	r3, [r7, #4]
        g_usart_rx_sta = 0;             /* Enable next reception */
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <usmart_get_input_string+0x3c>)
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]
    }

    return pbuf;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000350 	.word	0x20000350
 8001530:	20000288 	.word	0x20000288

08001534 <usmart_timx_reset_time>:
 * @note    needs to be modified according to the timer parameters of the MCU to be ported
 * @param   None
 * @retval  None
 */
void usmart_timx_reset_time(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
    __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE); /* Clear the interrupt flag bit */
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <usmart_timx_reset_time+0x3c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f06f 0201 	mvn.w	r2, #1
 8001540:	611a      	str	r2, [r3, #16]
    __HAL_TIM_SET_AUTORELOAD(&htim4, 0XFFFF);      /* Set the reload value to the maximum */
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <usmart_timx_reset_time+0x3c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154a:	62da      	str	r2, [r3, #44]	; 0x2c
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <usmart_timx_reset_time+0x3c>)
 800154e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001552:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COUNTER(&htim4, 0);              /* Clear counter */
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <usmart_timx_reset_time+0x3c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
    usmart_dev.runtime = 0;
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <usmart_timx_reset_time+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000240 	.word	0x20000240
 8001574:	2000003c 	.word	0x2000003c

08001578 <usmart_timx_get_time>:
 * @note    needs to be modified according to the timer parameters of the MCU to be ported
 * @param   none
 * @retval  execution time in 0.1ms. The maximum delay time is 2 times the CNT value *0.1ms
 */
uint32_t usmart_timx_get_time(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) == SET)  /* During the run, a timer overflow occurs */
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <usmart_timx_get_time+0x48>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d108      	bne.n	800159c <usmart_timx_get_time+0x24>
    {
        usmart_dev.runtime += 0XFFFF;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <usmart_timx_get_time+0x4c>)
 800158c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001590:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001594:	33ff      	adds	r3, #255	; 0xff
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <usmart_timx_get_time+0x4c>)
 8001598:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }
    usmart_dev.runtime += __HAL_TIM_GET_COUNTER(&htim4);
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <usmart_timx_get_time+0x48>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <usmart_timx_get_time+0x4c>)
 80015a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015a8:	4413      	add	r3, r2
 80015aa:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <usmart_timx_get_time+0x4c>)
 80015ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    return usmart_dev.runtime;                               /* Return count value */
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <usmart_timx_get_time+0x4c>)
 80015b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	20000240 	.word	0x20000240
 80015c4:	2000003c 	.word	0x2000003c

080015c8 <TIM4_IRQHandler>:
 * @brief   USMART timer interrupt service function
 * @param   None.
 * @retval  None.
 */
void TIM4_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	/* overflow trap */
	if(__HAL_TIM_GET_IT_SOURCE(&htim4,TIM_IT_UPDATE)==SET)
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <TIM4_IRQHandler+0x3c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d10d      	bne.n	80015f6 <TIM4_IRQHandler+0x2e>
	{

		usmart_dev.scan();                              	/* usmart scan */
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <TIM4_IRQHandler+0x40>)
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	4798      	blx	r3
		__HAL_TIM_SET_COUNTER(&htim4, 0);;    				/* Clear counter */
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <TIM4_IRQHandler+0x3c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(&htim4, 100);				/* Restore the original Settings */
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <TIM4_IRQHandler+0x3c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2264      	movs	r2, #100	; 0x64
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <TIM4_IRQHandler+0x3c>)
 80015f2:	2264      	movs	r2, #100	; 0x64
 80015f4:	60da      	str	r2, [r3, #12]
	}
	__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);				/* Clear the interrupt flag bit */
 80015f6:	4b03      	ldr	r3, [pc, #12]	; (8001604 <TIM4_IRQHandler+0x3c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f06f 0201 	mvn.w	r2, #1
 80015fe:	611a      	str	r2, [r3, #16]
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000240 	.word	0x20000240
 8001608:	2000003c 	.word	0x2000003c

0800160c <usmart_strcmp>:
 * @param   str1 : first address of string 1 (pointer)
 * @param   str2 : first address of string 2 (pointer)
 * @retval  0, equal; 1, not equal;
 */
uint8_t usmart_strcmp(char *str1, char *str2)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
    while (1)
    {
        if (*str1 != *str2)return 1; /* unequal */
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d001      	beq.n	8001626 <usmart_strcmp+0x1a>
 8001622:	2301      	movs	r3, #1
 8001624:	e00c      	b.n	8001640 <usmart_strcmp+0x34>

        if (*str1 == '\0')break;    /* The comparison is done. */
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <usmart_strcmp+0x30>

        str1++;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3301      	adds	r3, #1
 8001632:	607b      	str	r3, [r7, #4]
        str2++;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	603b      	str	r3, [r7, #0]
        if (*str1 != *str2)return 1; /* unequal */
 800163a:	e7ec      	b.n	8001616 <usmart_strcmp+0xa>
        if (*str1 == '\0')break;    /* The comparison is done. */
 800163c:	bf00      	nop
    }

    return 0;/* Two strings are equal */
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <usmart_strcopy>:
 * @param   src : source address
 * @param   dst : destination address
 * @retval  0, equal; 1, not equal;
 */
void usmart_strcopy(char *src, char *dst)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
    while (1)
    {
        *dst = *src;            /* copy */
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	701a      	strb	r2, [r3, #0]

        if (*src == '\0')break; /* The copy is complete. */
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <usmart_strcopy+0x28>

        src++;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	607b      	str	r3, [r7, #4]
        dst++;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	603b      	str	r3, [r7, #0]
        *dst = *src;            /* copy */
 8001672:	e7f0      	b.n	8001656 <usmart_strcopy+0xa>
        if (*src == '\0')break; /* The copy is complete. */
 8001674:	bf00      	nop
    }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <usmart_strlen>:
 * @brief   Gets the length of the string in bytes.
 * @param   str : String pointer
 * @retval  The length of the string
 */
uint8_t usmart_strlen(char *str)
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
    uint8_t len = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]

    while (1)
    {
        if (*str == '\0')break; /* The copy is complete. */
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <usmart_strlen+0x22>

        len++;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	3301      	adds	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
        str++;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3301      	adds	r3, #1
 80016a0:	607b      	str	r3, [r7, #4]
        if (*str == '\0')break; /* The copy is complete. */
 80016a2:	e7f4      	b.n	800168e <usmart_strlen+0xc>
 80016a4:	bf00      	nop
    }

    return len;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <usmart_pow>:
 * @param   m : The base
 * @param   n : The index
 * @retval  m to the n
 */
uint32_t usmart_pow(uint8_t m, uint8_t n)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71bb      	strb	r3, [r7, #6]
    uint32_t result = 1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]

    while (n--)result *= m;
 80016c8:	e004      	b.n	80016d4 <usmart_pow+0x20>
 80016ca:	79fa      	ldrb	r2, [r7, #7]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	71ba      	strb	r2, [r7, #6]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f5      	bne.n	80016ca <usmart_pow+0x16>

    return result;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <usmart_str2num>:
 * @arg     2, the hexadecimal digit is 0
 * @arg     3, the starting format is wrong
 * @arg     4, with a decimal digit of 0
 */
uint8_t usmart_str2num(char *str, uint32_t *res)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
    uint32_t t;
    int tnum;
    uint8_t bnum = 0;       /* Number of bits */
 80016f6:	2300      	movs	r3, #0
 80016f8:	76fb      	strb	r3, [r7, #27]
    char *p;
    uint8_t hexdec = 10;    /* The default is decimal data */
 80016fa:	230a      	movs	r3, #10
 80016fc:	74fb      	strb	r3, [r7, #19]
    uint8_t flag = 0;       /* 0, there is no symbol to mark. 1, which represents a positive number 2 is a negative number. */
 80016fe:	2300      	movs	r3, #0
 8001700:	74bb      	strb	r3, [r7, #18]
    p = str;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	617b      	str	r3, [r7, #20]
    *res = 0;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

    while (1)
    {
        /* Parameter validity checking */
        if ((*p <= '9' && *p >= '0') || ((*str == '-' || *str == '+') && bnum == 0) || (*p <= 'F' && *p >= 'A') || (*p == 'X' && bnum == 1))
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b39      	cmp	r3, #57	; 0x39
 8001712:	d803      	bhi.n	800171c <usmart_str2num+0x30>
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b2f      	cmp	r3, #47	; 0x2f
 800171a:	d819      	bhi.n	8001750 <usmart_str2num+0x64>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b2d      	cmp	r3, #45	; 0x2d
 8001722:	d003      	beq.n	800172c <usmart_str2num+0x40>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b2b      	cmp	r3, #43	; 0x2b
 800172a:	d102      	bne.n	8001732 <usmart_str2num+0x46>
 800172c:	7efb      	ldrb	r3, [r7, #27]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00e      	beq.n	8001750 <usmart_str2num+0x64>
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b46      	cmp	r3, #70	; 0x46
 8001738:	d803      	bhi.n	8001742 <usmart_str2num+0x56>
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b40      	cmp	r3, #64	; 0x40
 8001740:	d806      	bhi.n	8001750 <usmart_str2num+0x64>
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b58      	cmp	r3, #88	; 0x58
 8001748:	d120      	bne.n	800178c <usmart_str2num+0xa0>
 800174a:	7efb      	ldrb	r3, [r7, #27]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d11d      	bne.n	800178c <usmart_str2num+0xa0>
        {
            if (*p >= 'A')hexdec = 16;  /* There are letters in the string, in hexadecimal format. */
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b40      	cmp	r3, #64	; 0x40
 8001756:	d901      	bls.n	800175c <usmart_str2num+0x70>
 8001758:	2310      	movs	r3, #16
 800175a:	74fb      	strb	r3, [r7, #19]

            if (*str == '-')
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b2d      	cmp	r3, #45	; 0x2d
 8001762:	d105      	bne.n	8001770 <usmart_str2num+0x84>
            {
                flag = 2;   /* Offset the sign */
 8001764:	2302      	movs	r3, #2
 8001766:	74bb      	strb	r3, [r7, #18]
                str += 1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3301      	adds	r3, #1
 800176c:	607b      	str	r3, [r7, #4]
            if (*str == '-')
 800176e:	e013      	b.n	8001798 <usmart_str2num+0xac>
            }
            else if (*str == '+')
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b2b      	cmp	r3, #43	; 0x2b
 8001776:	d105      	bne.n	8001784 <usmart_str2num+0x98>
            {
                flag = 1;   /* Offset the sign */
 8001778:	2301      	movs	r3, #1
 800177a:	74bb      	strb	r3, [r7, #18]
                str += 1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3301      	adds	r3, #1
 8001780:	607b      	str	r3, [r7, #4]
            if (*str == '-')
 8001782:	e009      	b.n	8001798 <usmart_str2num+0xac>
            }
            else
            {
                bnum++;     /* The number of bits increased. */
 8001784:	7efb      	ldrb	r3, [r7, #27]
 8001786:	3301      	adds	r3, #1
 8001788:	76fb      	strb	r3, [r7, #27]
            if (*str == '-')
 800178a:	e005      	b.n	8001798 <usmart_str2num+0xac>
            }
        }
        else if (*p == '\0')
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <usmart_str2num+0xb4>
        {
            break;         /* At the end, exit */
        }
        else
        {
            return 1;      /* Not all decimal or hexadecimal data. */
 8001794:	2301      	movs	r3, #1
 8001796:	e05f      	b.n	8001858 <usmart_str2num+0x16c>
        }

        p++;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
        if ((*p <= '9' && *p >= '0') || ((*str == '-' || *str == '+') && bnum == 0) || (*p <= 'F' && *p >= 'A') || (*p == 'X' && bnum == 1))
 800179e:	e7b5      	b.n	800170c <usmart_str2num+0x20>
            break;         /* At the end, exit */
 80017a0:	bf00      	nop
    }

    p = str;               /* Relocates to the start of the string. */
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	617b      	str	r3, [r7, #20]

    if (hexdec == 16)      /* Hexadecimal data */
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d116      	bne.n	80017da <usmart_str2num+0xee>
    {
        if (bnum < 3)return 2;  /* If the number of bits is less than 3, exit. Because 0X takes up 2 of them,
 80017ac:	7efb      	ldrb	r3, [r7, #27]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d801      	bhi.n	80017b6 <usmart_str2num+0xca>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e050      	b.n	8001858 <usmart_str2num+0x16c>
                                 * if 0X is not followed by data, the data is invalid. */

        if (*p == '0' && (*(p + 1) == 'X'))   /* It must start with '0X'. */
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b30      	cmp	r3, #48	; 0x30
 80017bc:	d10b      	bne.n	80017d6 <usmart_str2num+0xea>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b58      	cmp	r3, #88	; 0x58
 80017c6:	d106      	bne.n	80017d6 <usmart_str2num+0xea>
        {
            p += 2;        /* Offset to the data start address. */
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3302      	adds	r3, #2
 80017cc:	617b      	str	r3, [r7, #20]
            bnum -= 2;     /* Subtract the offset */
 80017ce:	7efb      	ldrb	r3, [r7, #27]
 80017d0:	3b02      	subs	r3, #2
 80017d2:	76fb      	strb	r3, [r7, #27]
 80017d4:	e006      	b.n	80017e4 <usmart_str2num+0xf8>
        }
        else
        {
            return 3;      /* The starting header is not in the right format */
 80017d6:	2303      	movs	r3, #3
 80017d8:	e03e      	b.n	8001858 <usmart_str2num+0x16c>
        }
    }
    else if (bnum == 0)
 80017da:	7efb      	ldrb	r3, [r7, #27]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <usmart_str2num+0xf8>
    {
        return 4;          /* If the number of bits is 0, exit directly */
 80017e0:	2304      	movs	r3, #4
 80017e2:	e039      	b.n	8001858 <usmart_str2num+0x16c>
    }

    while (1)
    {
        if (bnum)bnum--;
 80017e4:	7efb      	ldrb	r3, [r7, #27]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <usmart_str2num+0x104>
 80017ea:	7efb      	ldrb	r3, [r7, #27]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	76fb      	strb	r3, [r7, #27]

        if (*p <= '9' && *p >= '0')t = *p - '0';  /* Get the value of the number */
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b39      	cmp	r3, #57	; 0x39
 80017f6:	d808      	bhi.n	800180a <usmart_str2num+0x11e>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b2f      	cmp	r3, #47	; 0x2f
 80017fe:	d904      	bls.n	800180a <usmart_str2num+0x11e>
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	3b30      	subs	r3, #48	; 0x30
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	e003      	b.n	8001812 <usmart_str2num+0x126>
        else t = *p - 'A' + 10;                   /* The corresponding values of A~F are obtained */
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	3b37      	subs	r3, #55	; 0x37
 8001810:	61fb      	str	r3, [r7, #28]

        *res += t * usmart_pow(hexdec, bnum);
 8001812:	7efa      	ldrb	r2, [r7, #27]
 8001814:	7cfb      	ldrb	r3, [r7, #19]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff4b 	bl	80016b4 <usmart_pow>
 800181e:	4602      	mov	r2, r0
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	fb03 f202 	mul.w	r2, r3, r2
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	441a      	add	r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	601a      	str	r2, [r3, #0]
        p++;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]

        if (*p == '\0')break;                     /* done with the data */
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d000      	beq.n	8001840 <usmart_str2num+0x154>
        if (bnum)bnum--;
 800183e:	e7d1      	b.n	80017e4 <usmart_str2num+0xf8>
        if (*p == '\0')break;                     /* done with the data */
 8001840:	bf00      	nop
    }

    if (flag == 2)                                /* Is it a negative number? */
 8001842:	7cbb      	ldrb	r3, [r7, #18]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d106      	bne.n	8001856 <usmart_str2num+0x16a>
    {
        tnum = -*res;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	425b      	negs	r3, r3
 800184e:	60fb      	str	r3, [r7, #12]
        *res = tnum;
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	601a      	str	r2, [r3, #0]
    }

    return 0;                                     /* Successful conversion. */
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <usmart_get_cmdname>:
 * @param   nlen    : The length of the instruction name
 * @param   maxlen  : Maximum length (to limit, instructions can't be too long)
 * @retval  0, success; Others, fail.
 */
uint8_t usmart_get_cmdname(char *str, char *cmdname, uint8_t *nlen, uint8_t maxlen)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	70fb      	strb	r3, [r7, #3]
    *nlen = 0;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]

    while (*str != ' ' && *str != '\0') /* If a space or terminator is found, it is considered over */
 8001874:	e016      	b.n	80018a4 <usmart_get_cmdname+0x44>
    {
        *cmdname = *str;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	701a      	strb	r2, [r3, #0]
        str++;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3301      	adds	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
        cmdname++;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3301      	adds	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
        (*nlen)++;                      /* Counting command length */
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	b2da      	uxtb	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	701a      	strb	r2, [r3, #0]

        if (*nlen >= maxlen)return 1;   /* Wrong instruction */
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	429a      	cmp	r2, r3
 800189e:	d801      	bhi.n	80018a4 <usmart_get_cmdname+0x44>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e00b      	b.n	80018bc <usmart_get_cmdname+0x5c>
    while (*str != ' ' && *str != '\0') /* If a space or terminator is found, it is considered over */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d003      	beq.n	80018b4 <usmart_get_cmdname+0x54>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1e0      	bne.n	8001876 <usmart_get_cmdname+0x16>
    }

    *cmdname = '\0';                    /* Adding a terminator */
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
    return 0;                           /* Return as normal */
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <usmart_search_nextc>:
 * @brief   gets the next character (when there are a lot of Spaces in between, this function simply ignores the space and finds the first character after the space)
 * @param   str : String pointer
 * @retval  The next character
 */
uint8_t usmart_search_nextc(char *str)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    str++;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3301      	adds	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]

    while (*str == ' ' && str != 0)str++;
 80018d6:	e002      	b.n	80018de <usmart_search_nextc+0x16>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	d102      	bne.n	80018ec <usmart_search_nextc+0x24>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f5      	bne.n	80018d8 <usmart_search_nextc+0x10>

    return *str;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	781b      	ldrb	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <usmart_get_fname>:
 * @param   pnum  : The number of arguments in the function
 * @param   rval  : Should the return value be displayed (0, no; 1, need)
 * @retval  0, success; Other, error code.
 */
uint8_t usmart_get_fname(char *str, char *fname, uint8_t *pnum, uint8_t *rval)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t fover = 0;  /* Bracket depth */
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char *strtemp;
    uint8_t offset = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
    uint8_t parmnum = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	77bb      	strb	r3, [r7, #30]
    uint8_t temp = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	777b      	strb	r3, [r7, #29]
    char fpname[6];     /* void+X+'/0' */
    uint8_t fplcnt = 0; /* The length counter of the first argument */
 800191c:	2300      	movs	r3, #0
 800191e:	773b      	strb	r3, [r7, #28]
    uint8_t pcnt = 0;   /* Parameter counters */
 8001920:	2300      	movs	r3, #0
 8001922:	76fb      	strb	r3, [r7, #27]
    uint8_t nchar;

    /* Determining whether a function returns a value */
    strtemp = str;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	623b      	str	r3, [r7, #32]

    while (*strtemp != '\0')    /* Do not end. */
 8001928:	e02b      	b.n	8001982 <usmart_get_fname+0x86>
    {
        if (*strtemp != ' ' && (pcnt & 0X7F) < 5)   /* A maximum of 5 characters is recorded */
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b20      	cmp	r3, #32
 8001930:	d021      	beq.n	8001976 <usmart_get_fname+0x7a>
 8001932:	7efb      	ldrb	r3, [r7, #27]
 8001934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001938:	2b04      	cmp	r3, #4
 800193a:	dc1c      	bgt.n	8001976 <usmart_get_fname+0x7a>
        {
            if (pcnt == 0)pcnt |= 0X80;       /* When the most significant bit is set, the flag begins to receive the return type */
 800193c:	7efb      	ldrb	r3, [r7, #27]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <usmart_get_fname+0x4e>
 8001942:	7efb      	ldrb	r3, [r7, #27]
 8001944:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001948:	76fb      	strb	r3, [r7, #27]

            if (((pcnt & 0x7f) == 4) && (*strtemp != '*'))break;    /* The last character, must be * */
 800194a:	7efb      	ldrb	r3, [r7, #27]
 800194c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001950:	2b04      	cmp	r3, #4
 8001952:	d103      	bne.n	800195c <usmart_get_fname+0x60>
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b2a      	cmp	r3, #42	; 0x2a
 800195a:	d117      	bne.n	800198c <usmart_get_fname+0x90>

            fpname[pcnt & 0x7f] = *strtemp;   /* Keep track of the return type of the function */
 800195c:	7efb      	ldrb	r3, [r7, #27]
 800195e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	3328      	adds	r3, #40	; 0x28
 8001968:	443b      	add	r3, r7
 800196a:	f803 2c14 	strb.w	r2, [r3, #-20]
            pcnt++;
 800196e:	7efb      	ldrb	r3, [r7, #27]
 8001970:	3301      	adds	r3, #1
 8001972:	76fb      	strb	r3, [r7, #27]
 8001974:	e002      	b.n	800197c <usmart_get_fname+0x80>
        }
        else if (pcnt == 0X85)
 8001976:	7efb      	ldrb	r3, [r7, #27]
 8001978:	2b85      	cmp	r3, #133	; 0x85
 800197a:	d009      	beq.n	8001990 <usmart_get_fname+0x94>
        {
            break;
        }

        strtemp++;
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	3301      	adds	r3, #1
 8001980:	623b      	str	r3, [r7, #32]
    while (*strtemp != '\0')    /* Do not end. */
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1cf      	bne.n	800192a <usmart_get_fname+0x2e>
 800198a:	e002      	b.n	8001992 <usmart_get_fname+0x96>
            if (((pcnt & 0x7f) == 4) && (*strtemp != '*'))break;    /* The last character, must be * */
 800198c:	bf00      	nop
 800198e:	e000      	b.n	8001992 <usmart_get_fname+0x96>
            break;
 8001990:	bf00      	nop
    }

    if (pcnt)           /* Completion of reception */
 8001992:	7efb      	ldrb	r3, [r7, #27]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d019      	beq.n	80019cc <usmart_get_fname+0xd0>
    {
        fpname[pcnt & 0x7f] = '\0'; /* Adding a terminator */
 8001998:	7efb      	ldrb	r3, [r7, #27]
 800199a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800199e:	3328      	adds	r3, #40	; 0x28
 80019a0:	443b      	add	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	f803 2c14 	strb.w	r2, [r3, #-20]

        if (usmart_strcmp(fpname, "void") == 0)
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4974      	ldr	r1, [pc, #464]	; (8001b80 <usmart_get_fname+0x284>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fe2c 	bl	800160c <usmart_strcmp>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <usmart_get_fname+0xc6>
        {
            *rval = 0;  /* No return value is required */
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e002      	b.n	80019c8 <usmart_get_fname+0xcc>
        }
        else
        {
            *rval = 1;  /* Need to return a value */
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
        }

        pcnt = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	76fb      	strb	r3, [r7, #27]
    }

    res = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    strtemp = str;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	623b      	str	r3, [r7, #32]

    while (*strtemp != '(' && *strtemp != '\0')   /* This code finds the real starting position of the function name */
 80019d6:	e01d      	b.n	8001a14 <usmart_get_fname+0x118>
    {
        strtemp++;
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	3301      	adds	r3, #1
 80019dc:	623b      	str	r3, [r7, #32]
        res++;
 80019de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e2:	3301      	adds	r3, #1
 80019e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (*strtemp == ' ' || *strtemp == '*')
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d003      	beq.n	80019f8 <usmart_get_fname+0xfc>
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b2a      	cmp	r3, #42	; 0x2a
 80019f6:	d10d      	bne.n	8001a14 <usmart_get_fname+0x118>
        {
            nchar = usmart_search_nextc(strtemp);   /* Gets the next character */
 80019f8:	6a38      	ldr	r0, [r7, #32]
 80019fa:	f7ff ff65 	bl	80018c8 <usmart_search_nextc>
 80019fe:	4603      	mov	r3, r0
 8001a00:	76bb      	strb	r3, [r7, #26]

            if (nchar != '(' && nchar != '*')offset = res;  /* Skip Spaces and * signs */
 8001a02:	7ebb      	ldrb	r3, [r7, #26]
 8001a04:	2b28      	cmp	r3, #40	; 0x28
 8001a06:	d005      	beq.n	8001a14 <usmart_get_fname+0x118>
 8001a08:	7ebb      	ldrb	r3, [r7, #26]
 8001a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a0c:	d002      	beq.n	8001a14 <usmart_get_fname+0x118>
 8001a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a12:	77fb      	strb	r3, [r7, #31]
    while (*strtemp != '(' && *strtemp != '\0')   /* This code finds the real starting position of the function name */
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b28      	cmp	r3, #40	; 0x28
 8001a1a:	d003      	beq.n	8001a24 <usmart_get_fname+0x128>
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1d9      	bne.n	80019d8 <usmart_get_fname+0xdc>
        }
    }

    strtemp = str;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	623b      	str	r3, [r7, #32]

    if (offset)strtemp += offset + 1;   /* Skip to the beginning of the function name */
 8001a28:	7ffb      	ldrb	r3, [r7, #31]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <usmart_get_fname+0x13c>
 8001a2e:	7ffb      	ldrb	r3, [r7, #31]
 8001a30:	3301      	adds	r3, #1
 8001a32:	6a3a      	ldr	r2, [r7, #32]
 8001a34:	4413      	add	r3, r2
 8001a36:	623b      	str	r3, [r7, #32]

    res = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    nchar = 0;  /* Whether the flag is in the string,0, is not in the string; 1, in the string; */
 8001a3e:	2300      	movs	r3, #0
 8001a40:	76bb      	strb	r3, [r7, #26]

    while (1)
    {
        if (*strtemp == 0)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <usmart_get_fname+0x156>
        {
            res = USMART_FUNCERR;   /* Function errors */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001a50:	e076      	b.n	8001b40 <usmart_get_fname+0x244>
        }
        else if (*strtemp == '(' && nchar == 0)
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b28      	cmp	r3, #40	; 0x28
 8001a58:	d108      	bne.n	8001a6c <usmart_get_fname+0x170>
 8001a5a:	7ebb      	ldrb	r3, [r7, #26]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <usmart_get_fname+0x170>
        {
            fover++;                /* Bracket depth is increased by one level */
 8001a60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a64:	3301      	adds	r3, #1
 8001a66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a6a:	e023      	b.n	8001ab4 <usmart_get_fname+0x1b8>
        }
        else if (*strtemp == ')' && nchar == 0)
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b29      	cmp	r3, #41	; 0x29
 8001a72:	d114      	bne.n	8001a9e <usmart_get_fname+0x1a2>
 8001a74:	7ebb      	ldrb	r3, [r7, #26]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d111      	bne.n	8001a9e <usmart_get_fname+0x1a2>
        {
            if (fover)
 8001a7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <usmart_get_fname+0x192>
            {
                fover--;
 8001a82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a8c:	e002      	b.n	8001a94 <usmart_get_fname+0x198>
            }
            else
            {
                res = USMART_FUNCERR;  /* End error, no '(' */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

            if (fover == 0)break;      /* At the end, exit */
 8001a94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <usmart_get_fname+0x1b8>
 8001a9c:	e050      	b.n	8001b40 <usmart_get_fname+0x244>
        }
        else if (*strtemp == '"')
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b22      	cmp	r3, #34	; 0x22
 8001aa4:	d106      	bne.n	8001ab4 <usmart_get_fname+0x1b8>
        {
            nchar = !nchar;
 8001aa6:	7ebb      	ldrb	r3, [r7, #26]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	76bb      	strb	r3, [r7, #26]
        }

        if (fover == 0)                /* We're not done with function names yet */
 8001ab4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10b      	bne.n	8001ad4 <usmart_get_fname+0x1d8>
        {
            if (*strtemp != ' ')       /* Spaces are not part of function names */
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d039      	beq.n	8001b38 <usmart_get_fname+0x23c>
            {
                *fname = *strtemp;     /* Get the function name */
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	701a      	strb	r2, [r3, #0]
                fname++;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	e031      	b.n	8001b38 <usmart_get_fname+0x23c>
            }
        }
        else                           /* You're done accepting the function name. */
        {
            if (*strtemp == ',')
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b2c      	cmp	r3, #44	; 0x2c
 8001ada:	d105      	bne.n	8001ae8 <usmart_get_fname+0x1ec>
            {
                temp = 1;              /* Enable to add a parameter */
 8001adc:	2301      	movs	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
                pcnt++;
 8001ae0:	7efb      	ldrb	r3, [r7, #27]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	76fb      	strb	r3, [r7, #27]
 8001ae6:	e01a      	b.n	8001b1e <usmart_get_fname+0x222>
            }
            else if (*strtemp != ' ' && *strtemp != '(')
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	d016      	beq.n	8001b1e <usmart_get_fname+0x222>
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b28      	cmp	r3, #40	; 0x28
 8001af6:	d012      	beq.n	8001b1e <usmart_get_fname+0x222>
            {
                if (pcnt == 0 && fplcnt < 5)    /* When the first argument comes, a judgment must be made in order to avoid counting arguments of type void. */
 8001af8:	7efb      	ldrb	r3, [r7, #27]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <usmart_get_fname+0x21c>
 8001afe:	7f3b      	ldrb	r3, [r7, #28]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d809      	bhi.n	8001b18 <usmart_get_fname+0x21c>
                {
                    fpname[fplcnt] = *strtemp;  /* Record the parameter characteristics. */
 8001b04:	7f3b      	ldrb	r3, [r7, #28]
 8001b06:	6a3a      	ldr	r2, [r7, #32]
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	3328      	adds	r3, #40	; 0x28
 8001b0c:	443b      	add	r3, r7
 8001b0e:	f803 2c14 	strb.w	r2, [r3, #-20]
                    fplcnt++;
 8001b12:	7f3b      	ldrb	r3, [r7, #28]
 8001b14:	3301      	adds	r3, #1
 8001b16:	773b      	strb	r3, [r7, #28]
                }

                temp++;         /* Get valid arguments (not Spaces) */
 8001b18:	7f7b      	ldrb	r3, [r7, #29]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	777b      	strb	r3, [r7, #29]
            }

            if (fover == 1 && temp == 2)
 8001b1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <usmart_get_fname+0x23c>
 8001b26:	7f7b      	ldrb	r3, [r7, #29]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d105      	bne.n	8001b38 <usmart_get_fname+0x23c>
            {
                temp++;         /* Prevent repeated increases */
 8001b2c:	7f7b      	ldrb	r3, [r7, #29]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	777b      	strb	r3, [r7, #29]
                parmnum++;      /* Adding a parameter */
 8001b32:	7fbb      	ldrb	r3, [r7, #30]
 8001b34:	3301      	adds	r3, #1
 8001b36:	77bb      	strb	r3, [r7, #30]
            }
        }

        strtemp++;
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	623b      	str	r3, [r7, #32]
        if (*strtemp == 0)
 8001b3e:	e780      	b.n	8001a42 <usmart_get_fname+0x146>
    }

    if (parmnum == 1)           /* There is only one parameter. */
 8001b40:	7fbb      	ldrb	r3, [r7, #30]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d110      	bne.n	8001b68 <usmart_get_fname+0x26c>
    {
        fpname[fplcnt] = '\0';  /* Adding a terminator */
 8001b46:	7f3b      	ldrb	r3, [r7, #28]
 8001b48:	3328      	adds	r3, #40	; 0x28
 8001b4a:	443b      	add	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f803 2c14 	strb.w	r2, [r3, #-20]

        if (usmart_strcmp(fpname, "void") == 0)parmnum = 0; /* The argument is void, meaning there is no argument. */
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	490a      	ldr	r1, [pc, #40]	; (8001b80 <usmart_get_fname+0x284>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fd57 	bl	800160c <usmart_strcmp>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <usmart_get_fname+0x26c>
 8001b64:	2300      	movs	r3, #0
 8001b66:	77bb      	strb	r3, [r7, #30]
    }

    *pnum = parmnum;            /* Record the number of parameters */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7fba      	ldrb	r2, [r7, #30]
 8001b6c:	701a      	strb	r2, [r3, #0]
    *fname = '\0';              /* Adding a terminator */
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
    return res;                 /* Return the result of execution */
 8001b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	0800b7e0 	.word	0x0800b7e0

08001b84 <usmart_get_aparm>:
 * @retval
 * @arg     0, no more arguments
 * @arg     Other, the offset of the next argument.
 */
uint8_t usmart_get_aparm(char *str, char *fparm, uint8_t *ptype)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]
    uint8_t enout = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	75bb      	strb	r3, [r7, #22]
    uint8_t type = 0;   /* The default is a number. */
 8001b98:	2300      	movs	r3, #0
 8001b9a:	757b      	strb	r3, [r7, #21]
    uint8_t string = 0; /* Flag whether str is reading */
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	753b      	strb	r3, [r7, #20]

    while (1)
    {
        if (*str == ',' && string == 0)enout = 1;   /* The immediate exit is deferred in order to find the start address of the next argument. */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b2c      	cmp	r3, #44	; 0x2c
 8001ba6:	d104      	bne.n	8001bb2 <usmart_get_aparm+0x2e>
 8001ba8:	7d3b      	ldrb	r3, [r7, #20]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <usmart_get_aparm+0x2e>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	75bb      	strb	r3, [r7, #22]

        if ((*str == ')' || *str == '\0') && string == 0)break; /* Exit identifier immediately */
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b29      	cmp	r3, #41	; 0x29
 8001bb8:	d003      	beq.n	8001bc2 <usmart_get_aparm+0x3e>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <usmart_get_aparm+0x44>
 8001bc2:	7d3b      	ldrb	r3, [r7, #20]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d07b      	beq.n	8001cc0 <usmart_get_aparm+0x13c>

        if (type == 0)   /* The default is numeric */
 8001bc8:	7d7b      	ldrb	r3, [r7, #21]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d154      	bne.n	8001c78 <usmart_get_aparm+0xf4>
        {
            /* Digit string detection */
            if ((*str >= '0' && *str <= '9') || *str == '-' || *str == '+' || (*str >= 'a' && *str <= 'f') || (*str >= 'A' && *str <= 'F') || *str == 'X' || *str == 'x')
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b2f      	cmp	r3, #47	; 0x2f
 8001bd4:	d903      	bls.n	8001bde <usmart_get_aparm+0x5a>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b39      	cmp	r3, #57	; 0x39
 8001bdc:	d91f      	bls.n	8001c1e <usmart_get_aparm+0x9a>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b2d      	cmp	r3, #45	; 0x2d
 8001be4:	d01b      	beq.n	8001c1e <usmart_get_aparm+0x9a>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b2b      	cmp	r3, #43	; 0x2b
 8001bec:	d017      	beq.n	8001c1e <usmart_get_aparm+0x9a>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b60      	cmp	r3, #96	; 0x60
 8001bf4:	d903      	bls.n	8001bfe <usmart_get_aparm+0x7a>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b66      	cmp	r3, #102	; 0x66
 8001bfc:	d90f      	bls.n	8001c1e <usmart_get_aparm+0x9a>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d903      	bls.n	8001c0e <usmart_get_aparm+0x8a>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b46      	cmp	r3, #70	; 0x46
 8001c0c:	d907      	bls.n	8001c1e <usmart_get_aparm+0x9a>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b58      	cmp	r3, #88	; 0x58
 8001c14:	d003      	beq.n	8001c1e <usmart_get_aparm+0x9a>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b78      	cmp	r3, #120	; 0x78
 8001c1c:	d115      	bne.n	8001c4a <usmart_get_aparm+0xc6>
            {
                if (enout)break;          /* When the next argument is found, exit. */
 8001c1e:	7dbb      	ldrb	r3, [r7, #22]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d14f      	bne.n	8001cc4 <usmart_get_aparm+0x140>

                if (*str >= 'a')
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b60      	cmp	r3, #96	; 0x60
 8001c2a:	d906      	bls.n	8001c3a <usmart_get_aparm+0xb6>
                {
                    *fparm = *str - 0X20; /* Convert lowercase to uppercase */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	3b20      	subs	r3, #32
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e003      	b.n	8001c42 <usmart_get_aparm+0xbe>
                }
                else
                {
                    *fparm = *str;        /* Lowercase or number stays the same */
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	701a      	strb	r2, [r3, #0]
                }

                fparm++;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3301      	adds	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	e033      	b.n	8001cb2 <usmart_get_aparm+0x12e>
            }
            else if (*str == '"')         /* Find the start flag of the string */
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b22      	cmp	r3, #34	; 0x22
 8001c50:	d107      	bne.n	8001c62 <usmart_get_aparm+0xde>
            {
                if (enout)break;          /* I found it, I found it, "and I thought it was over. */
 8001c52:	7dbb      	ldrb	r3, [r7, #22]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d137      	bne.n	8001cc8 <usmart_get_aparm+0x144>

                type = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	757b      	strb	r3, [r7, #21]
                string = 1;               /* Register that STRING is being read */
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	753b      	strb	r3, [r7, #20]
 8001c60:	e027      	b.n	8001cb2 <usmart_get_aparm+0x12e>
            }
            else if (*str != ' ' && *str != ',')  /* Invalid character found, parameter error */
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d023      	beq.n	8001cb2 <usmart_get_aparm+0x12e>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c70:	d01f      	beq.n	8001cb2 <usmart_get_aparm+0x12e>
            {
                type = 0XFF;
 8001c72:	23ff      	movs	r3, #255	; 0xff
 8001c74:	757b      	strb	r3, [r7, #21]
                break;
 8001c76:	e02a      	b.n	8001cce <usmart_get_aparm+0x14a>
            }
        }
        else                      /* The string class */
        {
            if (*str == '"')string = 0;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b22      	cmp	r3, #34	; 0x22
 8001c7e:	d101      	bne.n	8001c84 <usmart_get_aparm+0x100>
 8001c80:	2300      	movs	r3, #0
 8001c82:	753b      	strb	r3, [r7, #20]

            if (enout)break;      /* When the next argument is found, exit. */
 8001c84:	7dbb      	ldrb	r3, [r7, #22]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d120      	bne.n	8001ccc <usmart_get_aparm+0x148>

            if (string)           /* String reading */
 8001c8a:	7d3b      	ldrb	r3, [r7, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <usmart_get_aparm+0x12e>
            {
                if (*str == '\\') /* Escape character encountered (do not copy escape character) */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b5c      	cmp	r3, #92	; 0x5c
 8001c96:	d105      	bne.n	8001ca4 <usmart_get_aparm+0x120>
                {
                    str++;        /* Offset to the character after the escape character, whatever character, just COPY */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
                    i++;
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	75fb      	strb	r3, [r7, #23]
                }

                *fparm = *str;    /* Lowercase or number stays the same */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	701a      	strb	r2, [r3, #0]
                fparm++;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
            }
        }

        i++;                     /* The offset is increased */
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	75fb      	strb	r3, [r7, #23]
        str++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
        if (*str == ',' && string == 0)enout = 1;   /* The immediate exit is deferred in order to find the start address of the next argument. */
 8001cbe:	e76f      	b.n	8001ba0 <usmart_get_aparm+0x1c>
        if ((*str == ')' || *str == '\0') && string == 0)break; /* Exit identifier immediately */
 8001cc0:	bf00      	nop
 8001cc2:	e004      	b.n	8001cce <usmart_get_aparm+0x14a>
                if (enout)break;          /* When the next argument is found, exit. */
 8001cc4:	bf00      	nop
 8001cc6:	e002      	b.n	8001cce <usmart_get_aparm+0x14a>
                if (enout)break;          /* I found it, I found it, "and I thought it was over. */
 8001cc8:	bf00      	nop
 8001cca:	e000      	b.n	8001cce <usmart_get_aparm+0x14a>
            if (enout)break;      /* When the next argument is found, exit. */
 8001ccc:	bf00      	nop
    }

    *fparm = '\0';               /* Adding a terminator */
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
    *ptype = type;               /* Return parameter type */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7d7a      	ldrb	r2, [r7, #21]
 8001cd8:	701a      	strb	r2, [r3, #0]
    return i;                    /* Return the length of the argument */
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <usmart_get_parmpos>:
 * @brief   Gets the start address of the specified parameter
 * @param   num : The num-th argument in the range 0-9.
 * @retval  The start address of the parameter
 */
uint8_t usmart_get_parmpos(uint8_t num)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for (i = 0; i < num; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73bb      	strb	r3, [r7, #14]
 8001cfa:	e009      	b.n	8001d10 <usmart_get_parmpos+0x28>
    {
        temp += usmart_dev.plentbl[i];
 8001cfc:	7bbb      	ldrb	r3, [r7, #14]
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <usmart_get_parmpos+0x40>)
 8001d00:	4413      	add	r3, r2
 8001d02:	7e9a      	ldrb	r2, [r3, #26]
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	4413      	add	r3, r2
 8001d08:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < num; i++)
 8001d0a:	7bbb      	ldrb	r3, [r7, #14]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73bb      	strb	r3, [r7, #14]
 8001d10:	7bba      	ldrb	r2, [r7, #14]
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3f1      	bcc.n	8001cfc <usmart_get_parmpos+0x14>
    }

    return temp;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	2000003c 	.word	0x2000003c

08001d2c <usmart_get_fparam>:
 * @param  str  : The source string
 * @param  parn : The number of arguments.0 means void with no arguments
 * @retval 0, success; Other, error code.
 */
uint8_t usmart_get_fparam(char *str, uint8_t *parn)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0b8      	sub	sp, #224	; 0xe0
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
    uint8_t i, type;
    uint32_t res;
    uint8_t n = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    uint8_t len;
    char tstr[PARM_LEN + 1]; /* The byte cache can hold strings of up to PARM_LEN characters */

    for (i = 0; i < MAX_PARM; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001d42:	e00a      	b.n	8001d5a <usmart_get_fparam+0x2e>
    {
        usmart_dev.plentbl[i] = 0;  /* Clear the parameter length table */
 8001d44:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001d48:	4a65      	ldr	r2, [pc, #404]	; (8001ee0 <usmart_get_fparam+0x1b4>)
 8001d4a:	4413      	add	r3, r2
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	769a      	strb	r2, [r3, #26]
    for (i = 0; i < MAX_PARM; i++)
 8001d50:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001d54:	3301      	adds	r3, #1
 8001d56:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8001d5a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001d5e:	2b09      	cmp	r3, #9
 8001d60:	d9f0      	bls.n	8001d44 <usmart_get_fparam+0x18>
    }

    while (*str != '(')   /* Offset to the beginning of the argument */
 8001d62:	e008      	b.n	8001d76 <usmart_get_fparam+0x4a>
    {
        str++;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]

        if (*str == '\0')return USMART_FUNCERR; /* We've hit a terminator */
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <usmart_get_fparam+0x4a>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0b0      	b.n	8001ed8 <usmart_get_fparam+0x1ac>
    while (*str != '(')   /* Offset to the beginning of the argument */
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b28      	cmp	r3, #40	; 0x28
 8001d7c:	d1f2      	bne.n	8001d64 <usmart_get_fparam+0x38>
    }

    str++;                /* Offset to the first byte after "(" */
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3301      	adds	r3, #1
 8001d82:	607b      	str	r3, [r7, #4]

    while (1)
    {
        i = usmart_get_aparm(str, tstr, &type); /* Get the first argument */
 8001d84:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff fef8 	bl	8001b84 <usmart_get_aparm>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
        str += i;         /* Offset */
 8001d9a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	607b      	str	r3, [r7, #4]

        switch (type)
 8001da4:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8001da8:	2bff      	cmp	r3, #255	; 0xff
 8001daa:	f000 8082 	beq.w	8001eb2 <usmart_get_fparam+0x186>
 8001dae:	2bff      	cmp	r3, #255	; 0xff
 8001db0:	f300 8084 	bgt.w	8001ebc <usmart_get_fparam+0x190>
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <usmart_get_fparam+0x92>
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d041      	beq.n	8001e40 <usmart_get_fparam+0x114>
 8001dbc:	e07e      	b.n	8001ebc <usmart_get_fparam+0x190>
        {
            case 0:       /* number */
                if (tstr[0] != '\0')    /* The arguments received are valid */
 8001dbe:	7b3b      	ldrb	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d078      	beq.n	8001eb6 <usmart_get_fparam+0x18a>
                {
                    i = usmart_str2num(tstr, &res);  /* Record the parameter */
 8001dc4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fc8c 	bl	80016ec <usmart_str2num>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

                    if (i)return USMART_PARMERR;     /* Parameter error. */
 8001dda:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <usmart_get_fparam+0xba>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e078      	b.n	8001ed8 <usmart_get_fparam+0x1ac>

                    *(uint32_t *)(usmart_dev.parm + usmart_get_parmpos(n)) = res;   /* Record the result of a successful transformation. */
 8001de6:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff7c 	bl	8001ce8 <usmart_get_parmpos>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <usmart_get_fparam+0x1b8>)
 8001df6:	4413      	add	r3, r2
 8001df8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001dfc:	601a      	str	r2, [r3, #0]
                    usmart_dev.parmtype &= ~(1 << n);/* Marking numbers */
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <usmart_get_fparam+0x1b4>)
 8001e00:	8b1b      	ldrh	r3, [r3, #24]
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4013      	ands	r3, r2
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <usmart_get_fparam+0x1b4>)
 8001e1c:	831a      	strh	r2, [r3, #24]
                    usmart_dev.plentbl[n] = 4;       /* The length of this parameter is 4 */
 8001e1e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001e22:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <usmart_get_fparam+0x1b4>)
 8001e24:	4413      	add	r3, r2
 8001e26:	2204      	movs	r2, #4
 8001e28:	769a      	strb	r2, [r3, #26]
                    n++;                             /* Increase in parameters */
 8001e2a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

                    if (n > MAX_PARM)return USMART_PARMOVER;  /* parameter number too much */
 8001e34:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001e38:	2b0a      	cmp	r3, #10
 8001e3a:	d93c      	bls.n	8001eb6 <usmart_get_fparam+0x18a>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e04b      	b.n	8001ed8 <usmart_get_fparam+0x1ac>
                }

                break;

            case 1:       /* string */
                len = usmart_strlen(tstr) + 1;  /* Includes the terminator '\0' */
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fc1c 	bl	8001682 <usmart_strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
                usmart_strcopy(tstr, (char *)&usmart_dev.parm[usmart_get_parmpos(n)]);  /* Copy tstr data to usmart dev.parm[n] */
 8001e52:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff46 	bl	8001ce8 <usmart_get_parmpos>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	3320      	adds	r3, #32
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <usmart_get_fparam+0x1b4>)
 8001e62:	4413      	add	r3, r2
 8001e64:	1d1a      	adds	r2, r3, #4
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fbed 	bl	800164c <usmart_strcopy>
                usmart_dev.parmtype |= 1 << n;  /* Tag string */
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <usmart_get_fparam+0x1b4>)
 8001e74:	8b1b      	ldrh	r3, [r3, #24]
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <usmart_get_fparam+0x1b4>)
 8001e8c:	831a      	strh	r2, [r3, #24]
                usmart_dev.plentbl[n] = len;    /* The length of this parameter is len */
 8001e8e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <usmart_get_fparam+0x1b4>)
 8001e94:	4413      	add	r3, r2
 8001e96:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8001e9a:	769a      	strb	r2, [r3, #26]
                n++;
 8001e9c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

                if (n > MAX_PARM)return USMART_PARMOVER;    /* parameter number too much */
 8001ea6:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001eaa:	2b0a      	cmp	r3, #10
 8001eac:	d905      	bls.n	8001eba <usmart_get_fparam+0x18e>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e012      	b.n	8001ed8 <usmart_get_fparam+0x1ac>

                break;

            case 0XFF:    /* Error */
                return USMART_PARMERR;          /* parameter error */
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e010      	b.n	8001ed8 <usmart_get_fparam+0x1ac>
                break;
 8001eb6:	bf00      	nop
 8001eb8:	e000      	b.n	8001ebc <usmart_get_fparam+0x190>
                break;
 8001eba:	bf00      	nop
        }

        if (*str == ')' || *str == '\0')break;  /* We got the end sign. */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b29      	cmp	r3, #41	; 0x29
 8001ec2:	d004      	beq.n	8001ece <usmart_get_fparam+0x1a2>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d000      	beq.n	8001ece <usmart_get_fparam+0x1a2>
        i = usmart_get_aparm(str, tstr, &type); /* Get the first argument */
 8001ecc:	e75a      	b.n	8001d84 <usmart_get_fparam+0x58>
    }

    *parn = n;                                 /* Record the number of parameters */
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 8001ed4:	701a      	strb	r2, [r3, #0]
    return USMART_OK;                          /* The parameters are correctly obtained */
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	37e0      	adds	r7, #224	; 0xe0
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000003c 	.word	0x2000003c
 8001ee4:	20000060 	.word	0x20000060

08001ee8 <lcd_ex_st7789_reginit>:
 * @brief  ST7789 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7789_reginit(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8001eec:	2011      	movs	r0, #17
 8001eee:	f002 fc39 	bl	8004764 <lcd_wr_regno>

    HAL_Delay(120);
 8001ef2:	2078      	movs	r0, #120	; 0x78
 8001ef4:	f004 fb78 	bl	80065e8 <HAL_Delay>

    lcd_wr_regno(0x36);
 8001ef8:	2036      	movs	r0, #54	; 0x36
 8001efa:	f002 fc33 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f002 fc1c 	bl	800473c <lcd_wr_data>


    lcd_wr_regno(0x3A);
 8001f04:	203a      	movs	r0, #58	; 0x3a
 8001f06:	f002 fc2d 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0X05);
 8001f0a:	2005      	movs	r0, #5
 8001f0c:	f002 fc16 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8001f10:	20b2      	movs	r0, #178	; 0xb2
 8001f12:	f002 fc27 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8001f16:	200c      	movs	r0, #12
 8001f18:	f002 fc10 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0C);
 8001f1c:	200c      	movs	r0, #12
 8001f1e:	f002 fc0d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f002 fc0a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x33);
 8001f28:	2033      	movs	r0, #51	; 0x33
 8001f2a:	f002 fc07 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x33);
 8001f2e:	2033      	movs	r0, #51	; 0x33
 8001f30:	f002 fc04 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8001f34:	20b7      	movs	r0, #183	; 0xb7
 8001f36:	f002 fc15 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x35);
 8001f3a:	2035      	movs	r0, #53	; 0x35
 8001f3c:	f002 fbfe 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 8001f40:	20bb      	movs	r0, #187	; 0xbb
 8001f42:	f002 fc0f 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 8001f46:	2032      	movs	r0, #50	; 0x32
 8001f48:	f002 fbf8 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8001f4c:	20c0      	movs	r0, #192	; 0xc0
 8001f4e:	f002 fc09 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8001f52:	200c      	movs	r0, #12
 8001f54:	f002 fbf2 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001f58:	20c2      	movs	r0, #194	; 0xc2
 8001f5a:	f002 fc03 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f002 fbec 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 8001f64:	20c3      	movs	r0, #195	; 0xc3
 8001f66:	f002 fbfd 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 8001f6a:	2010      	movs	r0, #16
 8001f6c:	f002 fbe6 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 8001f70:	20c4      	movs	r0, #196	; 0xc4
 8001f72:	f002 fbf7 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 8001f76:	2020      	movs	r0, #32
 8001f78:	f002 fbe0 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8001f7c:	20c6      	movs	r0, #198	; 0xc6
 8001f7e:	f002 fbf1 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x0f);
 8001f82:	200f      	movs	r0, #15
 8001f84:	f002 fbda 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xD0);
 8001f88:	20d0      	movs	r0, #208	; 0xd0
 8001f8a:	f002 fbeb 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xA4);
 8001f8e:	20a4      	movs	r0, #164	; 0xa4
 8001f90:	f002 fbd4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA1);
 8001f94:	20a1      	movs	r0, #161	; 0xa1
 8001f96:	f002 fbd1 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 8001f9a:	20e0      	movs	r0, #224	; 0xe0
 8001f9c:	f002 fbe2 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8001fa0:	20d0      	movs	r0, #208	; 0xd0
 8001fa2:	f002 fbcb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f002 fbc8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x02);
 8001fac:	2002      	movs	r0, #2
 8001fae:	f002 fbc5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x07);
 8001fb2:	2007      	movs	r0, #7
 8001fb4:	f002 fbc2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0a);
 8001fb8:	200a      	movs	r0, #10
 8001fba:	f002 fbbf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x28);
 8001fbe:	2028      	movs	r0, #40	; 0x28
 8001fc0:	f002 fbbc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x32);
 8001fc4:	2032      	movs	r0, #50	; 0x32
 8001fc6:	f002 fbb9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0X44);
 8001fca:	2044      	movs	r0, #68	; 0x44
 8001fcc:	f002 fbb6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x42);
 8001fd0:	2042      	movs	r0, #66	; 0x42
 8001fd2:	f002 fbb3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x06);
 8001fd6:	2006      	movs	r0, #6
 8001fd8:	f002 fbb0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0e);
 8001fdc:	200e      	movs	r0, #14
 8001fde:	f002 fbad 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x12);
 8001fe2:	2012      	movs	r0, #18
 8001fe4:	f002 fbaa 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x14);
 8001fe8:	2014      	movs	r0, #20
 8001fea:	f002 fba7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x17);
 8001fee:	2017      	movs	r0, #23
 8001ff0:	f002 fba4 	bl	800473c <lcd_wr_data>


    lcd_wr_regno(0XE1);  /* Set Gamma */
 8001ff4:	20e1      	movs	r0, #225	; 0xe1
 8001ff6:	f002 fbb5 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8001ffa:	20d0      	movs	r0, #208	; 0xd0
 8001ffc:	f002 fb9e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002000:	2000      	movs	r0, #0
 8002002:	f002 fb9b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x02);
 8002006:	2002      	movs	r0, #2
 8002008:	f002 fb98 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x07);
 800200c:	2007      	movs	r0, #7
 800200e:	f002 fb95 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0a);
 8002012:	200a      	movs	r0, #10
 8002014:	f002 fb92 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x28);
 8002018:	2028      	movs	r0, #40	; 0x28
 800201a:	f002 fb8f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x31);
 800201e:	2031      	movs	r0, #49	; 0x31
 8002020:	f002 fb8c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x54);
 8002024:	2054      	movs	r0, #84	; 0x54
 8002026:	f002 fb89 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x47);
 800202a:	2047      	movs	r0, #71	; 0x47
 800202c:	f002 fb86 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0e);
 8002030:	200e      	movs	r0, #14
 8002032:	f002 fb83 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1c);
 8002036:	201c      	movs	r0, #28
 8002038:	f002 fb80 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x17);
 800203c:	2017      	movs	r0, #23
 800203e:	f002 fb7d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1b);
 8002042:	201b      	movs	r0, #27
 8002044:	f002 fb7a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1e);
 8002048:	201e      	movs	r0, #30
 800204a:	f002 fb77 	bl	800473c <lcd_wr_data>


    lcd_wr_regno(0x2A);
 800204e:	202a      	movs	r0, #42	; 0x2a
 8002050:	f002 fb88 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002054:	2000      	movs	r0, #0
 8002056:	f002 fb71 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f002 fb6e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002060:	2000      	movs	r0, #0
 8002062:	f002 fb6b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xef);
 8002066:	20ef      	movs	r0, #239	; 0xef
 8002068:	f002 fb68 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x2B);
 800206c:	202b      	movs	r0, #43	; 0x2b
 800206e:	f002 fb79 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002072:	2000      	movs	r0, #0
 8002074:	f002 fb62 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f002 fb5f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 800207e:	2001      	movs	r0, #1
 8002080:	f002 fb5c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3f);
 8002084:	203f      	movs	r0, #63	; 0x3f
 8002086:	f002 fb59 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 800208a:	2029      	movs	r0, #41	; 0x29
 800208c:	f002 fb6a 	bl	8004764 <lcd_wr_regno>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <lcd_ex_ili9341_reginit>:
 * @brief  ILI9341 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9341_reginit(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 8002098:	20cf      	movs	r0, #207	; 0xcf
 800209a:	f002 fb63 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800209e:	2000      	movs	r0, #0
 80020a0:	f002 fb4c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xC1);
 80020a4:	20c1      	movs	r0, #193	; 0xc1
 80020a6:	f002 fb49 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0X30);
 80020aa:	2030      	movs	r0, #48	; 0x30
 80020ac:	f002 fb46 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xED);
 80020b0:	20ed      	movs	r0, #237	; 0xed
 80020b2:	f002 fb57 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x64);
 80020b6:	2064      	movs	r0, #100	; 0x64
 80020b8:	f002 fb40 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x03);
 80020bc:	2003      	movs	r0, #3
 80020be:	f002 fb3d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0X12);
 80020c2:	2012      	movs	r0, #18
 80020c4:	f002 fb3a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0X81);
 80020c8:	2081      	movs	r0, #129	; 0x81
 80020ca:	f002 fb37 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xE8);
 80020ce:	20e8      	movs	r0, #232	; 0xe8
 80020d0:	f002 fb48 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x85);
 80020d4:	2085      	movs	r0, #133	; 0x85
 80020d6:	f002 fb31 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x10);
 80020da:	2010      	movs	r0, #16
 80020dc:	f002 fb2e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x7A);
 80020e0:	207a      	movs	r0, #122	; 0x7a
 80020e2:	f002 fb2b 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xCB);
 80020e6:	20cb      	movs	r0, #203	; 0xcb
 80020e8:	f002 fb3c 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x39);
 80020ec:	2039      	movs	r0, #57	; 0x39
 80020ee:	f002 fb25 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2C);
 80020f2:	202c      	movs	r0, #44	; 0x2c
 80020f4:	f002 fb22 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80020f8:	2000      	movs	r0, #0
 80020fa:	f002 fb1f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x34);
 80020fe:	2034      	movs	r0, #52	; 0x34
 8002100:	f002 fb1c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x02);
 8002104:	2002      	movs	r0, #2
 8002106:	f002 fb19 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xF7);
 800210a:	20f7      	movs	r0, #247	; 0xf7
 800210c:	f002 fb2a 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8002110:	2020      	movs	r0, #32
 8002112:	f002 fb13 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xEA);
 8002116:	20ea      	movs	r0, #234	; 0xea
 8002118:	f002 fb24 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800211c:	2000      	movs	r0, #0
 800211e:	f002 fb0d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002122:	2000      	movs	r0, #0
 8002124:	f002 fb0a 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 8002128:	20c0      	movs	r0, #192	; 0xc0
 800212a:	f002 fb1b 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 800212e:	201b      	movs	r0, #27
 8002130:	f002 fb04 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 8002134:	20c1      	movs	r0, #193	; 0xc1
 8002136:	f002 fb15 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 800213a:	2001      	movs	r0, #1
 800213c:	f002 fafe 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 8002140:	20c5      	movs	r0, #197	; 0xc5
 8002142:	f002 fb0f 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 8002146:	2030      	movs	r0, #48	; 0x30
 8002148:	f002 faf8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 800214c:	2030      	movs	r0, #48	; 0x30
 800214e:	f002 faf5 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 8002152:	20c7      	movs	r0, #199	; 0xc7
 8002154:	f002 fb06 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0XB7);
 8002158:	20b7      	movs	r0, #183	; 0xb7
 800215a:	f002 faef 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0x36); /*  Memory Access Control */
 800215e:	2036      	movs	r0, #54	; 0x36
 8002160:	f002 fb00 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8002164:	2048      	movs	r0, #72	; 0x48
 8002166:	f002 fae9 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0x3A);
 800216a:	203a      	movs	r0, #58	; 0x3a
 800216c:	f002 fafa 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8002170:	2055      	movs	r0, #85	; 0x55
 8002172:	f002 fae3 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xB1);
 8002176:	20b1      	movs	r0, #177	; 0xb1
 8002178:	f002 faf4 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800217c:	2000      	movs	r0, #0
 800217e:	f002 fadd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1A);
 8002182:	201a      	movs	r0, #26
 8002184:	f002 fada 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xB6); /*  Display Function Control */
 8002188:	20b6      	movs	r0, #182	; 0xb6
 800218a:	f002 faeb 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 800218e:	200a      	movs	r0, #10
 8002190:	f002 fad4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA2);
 8002194:	20a2      	movs	r0, #162	; 0xa2
 8002196:	f002 fad1 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
 800219a:	20f2      	movs	r0, #242	; 0xf2
 800219c:	f002 fae2 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f002 facb 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 80021a6:	2026      	movs	r0, #38	; 0x26
 80021a8:	f002 fadc 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);
 80021ac:	2001      	movs	r0, #1
 80021ae:	f002 fac5 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 80021b2:	20e0      	movs	r0, #224	; 0xe0
 80021b4:	f002 fad6 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 80021b8:	200f      	movs	r0, #15
 80021ba:	f002 fabf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2A);
 80021be:	202a      	movs	r0, #42	; 0x2a
 80021c0:	f002 fabc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x28);
 80021c4:	2028      	movs	r0, #40	; 0x28
 80021c6:	f002 fab9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x08);
 80021ca:	2008      	movs	r0, #8
 80021cc:	f002 fab6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0E);
 80021d0:	200e      	movs	r0, #14
 80021d2:	f002 fab3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x08);
 80021d6:	2008      	movs	r0, #8
 80021d8:	f002 fab0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x54);
 80021dc:	2054      	movs	r0, #84	; 0x54
 80021de:	f002 faad 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0XA9);
 80021e2:	20a9      	movs	r0, #169	; 0xa9
 80021e4:	f002 faaa 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x43);
 80021e8:	2043      	movs	r0, #67	; 0x43
 80021ea:	f002 faa7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0A);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f002 faa4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0F);
 80021f4:	200f      	movs	r0, #15
 80021f6:	f002 faa1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f002 fa9e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002200:	2000      	movs	r0, #0
 8002202:	f002 fa9b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002206:	2000      	movs	r0, #0
 8002208:	f002 fa98 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800220c:	2000      	movs	r0, #0
 800220e:	f002 fa95 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0XE1);    /* Set Gamma */
 8002212:	20e1      	movs	r0, #225	; 0xe1
 8002214:	f002 faa6 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002218:	2000      	movs	r0, #0
 800221a:	f002 fa8f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x15);
 800221e:	2015      	movs	r0, #21
 8002220:	f002 fa8c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x17);
 8002224:	2017      	movs	r0, #23
 8002226:	f002 fa89 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x07);
 800222a:	2007      	movs	r0, #7
 800222c:	f002 fa86 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x11);
 8002230:	2011      	movs	r0, #17
 8002232:	f002 fa83 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x06);
 8002236:	2006      	movs	r0, #6
 8002238:	f002 fa80 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2B);
 800223c:	202b      	movs	r0, #43	; 0x2b
 800223e:	f002 fa7d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x56);
 8002242:	2056      	movs	r0, #86	; 0x56
 8002244:	f002 fa7a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3C);
 8002248:	203c      	movs	r0, #60	; 0x3c
 800224a:	f002 fa77 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x05);
 800224e:	2005      	movs	r0, #5
 8002250:	f002 fa74 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x10);
 8002254:	2010      	movs	r0, #16
 8002256:	f002 fa71 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0F);
 800225a:	200f      	movs	r0, #15
 800225c:	f002 fa6e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3F);
 8002260:	203f      	movs	r0, #63	; 0x3f
 8002262:	f002 fa6b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3F);
 8002266:	203f      	movs	r0, #63	; 0x3f
 8002268:	f002 fa68 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0F);
 800226c:	200f      	movs	r0, #15
 800226e:	f002 fa65 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0x2B);
 8002272:	202b      	movs	r0, #43	; 0x2b
 8002274:	f002 fa76 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002278:	2000      	movs	r0, #0
 800227a:	f002 fa5f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800227e:	2000      	movs	r0, #0
 8002280:	f002 fa5c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 8002284:	2001      	movs	r0, #1
 8002286:	f002 fa59 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3f);
 800228a:	203f      	movs	r0, #63	; 0x3f
 800228c:	f002 fa56 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8002290:	202a      	movs	r0, #42	; 0x2a
 8002292:	f002 fa67 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002296:	2000      	movs	r0, #0
 8002298:	f002 fa50 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800229c:	2000      	movs	r0, #0
 800229e:	f002 fa4d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f002 fa4a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xef);
 80022a8:	20ef      	movs	r0, #239	; 0xef
 80022aa:	f002 fa47 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 80022ae:	2011      	movs	r0, #17
 80022b0:	f002 fa58 	bl	8004764 <lcd_wr_regno>
    HAL_Delay(120);
 80022b4:	2078      	movs	r0, #120	; 0x78
 80022b6:	f004 f997 	bl	80065e8 <HAL_Delay>
    lcd_wr_regno(0x29); /* display on */
 80022ba:	2029      	movs	r0, #41	; 0x29
 80022bc:	f002 fa52 	bl	8004764 <lcd_wr_regno>
 }
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <lcd_ex_nt35310_reginit>:
 * @brief  NT35310 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35310_reginit(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 80022c8:	20ed      	movs	r0, #237	; 0xed
 80022ca:	f002 fa4b 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f002 fa34 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFE);
 80022d4:	20fe      	movs	r0, #254	; 0xfe
 80022d6:	f002 fa31 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xEE);
 80022da:	20ee      	movs	r0, #238	; 0xee
 80022dc:	f002 fa42 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xDE);
 80022e0:	20de      	movs	r0, #222	; 0xde
 80022e2:	f002 fa2b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x21);
 80022e6:	2021      	movs	r0, #33	; 0x21
 80022e8:	f002 fa28 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF1);
 80022ec:	20f1      	movs	r0, #241	; 0xf1
 80022ee:	f002 fa39 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f002 fa22 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xDF);
 80022f8:	20df      	movs	r0, #223	; 0xdf
 80022fa:	f002 fa33 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x10);
 80022fe:	2010      	movs	r0, #16
 8002300:	f002 fa1c 	bl	800473c <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8002304:	20c4      	movs	r0, #196	; 0xc4
 8002306:	f002 fa2d 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 800230a:	208f      	movs	r0, #143	; 0x8f
 800230c:	f002 fa16 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8002310:	20c6      	movs	r0, #198	; 0xc6
 8002312:	f002 fa27 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002316:	2000      	movs	r0, #0
 8002318:	f002 fa10 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xE2);
 800231c:	20e2      	movs	r0, #226	; 0xe2
 800231e:	f002 fa0d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xE2);
 8002322:	20e2      	movs	r0, #226	; 0xe2
 8002324:	f002 fa0a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xE2);
 8002328:	20e2      	movs	r0, #226	; 0xe2
 800232a:	f002 fa07 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xBF);
 800232e:	20bf      	movs	r0, #191	; 0xbf
 8002330:	f002 fa18 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8002334:	20aa      	movs	r0, #170	; 0xaa
 8002336:	f002 fa01 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB0);
 800233a:	20b0      	movs	r0, #176	; 0xb0
 800233c:	f002 fa12 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x0D);
 8002340:	200d      	movs	r0, #13
 8002342:	f002 f9fb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002346:	2000      	movs	r0, #0
 8002348:	f002 f9f8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0D);
 800234c:	200d      	movs	r0, #13
 800234e:	f002 f9f5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002352:	2000      	movs	r0, #0
 8002354:	f002 f9f2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x11);
 8002358:	2011      	movs	r0, #17
 800235a:	f002 f9ef 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800235e:	2000      	movs	r0, #0
 8002360:	f002 f9ec 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x19);
 8002364:	2019      	movs	r0, #25
 8002366:	f002 f9e9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800236a:	2000      	movs	r0, #0
 800236c:	f002 f9e6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x21);
 8002370:	2021      	movs	r0, #33	; 0x21
 8002372:	f002 f9e3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002376:	2000      	movs	r0, #0
 8002378:	f002 f9e0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2D);
 800237c:	202d      	movs	r0, #45	; 0x2d
 800237e:	f002 f9dd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002382:	2000      	movs	r0, #0
 8002384:	f002 f9da 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3D);
 8002388:	203d      	movs	r0, #61	; 0x3d
 800238a:	f002 f9d7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800238e:	2000      	movs	r0, #0
 8002390:	f002 f9d4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x5D);
 8002394:	205d      	movs	r0, #93	; 0x5d
 8002396:	f002 f9d1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800239a:	2000      	movs	r0, #0
 800239c:	f002 f9ce 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x5D);
 80023a0:	205d      	movs	r0, #93	; 0x5d
 80023a2:	f002 f9cb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f002 f9c8 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB1);
 80023ac:	20b1      	movs	r0, #177	; 0xb1
 80023ae:	f002 f9d9 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x80);
 80023b2:	2080      	movs	r0, #128	; 0x80
 80023b4:	f002 f9c2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f002 f9bf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x8B);
 80023be:	208b      	movs	r0, #139	; 0x8b
 80023c0:	f002 f9bc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f002 f9b9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x96);
 80023ca:	2096      	movs	r0, #150	; 0x96
 80023cc:	f002 f9b6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80023d0:	2000      	movs	r0, #0
 80023d2:	f002 f9b3 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB2);
 80023d6:	20b2      	movs	r0, #178	; 0xb2
 80023d8:	f002 f9c4 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80023dc:	2000      	movs	r0, #0
 80023de:	f002 f9ad 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f002 f9aa 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x02);
 80023e8:	2002      	movs	r0, #2
 80023ea:	f002 f9a7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f002 f9a4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x03);
 80023f4:	2003      	movs	r0, #3
 80023f6:	f002 f9a1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f002 f99e 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB3);
 8002400:	20b3      	movs	r0, #179	; 0xb3
 8002402:	f002 f9af 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002406:	2000      	movs	r0, #0
 8002408:	f002 f998 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800240c:	2000      	movs	r0, #0
 800240e:	f002 f995 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002412:	2000      	movs	r0, #0
 8002414:	f002 f992 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002418:	2000      	movs	r0, #0
 800241a:	f002 f98f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800241e:	2000      	movs	r0, #0
 8002420:	f002 f98c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002424:	2000      	movs	r0, #0
 8002426:	f002 f989 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800242a:	2000      	movs	r0, #0
 800242c:	f002 f986 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002430:	2000      	movs	r0, #0
 8002432:	f002 f983 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002436:	2000      	movs	r0, #0
 8002438:	f002 f980 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800243c:	2000      	movs	r0, #0
 800243e:	f002 f97d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002442:	2000      	movs	r0, #0
 8002444:	f002 f97a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002448:	2000      	movs	r0, #0
 800244a:	f002 f977 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800244e:	2000      	movs	r0, #0
 8002450:	f002 f974 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002454:	2000      	movs	r0, #0
 8002456:	f002 f971 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800245a:	2000      	movs	r0, #0
 800245c:	f002 f96e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002460:	2000      	movs	r0, #0
 8002462:	f002 f96b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002466:	2000      	movs	r0, #0
 8002468:	f002 f968 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800246c:	2000      	movs	r0, #0
 800246e:	f002 f965 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f002 f962 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002478:	2000      	movs	r0, #0
 800247a:	f002 f95f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800247e:	2000      	movs	r0, #0
 8002480:	f002 f95c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002484:	2000      	movs	r0, #0
 8002486:	f002 f959 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800248a:	2000      	movs	r0, #0
 800248c:	f002 f956 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002490:	2000      	movs	r0, #0
 8002492:	f002 f953 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8002496:	20b4      	movs	r0, #180	; 0xb4
 8002498:	f002 f964 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x8B);
 800249c:	208b      	movs	r0, #139	; 0x8b
 800249e:	f002 f94d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f002 f94a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x96);
 80024a8:	2096      	movs	r0, #150	; 0x96
 80024aa:	f002 f947 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f002 f944 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA1);
 80024b4:	20a1      	movs	r0, #161	; 0xa1
 80024b6:	f002 f941 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f002 f93e 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB5);
 80024c0:	20b5      	movs	r0, #181	; 0xb5
 80024c2:	f002 f94f 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x02);
 80024c6:	2002      	movs	r0, #2
 80024c8:	f002 f938 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f002 f935 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x03);
 80024d2:	2003      	movs	r0, #3
 80024d4:	f002 f932 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80024d8:	2000      	movs	r0, #0
 80024da:	f002 f92f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x04);
 80024de:	2004      	movs	r0, #4
 80024e0:	f002 f92c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f002 f929 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB6);
 80024ea:	20b6      	movs	r0, #182	; 0xb6
 80024ec:	f002 f93a 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f002 f923 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f002 f920 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB7);
 80024fc:	20b7      	movs	r0, #183	; 0xb7
 80024fe:	f002 f931 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002502:	2000      	movs	r0, #0
 8002504:	f002 f91a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002508:	2000      	movs	r0, #0
 800250a:	f002 f917 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3F);
 800250e:	203f      	movs	r0, #63	; 0x3f
 8002510:	f002 f914 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002514:	2000      	movs	r0, #0
 8002516:	f002 f911 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x5E);
 800251a:	205e      	movs	r0, #94	; 0x5e
 800251c:	f002 f90e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002520:	2000      	movs	r0, #0
 8002522:	f002 f90b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x64);
 8002526:	2064      	movs	r0, #100	; 0x64
 8002528:	f002 f908 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800252c:	2000      	movs	r0, #0
 800252e:	f002 f905 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x8C);
 8002532:	208c      	movs	r0, #140	; 0x8c
 8002534:	f002 f902 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f002 f8ff 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xAC);
 800253e:	20ac      	movs	r0, #172	; 0xac
 8002540:	f002 f8fc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002544:	2000      	movs	r0, #0
 8002546:	f002 f8f9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xDC);
 800254a:	20dc      	movs	r0, #220	; 0xdc
 800254c:	f002 f8f6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f002 f8f3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x70);
 8002556:	2070      	movs	r0, #112	; 0x70
 8002558:	f002 f8f0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f002 f8ed 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x90);
 8002562:	2090      	movs	r0, #144	; 0x90
 8002564:	f002 f8ea 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002568:	2000      	movs	r0, #0
 800256a:	f002 f8e7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xEB);
 800256e:	20eb      	movs	r0, #235	; 0xeb
 8002570:	f002 f8e4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002574:	2000      	movs	r0, #0
 8002576:	f002 f8e1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xDC);
 800257a:	20dc      	movs	r0, #220	; 0xdc
 800257c:	f002 f8de 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002580:	2000      	movs	r0, #0
 8002582:	f002 f8db 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB8);
 8002586:	20b8      	movs	r0, #184	; 0xb8
 8002588:	f002 f8ec 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800258c:	2000      	movs	r0, #0
 800258e:	f002 f8d5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002592:	2000      	movs	r0, #0
 8002594:	f002 f8d2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002598:	2000      	movs	r0, #0
 800259a:	f002 f8cf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800259e:	2000      	movs	r0, #0
 80025a0:	f002 f8cc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f002 f8c9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f002 f8c6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f002 f8c3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f002 f8c0 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xBA);
 80025bc:	20ba      	movs	r0, #186	; 0xba
 80025be:	f002 f8d1 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x24);
 80025c2:	2024      	movs	r0, #36	; 0x24
 80025c4:	f002 f8ba 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f002 f8b7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f002 f8b4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f002 f8b1 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC1);
 80025da:	20c1      	movs	r0, #193	; 0xc1
 80025dc:	f002 f8c2 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x20);
 80025e0:	2020      	movs	r0, #32
 80025e2:	f002 f8ab 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f002 f8a8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x54);
 80025ec:	2054      	movs	r0, #84	; 0x54
 80025ee:	f002 f8a5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f002 f8a2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFF);
 80025f8:	20ff      	movs	r0, #255	; 0xff
 80025fa:	f002 f89f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f002 f89c 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8002604:	20c2      	movs	r0, #194	; 0xc2
 8002606:	f002 f8ad 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 800260a:	200a      	movs	r0, #10
 800260c:	f002 f896 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f002 f893 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x04);
 8002616:	2004      	movs	r0, #4
 8002618:	f002 f890 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f002 f88d 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC3);
 8002622:	20c3      	movs	r0, #195	; 0xc3
 8002624:	f002 f89e 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8002628:	203c      	movs	r0, #60	; 0x3c
 800262a:	f002 f887 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f002 f884 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3A);
 8002634:	203a      	movs	r0, #58	; 0x3a
 8002636:	f002 f881 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f002 f87e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x39);
 8002640:	2039      	movs	r0, #57	; 0x39
 8002642:	f002 f87b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f002 f878 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x37);
 800264c:	2037      	movs	r0, #55	; 0x37
 800264e:	f002 f875 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f002 f872 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3C);
 8002658:	203c      	movs	r0, #60	; 0x3c
 800265a:	f002 f86f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f002 f86c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x36);
 8002664:	2036      	movs	r0, #54	; 0x36
 8002666:	f002 f869 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800266a:	2000      	movs	r0, #0
 800266c:	f002 f866 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x32);
 8002670:	2032      	movs	r0, #50	; 0x32
 8002672:	f002 f863 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002676:	2000      	movs	r0, #0
 8002678:	f002 f860 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2F);
 800267c:	202f      	movs	r0, #47	; 0x2f
 800267e:	f002 f85d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002682:	2000      	movs	r0, #0
 8002684:	f002 f85a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2C);
 8002688:	202c      	movs	r0, #44	; 0x2c
 800268a:	f002 f857 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800268e:	2000      	movs	r0, #0
 8002690:	f002 f854 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x29);
 8002694:	2029      	movs	r0, #41	; 0x29
 8002696:	f002 f851 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800269a:	2000      	movs	r0, #0
 800269c:	f002 f84e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x26);
 80026a0:	2026      	movs	r0, #38	; 0x26
 80026a2:	f002 f84b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f002 f848 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x24);
 80026ac:	2024      	movs	r0, #36	; 0x24
 80026ae:	f002 f845 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f002 f842 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x24);
 80026b8:	2024      	movs	r0, #36	; 0x24
 80026ba:	f002 f83f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80026be:	2000      	movs	r0, #0
 80026c0:	f002 f83c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x23);
 80026c4:	2023      	movs	r0, #35	; 0x23
 80026c6:	f002 f839 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f002 f836 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3C);
 80026d0:	203c      	movs	r0, #60	; 0x3c
 80026d2:	f002 f833 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f002 f830 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x36);
 80026dc:	2036      	movs	r0, #54	; 0x36
 80026de:	f002 f82d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f002 f82a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x32);
 80026e8:	2032      	movs	r0, #50	; 0x32
 80026ea:	f002 f827 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f002 f824 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2F);
 80026f4:	202f      	movs	r0, #47	; 0x2f
 80026f6:	f002 f821 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f002 f81e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2C);
 8002700:	202c      	movs	r0, #44	; 0x2c
 8002702:	f002 f81b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002706:	2000      	movs	r0, #0
 8002708:	f002 f818 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x29);
 800270c:	2029      	movs	r0, #41	; 0x29
 800270e:	f002 f815 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002712:	2000      	movs	r0, #0
 8002714:	f002 f812 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x26);
 8002718:	2026      	movs	r0, #38	; 0x26
 800271a:	f002 f80f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f002 f80c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x24);
 8002724:	2024      	movs	r0, #36	; 0x24
 8002726:	f002 f809 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f002 f806 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x24);
 8002730:	2024      	movs	r0, #36	; 0x24
 8002732:	f002 f803 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002736:	2000      	movs	r0, #0
 8002738:	f002 f800 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x23);
 800273c:	2023      	movs	r0, #35	; 0x23
 800273e:	f001 fffd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002742:	2000      	movs	r0, #0
 8002744:	f001 fffa 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC4);
 8002748:	20c4      	movs	r0, #196	; 0xc4
 800274a:	f002 f80b 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x62);
 800274e:	2062      	movs	r0, #98	; 0x62
 8002750:	f001 fff4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002754:	2000      	movs	r0, #0
 8002756:	f001 fff1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x05);
 800275a:	2005      	movs	r0, #5
 800275c:	f001 ffee 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002760:	2000      	movs	r0, #0
 8002762:	f001 ffeb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x84);
 8002766:	2084      	movs	r0, #132	; 0x84
 8002768:	f001 ffe8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f001 ffe5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xF0);
 8002772:	20f0      	movs	r0, #240	; 0xf0
 8002774:	f001 ffe2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f001 ffdf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x18);
 800277e:	2018      	movs	r0, #24
 8002780:	f001 ffdc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002784:	2000      	movs	r0, #0
 8002786:	f001 ffd9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA4);
 800278a:	20a4      	movs	r0, #164	; 0xa4
 800278c:	f001 ffd6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f001 ffd3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x18);
 8002796:	2018      	movs	r0, #24
 8002798:	f001 ffd0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800279c:	2000      	movs	r0, #0
 800279e:	f001 ffcd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x50);
 80027a2:	2050      	movs	r0, #80	; 0x50
 80027a4:	f001 ffca 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f001 ffc7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0C);
 80027ae:	200c      	movs	r0, #12
 80027b0:	f001 ffc4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f001 ffc1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x17);
 80027ba:	2017      	movs	r0, #23
 80027bc:	f001 ffbe 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f001 ffbb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x95);
 80027c6:	2095      	movs	r0, #149	; 0x95
 80027c8:	f001 ffb8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f001 ffb5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xF3);
 80027d2:	20f3      	movs	r0, #243	; 0xf3
 80027d4:	f001 ffb2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80027d8:	2000      	movs	r0, #0
 80027da:	f001 ffaf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xE6);
 80027de:	20e6      	movs	r0, #230	; 0xe6
 80027e0:	f001 ffac 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80027e4:	2000      	movs	r0, #0
 80027e6:	f001 ffa9 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC5);
 80027ea:	20c5      	movs	r0, #197	; 0xc5
 80027ec:	f001 ffba 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x32);
 80027f0:	2032      	movs	r0, #50	; 0x32
 80027f2:	f001 ffa3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f001 ffa0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x44);
 80027fc:	2044      	movs	r0, #68	; 0x44
 80027fe:	f001 ff9d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002802:	2000      	movs	r0, #0
 8002804:	f001 ff9a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x65);
 8002808:	2065      	movs	r0, #101	; 0x65
 800280a:	f001 ff97 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800280e:	2000      	movs	r0, #0
 8002810:	f001 ff94 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x76);
 8002814:	2076      	movs	r0, #118	; 0x76
 8002816:	f001 ff91 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f001 ff8e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x88);
 8002820:	2088      	movs	r0, #136	; 0x88
 8002822:	f001 ff8b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002826:	2000      	movs	r0, #0
 8002828:	f001 ff88 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC6);
 800282c:	20c6      	movs	r0, #198	; 0xc6
 800282e:	f001 ff99 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8002832:	2020      	movs	r0, #32
 8002834:	f001 ff82 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002838:	2000      	movs	r0, #0
 800283a:	f001 ff7f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x17);
 800283e:	2017      	movs	r0, #23
 8002840:	f001 ff7c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f001 ff79 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 800284a:	2001      	movs	r0, #1
 800284c:	f001 ff76 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002850:	2000      	movs	r0, #0
 8002852:	f001 ff73 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC7);
 8002856:	20c7      	movs	r0, #199	; 0xc7
 8002858:	f001 ff84 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f001 ff6d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f001 ff6a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f001 ff67 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f001 ff64 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC8);
 8002874:	20c8      	movs	r0, #200	; 0xc8
 8002876:	f001 ff75 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f001 ff5e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002880:	2000      	movs	r0, #0
 8002882:	f001 ff5b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f001 ff58 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f001 ff55 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC9);
 8002892:	20c9      	movs	r0, #201	; 0xc9
 8002894:	f001 ff66 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002898:	2000      	movs	r0, #0
 800289a:	f001 ff4f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f001 ff4c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f001 ff49 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f001 ff46 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f001 ff43 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f001 ff40 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f001 ff3d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f001 ff3a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028c8:	2000      	movs	r0, #0
 80028ca:	f001 ff37 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f001 ff34 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f001 ff31 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f001 ff2e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f001 ff2b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f001 ff28 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f001 ff25 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f001 ff22 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE0);
 80028f8:	20e0      	movs	r0, #224	; 0xe0
 80028fa:	f001 ff33 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x16);
 80028fe:	2016      	movs	r0, #22
 8002900:	f001 ff1c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f001 ff19 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1C);
 800290a:	201c      	movs	r0, #28
 800290c:	f001 ff16 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002910:	2000      	movs	r0, #0
 8002912:	f001 ff13 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x21);
 8002916:	2021      	movs	r0, #33	; 0x21
 8002918:	f001 ff10 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f001 ff0d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x36);
 8002922:	2036      	movs	r0, #54	; 0x36
 8002924:	f001 ff0a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f001 ff07 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x46);
 800292e:	2046      	movs	r0, #70	; 0x46
 8002930:	f001 ff04 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f001 ff01 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x52);
 800293a:	2052      	movs	r0, #82	; 0x52
 800293c:	f001 fefe 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f001 fefb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x64);
 8002946:	2064      	movs	r0, #100	; 0x64
 8002948:	f001 fef8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f001 fef5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x7A);
 8002952:	207a      	movs	r0, #122	; 0x7a
 8002954:	f001 fef2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f001 feef 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x8B);
 800295e:	208b      	movs	r0, #139	; 0x8b
 8002960:	f001 feec 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f001 fee9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x99);
 800296a:	2099      	movs	r0, #153	; 0x99
 800296c:	f001 fee6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002970:	2000      	movs	r0, #0
 8002972:	f001 fee3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA8);
 8002976:	20a8      	movs	r0, #168	; 0xa8
 8002978:	f001 fee0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800297c:	2000      	movs	r0, #0
 800297e:	f001 fedd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xB9);
 8002982:	20b9      	movs	r0, #185	; 0xb9
 8002984:	f001 feda 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f001 fed7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xC4);
 800298e:	20c4      	movs	r0, #196	; 0xc4
 8002990:	f001 fed4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f001 fed1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xCA);
 800299a:	20ca      	movs	r0, #202	; 0xca
 800299c:	f001 fece 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f001 fecb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD2);
 80029a6:	20d2      	movs	r0, #210	; 0xd2
 80029a8:	f001 fec8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f001 fec5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD9);
 80029b2:	20d9      	movs	r0, #217	; 0xd9
 80029b4:	f001 fec2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f001 febf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xE0);
 80029be:	20e0      	movs	r0, #224	; 0xe0
 80029c0:	f001 febc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f001 feb9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xF3);
 80029ca:	20f3      	movs	r0, #243	; 0xf3
 80029cc:	f001 feb6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f001 feb3 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE1);
 80029d6:	20e1      	movs	r0, #225	; 0xe1
 80029d8:	f001 fec4 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x16);
 80029dc:	2016      	movs	r0, #22
 80029de:	f001 fead 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f001 feaa 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1C);
 80029e8:	201c      	movs	r0, #28
 80029ea:	f001 fea7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f001 fea4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x22);
 80029f4:	2022      	movs	r0, #34	; 0x22
 80029f6:	f001 fea1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f001 fe9e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x36);
 8002a00:	2036      	movs	r0, #54	; 0x36
 8002a02:	f001 fe9b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f001 fe98 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x45);
 8002a0c:	2045      	movs	r0, #69	; 0x45
 8002a0e:	f001 fe95 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f001 fe92 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x52);
 8002a18:	2052      	movs	r0, #82	; 0x52
 8002a1a:	f001 fe8f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f001 fe8c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x64);
 8002a24:	2064      	movs	r0, #100	; 0x64
 8002a26:	f001 fe89 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f001 fe86 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x7A);
 8002a30:	207a      	movs	r0, #122	; 0x7a
 8002a32:	f001 fe83 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f001 fe80 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x8B);
 8002a3c:	208b      	movs	r0, #139	; 0x8b
 8002a3e:	f001 fe7d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f001 fe7a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x99);
 8002a48:	2099      	movs	r0, #153	; 0x99
 8002a4a:	f001 fe77 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f001 fe74 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA8);
 8002a54:	20a8      	movs	r0, #168	; 0xa8
 8002a56:	f001 fe71 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f001 fe6e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xB9);
 8002a60:	20b9      	movs	r0, #185	; 0xb9
 8002a62:	f001 fe6b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f001 fe68 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xC4);
 8002a6c:	20c4      	movs	r0, #196	; 0xc4
 8002a6e:	f001 fe65 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f001 fe62 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xCA);
 8002a78:	20ca      	movs	r0, #202	; 0xca
 8002a7a:	f001 fe5f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f001 fe5c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD2);
 8002a84:	20d2      	movs	r0, #210	; 0xd2
 8002a86:	f001 fe59 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f001 fe56 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD8);
 8002a90:	20d8      	movs	r0, #216	; 0xd8
 8002a92:	f001 fe53 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f001 fe50 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xE0);
 8002a9c:	20e0      	movs	r0, #224	; 0xe0
 8002a9e:	f001 fe4d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f001 fe4a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002aa8:	20f3      	movs	r0, #243	; 0xf3
 8002aaa:	f001 fe47 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f001 fe44 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE2);
 8002ab4:	20e2      	movs	r0, #226	; 0xe2
 8002ab6:	f001 fe55 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x05);
 8002aba:	2005      	movs	r0, #5
 8002abc:	f001 fe3e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f001 fe3b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0B);
 8002ac6:	200b      	movs	r0, #11
 8002ac8:	f001 fe38 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f001 fe35 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1B);
 8002ad2:	201b      	movs	r0, #27
 8002ad4:	f001 fe32 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f001 fe2f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x34);
 8002ade:	2034      	movs	r0, #52	; 0x34
 8002ae0:	f001 fe2c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f001 fe29 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x44);
 8002aea:	2044      	movs	r0, #68	; 0x44
 8002aec:	f001 fe26 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f001 fe23 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x4F);
 8002af6:	204f      	movs	r0, #79	; 0x4f
 8002af8:	f001 fe20 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f001 fe1d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x61);
 8002b02:	2061      	movs	r0, #97	; 0x61
 8002b04:	f001 fe1a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f001 fe17 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x79);
 8002b0e:	2079      	movs	r0, #121	; 0x79
 8002b10:	f001 fe14 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f001 fe11 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x88);
 8002b1a:	2088      	movs	r0, #136	; 0x88
 8002b1c:	f001 fe0e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f001 fe0b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x97);
 8002b26:	2097      	movs	r0, #151	; 0x97
 8002b28:	f001 fe08 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f001 fe05 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA6);
 8002b32:	20a6      	movs	r0, #166	; 0xa6
 8002b34:	f001 fe02 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f001 fdff 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xB7);
 8002b3e:	20b7      	movs	r0, #183	; 0xb7
 8002b40:	f001 fdfc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f001 fdf9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xC2);
 8002b4a:	20c2      	movs	r0, #194	; 0xc2
 8002b4c:	f001 fdf6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f001 fdf3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xC7);
 8002b56:	20c7      	movs	r0, #199	; 0xc7
 8002b58:	f001 fdf0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f001 fded 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD1);
 8002b62:	20d1      	movs	r0, #209	; 0xd1
 8002b64:	f001 fdea 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f001 fde7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD6);
 8002b6e:	20d6      	movs	r0, #214	; 0xd6
 8002b70:	f001 fde4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f001 fde1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xDD);
 8002b7a:	20dd      	movs	r0, #221	; 0xdd
 8002b7c:	f001 fdde 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f001 fddb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002b86:	20f3      	movs	r0, #243	; 0xf3
 8002b88:	f001 fdd8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f001 fdd5 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xE3);
 8002b92:	20e3      	movs	r0, #227	; 0xe3
 8002b94:	f001 fde6 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x05);
 8002b98:	2005      	movs	r0, #5
 8002b9a:	f001 fdcf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f001 fdcc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA);
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f001 fdc9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f001 fdc6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1C);
 8002bb0:	201c      	movs	r0, #28
 8002bb2:	f001 fdc3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f001 fdc0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x33);
 8002bbc:	2033      	movs	r0, #51	; 0x33
 8002bbe:	f001 fdbd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f001 fdba 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x44);
 8002bc8:	2044      	movs	r0, #68	; 0x44
 8002bca:	f001 fdb7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f001 fdb4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x50);
 8002bd4:	2050      	movs	r0, #80	; 0x50
 8002bd6:	f001 fdb1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f001 fdae 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x62);
 8002be0:	2062      	movs	r0, #98	; 0x62
 8002be2:	f001 fdab 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f001 fda8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x78);
 8002bec:	2078      	movs	r0, #120	; 0x78
 8002bee:	f001 fda5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f001 fda2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x88);
 8002bf8:	2088      	movs	r0, #136	; 0x88
 8002bfa:	f001 fd9f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f001 fd9c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x97);
 8002c04:	2097      	movs	r0, #151	; 0x97
 8002c06:	f001 fd99 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f001 fd96 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA6);
 8002c10:	20a6      	movs	r0, #166	; 0xa6
 8002c12:	f001 fd93 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f001 fd90 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xB7);
 8002c1c:	20b7      	movs	r0, #183	; 0xb7
 8002c1e:	f001 fd8d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f001 fd8a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xC2);
 8002c28:	20c2      	movs	r0, #194	; 0xc2
 8002c2a:	f001 fd87 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f001 fd84 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xC7);
 8002c34:	20c7      	movs	r0, #199	; 0xc7
 8002c36:	f001 fd81 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f001 fd7e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD1);
 8002c40:	20d1      	movs	r0, #209	; 0xd1
 8002c42:	f001 fd7b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f001 fd78 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD5);
 8002c4c:	20d5      	movs	r0, #213	; 0xd5
 8002c4e:	f001 fd75 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f001 fd72 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xDD);
 8002c58:	20dd      	movs	r0, #221	; 0xdd
 8002c5a:	f001 fd6f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f001 fd6c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002c64:	20f3      	movs	r0, #243	; 0xf3
 8002c66:	f001 fd69 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f001 fd66 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE4);
 8002c70:	20e4      	movs	r0, #228	; 0xe4
 8002c72:	f001 fd77 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f001 fd60 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f001 fd5d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f001 fd5a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f001 fd57 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x02);
 8002c8e:	2002      	movs	r0, #2
 8002c90:	f001 fd54 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f001 fd51 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2A);
 8002c9a:	202a      	movs	r0, #42	; 0x2a
 8002c9c:	f001 fd4e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f001 fd4b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3C);
 8002ca6:	203c      	movs	r0, #60	; 0x3c
 8002ca8:	f001 fd48 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f001 fd45 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x4B);
 8002cb2:	204b      	movs	r0, #75	; 0x4b
 8002cb4:	f001 fd42 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f001 fd3f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x5D);
 8002cbe:	205d      	movs	r0, #93	; 0x5d
 8002cc0:	f001 fd3c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f001 fd39 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x74);
 8002cca:	2074      	movs	r0, #116	; 0x74
 8002ccc:	f001 fd36 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f001 fd33 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x84);
 8002cd6:	2084      	movs	r0, #132	; 0x84
 8002cd8:	f001 fd30 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f001 fd2d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x93);
 8002ce2:	2093      	movs	r0, #147	; 0x93
 8002ce4:	f001 fd2a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f001 fd27 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA2);
 8002cee:	20a2      	movs	r0, #162	; 0xa2
 8002cf0:	f001 fd24 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f001 fd21 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xB3);
 8002cfa:	20b3      	movs	r0, #179	; 0xb3
 8002cfc:	f001 fd1e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f001 fd1b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xBE);
 8002d06:	20be      	movs	r0, #190	; 0xbe
 8002d08:	f001 fd18 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f001 fd15 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xC4);
 8002d12:	20c4      	movs	r0, #196	; 0xc4
 8002d14:	f001 fd12 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f001 fd0f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xCD);
 8002d1e:	20cd      	movs	r0, #205	; 0xcd
 8002d20:	f001 fd0c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d24:	2000      	movs	r0, #0
 8002d26:	f001 fd09 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD3);
 8002d2a:	20d3      	movs	r0, #211	; 0xd3
 8002d2c:	f001 fd06 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f001 fd03 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xDD);
 8002d36:	20dd      	movs	r0, #221	; 0xdd
 8002d38:	f001 fd00 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f001 fcfd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002d42:	20f3      	movs	r0, #243	; 0xf3
 8002d44:	f001 fcfa 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f001 fcf7 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xE5);
 8002d4e:	20e5      	movs	r0, #229	; 0xe5
 8002d50:	f001 fd08 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f001 fcf1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f001 fcee 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f001 fceb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f001 fce8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x02);
 8002d6c:	2002      	movs	r0, #2
 8002d6e:	f001 fce5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f001 fce2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x29);
 8002d78:	2029      	movs	r0, #41	; 0x29
 8002d7a:	f001 fcdf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f001 fcdc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x3C);
 8002d84:	203c      	movs	r0, #60	; 0x3c
 8002d86:	f001 fcd9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f001 fcd6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x4B);
 8002d90:	204b      	movs	r0, #75	; 0x4b
 8002d92:	f001 fcd3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f001 fcd0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x5D);
 8002d9c:	205d      	movs	r0, #93	; 0x5d
 8002d9e:	f001 fccd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f001 fcca 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x74);
 8002da8:	2074      	movs	r0, #116	; 0x74
 8002daa:	f001 fcc7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f001 fcc4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x84);
 8002db4:	2084      	movs	r0, #132	; 0x84
 8002db6:	f001 fcc1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f001 fcbe 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x93);
 8002dc0:	2093      	movs	r0, #147	; 0x93
 8002dc2:	f001 fcbb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f001 fcb8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA2);
 8002dcc:	20a2      	movs	r0, #162	; 0xa2
 8002dce:	f001 fcb5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f001 fcb2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xB3);
 8002dd8:	20b3      	movs	r0, #179	; 0xb3
 8002dda:	f001 fcaf 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f001 fcac 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xBE);
 8002de4:	20be      	movs	r0, #190	; 0xbe
 8002de6:	f001 fca9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f001 fca6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xC4);
 8002df0:	20c4      	movs	r0, #196	; 0xc4
 8002df2:	f001 fca3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f001 fca0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xCD);
 8002dfc:	20cd      	movs	r0, #205	; 0xcd
 8002dfe:	f001 fc9d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f001 fc9a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xD3);
 8002e08:	20d3      	movs	r0, #211	; 0xd3
 8002e0a:	f001 fc97 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f001 fc94 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xDC);
 8002e14:	20dc      	movs	r0, #220	; 0xdc
 8002e16:	f001 fc91 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f001 fc8e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002e20:	20f3      	movs	r0, #243	; 0xf3
 8002e22:	f001 fc8b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f001 fc88 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8002e2c:	20e6      	movs	r0, #230	; 0xe6
 8002e2e:	f001 fc99 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x11);
 8002e32:	2011      	movs	r0, #17
 8002e34:	f001 fc82 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f001 fc7f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x34);
 8002e3e:	2034      	movs	r0, #52	; 0x34
 8002e40:	f001 fc7c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f001 fc79 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x56);
 8002e4a:	2056      	movs	r0, #86	; 0x56
 8002e4c:	f001 fc76 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f001 fc73 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x76);
 8002e56:	2076      	movs	r0, #118	; 0x76
 8002e58:	f001 fc70 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f001 fc6d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x77);
 8002e62:	2077      	movs	r0, #119	; 0x77
 8002e64:	f001 fc6a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f001 fc67 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x66);
 8002e6e:	2066      	movs	r0, #102	; 0x66
 8002e70:	f001 fc64 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f001 fc61 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x88);
 8002e7a:	2088      	movs	r0, #136	; 0x88
 8002e7c:	f001 fc5e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f001 fc5b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x99);
 8002e86:	2099      	movs	r0, #153	; 0x99
 8002e88:	f001 fc58 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f001 fc55 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xBB);
 8002e92:	20bb      	movs	r0, #187	; 0xbb
 8002e94:	f001 fc52 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f001 fc4f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x99);
 8002e9e:	2099      	movs	r0, #153	; 0x99
 8002ea0:	f001 fc4c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f001 fc49 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x66);
 8002eaa:	2066      	movs	r0, #102	; 0x66
 8002eac:	f001 fc46 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f001 fc43 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x55);
 8002eb6:	2055      	movs	r0, #85	; 0x55
 8002eb8:	f001 fc40 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f001 fc3d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x55);
 8002ec2:	2055      	movs	r0, #85	; 0x55
 8002ec4:	f001 fc3a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f001 fc37 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x45);
 8002ece:	2045      	movs	r0, #69	; 0x45
 8002ed0:	f001 fc34 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f001 fc31 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x43);
 8002eda:	2043      	movs	r0, #67	; 0x43
 8002edc:	f001 fc2e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f001 fc2b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x44);
 8002ee6:	2044      	movs	r0, #68	; 0x44
 8002ee8:	f001 fc28 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f001 fc25 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE7);
 8002ef2:	20e7      	movs	r0, #231	; 0xe7
 8002ef4:	f001 fc36 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8002ef8:	2032      	movs	r0, #50	; 0x32
 8002efa:	f001 fc1f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f001 fc1c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x55);
 8002f04:	2055      	movs	r0, #85	; 0x55
 8002f06:	f001 fc19 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f001 fc16 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x76);
 8002f10:	2076      	movs	r0, #118	; 0x76
 8002f12:	f001 fc13 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f001 fc10 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x66);
 8002f1c:	2066      	movs	r0, #102	; 0x66
 8002f1e:	f001 fc0d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f001 fc0a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x67);
 8002f28:	2067      	movs	r0, #103	; 0x67
 8002f2a:	f001 fc07 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f001 fc04 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x67);
 8002f34:	2067      	movs	r0, #103	; 0x67
 8002f36:	f001 fc01 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f001 fbfe 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x87);
 8002f40:	2087      	movs	r0, #135	; 0x87
 8002f42:	f001 fbfb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f001 fbf8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x99);
 8002f4c:	2099      	movs	r0, #153	; 0x99
 8002f4e:	f001 fbf5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f001 fbf2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xBB);
 8002f58:	20bb      	movs	r0, #187	; 0xbb
 8002f5a:	f001 fbef 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f001 fbec 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x99);
 8002f64:	2099      	movs	r0, #153	; 0x99
 8002f66:	f001 fbe9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f001 fbe6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x77);
 8002f70:	2077      	movs	r0, #119	; 0x77
 8002f72:	f001 fbe3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f001 fbe0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x44);
 8002f7c:	2044      	movs	r0, #68	; 0x44
 8002f7e:	f001 fbdd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f001 fbda 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x56);
 8002f88:	2056      	movs	r0, #86	; 0x56
 8002f8a:	f001 fbd7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f001 fbd4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x23);
 8002f94:	2023      	movs	r0, #35	; 0x23
 8002f96:	f001 fbd1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f001 fbce 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x33);
 8002fa0:	2033      	movs	r0, #51	; 0x33
 8002fa2:	f001 fbcb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f001 fbc8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x45);
 8002fac:	2045      	movs	r0, #69	; 0x45
 8002fae:	f001 fbc5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f001 fbc2 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8002fb8:	20e8      	movs	r0, #232	; 0xe8
 8002fba:	f001 fbd3 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f001 fbbc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f001 fbb9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x99);
 8002fca:	2099      	movs	r0, #153	; 0x99
 8002fcc:	f001 fbb6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f001 fbb3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x87);
 8002fd6:	2087      	movs	r0, #135	; 0x87
 8002fd8:	f001 fbb0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f001 fbad 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x88);
 8002fe2:	2088      	movs	r0, #136	; 0x88
 8002fe4:	f001 fbaa 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f001 fba7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x77);
 8002fee:	2077      	movs	r0, #119	; 0x77
 8002ff0:	f001 fba4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f001 fba1 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x66);
 8002ffa:	2066      	movs	r0, #102	; 0x66
 8002ffc:	f001 fb9e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f001 fb9b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x88);
 8003006:	2088      	movs	r0, #136	; 0x88
 8003008:	f001 fb98 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f001 fb95 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xAA);
 8003012:	20aa      	movs	r0, #170	; 0xaa
 8003014:	f001 fb92 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f001 fb8f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xBB);
 800301e:	20bb      	movs	r0, #187	; 0xbb
 8003020:	f001 fb8c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f001 fb89 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x99);
 800302a:	2099      	movs	r0, #153	; 0x99
 800302c:	f001 fb86 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f001 fb83 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x66);
 8003036:	2066      	movs	r0, #102	; 0x66
 8003038:	f001 fb80 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f001 fb7d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x55);
 8003042:	2055      	movs	r0, #85	; 0x55
 8003044:	f001 fb7a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f001 fb77 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x55);
 800304e:	2055      	movs	r0, #85	; 0x55
 8003050:	f001 fb74 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003054:	2000      	movs	r0, #0
 8003056:	f001 fb71 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x44);
 800305a:	2044      	movs	r0, #68	; 0x44
 800305c:	f001 fb6e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003060:	2000      	movs	r0, #0
 8003062:	f001 fb6b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x44);
 8003066:	2044      	movs	r0, #68	; 0x44
 8003068:	f001 fb68 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800306c:	2000      	movs	r0, #0
 800306e:	f001 fb65 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x55);
 8003072:	2055      	movs	r0, #85	; 0x55
 8003074:	f001 fb62 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003078:	2000      	movs	r0, #0
 800307a:	f001 fb5f 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE9);
 800307e:	20e9      	movs	r0, #233	; 0xe9
 8003080:	f001 fb70 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8003084:	20aa      	movs	r0, #170	; 0xaa
 8003086:	f001 fb59 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f001 fb56 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003090:	2000      	movs	r0, #0
 8003092:	f001 fb53 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f001 fb50 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x00);
 800309c:	2000      	movs	r0, #0
 800309e:	f001 fb61 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 80030a2:	20aa      	movs	r0, #170	; 0xaa
 80030a4:	f001 fb4a 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xCF);
 80030a8:	20cf      	movs	r0, #207	; 0xcf
 80030aa:	f001 fb5b 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f001 fb44 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f001 fb41 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f001 fb3e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030c0:	2000      	movs	r0, #0
 80030c2:	f001 fb3b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f001 fb38 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f001 fb35 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f001 fb32 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030d8:	2000      	movs	r0, #0
 80030da:	f001 fb2f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f001 fb2c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030e4:	2000      	movs	r0, #0
 80030e6:	f001 fb29 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f001 fb26 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f001 fb23 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f001 fb20 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80030fc:	2000      	movs	r0, #0
 80030fe:	f001 fb1d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f001 fb1a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003108:	2000      	movs	r0, #0
 800310a:	f001 fb17 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f001 fb14 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8003114:	20f0      	movs	r0, #240	; 0xf0
 8003116:	f001 fb25 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f001 fb0e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x50);
 8003120:	2050      	movs	r0, #80	; 0x50
 8003122:	f001 fb0b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f001 fb08 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800312c:	2000      	movs	r0, #0
 800312e:	f001 fb05 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003132:	2000      	movs	r0, #0
 8003134:	f001 fb02 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF3);
 8003138:	20f3      	movs	r0, #243	; 0xf3
 800313a:	f001 fb13 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800313e:	2000      	movs	r0, #0
 8003140:	f001 fafc 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF9);
 8003144:	20f9      	movs	r0, #249	; 0xf9
 8003146:	f001 fb0d 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x06);
 800314a:	2006      	movs	r0, #6
 800314c:	f001 faf6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x10);
 8003150:	2010      	movs	r0, #16
 8003152:	f001 faf3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x29);
 8003156:	2029      	movs	r0, #41	; 0x29
 8003158:	f001 faf0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f001 faed 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8003162:	203a      	movs	r0, #58	; 0x3a
 8003164:	f001 fafe 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 8003168:	2055      	movs	r0, #85	; 0x55
 800316a:	f001 fae7 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x11);
 800316e:	2011      	movs	r0, #17
 8003170:	f001 faf8 	bl	8004764 <lcd_wr_regno>
    HAL_Delay(100);
 8003174:	2064      	movs	r0, #100	; 0x64
 8003176:	f003 fa37 	bl	80065e8 <HAL_Delay>
    lcd_wr_regno(0x29);
 800317a:	2029      	movs	r0, #41	; 0x29
 800317c:	f001 faf2 	bl	8004764 <lcd_wr_regno>
    lcd_wr_regno(0x35);
 8003180:	2035      	movs	r0, #53	; 0x35
 8003182:	f001 faef 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003186:	2000      	movs	r0, #0
 8003188:	f001 fad8 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x51);
 800318c:	2051      	movs	r0, #81	; 0x51
 800318e:	f001 fae9 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8003192:	20ff      	movs	r0, #255	; 0xff
 8003194:	f001 fad2 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0x53);
 8003198:	2053      	movs	r0, #83	; 0x53
 800319a:	f001 fae3 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x2C);
 800319e:	202c      	movs	r0, #44	; 0x2c
 80031a0:	f001 facc 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0x55);
 80031a4:	2055      	movs	r0, #85	; 0x55
 80031a6:	f001 fadd 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x82);
 80031aa:	2082      	movs	r0, #130	; 0x82
 80031ac:	f001 fac6 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0x2c);
 80031b0:	202c      	movs	r0, #44	; 0x2c
 80031b2:	f001 fad7 	bl	8004764 <lcd_wr_regno>
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}

080031ba <lcd_ex_st7796_reginit>:
 * @brief  ST7796 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7796_reginit(void)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 80031be:	2011      	movs	r0, #17
 80031c0:	f001 fad0 	bl	8004764 <lcd_wr_regno>

    HAL_Delay(120);
 80031c4:	2078      	movs	r0, #120	; 0x78
 80031c6:	f003 fa0f 	bl	80065e8 <HAL_Delay>

    lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
 80031ca:	2036      	movs	r0, #54	; 0x36
 80031cc:	f001 faca 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x48);
 80031d0:	2048      	movs	r0, #72	; 0x48
 80031d2:	f001 fab3 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x3A);
 80031d6:	203a      	movs	r0, #58	; 0x3a
 80031d8:	f001 fac4 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x55);
 80031dc:	2055      	movs	r0, #85	; 0x55
 80031de:	f001 faad 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 80031e2:	20f0      	movs	r0, #240	; 0xf0
 80031e4:	f001 fabe 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xC3);
 80031e8:	20c3      	movs	r0, #195	; 0xc3
 80031ea:	f001 faa7 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 80031ee:	20f0      	movs	r0, #240	; 0xf0
 80031f0:	f001 fab8 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x96);
 80031f4:	2096      	movs	r0, #150	; 0x96
 80031f6:	f001 faa1 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB4);
 80031fa:	20b4      	movs	r0, #180	; 0xb4
 80031fc:	f001 fab2 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8003200:	2001      	movs	r0, #1
 8003202:	f001 fa9b 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB6); /* Display Function Control */
 8003206:	20b6      	movs	r0, #182	; 0xb6
 8003208:	f001 faac 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 800320c:	200a      	movs	r0, #10
 800320e:	f001 fa95 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA2);
 8003212:	20a2      	movs	r0, #162	; 0xa2
 8003214:	f001 fa92 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8003218:	20b7      	movs	r0, #183	; 0xb7
 800321a:	f001 faa3 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xC6);
 800321e:	20c6      	movs	r0, #198	; 0xc6
 8003220:	f001 fa8c 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB9);
 8003224:	20b9      	movs	r0, #185	; 0xb9
 8003226:	f001 fa9d 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x02);
 800322a:	2002      	movs	r0, #2
 800322c:	f001 fa86 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xE0);
 8003230:	20e0      	movs	r0, #224	; 0xe0
 8003232:	f001 fa83 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8003236:	20c0      	movs	r0, #192	; 0xc0
 8003238:	f001 fa94 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x80);
 800323c:	2080      	movs	r0, #128	; 0x80
 800323e:	f001 fa7d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x16);
 8003242:	2016      	movs	r0, #22
 8003244:	f001 fa7a 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC1);
 8003248:	20c1      	movs	r0, #193	; 0xc1
 800324a:	f001 fa8b 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x19);
 800324e:	2019      	movs	r0, #25
 8003250:	f001 fa74 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8003254:	20c2      	movs	r0, #194	; 0xc2
 8003256:	f001 fa85 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xA7);
 800325a:	20a7      	movs	r0, #167	; 0xa7
 800325c:	f001 fa6e 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC5);
 8003260:	20c5      	movs	r0, #197	; 0xc5
 8003262:	f001 fa7f 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8003266:	2016      	movs	r0, #22
 8003268:	f001 fa68 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE8);
 800326c:	20e8      	movs	r0, #232	; 0xe8
 800326e:	f001 fa79 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x40);
 8003272:	2040      	movs	r0, #64	; 0x40
 8003274:	f001 fa62 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x8A);
 8003278:	208a      	movs	r0, #138	; 0x8a
 800327a:	f001 fa5f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800327e:	2000      	movs	r0, #0
 8003280:	f001 fa5c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8003284:	2000      	movs	r0, #0
 8003286:	f001 fa59 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x29);
 800328a:	2029      	movs	r0, #41	; 0x29
 800328c:	f001 fa56 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x19);
 8003290:	2019      	movs	r0, #25
 8003292:	f001 fa53 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xA5);
 8003296:	20a5      	movs	r0, #165	; 0xa5
 8003298:	f001 fa50 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x33);
 800329c:	2033      	movs	r0, #51	; 0x33
 800329e:	f001 fa4d 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE0);
 80032a2:	20e0      	movs	r0, #224	; 0xe0
 80032a4:	f001 fa5e 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 80032a8:	20f0      	movs	r0, #240	; 0xf0
 80032aa:	f001 fa47 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x07);
 80032ae:	2007      	movs	r0, #7
 80032b0:	f001 fa44 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0D);
 80032b4:	200d      	movs	r0, #13
 80032b6:	f001 fa41 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x04);
 80032ba:	2004      	movs	r0, #4
 80032bc:	f001 fa3e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x05);
 80032c0:	2005      	movs	r0, #5
 80032c2:	f001 fa3b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x14);
 80032c6:	2014      	movs	r0, #20
 80032c8:	f001 fa38 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x36);
 80032cc:	2036      	movs	r0, #54	; 0x36
 80032ce:	f001 fa35 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x54);
 80032d2:	2054      	movs	r0, #84	; 0x54
 80032d4:	f001 fa32 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x4C);
 80032d8:	204c      	movs	r0, #76	; 0x4c
 80032da:	f001 fa2f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x38);
 80032de:	2038      	movs	r0, #56	; 0x38
 80032e0:	f001 fa2c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x13);
 80032e4:	2013      	movs	r0, #19
 80032e6:	f001 fa29 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x14);
 80032ea:	2014      	movs	r0, #20
 80032ec:	f001 fa26 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2E);
 80032f0:	202e      	movs	r0, #46	; 0x2e
 80032f2:	f001 fa23 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x34);
 80032f6:	2034      	movs	r0, #52	; 0x34
 80032f8:	f001 fa20 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE1);
 80032fc:	20e1      	movs	r0, #225	; 0xe1
 80032fe:	f001 fa31 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8003302:	20f0      	movs	r0, #240	; 0xf0
 8003304:	f001 fa1a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x10);
 8003308:	2010      	movs	r0, #16
 800330a:	f001 fa17 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x14);
 800330e:	2014      	movs	r0, #20
 8003310:	f001 fa14 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0E);
 8003314:	200e      	movs	r0, #14
 8003316:	f001 fa11 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0C);
 800331a:	200c      	movs	r0, #12
 800331c:	f001 fa0e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x08);
 8003320:	2008      	movs	r0, #8
 8003322:	f001 fa0b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x35);
 8003326:	2035      	movs	r0, #53	; 0x35
 8003328:	f001 fa08 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x44);
 800332c:	2044      	movs	r0, #68	; 0x44
 800332e:	f001 fa05 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x4C);
 8003332:	204c      	movs	r0, #76	; 0x4c
 8003334:	f001 fa02 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x26);
 8003338:	2026      	movs	r0, #38	; 0x26
 800333a:	f001 f9ff 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x10);
 800333e:	2010      	movs	r0, #16
 8003340:	f001 f9fc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x12);
 8003344:	2012      	movs	r0, #18
 8003346:	f001 f9f9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x2C);
 800334a:	202c      	movs	r0, #44	; 0x2c
 800334c:	f001 f9f6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x32);
 8003350:	2032      	movs	r0, #50	; 0x32
 8003352:	f001 f9f3 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8003356:	20f0      	movs	r0, #240	; 0xf0
 8003358:	f001 fa04 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 800335c:	203c      	movs	r0, #60	; 0x3c
 800335e:	f001 f9ed 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8003362:	20f0      	movs	r0, #240	; 0xf0
 8003364:	f001 f9fe 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x69);
 8003368:	2069      	movs	r0, #105	; 0x69
 800336a:	f001 f9e7 	bl	800473c <lcd_wr_data>

    HAL_Delay(120);
 800336e:	2078      	movs	r0, #120	; 0x78
 8003370:	f003 f93a 	bl	80065e8 <HAL_Delay>

    lcd_wr_regno(0x21);
 8003374:	2021      	movs	r0, #33	; 0x21
 8003376:	f001 f9f5 	bl	8004764 <lcd_wr_regno>
    lcd_wr_regno(0x29);
 800337a:	2029      	movs	r0, #41	; 0x29
 800337c:	f001 f9f2 	bl	8004764 <lcd_wr_regno>
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}

08003384 <lcd_ex_nt35510_reginit>:
 * @brief  NT35510 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35510_reginit(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 8003388:	2155      	movs	r1, #85	; 0x55
 800338a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800338e:	f001 f9fd 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8003392:	21aa      	movs	r1, #170	; 0xaa
 8003394:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003398:	f001 f9f8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 800339c:	2152      	movs	r1, #82	; 0x52
 800339e:	f24f 0002 	movw	r0, #61442	; 0xf002
 80033a2:	f001 f9f3 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 80033a6:	2108      	movs	r1, #8
 80033a8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80033ac:	f001 f9ee 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 80033b0:	2101      	movs	r1, #1
 80033b2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80033b6:	f001 f9e9 	bl	800478c <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 80033ba:	210d      	movs	r1, #13
 80033bc:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80033c0:	f001 f9e4 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 80033c4:	210d      	movs	r1, #13
 80033c6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80033ca:	f001 f9df 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 80033ce:	210d      	movs	r1, #13
 80033d0:	f24b 0002 	movw	r0, #45058	; 0xb002
 80033d4:	f001 f9da 	bl	800478c <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 80033d8:	2134      	movs	r1, #52	; 0x34
 80033da:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80033de:	f001 f9d5 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 80033e2:	2134      	movs	r1, #52	; 0x34
 80033e4:	f24b 6001 	movw	r0, #46593	; 0xb601
 80033e8:	f001 f9d0 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 80033ec:	2134      	movs	r1, #52	; 0x34
 80033ee:	f24b 6002 	movw	r0, #46594	; 0xb602
 80033f2:	f001 f9cb 	bl	800478c <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 80033f6:	210d      	movs	r1, #13
 80033f8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80033fc:	f001 f9c6 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 8003400:	210d      	movs	r1, #13
 8003402:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003406:	f001 f9c1 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 800340a:	210d      	movs	r1, #13
 800340c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003410:	f001 f9bc 	bl	800478c <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 8003414:	2134      	movs	r1, #52	; 0x34
 8003416:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800341a:	f001 f9b7 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 800341e:	2134      	movs	r1, #52	; 0x34
 8003420:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003424:	f001 f9b2 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 8003428:	2134      	movs	r1, #52	; 0x34
 800342a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800342e:	f001 f9ad 	bl	800478c <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 8003432:	2100      	movs	r1, #0
 8003434:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003438:	f001 f9a8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 800343c:	2100      	movs	r1, #0
 800343e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003442:	f001 f9a3 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 8003446:	2100      	movs	r1, #0
 8003448:	f24b 2002 	movw	r0, #45570	; 0xb202
 800344c:	f001 f99e 	bl	800478c <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 8003450:	2124      	movs	r1, #36	; 0x24
 8003452:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003456:	f001 f999 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 800345a:	2124      	movs	r1, #36	; 0x24
 800345c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003460:	f001 f994 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 8003464:	2124      	movs	r1, #36	; 0x24
 8003466:	f64b 0002 	movw	r0, #47106	; 0xb802
 800346a:	f001 f98f 	bl	800478c <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 800346e:	2101      	movs	r1, #1
 8003470:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003474:	f001 f98a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 8003478:	210f      	movs	r1, #15
 800347a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800347e:	f001 f985 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 8003482:	210f      	movs	r1, #15
 8003484:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003488:	f001 f980 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 800348c:	210f      	movs	r1, #15
 800348e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003492:	f001 f97b 	bl	800478c <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 8003496:	2134      	movs	r1, #52	; 0x34
 8003498:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800349c:	f001 f976 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 80034a0:	2134      	movs	r1, #52	; 0x34
 80034a2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80034a6:	f001 f971 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 80034aa:	2134      	movs	r1, #52	; 0x34
 80034ac:	f64b 1002 	movw	r0, #47362	; 0xb902
 80034b0:	f001 f96c 	bl	800478c <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 80034b4:	2108      	movs	r1, #8
 80034b6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80034ba:	f001 f967 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 80034be:	2108      	movs	r1, #8
 80034c0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80034c4:	f001 f962 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 80034c8:	2108      	movs	r1, #8
 80034ca:	f24b 5002 	movw	r0, #46338	; 0xb502
 80034ce:	f001 f95d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 80034d2:	2103      	movs	r1, #3
 80034d4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80034d8:	f001 f958 	bl	800478c <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 80034dc:	2124      	movs	r1, #36	; 0x24
 80034de:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80034e2:	f001 f953 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 80034e6:	2124      	movs	r1, #36	; 0x24
 80034e8:	f64b 2001 	movw	r0, #47617	; 0xba01
 80034ec:	f001 f94e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 80034f0:	2124      	movs	r1, #36	; 0x24
 80034f2:	f64b 2002 	movw	r0, #47618	; 0xba02
 80034f6:	f001 f949 	bl	800478c <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 80034fa:	2100      	movs	r1, #0
 80034fc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003500:	f001 f944 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 8003504:	2178      	movs	r1, #120	; 0x78
 8003506:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800350a:	f001 f93f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 800350e:	2100      	movs	r1, #0
 8003510:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003514:	f001 f93a 	bl	800478c <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 8003518:	2100      	movs	r1, #0
 800351a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800351e:	f001 f935 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 8003522:	2178      	movs	r1, #120	; 0x78
 8003524:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003528:	f001 f930 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 800352c:	2100      	movs	r1, #0
 800352e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003532:	f001 f92b 	bl	800478c <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 8003536:	2100      	movs	r1, #0
 8003538:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800353c:	f001 f926 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 8003540:	2164      	movs	r1, #100	; 0x64
 8003542:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003546:	f001 f921 	bl	800478c <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 800354a:	2100      	movs	r1, #0
 800354c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003550:	f001 f91c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 8003554:	2133      	movs	r1, #51	; 0x33
 8003556:	f24d 1001 	movw	r0, #53505	; 0xd101
 800355a:	f001 f917 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 800355e:	2100      	movs	r1, #0
 8003560:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003564:	f001 f912 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 8003568:	2134      	movs	r1, #52	; 0x34
 800356a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800356e:	f001 f90d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 8003572:	2100      	movs	r1, #0
 8003574:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003578:	f001 f908 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 800357c:	213a      	movs	r1, #58	; 0x3a
 800357e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003582:	f001 f903 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 8003586:	2100      	movs	r1, #0
 8003588:	f24d 1006 	movw	r0, #53510	; 0xd106
 800358c:	f001 f8fe 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 8003590:	214a      	movs	r1, #74	; 0x4a
 8003592:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003596:	f001 f8f9 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 800359a:	2100      	movs	r1, #0
 800359c:	f24d 1008 	movw	r0, #53512	; 0xd108
 80035a0:	f001 f8f4 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 80035a4:	215c      	movs	r1, #92	; 0x5c
 80035a6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80035aa:	f001 f8ef 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 80035ae:	2100      	movs	r1, #0
 80035b0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80035b4:	f001 f8ea 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 80035b8:	2181      	movs	r1, #129	; 0x81
 80035ba:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80035be:	f001 f8e5 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 80035c2:	2100      	movs	r1, #0
 80035c4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80035c8:	f001 f8e0 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 80035cc:	21a6      	movs	r1, #166	; 0xa6
 80035ce:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80035d2:	f001 f8db 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 80035d6:	2100      	movs	r1, #0
 80035d8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80035dc:	f001 f8d6 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 80035e0:	21e5      	movs	r1, #229	; 0xe5
 80035e2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80035e6:	f001 f8d1 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 80035ea:	2101      	movs	r1, #1
 80035ec:	f24d 1010 	movw	r0, #53520	; 0xd110
 80035f0:	f001 f8cc 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 80035f4:	2113      	movs	r1, #19
 80035f6:	f24d 1011 	movw	r0, #53521	; 0xd111
 80035fa:	f001 f8c7 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 80035fe:	2101      	movs	r1, #1
 8003600:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003604:	f001 f8c2 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 8003608:	2154      	movs	r1, #84	; 0x54
 800360a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800360e:	f001 f8bd 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 8003612:	2101      	movs	r1, #1
 8003614:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003618:	f001 f8b8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 800361c:	2182      	movs	r1, #130	; 0x82
 800361e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003622:	f001 f8b3 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 8003626:	2101      	movs	r1, #1
 8003628:	f24d 1016 	movw	r0, #53526	; 0xd116
 800362c:	f001 f8ae 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 8003630:	21ca      	movs	r1, #202	; 0xca
 8003632:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003636:	f001 f8a9 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 800363a:	2102      	movs	r1, #2
 800363c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003640:	f001 f8a4 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 8003644:	2100      	movs	r1, #0
 8003646:	f24d 1019 	movw	r0, #53529	; 0xd119
 800364a:	f001 f89f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 800364e:	2102      	movs	r1, #2
 8003650:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003654:	f001 f89a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 8003658:	2101      	movs	r1, #1
 800365a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800365e:	f001 f895 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 8003662:	2102      	movs	r1, #2
 8003664:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003668:	f001 f890 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 800366c:	2134      	movs	r1, #52	; 0x34
 800366e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003672:	f001 f88b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 8003676:	2102      	movs	r1, #2
 8003678:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800367c:	f001 f886 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 8003680:	2167      	movs	r1, #103	; 0x67
 8003682:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003686:	f001 f881 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 800368a:	2102      	movs	r1, #2
 800368c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003690:	f001 f87c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 8003694:	2184      	movs	r1, #132	; 0x84
 8003696:	f24d 1021 	movw	r0, #53537	; 0xd121
 800369a:	f001 f877 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 800369e:	2102      	movs	r1, #2
 80036a0:	f24d 1022 	movw	r0, #53538	; 0xd122
 80036a4:	f001 f872 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 80036a8:	21a4      	movs	r1, #164	; 0xa4
 80036aa:	f24d 1023 	movw	r0, #53539	; 0xd123
 80036ae:	f001 f86d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 80036b2:	2102      	movs	r1, #2
 80036b4:	f24d 1024 	movw	r0, #53540	; 0xd124
 80036b8:	f001 f868 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 80036bc:	21b7      	movs	r1, #183	; 0xb7
 80036be:	f24d 1025 	movw	r0, #53541	; 0xd125
 80036c2:	f001 f863 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 80036c6:	2102      	movs	r1, #2
 80036c8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80036cc:	f001 f85e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 80036d0:	21cf      	movs	r1, #207	; 0xcf
 80036d2:	f24d 1027 	movw	r0, #53543	; 0xd127
 80036d6:	f001 f859 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 80036da:	2102      	movs	r1, #2
 80036dc:	f24d 1028 	movw	r0, #53544	; 0xd128
 80036e0:	f001 f854 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 80036e4:	21de      	movs	r1, #222	; 0xde
 80036e6:	f24d 1029 	movw	r0, #53545	; 0xd129
 80036ea:	f001 f84f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 80036ee:	2102      	movs	r1, #2
 80036f0:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80036f4:	f001 f84a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 80036f8:	21f2      	movs	r1, #242	; 0xf2
 80036fa:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80036fe:	f001 f845 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 8003702:	2102      	movs	r1, #2
 8003704:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003708:	f001 f840 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 800370c:	21fe      	movs	r1, #254	; 0xfe
 800370e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003712:	f001 f83b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 8003716:	2103      	movs	r1, #3
 8003718:	f24d 102e 	movw	r0, #53550	; 0xd12e
 800371c:	f001 f836 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 8003720:	2110      	movs	r1, #16
 8003722:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003726:	f001 f831 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 800372a:	2103      	movs	r1, #3
 800372c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003730:	f001 f82c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 8003734:	2133      	movs	r1, #51	; 0x33
 8003736:	f24d 1031 	movw	r0, #53553	; 0xd131
 800373a:	f001 f827 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 800373e:	2103      	movs	r1, #3
 8003740:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003744:	f001 f822 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 8003748:	216d      	movs	r1, #109	; 0x6d
 800374a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800374e:	f001 f81d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 8003752:	2100      	movs	r1, #0
 8003754:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003758:	f001 f818 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 800375c:	2133      	movs	r1, #51	; 0x33
 800375e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003762:	f001 f813 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 8003766:	2100      	movs	r1, #0
 8003768:	f24d 2002 	movw	r0, #53762	; 0xd202
 800376c:	f001 f80e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 8003770:	2134      	movs	r1, #52	; 0x34
 8003772:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003776:	f001 f809 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 800377a:	2100      	movs	r1, #0
 800377c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003780:	f001 f804 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 8003784:	213a      	movs	r1, #58	; 0x3a
 8003786:	f24d 2005 	movw	r0, #53765	; 0xd205
 800378a:	f000 ffff 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 800378e:	2100      	movs	r1, #0
 8003790:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003794:	f000 fffa 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 8003798:	214a      	movs	r1, #74	; 0x4a
 800379a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800379e:	f000 fff5 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 80037a2:	2100      	movs	r1, #0
 80037a4:	f24d 2008 	movw	r0, #53768	; 0xd208
 80037a8:	f000 fff0 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 80037ac:	215c      	movs	r1, #92	; 0x5c
 80037ae:	f24d 2009 	movw	r0, #53769	; 0xd209
 80037b2:	f000 ffeb 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 80037b6:	2100      	movs	r1, #0
 80037b8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80037bc:	f000 ffe6 	bl	800478c <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 80037c0:	2181      	movs	r1, #129	; 0x81
 80037c2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80037c6:	f000 ffe1 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 80037ca:	2100      	movs	r1, #0
 80037cc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80037d0:	f000 ffdc 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 80037d4:	21a6      	movs	r1, #166	; 0xa6
 80037d6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80037da:	f000 ffd7 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 80037de:	2100      	movs	r1, #0
 80037e0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80037e4:	f000 ffd2 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 80037e8:	21e5      	movs	r1, #229	; 0xe5
 80037ea:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80037ee:	f000 ffcd 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 80037f2:	2101      	movs	r1, #1
 80037f4:	f24d 2010 	movw	r0, #53776	; 0xd210
 80037f8:	f000 ffc8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 80037fc:	2113      	movs	r1, #19
 80037fe:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003802:	f000 ffc3 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 8003806:	2101      	movs	r1, #1
 8003808:	f24d 2012 	movw	r0, #53778	; 0xd212
 800380c:	f000 ffbe 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 8003810:	2154      	movs	r1, #84	; 0x54
 8003812:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003816:	f000 ffb9 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 800381a:	2101      	movs	r1, #1
 800381c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003820:	f000 ffb4 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 8003824:	2182      	movs	r1, #130	; 0x82
 8003826:	f24d 2015 	movw	r0, #53781	; 0xd215
 800382a:	f000 ffaf 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 800382e:	2101      	movs	r1, #1
 8003830:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003834:	f000 ffaa 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 8003838:	21ca      	movs	r1, #202	; 0xca
 800383a:	f24d 2017 	movw	r0, #53783	; 0xd217
 800383e:	f000 ffa5 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 8003842:	2102      	movs	r1, #2
 8003844:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003848:	f000 ffa0 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 800384c:	2100      	movs	r1, #0
 800384e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003852:	f000 ff9b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 8003856:	2102      	movs	r1, #2
 8003858:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800385c:	f000 ff96 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 8003860:	2101      	movs	r1, #1
 8003862:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003866:	f000 ff91 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 800386a:	2102      	movs	r1, #2
 800386c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003870:	f000 ff8c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 8003874:	2134      	movs	r1, #52	; 0x34
 8003876:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800387a:	f000 ff87 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 800387e:	2102      	movs	r1, #2
 8003880:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003884:	f000 ff82 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 8003888:	2167      	movs	r1, #103	; 0x67
 800388a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800388e:	f000 ff7d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 8003892:	2102      	movs	r1, #2
 8003894:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003898:	f000 ff78 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 800389c:	2184      	movs	r1, #132	; 0x84
 800389e:	f24d 2021 	movw	r0, #53793	; 0xd221
 80038a2:	f000 ff73 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 80038a6:	2102      	movs	r1, #2
 80038a8:	f24d 2022 	movw	r0, #53794	; 0xd222
 80038ac:	f000 ff6e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 80038b0:	21a4      	movs	r1, #164	; 0xa4
 80038b2:	f24d 2023 	movw	r0, #53795	; 0xd223
 80038b6:	f000 ff69 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 80038ba:	2102      	movs	r1, #2
 80038bc:	f24d 2024 	movw	r0, #53796	; 0xd224
 80038c0:	f000 ff64 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 80038c4:	21b7      	movs	r1, #183	; 0xb7
 80038c6:	f24d 2025 	movw	r0, #53797	; 0xd225
 80038ca:	f000 ff5f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 80038ce:	2102      	movs	r1, #2
 80038d0:	f24d 2026 	movw	r0, #53798	; 0xd226
 80038d4:	f000 ff5a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 80038d8:	21cf      	movs	r1, #207	; 0xcf
 80038da:	f24d 2027 	movw	r0, #53799	; 0xd227
 80038de:	f000 ff55 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 80038e2:	2102      	movs	r1, #2
 80038e4:	f24d 2028 	movw	r0, #53800	; 0xd228
 80038e8:	f000 ff50 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 80038ec:	21de      	movs	r1, #222	; 0xde
 80038ee:	f24d 2029 	movw	r0, #53801	; 0xd229
 80038f2:	f000 ff4b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 80038f6:	2102      	movs	r1, #2
 80038f8:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80038fc:	f000 ff46 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 8003900:	21f2      	movs	r1, #242	; 0xf2
 8003902:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003906:	f000 ff41 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 800390a:	2102      	movs	r1, #2
 800390c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003910:	f000 ff3c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 8003914:	21fe      	movs	r1, #254	; 0xfe
 8003916:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800391a:	f000 ff37 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 800391e:	2103      	movs	r1, #3
 8003920:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003924:	f000 ff32 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 8003928:	2110      	movs	r1, #16
 800392a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800392e:	f000 ff2d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 8003932:	2103      	movs	r1, #3
 8003934:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003938:	f000 ff28 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 800393c:	2133      	movs	r1, #51	; 0x33
 800393e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003942:	f000 ff23 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 8003946:	2103      	movs	r1, #3
 8003948:	f24d 2032 	movw	r0, #53810	; 0xd232
 800394c:	f000 ff1e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 8003950:	216d      	movs	r1, #109	; 0x6d
 8003952:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003956:	f000 ff19 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 800395a:	2100      	movs	r1, #0
 800395c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003960:	f000 ff14 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 8003964:	2133      	movs	r1, #51	; 0x33
 8003966:	f24d 3001 	movw	r0, #54017	; 0xd301
 800396a:	f000 ff0f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 800396e:	2100      	movs	r1, #0
 8003970:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003974:	f000 ff0a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 8003978:	2134      	movs	r1, #52	; 0x34
 800397a:	f24d 3003 	movw	r0, #54019	; 0xd303
 800397e:	f000 ff05 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 8003982:	2100      	movs	r1, #0
 8003984:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003988:	f000 ff00 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 800398c:	213a      	movs	r1, #58	; 0x3a
 800398e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003992:	f000 fefb 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 8003996:	2100      	movs	r1, #0
 8003998:	f24d 3006 	movw	r0, #54022	; 0xd306
 800399c:	f000 fef6 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 80039a0:	214a      	movs	r1, #74	; 0x4a
 80039a2:	f24d 3007 	movw	r0, #54023	; 0xd307
 80039a6:	f000 fef1 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 80039aa:	2100      	movs	r1, #0
 80039ac:	f24d 3008 	movw	r0, #54024	; 0xd308
 80039b0:	f000 feec 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 80039b4:	215c      	movs	r1, #92	; 0x5c
 80039b6:	f24d 3009 	movw	r0, #54025	; 0xd309
 80039ba:	f000 fee7 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 80039be:	2100      	movs	r1, #0
 80039c0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80039c4:	f000 fee2 	bl	800478c <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 80039c8:	2181      	movs	r1, #129	; 0x81
 80039ca:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80039ce:	f000 fedd 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 80039d2:	2100      	movs	r1, #0
 80039d4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80039d8:	f000 fed8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 80039dc:	21a6      	movs	r1, #166	; 0xa6
 80039de:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80039e2:	f000 fed3 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 80039e6:	2100      	movs	r1, #0
 80039e8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80039ec:	f000 fece 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 80039f0:	21e5      	movs	r1, #229	; 0xe5
 80039f2:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80039f6:	f000 fec9 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 80039fa:	2101      	movs	r1, #1
 80039fc:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003a00:	f000 fec4 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 8003a04:	2113      	movs	r1, #19
 8003a06:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003a0a:	f000 febf 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 8003a0e:	2101      	movs	r1, #1
 8003a10:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003a14:	f000 feba 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 8003a18:	2154      	movs	r1, #84	; 0x54
 8003a1a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003a1e:	f000 feb5 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 8003a22:	2101      	movs	r1, #1
 8003a24:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003a28:	f000 feb0 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 8003a2c:	2182      	movs	r1, #130	; 0x82
 8003a2e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003a32:	f000 feab 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 8003a36:	2101      	movs	r1, #1
 8003a38:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003a3c:	f000 fea6 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 8003a40:	21ca      	movs	r1, #202	; 0xca
 8003a42:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003a46:	f000 fea1 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003a50:	f000 fe9c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 8003a54:	2100      	movs	r1, #0
 8003a56:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003a5a:	f000 fe97 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 8003a5e:	2102      	movs	r1, #2
 8003a60:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003a64:	f000 fe92 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 8003a68:	2101      	movs	r1, #1
 8003a6a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003a6e:	f000 fe8d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 8003a72:	2102      	movs	r1, #2
 8003a74:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003a78:	f000 fe88 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 8003a7c:	2134      	movs	r1, #52	; 0x34
 8003a7e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003a82:	f000 fe83 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 8003a86:	2102      	movs	r1, #2
 8003a88:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003a8c:	f000 fe7e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 8003a90:	2167      	movs	r1, #103	; 0x67
 8003a92:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003a96:	f000 fe79 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003aa0:	f000 fe74 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 8003aa4:	2184      	movs	r1, #132	; 0x84
 8003aa6:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003aaa:	f000 fe6f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 8003aae:	2102      	movs	r1, #2
 8003ab0:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003ab4:	f000 fe6a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 8003ab8:	21a4      	movs	r1, #164	; 0xa4
 8003aba:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003abe:	f000 fe65 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003ac8:	f000 fe60 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 8003acc:	21b7      	movs	r1, #183	; 0xb7
 8003ace:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003ad2:	f000 fe5b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003adc:	f000 fe56 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 8003ae0:	21cf      	movs	r1, #207	; 0xcf
 8003ae2:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003ae6:	f000 fe51 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 8003aea:	2102      	movs	r1, #2
 8003aec:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003af0:	f000 fe4c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 8003af4:	21de      	movs	r1, #222	; 0xde
 8003af6:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003afa:	f000 fe47 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 8003afe:	2102      	movs	r1, #2
 8003b00:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003b04:	f000 fe42 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 8003b08:	21f2      	movs	r1, #242	; 0xf2
 8003b0a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003b0e:	f000 fe3d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 8003b12:	2102      	movs	r1, #2
 8003b14:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003b18:	f000 fe38 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 8003b1c:	21fe      	movs	r1, #254	; 0xfe
 8003b1e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003b22:	f000 fe33 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 8003b26:	2103      	movs	r1, #3
 8003b28:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003b2c:	f000 fe2e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 8003b30:	2110      	movs	r1, #16
 8003b32:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003b36:	f000 fe29 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 8003b3a:	2103      	movs	r1, #3
 8003b3c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003b40:	f000 fe24 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 8003b44:	2133      	movs	r1, #51	; 0x33
 8003b46:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003b4a:	f000 fe1f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 8003b4e:	2103      	movs	r1, #3
 8003b50:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003b54:	f000 fe1a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 8003b58:	216d      	movs	r1, #109	; 0x6d
 8003b5a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003b5e:	f000 fe15 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 8003b62:	2100      	movs	r1, #0
 8003b64:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003b68:	f000 fe10 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 8003b6c:	2133      	movs	r1, #51	; 0x33
 8003b6e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003b72:	f000 fe0b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 8003b76:	2100      	movs	r1, #0
 8003b78:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003b7c:	f000 fe06 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 8003b80:	2134      	movs	r1, #52	; 0x34
 8003b82:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003b86:	f000 fe01 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003b90:	f000 fdfc 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 8003b94:	213a      	movs	r1, #58	; 0x3a
 8003b96:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003b9a:	f000 fdf7 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003ba4:	f000 fdf2 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 8003ba8:	214a      	movs	r1, #74	; 0x4a
 8003baa:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003bae:	f000 fded 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003bb8:	f000 fde8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 8003bbc:	215c      	movs	r1, #92	; 0x5c
 8003bbe:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003bc2:	f000 fde3 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003bcc:	f000 fdde 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 8003bd0:	2181      	movs	r1, #129	; 0x81
 8003bd2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003bd6:	f000 fdd9 	bl	800478c <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 8003bda:	2100      	movs	r1, #0
 8003bdc:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003be0:	f000 fdd4 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 8003be4:	21a6      	movs	r1, #166	; 0xa6
 8003be6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003bea:	f000 fdcf 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003bf4:	f000 fdca 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 8003bf8:	21e5      	movs	r1, #229	; 0xe5
 8003bfa:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003bfe:	f000 fdc5 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 8003c02:	2101      	movs	r1, #1
 8003c04:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003c08:	f000 fdc0 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 8003c0c:	2113      	movs	r1, #19
 8003c0e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003c12:	f000 fdbb 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 8003c16:	2101      	movs	r1, #1
 8003c18:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003c1c:	f000 fdb6 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 8003c20:	2154      	movs	r1, #84	; 0x54
 8003c22:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003c26:	f000 fdb1 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003c30:	f000 fdac 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 8003c34:	2182      	movs	r1, #130	; 0x82
 8003c36:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003c3a:	f000 fda7 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 8003c3e:	2101      	movs	r1, #1
 8003c40:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003c44:	f000 fda2 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 8003c48:	21ca      	movs	r1, #202	; 0xca
 8003c4a:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003c4e:	f000 fd9d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 8003c52:	2102      	movs	r1, #2
 8003c54:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003c58:	f000 fd98 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003c62:	f000 fd93 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 8003c66:	2102      	movs	r1, #2
 8003c68:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003c6c:	f000 fd8e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 8003c70:	2101      	movs	r1, #1
 8003c72:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003c76:	f000 fd89 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003c80:	f000 fd84 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 8003c84:	2134      	movs	r1, #52	; 0x34
 8003c86:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003c8a:	f000 fd7f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 8003c8e:	2102      	movs	r1, #2
 8003c90:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003c94:	f000 fd7a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 8003c98:	2167      	movs	r1, #103	; 0x67
 8003c9a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003c9e:	f000 fd75 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003ca8:	f000 fd70 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 8003cac:	2184      	movs	r1, #132	; 0x84
 8003cae:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003cb2:	f000 fd6b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003cbc:	f000 fd66 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 8003cc0:	21a4      	movs	r1, #164	; 0xa4
 8003cc2:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003cc6:	f000 fd61 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 8003cca:	2102      	movs	r1, #2
 8003ccc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003cd0:	f000 fd5c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 8003cd4:	21b7      	movs	r1, #183	; 0xb7
 8003cd6:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003cda:	f000 fd57 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 8003cde:	2102      	movs	r1, #2
 8003ce0:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003ce4:	f000 fd52 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 8003ce8:	21cf      	movs	r1, #207	; 0xcf
 8003cea:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003cee:	f000 fd4d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003cf8:	f000 fd48 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 8003cfc:	21de      	movs	r1, #222	; 0xde
 8003cfe:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003d02:	f000 fd43 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 8003d06:	2102      	movs	r1, #2
 8003d08:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003d0c:	f000 fd3e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 8003d10:	21f2      	movs	r1, #242	; 0xf2
 8003d12:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003d16:	f000 fd39 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003d20:	f000 fd34 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 8003d24:	21fe      	movs	r1, #254	; 0xfe
 8003d26:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003d2a:	f000 fd2f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 8003d2e:	2103      	movs	r1, #3
 8003d30:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003d34:	f000 fd2a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 8003d38:	2110      	movs	r1, #16
 8003d3a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003d3e:	f000 fd25 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 8003d42:	2103      	movs	r1, #3
 8003d44:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003d48:	f000 fd20 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 8003d4c:	2133      	movs	r1, #51	; 0x33
 8003d4e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003d52:	f000 fd1b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 8003d56:	2103      	movs	r1, #3
 8003d58:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003d5c:	f000 fd16 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 8003d60:	216d      	movs	r1, #109	; 0x6d
 8003d62:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003d66:	f000 fd11 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003d70:	f000 fd0c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 8003d74:	2133      	movs	r1, #51	; 0x33
 8003d76:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003d7a:	f000 fd07 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003d84:	f000 fd02 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 8003d88:	2134      	movs	r1, #52	; 0x34
 8003d8a:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003d8e:	f000 fcfd 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 8003d92:	2100      	movs	r1, #0
 8003d94:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003d98:	f000 fcf8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 8003d9c:	213a      	movs	r1, #58	; 0x3a
 8003d9e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003da2:	f000 fcf3 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 8003da6:	2100      	movs	r1, #0
 8003da8:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003dac:	f000 fcee 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 8003db0:	214a      	movs	r1, #74	; 0x4a
 8003db2:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003db6:	f000 fce9 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003dc0:	f000 fce4 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 8003dc4:	215c      	movs	r1, #92	; 0x5c
 8003dc6:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003dca:	f000 fcdf 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003dd4:	f000 fcda 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 8003dd8:	2181      	movs	r1, #129	; 0x81
 8003dda:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003dde:	f000 fcd5 	bl	800478c <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 8003de2:	2100      	movs	r1, #0
 8003de4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003de8:	f000 fcd0 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 8003dec:	21a6      	movs	r1, #166	; 0xa6
 8003dee:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003df2:	f000 fccb 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 8003df6:	2100      	movs	r1, #0
 8003df8:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003dfc:	f000 fcc6 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 8003e00:	21e5      	movs	r1, #229	; 0xe5
 8003e02:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003e06:	f000 fcc1 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003e10:	f000 fcbc 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 8003e14:	2113      	movs	r1, #19
 8003e16:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003e1a:	f000 fcb7 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003e24:	f000 fcb2 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 8003e28:	2154      	movs	r1, #84	; 0x54
 8003e2a:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003e2e:	f000 fcad 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 8003e32:	2101      	movs	r1, #1
 8003e34:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003e38:	f000 fca8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 8003e3c:	2182      	movs	r1, #130	; 0x82
 8003e3e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003e42:	f000 fca3 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 8003e46:	2101      	movs	r1, #1
 8003e48:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003e4c:	f000 fc9e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 8003e50:	21ca      	movs	r1, #202	; 0xca
 8003e52:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003e56:	f000 fc99 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003e60:	f000 fc94 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 8003e64:	2100      	movs	r1, #0
 8003e66:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003e6a:	f000 fc8f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 8003e6e:	2102      	movs	r1, #2
 8003e70:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003e74:	f000 fc8a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 8003e78:	2101      	movs	r1, #1
 8003e7a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003e7e:	f000 fc85 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 8003e82:	2102      	movs	r1, #2
 8003e84:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003e88:	f000 fc80 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 8003e8c:	2134      	movs	r1, #52	; 0x34
 8003e8e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003e92:	f000 fc7b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 8003e96:	2102      	movs	r1, #2
 8003e98:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003e9c:	f000 fc76 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 8003ea0:	2167      	movs	r1, #103	; 0x67
 8003ea2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003ea6:	f000 fc71 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 8003eaa:	2102      	movs	r1, #2
 8003eac:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003eb0:	f000 fc6c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 8003eb4:	2184      	movs	r1, #132	; 0x84
 8003eb6:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003eba:	f000 fc67 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003ec4:	f000 fc62 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 8003ec8:	21a4      	movs	r1, #164	; 0xa4
 8003eca:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003ece:	f000 fc5d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003ed8:	f000 fc58 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 8003edc:	21b7      	movs	r1, #183	; 0xb7
 8003ede:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003ee2:	f000 fc53 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003eec:	f000 fc4e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 8003ef0:	21cf      	movs	r1, #207	; 0xcf
 8003ef2:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003ef6:	f000 fc49 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 8003efa:	2102      	movs	r1, #2
 8003efc:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003f00:	f000 fc44 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 8003f04:	21de      	movs	r1, #222	; 0xde
 8003f06:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003f0a:	f000 fc3f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 8003f0e:	2102      	movs	r1, #2
 8003f10:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003f14:	f000 fc3a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 8003f18:	21f2      	movs	r1, #242	; 0xf2
 8003f1a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003f1e:	f000 fc35 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 8003f22:	2102      	movs	r1, #2
 8003f24:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003f28:	f000 fc30 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 8003f2c:	21fe      	movs	r1, #254	; 0xfe
 8003f2e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003f32:	f000 fc2b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 8003f36:	2103      	movs	r1, #3
 8003f38:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003f3c:	f000 fc26 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 8003f40:	2110      	movs	r1, #16
 8003f42:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003f46:	f000 fc21 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 8003f4a:	2103      	movs	r1, #3
 8003f4c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003f50:	f000 fc1c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 8003f54:	2133      	movs	r1, #51	; 0x33
 8003f56:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003f5a:	f000 fc17 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 8003f5e:	2103      	movs	r1, #3
 8003f60:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003f64:	f000 fc12 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 8003f68:	216d      	movs	r1, #109	; 0x6d
 8003f6a:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003f6e:	f000 fc0d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 8003f72:	2100      	movs	r1, #0
 8003f74:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003f78:	f000 fc08 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 8003f7c:	2133      	movs	r1, #51	; 0x33
 8003f7e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003f82:	f000 fc03 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 8003f86:	2100      	movs	r1, #0
 8003f88:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003f8c:	f000 fbfe 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 8003f90:	2134      	movs	r1, #52	; 0x34
 8003f92:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003f96:	f000 fbf9 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003fa0:	f000 fbf4 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 8003fa4:	213a      	movs	r1, #58	; 0x3a
 8003fa6:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003faa:	f000 fbef 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003fb4:	f000 fbea 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 8003fb8:	214a      	movs	r1, #74	; 0x4a
 8003fba:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003fbe:	f000 fbe5 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003fc8:	f000 fbe0 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 8003fcc:	215c      	movs	r1, #92	; 0x5c
 8003fce:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003fd2:	f000 fbdb 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003fdc:	f000 fbd6 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 8003fe0:	2181      	movs	r1, #129	; 0x81
 8003fe2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003fe6:	f000 fbd1 	bl	800478c <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 8003fea:	2100      	movs	r1, #0
 8003fec:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003ff0:	f000 fbcc 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 8003ff4:	21a6      	movs	r1, #166	; 0xa6
 8003ff6:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003ffa:	f000 fbc7 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 8003ffe:	2100      	movs	r1, #0
 8004000:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004004:	f000 fbc2 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 8004008:	21e5      	movs	r1, #229	; 0xe5
 800400a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800400e:	f000 fbbd 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 8004012:	2101      	movs	r1, #1
 8004014:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004018:	f000 fbb8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 800401c:	2113      	movs	r1, #19
 800401e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004022:	f000 fbb3 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8004026:	2101      	movs	r1, #1
 8004028:	f24d 6012 	movw	r0, #54802	; 0xd612
 800402c:	f000 fbae 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 8004030:	2154      	movs	r1, #84	; 0x54
 8004032:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004036:	f000 fba9 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 800403a:	2101      	movs	r1, #1
 800403c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004040:	f000 fba4 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 8004044:	2182      	movs	r1, #130	; 0x82
 8004046:	f24d 6015 	movw	r0, #54805	; 0xd615
 800404a:	f000 fb9f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 800404e:	2101      	movs	r1, #1
 8004050:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004054:	f000 fb9a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 8004058:	21ca      	movs	r1, #202	; 0xca
 800405a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800405e:	f000 fb95 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 8004062:	2102      	movs	r1, #2
 8004064:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004068:	f000 fb90 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 800406c:	2100      	movs	r1, #0
 800406e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004072:	f000 fb8b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 8004076:	2102      	movs	r1, #2
 8004078:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800407c:	f000 fb86 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 8004080:	2101      	movs	r1, #1
 8004082:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004086:	f000 fb81 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 800408a:	2102      	movs	r1, #2
 800408c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004090:	f000 fb7c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 8004094:	2134      	movs	r1, #52	; 0x34
 8004096:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800409a:	f000 fb77 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 800409e:	2102      	movs	r1, #2
 80040a0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80040a4:	f000 fb72 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 80040a8:	2167      	movs	r1, #103	; 0x67
 80040aa:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80040ae:	f000 fb6d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 80040b2:	2102      	movs	r1, #2
 80040b4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80040b8:	f000 fb68 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 80040bc:	2184      	movs	r1, #132	; 0x84
 80040be:	f24d 6021 	movw	r0, #54817	; 0xd621
 80040c2:	f000 fb63 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 80040c6:	2102      	movs	r1, #2
 80040c8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80040cc:	f000 fb5e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 80040d0:	21a4      	movs	r1, #164	; 0xa4
 80040d2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80040d6:	f000 fb59 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 80040da:	2102      	movs	r1, #2
 80040dc:	f24d 6024 	movw	r0, #54820	; 0xd624
 80040e0:	f000 fb54 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 80040e4:	21b7      	movs	r1, #183	; 0xb7
 80040e6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80040ea:	f000 fb4f 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 80040ee:	2102      	movs	r1, #2
 80040f0:	f24d 6026 	movw	r0, #54822	; 0xd626
 80040f4:	f000 fb4a 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 80040f8:	21cf      	movs	r1, #207	; 0xcf
 80040fa:	f24d 6027 	movw	r0, #54823	; 0xd627
 80040fe:	f000 fb45 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 8004102:	2102      	movs	r1, #2
 8004104:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004108:	f000 fb40 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 800410c:	21de      	movs	r1, #222	; 0xde
 800410e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004112:	f000 fb3b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8004116:	2102      	movs	r1, #2
 8004118:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800411c:	f000 fb36 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 8004120:	21f2      	movs	r1, #242	; 0xf2
 8004122:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004126:	f000 fb31 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 800412a:	2102      	movs	r1, #2
 800412c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004130:	f000 fb2c 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 8004134:	21fe      	movs	r1, #254	; 0xfe
 8004136:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800413a:	f000 fb27 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 800413e:	2103      	movs	r1, #3
 8004140:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004144:	f000 fb22 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 8004148:	2110      	movs	r1, #16
 800414a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800414e:	f000 fb1d 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 8004152:	2103      	movs	r1, #3
 8004154:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004158:	f000 fb18 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 800415c:	2133      	movs	r1, #51	; 0x33
 800415e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004162:	f000 fb13 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 8004166:	2103      	movs	r1, #3
 8004168:	f24d 6032 	movw	r0, #54834	; 0xd632
 800416c:	f000 fb0e 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 8004170:	216d      	movs	r1, #109	; 0x6d
 8004172:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004176:	f000 fb09 	bl	800478c <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 800417a:	2155      	movs	r1, #85	; 0x55
 800417c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004180:	f000 fb04 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8004184:	21aa      	movs	r1, #170	; 0xaa
 8004186:	f24f 0001 	movw	r0, #61441	; 0xf001
 800418a:	f000 faff 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 800418e:	2152      	movs	r1, #82	; 0x52
 8004190:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004194:	f000 fafa 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8004198:	2108      	movs	r1, #8
 800419a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800419e:	f000 faf5 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 80041a2:	2100      	movs	r1, #0
 80041a4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80041a8:	f000 faf0 	bl	800478c <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 80041ac:	21cc      	movs	r1, #204	; 0xcc
 80041ae:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80041b2:	f000 faeb 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 80041b6:	2100      	movs	r1, #0
 80041b8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80041bc:	f000 fae6 	bl	800478c <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 80041c0:	2105      	movs	r1, #5
 80041c2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80041c6:	f000 fae1 	bl	800478c <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 80041ca:	2170      	movs	r1, #112	; 0x70
 80041cc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80041d0:	f000 fadc 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 80041d4:	2170      	movs	r1, #112	; 0x70
 80041d6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80041da:	f000 fad7 	bl	800478c <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 80041de:	2101      	movs	r1, #1
 80041e0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80041e4:	f000 fad2 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 80041e8:	2103      	movs	r1, #3
 80041ea:	f64b 0001 	movw	r0, #47105	; 0xb801
 80041ee:	f000 facd 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 80041f2:	2103      	movs	r1, #3
 80041f4:	f64b 0002 	movw	r0, #47106	; 0xb802
 80041f8:	f000 fac8 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 80041fc:	2103      	movs	r1, #3
 80041fe:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004202:	f000 fac3 	bl	800478c <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8004206:	2102      	movs	r1, #2
 8004208:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800420c:	f000 fabe 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 8004210:	2100      	movs	r1, #0
 8004212:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004216:	f000 fab9 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 800421a:	2100      	movs	r1, #0
 800421c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004220:	f000 fab4 	bl	800478c <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 8004224:	21d0      	movs	r1, #208	; 0xd0
 8004226:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800422a:	f000 faaf 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 800422e:	2102      	movs	r1, #2
 8004230:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004234:	f000 faaa 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 8004238:	2150      	movs	r1, #80	; 0x50
 800423a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800423e:	f000 faa5 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 8004242:	2150      	movs	r1, #80	; 0x50
 8004244:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004248:	f000 faa0 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 800424c:	2150      	movs	r1, #80	; 0x50
 800424e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004252:	f000 fa9b 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 8004256:	2100      	movs	r1, #0
 8004258:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800425c:	f000 fa96 	bl	800478c <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8004260:	2155      	movs	r1, #85	; 0x55
 8004262:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004266:	f000 fa91 	bl	800478c <lcd_write_reg>
    lcd_wr_regno(0x1100);
 800426a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800426e:	f000 fa79 	bl	8004764 <lcd_wr_regno>
    HAL_Delay(12);
 8004272:	200c      	movs	r0, #12
 8004274:	f002 f9b8 	bl	80065e8 <HAL_Delay>
    lcd_wr_regno(0x2900);
 8004278:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800427c:	f000 fa72 	bl	8004764 <lcd_wr_regno>
}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}

08004284 <lcd_ex_ili9806_reginit>:
 * @brief  ILI9806 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9806_reginit(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
 8004288:	20ff      	movs	r0, #255	; 0xff
 800428a:	f000 fa6b 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 800428e:	20ff      	movs	r0, #255	; 0xff
 8004290:	f000 fa54 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x98);
 8004294:	2098      	movs	r0, #152	; 0x98
 8004296:	f000 fa51 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x06);
 800429a:	2006      	movs	r0, #6
 800429c:	f000 fa4e 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xBC); /* GIP 1 */
 80042a0:	20bc      	movs	r0, #188	; 0xbc
 80042a2:	f000 fa5f 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);
 80042a6:	2001      	movs	r0, #1
 80042a8:	f000 fa48 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0F);
 80042ac:	200f      	movs	r0, #15
 80042ae:	f000 fa45 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x61);
 80042b2:	2061      	movs	r0, #97	; 0x61
 80042b4:	f000 fa42 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFF);
 80042b8:	20ff      	movs	r0, #255	; 0xff
 80042ba:	f000 fa3f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 80042be:	2001      	movs	r0, #1
 80042c0:	f000 fa3c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 80042c4:	2001      	movs	r0, #1
 80042c6:	f000 fa39 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0B);
 80042ca:	200b      	movs	r0, #11
 80042cc:	f000 fa36 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x10);
 80042d0:	2010      	movs	r0, #16
 80042d2:	f000 fa33 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x37);
 80042d6:	2037      	movs	r0, #55	; 0x37
 80042d8:	f000 fa30 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x63);
 80042dc:	2063      	movs	r0, #99	; 0x63
 80042de:	f000 fa2d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFF);
 80042e2:	20ff      	movs	r0, #255	; 0xff
 80042e4:	f000 fa2a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFF);
 80042e8:	20ff      	movs	r0, #255	; 0xff
 80042ea:	f000 fa27 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 80042ee:	2001      	movs	r0, #1
 80042f0:	f000 fa24 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 80042f4:	2001      	movs	r0, #1
 80042f6:	f000 fa21 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f000 fa1e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8004300:	2000      	movs	r0, #0
 8004302:	f000 fa1b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFF);
 8004306:	20ff      	movs	r0, #255	; 0xff
 8004308:	f000 fa18 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x52);
 800430c:	2052      	movs	r0, #82	; 0x52
 800430e:	f000 fa15 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 8004312:	2001      	movs	r0, #1
 8004314:	f000 fa12 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8004318:	2000      	movs	r0, #0
 800431a:	f000 fa0f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x40);
 800431e:	2040      	movs	r0, #64	; 0x40
 8004320:	f000 fa0c 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xBD); /* GIP 2 */
 8004324:	20bd      	movs	r0, #189	; 0xbd
 8004326:	f000 fa1d 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);
 800432a:	2001      	movs	r0, #1
 800432c:	f000 fa06 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x23);
 8004330:	2023      	movs	r0, #35	; 0x23
 8004332:	f000 fa03 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x45);
 8004336:	2045      	movs	r0, #69	; 0x45
 8004338:	f000 fa00 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x67);
 800433c:	2067      	movs	r0, #103	; 0x67
 800433e:	f000 f9fd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 8004342:	2001      	movs	r0, #1
 8004344:	f000 f9fa 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x23);
 8004348:	2023      	movs	r0, #35	; 0x23
 800434a:	f000 f9f7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x45);
 800434e:	2045      	movs	r0, #69	; 0x45
 8004350:	f000 f9f4 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x67);
 8004354:	2067      	movs	r0, #103	; 0x67
 8004356:	f000 f9f1 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xBE); /* GIP 3 */
 800435a:	20be      	movs	r0, #190	; 0xbe
 800435c:	f000 fa02 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004360:	2000      	movs	r0, #0
 8004362:	f000 f9eb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 8004366:	2001      	movs	r0, #1
 8004368:	f000 f9e8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xAB);
 800436c:	20ab      	movs	r0, #171	; 0xab
 800436e:	f000 f9e5 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x60);
 8004372:	2060      	movs	r0, #96	; 0x60
 8004374:	f000 f9e2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x22);
 8004378:	2022      	movs	r0, #34	; 0x22
 800437a:	f000 f9df 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x22);
 800437e:	2022      	movs	r0, #34	; 0x22
 8004380:	f000 f9dc 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x22);
 8004384:	2022      	movs	r0, #34	; 0x22
 8004386:	f000 f9d9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x22);
 800438a:	2022      	movs	r0, #34	; 0x22
 800438c:	f000 f9d6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x22);
 8004390:	2022      	movs	r0, #34	; 0x22
 8004392:	f000 f9d3 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xC7); /* VCOM Control */
 8004396:	20c7      	movs	r0, #199	; 0xc7
 8004398:	f000 f9e4 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x36);
 800439c:	2036      	movs	r0, #54	; 0x36
 800439e:	f000 f9cd 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
 80043a2:	20ed      	movs	r0, #237	; 0xed
 80043a4:	f000 f9de 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x7F);
 80043a8:	207f      	movs	r0, #127	; 0x7f
 80043aa:	f000 f9c7 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0F);
 80043ae:	200f      	movs	r0, #15
 80043b0:	f000 f9c4 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
 80043b4:	20c0      	movs	r0, #192	; 0xc0
 80043b6:	f000 f9d5 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 80043ba:	200f      	movs	r0, #15
 80043bc:	f000 f9be 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0B);
 80043c0:	200b      	movs	r0, #11
 80043c2:	f000 f9bb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0A);  /* VGH 15V,VGLO-10V */
 80043c6:	200a      	movs	r0, #10
 80043c8:	f000 f9b8 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
 80043cc:	20fc      	movs	r0, #252	; 0xfc
 80043ce:	f000 f9c9 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x08);
 80043d2:	2008      	movs	r0, #8
 80043d4:	f000 f9b2 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0XDF);
 80043d8:	20df      	movs	r0, #223	; 0xdf
 80043da:	f000 f9c3 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80043de:	2000      	movs	r0, #0
 80043e0:	f000 f9ac 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80043e4:	2000      	movs	r0, #0
 80043e6:	f000 f9a9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80043ea:	2000      	movs	r0, #0
 80043ec:	f000 f9a6 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80043f0:	2000      	movs	r0, #0
 80043f2:	f000 f9a3 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f000 f9a0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x20);
 80043fc:	2020      	movs	r0, #32
 80043fe:	f000 f99d 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
 8004402:	20f3      	movs	r0, #243	; 0xf3
 8004404:	f000 f9ae 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x74);
 8004408:	2074      	movs	r0, #116	; 0x74
 800440a:	f000 f997 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Inversion Type */
 800440e:	20b4      	movs	r0, #180	; 0xb4
 8004410:	f000 f9a8 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02 */
 8004414:	2000      	movs	r0, #0
 8004416:	f000 f991 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 800441a:	2000      	movs	r0, #0
 800441c:	f000 f98e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 8004420:	2000      	movs	r0, #0
 8004422:	f000 f98b 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF7); /* Resolution Control */
 8004426:	20f7      	movs	r0, #247	; 0xf7
 8004428:	f000 f99c 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x82);  /* 480*800 */
 800442c:	2082      	movs	r0, #130	; 0x82
 800442e:	f000 f985 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB1); /* FRAME RATE Setting */
 8004432:	20b1      	movs	r0, #177	; 0xb1
 8004434:	f000 f996 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004438:	2000      	movs	r0, #0
 800443a:	f000 f97f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x13);
 800443e:	2013      	movs	r0, #19
 8004440:	f000 f97c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x13);
 8004444:	2013      	movs	r0, #19
 8004446:	f000 f979 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
 800444a:	20f2      	movs	r0, #242	; 0xf2
 800444c:	f000 f98a 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8004450:	2080      	movs	r0, #128	; 0x80
 8004452:	f000 f973 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x04);
 8004456:	2004      	movs	r0, #4
 8004458:	f000 f970 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x40);
 800445c:	2040      	movs	r0, #64	; 0x40
 800445e:	f000 f96d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x28);
 8004462:	2028      	movs	r0, #40	; 0x28
 8004464:	f000 f96a 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
 8004468:	20c1      	movs	r0, #193	; 0xc1
 800446a:	f000 f97b 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x17);
 800446e:	2017      	movs	r0, #23
 8004470:	f000 f964 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMP */
 8004474:	2088      	movs	r0, #136	; 0x88
 8004476:	f000 f961 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMN */
 800447a:	2088      	movs	r0, #136	; 0x88
 800447c:	f000 f95e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x20);
 8004480:	2020      	movs	r0, #32
 8004482:	f000 f95b 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Positive Gamma Control */
 8004486:	20e0      	movs	r0, #224	; 0xe0
 8004488:	f000 f96c 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 800448c:	2000      	movs	r0, #0
 800448e:	f000 f955 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P2 */
 8004492:	200a      	movs	r0, #10
 8004494:	f000 f952 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x12);  /* P3 */
 8004498:	2012      	movs	r0, #18
 800449a:	f000 f94f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x10);  /* P4 */
 800449e:	2010      	movs	r0, #16
 80044a0:	f000 f94c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 80044a4:	200e      	movs	r0, #14
 80044a6:	f000 f949 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x20);  /* P6 */
 80044aa:	2020      	movs	r0, #32
 80044ac:	f000 f946 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xCC);  /* P7 */
 80044b0:	20cc      	movs	r0, #204	; 0xcc
 80044b2:	f000 f943 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x07);  /* P8 */
 80044b6:	2007      	movs	r0, #7
 80044b8:	f000 f940 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 80044bc:	2006      	movs	r0, #6
 80044be:	f000 f93d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P10 */
 80044c2:	200b      	movs	r0, #11
 80044c4:	f000 f93a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P11 */
 80044c8:	200e      	movs	r0, #14
 80044ca:	f000 f937 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P12 */
 80044ce:	200f      	movs	r0, #15
 80044d0:	f000 f934 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P13 */
 80044d4:	200d      	movs	r0, #13
 80044d6:	f000 f931 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 80044da:	2015      	movs	r0, #21
 80044dc:	f000 f92e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x10);  /* P15 */
 80044e0:	2010      	movs	r0, #16
 80044e2:	f000 f92b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 80044e6:	2000      	movs	r0, #0
 80044e8:	f000 f928 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xE1); /* Negative Gamma Correction */
 80044ec:	20e1      	movs	r0, #225	; 0xe1
 80044ee:	f000 f939 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 80044f2:	2000      	movs	r0, #0
 80044f4:	f000 f922 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P2 */
 80044f8:	200b      	movs	r0, #11
 80044fa:	f000 f91f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x13);  /* P3 */
 80044fe:	2013      	movs	r0, #19
 8004500:	f000 f91c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P4 */
 8004504:	200d      	movs	r0, #13
 8004506:	f000 f919 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 800450a:	200e      	movs	r0, #14
 800450c:	f000 f916 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1B);  /* P6 */
 8004510:	201b      	movs	r0, #27
 8004512:	f000 f913 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x71);  /* P7 */
 8004516:	2071      	movs	r0, #113	; 0x71
 8004518:	f000 f910 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x06);  /* P8 */
 800451c:	2006      	movs	r0, #6
 800451e:	f000 f90d 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 8004522:	2006      	movs	r0, #6
 8004524:	f000 f90a 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P10 */
 8004528:	200a      	movs	r0, #10
 800452a:	f000 f907 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P11 */
 800452e:	200f      	movs	r0, #15
 8004530:	f000 f904 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P12 */
 8004534:	200e      	movs	r0, #14
 8004536:	f000 f901 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P13 */
 800453a:	200f      	movs	r0, #15
 800453c:	f000 f8fe 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 8004540:	2015      	movs	r0, #21
 8004542:	f000 f8fb 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x0C);  /* P15 */
 8004546:	200c      	movs	r0, #12
 8004548:	f000 f8f8 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 800454c:	2000      	movs	r0, #0
 800454e:	f000 f8f5 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x2a);
 8004552:	202a      	movs	r0, #42	; 0x2a
 8004554:	f000 f906 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004558:	2000      	movs	r0, #0
 800455a:	f000 f8ef 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800455e:	2000      	movs	r0, #0
 8004560:	f000 f8ec 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);
 8004564:	2001      	movs	r0, #1
 8004566:	f000 f8e9 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xdf);
 800456a:	20df      	movs	r0, #223	; 0xdf
 800456c:	f000 f8e6 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x2b);
 8004570:	202b      	movs	r0, #43	; 0x2b
 8004572:	f000 f8f7 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004576:	2000      	movs	r0, #0
 8004578:	f000 f8e0 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800457c:	2000      	movs	r0, #0
 800457e:	f000 f8dd 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x03);
 8004582:	2003      	movs	r0, #3
 8004584:	f000 f8da 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x1f);
 8004588:	201f      	movs	r0, #31
 800458a:	f000 f8d7 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x3A); /* Pixel Format */
 800458e:	203a      	movs	r0, #58	; 0x3a
 8004590:	f000 f8e8 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8004594:	2055      	movs	r0, #85	; 0x55
 8004596:	f000 f8d1 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x36); /* Memory Access Control */
 800459a:	2036      	movs	r0, #54	; 0x36
 800459c:	f000 f8e2 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02-180 */
 80045a0:	2000      	movs	r0, #0
 80045a2:	f000 f8cb 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x11);
 80045a6:	2011      	movs	r0, #17
 80045a8:	f000 f8dc 	bl	8004764 <lcd_wr_regno>
    HAL_Delay(120);
 80045ac:	2078      	movs	r0, #120	; 0x78
 80045ae:	f002 f81b 	bl	80065e8 <HAL_Delay>
    lcd_wr_regno(0x29);
 80045b2:	2029      	movs	r0, #41	; 0x29
 80045b4:	f000 f8d6 	bl	8004764 <lcd_wr_regno>
    HAL_Delay(20);
 80045b8:	2014      	movs	r0, #20
 80045ba:	f002 f815 	bl	80065e8 <HAL_Delay>
    lcd_wr_regno(0x2C);
 80045be:	202c      	movs	r0, #44	; 0x2c
 80045c0:	f000 f8d0 	bl	8004764 <lcd_wr_regno>
}
 80045c4:	bf00      	nop
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <lcd_ex_ssd1963_reginit>:
 * @brief  SSD1963 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ssd1963_reginit(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 80045cc:	20e2      	movs	r0, #226	; 0xe2
 80045ce:	f000 f8c9 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* parameter 1 */
 80045d2:	201d      	movs	r0, #29
 80045d4:	f000 f8b2 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x02);  /* parameter 2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 80045d8:	2002      	movs	r0, #2
 80045da:	f000 f8af 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x04);  /* parameter 3 Validate M and N values */
 80045de:	2004      	movs	r0, #4
 80045e0:	f000 f8ac 	bl	800473c <lcd_wr_data>
    HAL_Delay(1);
 80045e4:	2001      	movs	r0, #1
 80045e6:	f001 ffff 	bl	80065e8 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 80045ea:	20e0      	movs	r0, #224	; 0xe0
 80045ec:	f000 f8ba 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 80045f0:	2001      	movs	r0, #1
 80045f2:	f000 f8a3 	bl	800473c <lcd_wr_data>
    HAL_Delay(10);
 80045f6:	200a      	movs	r0, #10
 80045f8:	f001 fff6 	bl	80065e8 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 80045fc:	20e0      	movs	r0, #224	; 0xe0
 80045fe:	f000 f8b1 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 8004602:	2003      	movs	r0, #3
 8004604:	f000 f89a 	bl	800473c <lcd_wr_data>
    HAL_Delay(12);
 8004608:	200c      	movs	r0, #12
 800460a:	f001 ffed 	bl	80065e8 <HAL_Delay>
    lcd_wr_regno(0x01); /* soft reset */
 800460e:	2001      	movs	r0, #1
 8004610:	f000 f8a8 	bl	8004764 <lcd_wr_regno>
    HAL_Delay(10);
 8004614:	200a      	movs	r0, #10
 8004616:	f001 ffe7 	bl	80065e8 <HAL_Delay>

    lcd_wr_regno(0xE6); /* Set the pixel frequency,33Mhz */
 800461a:	20e6      	movs	r0, #230	; 0xe6
 800461c:	f000 f8a2 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x2F);
 8004620:	202f      	movs	r0, #47	; 0x2f
 8004622:	f000 f88b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFF);
 8004626:	20ff      	movs	r0, #255	; 0xff
 8004628:	f000 f888 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFF);
 800462c:	20ff      	movs	r0, #255	; 0xff
 800462e:	f000 f885 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB0); /* Setting LCD mode */
 8004632:	20b0      	movs	r0, #176	; 0xb0
 8004634:	f000 f896 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24 bit mode */
 8004638:	2020      	movs	r0, #32
 800463a:	f000 f87f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT pattern */
 800463e:	2000      	movs	r0, #0
 8004640:	f000 f87c 	bl	800473c <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* Set the LCD horizontal pixels */
 8004644:	2003      	movs	r0, #3
 8004646:	f000 f879 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 800464a:	f240 301f 	movw	r0, #799	; 0x31f
 800464e:	f000 f875 	bl	800473c <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* Set the LCD vertical pixels */
 8004652:	2001      	movs	r0, #1
 8004654:	f000 f872 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 8004658:	f240 10df 	movw	r0, #479	; 0x1df
 800465c:	f000 f86e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB sequence */
 8004660:	2000      	movs	r0, #0
 8004662:	f000 f86b 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 8004666:	20b4      	movs	r0, #180	; 0xb4
 8004668:	f000 f87c 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 800466c:	2004      	movs	r0, #4
 800466e:	f000 f865 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 8004672:	f240 401f 	movw	r0, #1055	; 0x41f
 8004676:	f000 f861 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 800467a:	2000      	movs	r0, #0
 800467c:	f000 f85e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 8004680:	202e      	movs	r0, #46	; 0x2e
 8004682:	f000 f85b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 8004686:	2000      	movs	r0, #0
 8004688:	f000 f858 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 800468c:	2000      	movs	r0, #0
 800468e:	f000 f855 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8004692:	2000      	movs	r0, #0
 8004694:	f000 f852 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 8004698:	2000      	movs	r0, #0
 800469a:	f000 f84f 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 800469e:	20b6      	movs	r0, #182	; 0xb6
 80046a0:	f000 f860 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 80046a4:	2002      	movs	r0, #2
 80046a6:	f000 f849 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 80046aa:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80046ae:	f000 f845 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 80046b2:	2000      	movs	r0, #0
 80046b4:	f000 f842 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 80046b8:	2017      	movs	r0, #23
 80046ba:	f000 f83f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 80046be:	2015      	movs	r0, #21
 80046c0:	f000 f83c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80046c4:	2000      	movs	r0, #0
 80046c6:	f000 f839 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);
 80046ca:	2000      	movs	r0, #0
 80046cc:	f000 f836 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xF0); /* Set the interface between SSD1963 and CPU to 16bit */
 80046d0:	20f0      	movs	r0, #240	; 0xf0
 80046d2:	f000 f847 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 80046d6:	2003      	movs	r0, #3
 80046d8:	f000 f830 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0x29); /* Enable display */
 80046dc:	2029      	movs	r0, #41	; 0x29
 80046de:	f000 f841 	bl	8004764 <lcd_wr_regno>
    /* Setting the PWM output backlight is adjustable through the duty cycle */
    lcd_wr_regno(0xD0); /* Set the automatic white balance DBC */
 80046e2:	20d0      	movs	r0, #208	; 0xd0
 80046e4:	f000 f83e 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 80046e8:	2000      	movs	r0, #0
 80046ea:	f000 f827 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xBE); /* Configure PWM output */
 80046ee:	20be      	movs	r0, #190	; 0xbe
 80046f0:	f000 f838 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1 Set the PWM frequency */
 80046f4:	2005      	movs	r0, #5
 80046f6:	f000 f821 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2 Set the PWM duty cycle */
 80046fa:	20fe      	movs	r0, #254	; 0xfe
 80046fc:	f000 f81e 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3 set C */
 8004700:	2001      	movs	r0, #1
 8004702:	f000 f81b 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4 set D */
 8004706:	2000      	movs	r0, #0
 8004708:	f000 f818 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5 set E */
 800470c:	2000      	movs	r0, #0
 800470e:	f000 f815 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6 set F */
 8004712:	2000      	movs	r0, #0
 8004714:	f000 f812 	bl	800473c <lcd_wr_data>

    lcd_wr_regno(0xB8); /* Set the GPIO configuration */
 8004718:	20b8      	movs	r0, #184	; 0xb8
 800471a:	f000 f823 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* Two IO ports are set as output */
 800471e:	2003      	movs	r0, #3
 8004720:	f000 f80c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO uses normal IO functionality */
 8004724:	2001      	movs	r0, #1
 8004726:	f000 f809 	bl	800473c <lcd_wr_data>
    lcd_wr_regno(0xBA);
 800472a:	20ba      	movs	r0, #186	; 0xba
 800472c:	f000 f81a 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0X01);  /* GPIO[1:0]=01, controls LCD orientation */
 8004730:	2001      	movs	r0, #1
 8004732:	f000 f803 	bl	800473c <lcd_wr_data>
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <lcd_wr_data>:
 * @brief   LCD write data
 * @param   data: data to be written
 * @retval  None
 */
void lcd_wr_data(volatile uint16_t data)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	80fb      	strh	r3, [r7, #6]
    data = data;
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	b29b      	uxth	r3, r3
 800474a:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 800474c:	4b04      	ldr	r3, [pc, #16]	; (8004760 <lcd_wr_data+0x24>)
 800474e:	88fa      	ldrh	r2, [r7, #6]
 8004750:	b292      	uxth	r2, r2
 8004752:	805a      	strh	r2, [r3, #2]
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	600ffffe 	.word	0x600ffffe

08004764 <lcd_wr_regno>:
 * @brief   LCD write register number/address function
 * @param   regno: register number/address
 * @retval  None
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	80fb      	strh	r3, [r7, #6]
    regno = regno;
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	b29b      	uxth	r3, r3
 8004772:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <lcd_wr_regno+0x24>)
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	b292      	uxth	r2, r2
 800477a:	801a      	strh	r2, [r3, #0]

}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	600ffffe 	.word	0x600ffffe

0800478c <lcd_write_reg>:
 * @param   regno: register number/address
 * @param   data: data to be written
 * @retval  None
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	460a      	mov	r2, r1
 8004796:	80fb      	strh	r3, [r7, #6]
 8004798:	4613      	mov	r3, r2
 800479a:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 800479c:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <lcd_write_reg+0x28>)
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = data;    /* Write in data */
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <lcd_write_reg+0x28>)
 80047a4:	88bb      	ldrh	r3, [r7, #4]
 80047a6:	8053      	strh	r3, [r2, #2]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	600ffffe 	.word	0x600ffffe

080047b8 <lcd_rd_data>:
 * @brief   LCD read register function
 * @param   None.
 * @retval  The data read
 */
static uint16_t lcd_rd_data(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
    volatile uint16_t ram;
    ram = LCD->LCD_RAM;
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <lcd_rd_data+0x20>)
 80047c0:	885b      	ldrh	r3, [r3, #2]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	80fb      	strh	r3, [r7, #6]
    return ram;
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	b29b      	uxth	r3, r3
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	600ffffe 	.word	0x600ffffe

080047dc <lcd_write_ram_prepare>:
 * @brief   LCD ready to write GRAM
 * @param   None.
 * @retval  None.
 */
void lcd_write_ram_prepare(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <lcd_write_ram_prepare+0x18>)
 80047e2:	4a05      	ldr	r2, [pc, #20]	; (80047f8 <lcd_write_ram_prepare+0x1c>)
 80047e4:	8912      	ldrh	r2, [r2, #8]
 80047e6:	801a      	strh	r2, [r3, #0]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	600ffffe 	.word	0x600ffffe
 80047f8:	200001b8 	.word	0x200001b8

080047fc <lcd_set_cursor>:
 * @brief   Sets the cursor position
 * @param   x,y: coordinate
 * @retval  None.
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	460a      	mov	r2, r1
 8004806:	80fb      	strh	r3, [r7, #6]
 8004808:	4613      	mov	r3, r2
 800480a:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 800480c:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <lcd_set_cursor+0x1a8>)
 800480e:	889b      	ldrh	r3, [r3, #4]
 8004810:	f641 1263 	movw	r2, #6499	; 0x1963
 8004814:	4293      	cmp	r3, r2
 8004816:	d167      	bne.n	80048e8 <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* In portrait mode, the x-coordinate needs to be transformed */
 8004818:	4b62      	ldr	r3, [pc, #392]	; (80049a4 <lcd_set_cursor+0x1a8>)
 800481a:	799b      	ldrb	r3, [r3, #6]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d11e      	bne.n	800485e <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 8004820:	4b60      	ldr	r3, [pc, #384]	; (80049a4 <lcd_set_cursor+0x1a8>)
 8004822:	881a      	ldrh	r2, [r3, #0]
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 800482e:	4b5d      	ldr	r3, [pc, #372]	; (80049a4 <lcd_set_cursor+0x1a8>)
 8004830:	895b      	ldrh	r3, [r3, #10]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff ff96 	bl	8004764 <lcd_wr_regno>
            lcd_wr_data(0);
 8004838:	2000      	movs	r0, #0
 800483a:	f7ff ff7f 	bl	800473c <lcd_wr_data>
            lcd_wr_data(0);
 800483e:	2000      	movs	r0, #0
 8004840:	f7ff ff7c 	bl	800473c <lcd_wr_data>
            lcd_wr_data(x >> 8);
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	b29b      	uxth	r3, r3
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff ff76 	bl	800473c <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	b29b      	uxth	r3, r3
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff ff70 	bl	800473c <lcd_wr_data>
 800485c:	e021      	b.n	80048a2 <lcd_set_cursor+0xa6>
        }
        else                    /* landscape mode */
        {
            lcd_wr_regno(lcddev.setxcmd);
 800485e:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <lcd_set_cursor+0x1a8>)
 8004860:	895b      	ldrh	r3, [r3, #10]
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff ff7e 	bl	8004764 <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	0a1b      	lsrs	r3, r3, #8
 800486c:	b29b      	uxth	r3, r3
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ff64 	bl	800473c <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	b29b      	uxth	r3, r3
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ff5e 	bl	800473c <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 8004880:	4b48      	ldr	r3, [pc, #288]	; (80049a4 <lcd_set_cursor+0x1a8>)
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	3b01      	subs	r3, #1
 8004886:	121b      	asrs	r3, r3, #8
 8004888:	b29b      	uxth	r3, r3
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff ff56 	bl	800473c <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8004890:	4b44      	ldr	r3, [pc, #272]	; (80049a4 <lcd_set_cursor+0x1a8>)
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	3b01      	subs	r3, #1
 8004896:	b29b      	uxth	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	b29b      	uxth	r3, r3
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ff4d 	bl	800473c <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 80048a2:	4b40      	ldr	r3, [pc, #256]	; (80049a4 <lcd_set_cursor+0x1a8>)
 80048a4:	899b      	ldrh	r3, [r3, #12]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff ff5c 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 80048ac:	88bb      	ldrh	r3, [r7, #4]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff ff42 	bl	800473c <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 80048b8:	88bb      	ldrh	r3, [r7, #4]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ff3c 	bl	800473c <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 80048c4:	4b37      	ldr	r3, [pc, #220]	; (80049a4 <lcd_set_cursor+0x1a8>)
 80048c6:	885b      	ldrh	r3, [r3, #2]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	121b      	asrs	r3, r3, #8
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ff34 	bl	800473c <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80048d4:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <lcd_set_cursor+0x1a8>)
 80048d6:	885b      	ldrh	r3, [r3, #2]
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29b      	uxth	r3, r3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff ff2b 	bl	800473c <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 80048e6:	e058      	b.n	800499a <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0X5510)
 80048e8:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <lcd_set_cursor+0x1a8>)
 80048ea:	889b      	ldrh	r3, [r3, #4]
 80048ec:	f245 5210 	movw	r2, #21776	; 0x5510
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d130      	bne.n	8004956 <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 80048f4:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <lcd_set_cursor+0x1a8>)
 80048f6:	895b      	ldrh	r3, [r3, #10]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff33 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	0a1b      	lsrs	r3, r3, #8
 8004902:	b29b      	uxth	r3, r3
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff19 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 800490a:	4b26      	ldr	r3, [pc, #152]	; (80049a4 <lcd_set_cursor+0x1a8>)
 800490c:	895b      	ldrh	r3, [r3, #10]
 800490e:	3301      	adds	r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ff26 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(x & 0XFF);
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	b29b      	uxth	r3, r3
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff ff0c 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8004924:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <lcd_set_cursor+0x1a8>)
 8004926:	899b      	ldrh	r3, [r3, #12]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ff1b 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 800492e:	88bb      	ldrh	r3, [r7, #4]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	b29b      	uxth	r3, r3
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff ff01 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 800493a:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <lcd_set_cursor+0x1a8>)
 800493c:	899b      	ldrh	r3, [r3, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	b29b      	uxth	r3, r3
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff ff0e 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(y & 0XFF);
 8004948:	88bb      	ldrh	r3, [r7, #4]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	b29b      	uxth	r3, r3
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fef4 	bl	800473c <lcd_wr_data>
}
 8004954:	e021      	b.n	800499a <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <lcd_set_cursor+0x1a8>)
 8004958:	895b      	ldrh	r3, [r3, #10]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff02 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	b29b      	uxth	r3, r3
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fee8 	bl	800473c <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	b29b      	uxth	r3, r3
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fee2 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8004978:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <lcd_set_cursor+0x1a8>)
 800497a:	899b      	ldrh	r3, [r3, #12]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fef1 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8004982:	88bb      	ldrh	r3, [r7, #4]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	b29b      	uxth	r3, r3
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff fed7 	bl	800473c <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 800498e:	88bb      	ldrh	r3, [r7, #4]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	b29b      	uxth	r3, r3
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fed1 	bl	800473c <lcd_wr_data>
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	200001b8 	.word	0x200001b8

080049a8 <lcd_scan_dir>:
 * @brief   Set the automatic scanning direction of LCD
 * @param   dir: 0 to 7, representing 8 directions (see lcd.h for definitions)
 * @retval  None.
 */
void lcd_scan_dir(uint8_t dir)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;

    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 80049ba:	4b9c      	ldr	r3, [pc, #624]	; (8004c2c <lcd_scan_dir+0x284>)
 80049bc:	799b      	ldrb	r3, [r3, #6]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <lcd_scan_dir+0x26>
 80049c2:	4b9a      	ldr	r3, [pc, #616]	; (8004c2c <lcd_scan_dir+0x284>)
 80049c4:	889b      	ldrh	r3, [r3, #4]
 80049c6:	f641 1263 	movw	r2, #6499	; 0x1963
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d109      	bne.n	80049e2 <lcd_scan_dir+0x3a>
 80049ce:	4b97      	ldr	r3, [pc, #604]	; (8004c2c <lcd_scan_dir+0x284>)
 80049d0:	799b      	ldrb	r3, [r3, #6]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d134      	bne.n	8004a40 <lcd_scan_dir+0x98>
 80049d6:	4b95      	ldr	r3, [pc, #596]	; (8004c2c <lcd_scan_dir+0x284>)
 80049d8:	889b      	ldrh	r3, [r3, #4]
 80049da:	f641 1263 	movw	r2, #6499	; 0x1963
 80049de:	4293      	cmp	r3, r2
 80049e0:	d12e      	bne.n	8004a40 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* Change of direction */
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	2b07      	cmp	r3, #7
 80049e6:	d82b      	bhi.n	8004a40 <lcd_scan_dir+0x98>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <lcd_scan_dir+0x48>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a11 	.word	0x08004a11
 80049f4:	08004a17 	.word	0x08004a17
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a23 	.word	0x08004a23
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a2f 	.word	0x08004a2f
 8004a08:	08004a35 	.word	0x08004a35
 8004a0c:	08004a3b 	.word	0x08004a3b
        {
            case L2R_U2D:
                dir = D2U_L2R;
 8004a10:	2306      	movs	r3, #6
 8004a12:	71fb      	strb	r3, [r7, #7]
                break;
 8004a14:	e014      	b.n	8004a40 <lcd_scan_dir+0x98>

            case L2R_D2U:
                dir = D2U_R2L;
 8004a16:	2307      	movs	r3, #7
 8004a18:	71fb      	strb	r3, [r7, #7]
                break;
 8004a1a:	e011      	b.n	8004a40 <lcd_scan_dir+0x98>

            case R2L_U2D:
                dir = U2D_L2R;
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	71fb      	strb	r3, [r7, #7]
                break;
 8004a20:	e00e      	b.n	8004a40 <lcd_scan_dir+0x98>

            case R2L_D2U:
                dir = U2D_R2L;
 8004a22:	2305      	movs	r3, #5
 8004a24:	71fb      	strb	r3, [r7, #7]
                break;
 8004a26:	e00b      	b.n	8004a40 <lcd_scan_dir+0x98>

            case U2D_L2R:
                dir = L2R_D2U;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	71fb      	strb	r3, [r7, #7]
                break;
 8004a2c:	e008      	b.n	8004a40 <lcd_scan_dir+0x98>

            case U2D_R2L:
                dir = L2R_U2D;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	71fb      	strb	r3, [r7, #7]
                break;
 8004a32:	e005      	b.n	8004a40 <lcd_scan_dir+0x98>

            case D2U_L2R:
                dir = R2L_D2U;
 8004a34:	2303      	movs	r3, #3
 8004a36:	71fb      	strb	r3, [r7, #7]
                break;
 8004a38:	e002      	b.n	8004a40 <lcd_scan_dir+0x98>

            case D2U_R2L:
                dir = R2L_U2D;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	71fb      	strb	r3, [r7, #7]
                break;
 8004a3e:	bf00      	nop
        }
    }

    /* Set the value of 0X36/0X3600 register bit 5,6,7 according to the scan mode */
    switch (dir)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b07      	cmp	r3, #7
 8004a44:	d835      	bhi.n	8004ab2 <lcd_scan_dir+0x10a>
 8004a46:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <lcd_scan_dir+0xa4>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004ab3 	.word	0x08004ab3
 8004a50:	08004a6d 	.word	0x08004a6d
 8004a54:	08004a77 	.word	0x08004a77
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a8b 	.word	0x08004a8b
 8004a60:	08004a95 	.word	0x08004a95
 8004a64:	08004a9f 	.word	0x08004a9f
 8004a68:	08004aa9 	.word	0x08004aa9
        case L2R_U2D:/* From left to right, from top to bottom */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* From left to right, from bottom to top */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8004a6c:	89fb      	ldrh	r3, [r7, #14]
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a72:	81fb      	strh	r3, [r7, #14]
            break;
 8004a74:	e01d      	b.n	8004ab2 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* From right to left, from top to bottom */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7c:	81fb      	strh	r3, [r7, #14]
            break;
 8004a7e:	e018      	b.n	8004ab2 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* From right to left, from bottom to top */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8004a80:	89fb      	ldrh	r3, [r7, #14]
 8004a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a86:	81fb      	strh	r3, [r7, #14]
            break;
 8004a88:	e013      	b.n	8004ab2 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* From top to bottom, left to right */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8004a8a:	89fb      	ldrh	r3, [r7, #14]
 8004a8c:	f043 0320 	orr.w	r3, r3, #32
 8004a90:	81fb      	strh	r3, [r7, #14]
            break;
 8004a92:	e00e      	b.n	8004ab2 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* From top to bottom, right to left */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8004a94:	89fb      	ldrh	r3, [r7, #14]
 8004a96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a9a:	81fb      	strh	r3, [r7, #14]
            break;
 8004a9c:	e009      	b.n	8004ab2 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* From bottom to top, left to right */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8004a9e:	89fb      	ldrh	r3, [r7, #14]
 8004aa0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004aa4:	81fb      	strh	r3, [r7, #14]
            break;
 8004aa6:	e004      	b.n	8004ab2 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* From bottom to top, right to left */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8004aa8:	89fb      	ldrh	r3, [r7, #14]
 8004aaa:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004aae:	81fb      	strh	r3, [r7, #14]
            break;
 8004ab0:	bf00      	nop
    }

    if (lcddev.id == 0X5510)
 8004ab2:	4b5e      	ldr	r3, [pc, #376]	; (8004c2c <lcd_scan_dir+0x284>)
 8004ab4:	889b      	ldrh	r3, [r3, #4]
 8004ab6:	f245 5210 	movw	r2, #21776	; 0x5510
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d103      	bne.n	8004ac6 <lcd_scan_dir+0x11e>
    {
        dirreg = 0X3600;    /* For 5510, there is a difference between the registers of the other driver ics */
 8004abe:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8004ac2:	81bb      	strh	r3, [r7, #12]
 8004ac4:	e001      	b.n	8004aca <lcd_scan_dir+0x122>
    }
    else
    {
    	dirreg = 0X36;  /* For most driver ics, it is controlled by the 0X36 register */
 8004ac6:	2336      	movs	r3, #54	; 0x36
 8004ac8:	81bb      	strh	r3, [r7, #12]
    }

    /* 9341 & 7789 & 7796 to set the BGR bit */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 8004aca:	4b58      	ldr	r3, [pc, #352]	; (8004c2c <lcd_scan_dir+0x284>)
 8004acc:	889b      	ldrh	r3, [r3, #4]
 8004ace:	f249 3241 	movw	r2, #37697	; 0x9341
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <lcd_scan_dir+0x146>
 8004ad6:	4b55      	ldr	r3, [pc, #340]	; (8004c2c <lcd_scan_dir+0x284>)
 8004ad8:	889b      	ldrh	r3, [r3, #4]
 8004ada:	f247 7289 	movw	r2, #30601	; 0x7789
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d005      	beq.n	8004aee <lcd_scan_dir+0x146>
 8004ae2:	4b52      	ldr	r3, [pc, #328]	; (8004c2c <lcd_scan_dir+0x284>)
 8004ae4:	889b      	ldrh	r3, [r3, #4]
 8004ae6:	f247 7296 	movw	r2, #30614	; 0x7796
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d103      	bne.n	8004af6 <lcd_scan_dir+0x14e>
    {
        regval |= 0X08;
 8004aee:	89fb      	ldrh	r3, [r7, #14]
 8004af0:	f043 0308 	orr.w	r3, r3, #8
 8004af4:	81fb      	strh	r3, [r7, #14]
    }

    lcd_write_reg(dirreg, regval);
 8004af6:	89fa      	ldrh	r2, [r7, #14]
 8004af8:	89bb      	ldrh	r3, [r7, #12]
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fe45 	bl	800478c <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963 no coordinate manipulation */
 8004b02:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b04:	889b      	ldrh	r3, [r3, #4]
 8004b06:	f641 1263 	movw	r2, #6499	; 0x1963
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d025      	beq.n	8004b5a <lcd_scan_dir+0x1b2>
    {
        if (regval & 0X20)
 8004b0e:	89fb      	ldrh	r3, [r7, #14]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <lcd_scan_dir+0x192>
        {
            if (lcddev.width < lcddev.height)   /* Swap X and Y */
 8004b18:	4b44      	ldr	r3, [pc, #272]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b1a:	881a      	ldrh	r2, [r3, #0]
 8004b1c:	4b43      	ldr	r3, [pc, #268]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b1e:	885b      	ldrh	r3, [r3, #2]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d21a      	bcs.n	8004b5a <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 8004b24:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8004b2a:	4b40      	ldr	r3, [pc, #256]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b2c:	885a      	ldrh	r2, [r3, #2]
 8004b2e:	4b3f      	ldr	r3, [pc, #252]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b30:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8004b32:	4a3e      	ldr	r2, [pc, #248]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b34:	897b      	ldrh	r3, [r7, #10]
 8004b36:	8053      	strh	r3, [r2, #2]
 8004b38:	e00f      	b.n	8004b5a <lcd_scan_dir+0x1b2>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* Swap X and Y */
 8004b3a:	4b3c      	ldr	r3, [pc, #240]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b40:	885b      	ldrh	r3, [r3, #2]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d909      	bls.n	8004b5a <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8004b4c:	4b37      	ldr	r3, [pc, #220]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b4e:	885a      	ldrh	r2, [r3, #2]
 8004b50:	4b36      	ldr	r3, [pc, #216]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b52:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8004b54:	4a35      	ldr	r2, [pc, #212]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* Set the size of the display area (window) */
    if (lcddev.id == 0X5510)
 8004b5a:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b5c:	889b      	ldrh	r3, [r3, #4]
 8004b5e:	f245 5210 	movw	r2, #21776	; 0x5510
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d164      	bne.n	8004c30 <lcd_scan_dir+0x288>
    {
        lcd_wr_regno(lcddev.setxcmd);
 8004b66:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b68:	895b      	ldrh	r3, [r3, #10]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fdfa 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(0);
 8004b70:	2000      	movs	r0, #0
 8004b72:	f7ff fde3 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 8004b76:	4b2d      	ldr	r3, [pc, #180]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b78:	895b      	ldrh	r3, [r3, #10]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff fdf0 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(0);
 8004b84:	2000      	movs	r0, #0
 8004b86:	f7ff fdd9 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 2);
 8004b8a:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b8c:	895b      	ldrh	r3, [r3, #10]
 8004b8e:	3302      	adds	r3, #2
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fde6 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8004b98:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <lcd_scan_dir+0x284>)
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	121b      	asrs	r3, r3, #8
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fdca 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 3);
 8004ba8:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <lcd_scan_dir+0x284>)
 8004baa:	895b      	ldrh	r3, [r3, #10]
 8004bac:	3303      	adds	r3, #3
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fdd7 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <lcd_scan_dir+0x284>)
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fdba 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8004bc8:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <lcd_scan_dir+0x284>)
 8004bca:	899b      	ldrh	r3, [r3, #12]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fdc9 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(0);
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f7ff fdb2 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 8004bd8:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <lcd_scan_dir+0x284>)
 8004bda:	899b      	ldrh	r3, [r3, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fdbf 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(0);
 8004be6:	2000      	movs	r0, #0
 8004be8:	f7ff fda8 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 2);
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <lcd_scan_dir+0x284>)
 8004bee:	899b      	ldrh	r3, [r3, #12]
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fdb5 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <lcd_scan_dir+0x284>)
 8004bfc:	885b      	ldrh	r3, [r3, #2]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	121b      	asrs	r3, r3, #8
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fd99 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 3);
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <lcd_scan_dir+0x284>)
 8004c0c:	899b      	ldrh	r3, [r3, #12]
 8004c0e:	3303      	adds	r3, #3
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fda6 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <lcd_scan_dir+0x284>)
 8004c1a:	885b      	ldrh	r3, [r3, #2]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fd89 	bl	800473c <lcd_wr_data>
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 8004c2a:	e039      	b.n	8004ca0 <lcd_scan_dir+0x2f8>
 8004c2c:	200001b8 	.word	0x200001b8
        lcd_wr_regno(lcddev.setxcmd);
 8004c30:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <lcd_scan_dir+0x300>)
 8004c32:	895b      	ldrh	r3, [r3, #10]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fd95 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(0);
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f7ff fd7e 	bl	800473c <lcd_wr_data>
        lcd_wr_data(0);
 8004c40:	2000      	movs	r0, #0
 8004c42:	f7ff fd7b 	bl	800473c <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8004c46:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <lcd_scan_dir+0x300>)
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	121b      	asrs	r3, r3, #8
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fd73 	bl	800473c <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <lcd_scan_dir+0x300>)
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fd6a 	bl	800473c <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <lcd_scan_dir+0x300>)
 8004c6a:	899b      	ldrh	r3, [r3, #12]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fd79 	bl	8004764 <lcd_wr_regno>
        lcd_wr_data(0);
 8004c72:	2000      	movs	r0, #0
 8004c74:	f7ff fd62 	bl	800473c <lcd_wr_data>
        lcd_wr_data(0);
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f7ff fd5f 	bl	800473c <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <lcd_scan_dir+0x300>)
 8004c80:	885b      	ldrh	r3, [r3, #2]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	121b      	asrs	r3, r3, #8
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fd57 	bl	800473c <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <lcd_scan_dir+0x300>)
 8004c90:	885b      	ldrh	r3, [r3, #2]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff fd4e 	bl	800473c <lcd_wr_data>
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	200001b8 	.word	0x200001b8

08004cac <lcd_draw_point>:
 * @param   x,y  : coordinate
 * @param   color: Point color
 * @retval  None.
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	603a      	str	r2, [r7, #0]
 8004cb6:	80fb      	strh	r3, [r7, #6]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* Sets the cursor position */
 8004cbc:	88ba      	ldrh	r2, [r7, #4]
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fd9a 	bl	80047fc <lcd_set_cursor>
    lcd_write_ram_prepare();    /* Start writing GRAM */
 8004cc8:	f7ff fd88 	bl	80047dc <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <lcd_draw_point+0x30>)
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	805a      	strh	r2, [r3, #2]
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	600ffffe 	.word	0x600ffffe

08004ce0 <lcd_ssd_backlight_set>:
 * @brief   SSD1963 backlight brightness setting function
 * @param   pwm  : Backlight level,0~100. The larger the brighter.
 * @retval  None.
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]
    lcd_wr_regno(0xBE);         /* Configure PWM output */
 8004cea:	20be      	movs	r0, #190	; 0xbe
 8004cec:	f7ff fd3a 	bl	8004764 <lcd_wr_regno>
    lcd_wr_data(0x05);          /* 1 Set the PWM frequency */
 8004cf0:	2005      	movs	r0, #5
 8004cf2:	f7ff fd23 	bl	800473c <lcd_wr_data>
    lcd_wr_data(pwm * 2.55);    /* 2 Set the PWM duty cycle */
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fb fd35 	bl	8000768 <__aeabi_i2d>
 8004cfe:	a310      	add	r3, pc, #64	; (adr r3, 8004d40 <lcd_ssd_backlight_set+0x60>)
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	f7fb fab4 	bl	8000270 <__aeabi_dmul>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f7fb fd94 	bl	800083c <__aeabi_d2uiz>
 8004d14:	4603      	mov	r3, r0
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fd0f 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x01);          /* 3 Setting C */
 8004d1e:	2001      	movs	r0, #1
 8004d20:	f7ff fd0c 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0xFF);          /* 4 Setting D */
 8004d24:	20ff      	movs	r0, #255	; 0xff
 8004d26:	f7ff fd09 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);          /* 5 Setting E */
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f7ff fd06 	bl	800473c <lcd_wr_data>
    lcd_wr_data(0x00);          /* 6 Setting F */
 8004d30:	2000      	movs	r0, #0
 8004d32:	f7ff fd03 	bl	800473c <lcd_wr_data>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	66666666 	.word	0x66666666
 8004d44:	40046666 	.word	0x40046666

08004d48 <lcd_display_dir>:
 * @brief   Set the LCD display orientation
 * @param   dir  : 0, portrait; 1. Landscape
 * @retval  None.
 */
void lcd_display_dir(uint8_t dir)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* Portrait/landscape */
 8004d52:	4a68      	ldr	r2, [pc, #416]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* Portrait */
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d165      	bne.n	8004e2a <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8004d5e:	4b65      	ldr	r3, [pc, #404]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004d60:	22f0      	movs	r2, #240	; 0xf0
 8004d62:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8004d64:	4b63      	ldr	r3, [pc, #396]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004d66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d6a:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8004d6c:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004d6e:	889b      	ldrh	r3, [r3, #4]
 8004d70:	f245 5210 	movw	r2, #21776	; 0x5510
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d114      	bne.n	8004da2 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8004d78:	4b5e      	ldr	r3, [pc, #376]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004d7a:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004d7e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8004d80:	4b5c      	ldr	r3, [pc, #368]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004d82:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8004d86:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8004d88:	4b5a      	ldr	r3, [pc, #360]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004d8a:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8004d8e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8004d90:	4b58      	ldr	r3, [pc, #352]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004d92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004d96:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8004d98:	4b56      	ldr	r3, [pc, #344]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004d9a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004d9e:	805a      	strh	r2, [r3, #2]
 8004da0:	e020      	b.n	8004de4 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8004da2:	4b54      	ldr	r3, [pc, #336]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004da4:	889b      	ldrh	r3, [r3, #4]
 8004da6:	f641 1263 	movw	r2, #6499	; 0x1963
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d111      	bne.n	8004dd2 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8004dae:	4b51      	ldr	r3, [pc, #324]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004db0:	222c      	movs	r2, #44	; 0x2c
 8004db2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* Set the write x-coordinate instruction */
 8004db4:	4b4f      	ldr	r3, [pc, #316]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004db6:	222b      	movs	r2, #43	; 0x2b
 8004db8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* Set the write y-coordinate instruction */
 8004dba:	4b4e      	ldr	r3, [pc, #312]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004dbc:	222a      	movs	r2, #42	; 0x2a
 8004dbe:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* Set width 480 */
 8004dc0:	4b4c      	ldr	r3, [pc, #304]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004dc2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004dc6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* Set height 800 */
 8004dc8:	4b4a      	ldr	r3, [pc, #296]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004dca:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004dce:	805a      	strh	r2, [r3, #2]
 8004dd0:	e008      	b.n	8004de4 <lcd_display_dir+0x9c>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 8004dd2:	4b48      	ldr	r3, [pc, #288]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004dd4:	222c      	movs	r2, #44	; 0x2c
 8004dd6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8004dd8:	4b46      	ldr	r3, [pc, #280]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004dda:	222a      	movs	r2, #42	; 0x2a
 8004ddc:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8004dde:	4b45      	ldr	r3, [pc, #276]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004de0:	222b      	movs	r2, #43	; 0x2b
 8004de2:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8004de4:	4b43      	ldr	r3, [pc, #268]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004de6:	889b      	ldrh	r3, [r3, #4]
 8004de8:	f245 3210 	movw	r2, #21264	; 0x5310
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d005      	beq.n	8004dfc <lcd_display_dir+0xb4>
 8004df0:	4b40      	ldr	r3, [pc, #256]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004df2:	889b      	ldrh	r3, [r3, #4]
 8004df4:	f247 7296 	movw	r2, #30614	; 0x7796
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d107      	bne.n	8004e0c <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8004dfc:	4b3d      	ldr	r3, [pc, #244]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004dfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e02:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8004e04:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004e0a:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* 9806 means 480*800 resolution */
 8004e0c:	4b39      	ldr	r3, [pc, #228]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e0e:	889b      	ldrh	r3, [r3, #4]
 8004e10:	f649 0206 	movw	r2, #38918	; 0x9806
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d165      	bne.n	8004ee4 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8004e18:	4b36      	ldr	r3, [pc, #216]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004e1e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8004e20:	4b34      	ldr	r3, [pc, #208]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004e26:	805a      	strh	r2, [r3, #2]
 8004e28:	e05c      	b.n	8004ee4 <lcd_display_dir+0x19c>
        }
    }
    else                            /* landscape */
    {
        lcddev.width = 320;         /* Default width */
 8004e2a:	4b32      	ldr	r3, [pc, #200]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e30:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Default height */
 8004e32:	4b30      	ldr	r3, [pc, #192]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e34:	22f0      	movs	r2, #240	; 0xf0
 8004e36:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8004e38:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e3a:	889b      	ldrh	r3, [r3, #4]
 8004e3c:	f245 5210 	movw	r2, #21776	; 0x5510
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d114      	bne.n	8004e6e <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8004e44:	4b2b      	ldr	r3, [pc, #172]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e46:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004e4a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8004e4c:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e4e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8004e52:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8004e54:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e56:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8004e5a:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8004e5c:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e5e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004e62:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8004e64:	4b23      	ldr	r3, [pc, #140]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004e6a:	805a      	strh	r2, [r3, #2]
 8004e6c:	e026      	b.n	8004ebc <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8004e6e:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e70:	889b      	ldrh	r3, [r3, #4]
 8004e72:	f641 1263 	movw	r2, #6499	; 0x1963
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d005      	beq.n	8004e86 <lcd_display_dir+0x13e>
 8004e7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e7c:	889b      	ldrh	r3, [r3, #4]
 8004e7e:	f649 0206 	movw	r2, #38918	; 0x9806
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d111      	bne.n	8004eaa <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8004e86:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e88:	222c      	movs	r2, #44	; 0x2c
 8004e8a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* Set the write x-coordinate instruction */
 8004e8c:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e8e:	222a      	movs	r2, #42	; 0x2a
 8004e90:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* Set the write y-coordinate instruction */
 8004e92:	4b18      	ldr	r3, [pc, #96]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e94:	222b      	movs	r2, #43	; 0x2b
 8004e96:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* Set width 800 */
 8004e98:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004e9a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004e9e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* Set height 480 */
 8004ea0:	4b14      	ldr	r3, [pc, #80]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004ea2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004ea6:	805a      	strh	r2, [r3, #2]
 8004ea8:	e008      	b.n	8004ebc <lcd_display_dir+0x174>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004eac:	222c      	movs	r2, #44	; 0x2c
 8004eae:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004eb2:	222a      	movs	r2, #42	; 0x2a
 8004eb4:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004eb8:	222b      	movs	r2, #43	; 0x2b
 8004eba:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004ebe:	889b      	ldrh	r3, [r3, #4]
 8004ec0:	f245 3210 	movw	r2, #21264	; 0x5310
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d005      	beq.n	8004ed4 <lcd_display_dir+0x18c>
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004eca:	889b      	ldrh	r3, [r3, #4]
 8004ecc:	f247 7296 	movw	r2, #30614	; 0x7796
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d107      	bne.n	8004ee4 <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004ed6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004eda:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <lcd_display_dir+0x1ac>)
 8004ede:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ee2:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Default scan direction */
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f7ff fd5f 	bl	80049a8 <lcd_scan_dir>
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200001b8 	.word	0x200001b8

08004ef8 <lcd_init>:
 * @note    This initialization function can initialize various types of LCD
 * @param   None.
 * @retval  None.
 */
void lcd_init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
	FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8004efe:	1d3b      	adds	r3, r7, #4
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	611a      	str	r2, [r3, #16]
 8004f0c:	615a      	str	r2, [r3, #20]
 8004f0e:	619a      	str	r2, [r3, #24]

	HAL_Delay(50);        /* After initializing the FSMC, a certain amount of time must be waited before the initialization can start */
 8004f10:	2032      	movs	r0, #50	; 0x32
 8004f12:	f001 fb69 	bl	80065e8 <HAL_Delay>

    /* Try a read of 9341 ID */
    lcd_wr_regno(0XD3);
 8004f16:	20d3      	movs	r0, #211	; 0xd3
 8004f18:	f7ff fc24 	bl	8004764 <lcd_wr_regno>
    lcddev.id = lcd_rd_data();  /* dummy read */
 8004f1c:	f7ff fc4c 	bl	80047b8 <lcd_rd_data>
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	4bb0      	ldr	r3, [pc, #704]	; (80051e8 <lcd_init+0x2f0>)
 8004f26:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8004f28:	f7ff fc46 	bl	80047b8 <lcd_rd_data>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4bad      	ldr	r3, [pc, #692]	; (80051e8 <lcd_init+0x2f0>)
 8004f32:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read 0X93 */
 8004f34:	f7ff fc40 	bl	80047b8 <lcd_rd_data>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4baa      	ldr	r3, [pc, #680]	; (80051e8 <lcd_init+0x2f0>)
 8004f3e:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8004f40:	4ba9      	ldr	r3, [pc, #676]	; (80051e8 <lcd_init+0x2f0>)
 8004f42:	889b      	ldrh	r3, [r3, #4]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	4ba7      	ldr	r3, [pc, #668]	; (80051e8 <lcd_init+0x2f0>)
 8004f4a:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* Read 0X41 */
 8004f4c:	f7ff fc34 	bl	80047b8 <lcd_rd_data>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	4ba4      	ldr	r3, [pc, #656]	; (80051e8 <lcd_init+0x2f0>)
 8004f56:	889b      	ldrh	r3, [r3, #4]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	4ba2      	ldr	r3, [pc, #648]	; (80051e8 <lcd_init+0x2f0>)
 8004f5e:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* Not 9341, try to see if it's ST7789 */
 8004f60:	4ba1      	ldr	r3, [pc, #644]	; (80051e8 <lcd_init+0x2f0>)
 8004f62:	889b      	ldrh	r3, [r3, #4]
 8004f64:	f249 3241 	movw	r2, #37697	; 0x9341
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	f000 8122 	beq.w	80051b2 <lcd_init+0x2ba>
    {
        lcd_wr_regno(0X04);
 8004f6e:	2004      	movs	r0, #4
 8004f70:	f7ff fbf8 	bl	8004764 <lcd_wr_regno>
        lcddev.id = lcd_rd_data();      /* dummy read */
 8004f74:	f7ff fc20 	bl	80047b8 <lcd_rd_data>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4b9a      	ldr	r3, [pc, #616]	; (80051e8 <lcd_init+0x2f0>)
 8004f7e:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read to 0X85 */
 8004f80:	f7ff fc1a 	bl	80047b8 <lcd_rd_data>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b97      	ldr	r3, [pc, #604]	; (80051e8 <lcd_init+0x2f0>)
 8004f8a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read 0X85 */
 8004f8c:	f7ff fc14 	bl	80047b8 <lcd_rd_data>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b94      	ldr	r3, [pc, #592]	; (80051e8 <lcd_init+0x2f0>)
 8004f96:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8004f98:	4b93      	ldr	r3, [pc, #588]	; (80051e8 <lcd_init+0x2f0>)
 8004f9a:	889b      	ldrh	r3, [r3, #4]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	4b91      	ldr	r3, [pc, #580]	; (80051e8 <lcd_init+0x2f0>)
 8004fa2:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* Read 0X52 */
 8004fa4:	f7ff fc08 	bl	80047b8 <lcd_rd_data>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	4b8e      	ldr	r3, [pc, #568]	; (80051e8 <lcd_init+0x2f0>)
 8004fae:	889b      	ldrh	r3, [r3, #4]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	4b8c      	ldr	r3, [pc, #560]	; (80051e8 <lcd_init+0x2f0>)
 8004fb6:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        /* Convert the ID of 8552 to 7789 */
 8004fb8:	4b8b      	ldr	r3, [pc, #556]	; (80051e8 <lcd_init+0x2f0>)
 8004fba:	889b      	ldrh	r3, [r3, #4]
 8004fbc:	f248 5252 	movw	r2, #34130	; 0x8552
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d103      	bne.n	8004fcc <lcd_init+0xd4>
        {
            lcddev.id = 0x7789;
 8004fc4:	4b88      	ldr	r3, [pc, #544]	; (80051e8 <lcd_init+0x2f0>)
 8004fc6:	f247 7289 	movw	r2, #30601	; 0x7789
 8004fca:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Also not ST7789, try not NT35310 */
 8004fcc:	4b86      	ldr	r3, [pc, #536]	; (80051e8 <lcd_init+0x2f0>)
 8004fce:	889b      	ldrh	r3, [r3, #4]
 8004fd0:	f247 7289 	movw	r2, #30601	; 0x7789
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	f000 80ec 	beq.w	80051b2 <lcd_init+0x2ba>
        {
            lcd_wr_regno(0xD4);
 8004fda:	20d4      	movs	r0, #212	; 0xd4
 8004fdc:	f7ff fbc2 	bl	8004764 <lcd_wr_regno>
            lcddev.id = lcd_rd_data();  /* dummy read */
 8004fe0:	f7ff fbea 	bl	80047b8 <lcd_rd_data>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b7f      	ldr	r3, [pc, #508]	; (80051e8 <lcd_init+0x2f0>)
 8004fea:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x01 */
 8004fec:	f7ff fbe4 	bl	80047b8 <lcd_rd_data>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b7c      	ldr	r3, [pc, #496]	; (80051e8 <lcd_init+0x2f0>)
 8004ff6:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x53 */
 8004ff8:	f7ff fbde 	bl	80047b8 <lcd_rd_data>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b79      	ldr	r3, [pc, #484]	; (80051e8 <lcd_init+0x2f0>)
 8005002:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8005004:	4b78      	ldr	r3, [pc, #480]	; (80051e8 <lcd_init+0x2f0>)
 8005006:	889b      	ldrh	r3, [r3, #4]
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	b29a      	uxth	r2, r3
 800500c:	4b76      	ldr	r3, [pc, #472]	; (80051e8 <lcd_init+0x2f0>)
 800500e:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8005010:	f7ff fbd2 	bl	80047b8 <lcd_rd_data>
 8005014:	4603      	mov	r3, r0
 8005016:	461a      	mov	r2, r3
 8005018:	4b73      	ldr	r3, [pc, #460]	; (80051e8 <lcd_init+0x2f0>)
 800501a:	889b      	ldrh	r3, [r3, #4]
 800501c:	4313      	orrs	r3, r2
 800501e:	b29a      	uxth	r2, r3
 8005020:	4b71      	ldr	r3, [pc, #452]	; (80051e8 <lcd_init+0x2f0>)
 8005022:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Also not NT35310, try to see if it is ST7796 */
 8005024:	4b70      	ldr	r3, [pc, #448]	; (80051e8 <lcd_init+0x2f0>)
 8005026:	889b      	ldrh	r3, [r3, #4]
 8005028:	f245 3210 	movw	r2, #21264	; 0x5310
 800502c:	4293      	cmp	r3, r2
 800502e:	f000 80c0 	beq.w	80051b2 <lcd_init+0x2ba>
            {
                lcd_wr_regno(0XD3);
 8005032:	20d3      	movs	r0, #211	; 0xd3
 8005034:	f7ff fb96 	bl	8004764 <lcd_wr_regno>
                lcddev.id = lcd_rd_data();  /* dummy read */
 8005038:	f7ff fbbe 	bl	80047b8 <lcd_rd_data>
 800503c:	4603      	mov	r3, r0
 800503e:	461a      	mov	r2, r3
 8005040:	4b69      	ldr	r3, [pc, #420]	; (80051e8 <lcd_init+0x2f0>)
 8005042:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8005044:	f7ff fbb8 	bl	80047b8 <lcd_rd_data>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	4b66      	ldr	r3, [pc, #408]	; (80051e8 <lcd_init+0x2f0>)
 800504e:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read 0X77 */
 8005050:	f7ff fbb2 	bl	80047b8 <lcd_rd_data>
 8005054:	4603      	mov	r3, r0
 8005056:	461a      	mov	r2, r3
 8005058:	4b63      	ldr	r3, [pc, #396]	; (80051e8 <lcd_init+0x2f0>)
 800505a:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 800505c:	4b62      	ldr	r3, [pc, #392]	; (80051e8 <lcd_init+0x2f0>)
 800505e:	889b      	ldrh	r3, [r3, #4]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	b29a      	uxth	r2, r3
 8005064:	4b60      	ldr	r3, [pc, #384]	; (80051e8 <lcd_init+0x2f0>)
 8005066:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* Read 0X96 */
 8005068:	f7ff fba6 	bl	80047b8 <lcd_rd_data>
 800506c:	4603      	mov	r3, r0
 800506e:	461a      	mov	r2, r3
 8005070:	4b5d      	ldr	r3, [pc, #372]	; (80051e8 <lcd_init+0x2f0>)
 8005072:	889b      	ldrh	r3, [r3, #4]
 8005074:	4313      	orrs	r3, r2
 8005076:	b29a      	uxth	r2, r3
 8005078:	4b5b      	ldr	r3, [pc, #364]	; (80051e8 <lcd_init+0x2f0>)
 800507a:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0x7796)    /* Also not ST7796, try to see if it is NT35510 */
 800507c:	4b5a      	ldr	r3, [pc, #360]	; (80051e8 <lcd_init+0x2f0>)
 800507e:	889b      	ldrh	r3, [r3, #4]
 8005080:	f247 7296 	movw	r2, #30614	; 0x7796
 8005084:	4293      	cmp	r3, r2
 8005086:	f000 8094 	beq.w	80051b2 <lcd_init+0x2ba>
                {
                    /* Send key (provided by manufacturer) */
                    lcd_write_reg(0xF000, 0x0055);
 800508a:	2155      	movs	r1, #85	; 0x55
 800508c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005090:	f7ff fb7c 	bl	800478c <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8005094:	21aa      	movs	r1, #170	; 0xaa
 8005096:	f24f 0001 	movw	r0, #61441	; 0xf001
 800509a:	f7ff fb77 	bl	800478c <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 800509e:	2152      	movs	r1, #82	; 0x52
 80050a0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80050a4:	f7ff fb72 	bl	800478c <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 80050a8:	2108      	movs	r1, #8
 80050aa:	f24f 0003 	movw	r0, #61443	; 0xf003
 80050ae:	f7ff fb6d 	bl	800478c <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 80050b2:	2101      	movs	r1, #1
 80050b4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80050b8:	f7ff fb68 	bl	800478c <lcd_write_reg>

                    lcd_wr_regno(0xC500);       /* Read the lower eight bits of the ID */
 80050bc:	f44f 4045 	mov.w	r0, #50432	; 0xc500
 80050c0:	f7ff fb50 	bl	8004764 <lcd_wr_regno>
                    lcddev.id = lcd_rd_data();  /* Read back 0x55 */
 80050c4:	f7ff fb78 	bl	80047b8 <lcd_rd_data>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	4b46      	ldr	r3, [pc, #280]	; (80051e8 <lcd_init+0x2f0>)
 80050ce:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 80050d0:	4b45      	ldr	r3, [pc, #276]	; (80051e8 <lcd_init+0x2f0>)
 80050d2:	889b      	ldrh	r3, [r3, #4]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	4b43      	ldr	r3, [pc, #268]	; (80051e8 <lcd_init+0x2f0>)
 80050da:	809a      	strh	r2, [r3, #4]

                    lcd_wr_regno(0xC501);       /* Read the high eight bits of the ID */
 80050dc:	f24c 5001 	movw	r0, #50433	; 0xc501
 80050e0:	f7ff fb40 	bl	8004764 <lcd_wr_regno>
                    lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 80050e4:	f7ff fb68 	bl	80047b8 <lcd_rd_data>
 80050e8:	4603      	mov	r3, r0
 80050ea:	461a      	mov	r2, r3
 80050ec:	4b3e      	ldr	r3, [pc, #248]	; (80051e8 <lcd_init+0x2f0>)
 80050ee:	889b      	ldrh	r3, [r3, #4]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	4b3c      	ldr	r3, [pc, #240]	; (80051e8 <lcd_init+0x2f0>)
 80050f6:	809a      	strh	r2, [r3, #4]

                    HAL_Delay(5);                /* Wait 5ms, because instruction 0XC501 is a software reset instruction for 1963, wait 5ms for 1963 reset to complete */
 80050f8:	2005      	movs	r0, #5
 80050fa:	f001 fa75 	bl	80065e8 <HAL_Delay>

                    if (lcddev.id != 0x5510)    /* Also not NT5510, try to see if it is ILI9806 */
 80050fe:	4b3a      	ldr	r3, [pc, #232]	; (80051e8 <lcd_init+0x2f0>)
 8005100:	889b      	ldrh	r3, [r3, #4]
 8005102:	f245 5210 	movw	r2, #21776	; 0x5510
 8005106:	4293      	cmp	r3, r2
 8005108:	d053      	beq.n	80051b2 <lcd_init+0x2ba>
                    {
                        lcd_wr_regno(0XD3);
 800510a:	20d3      	movs	r0, #211	; 0xd3
 800510c:	f7ff fb2a 	bl	8004764 <lcd_wr_regno>
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8005110:	f7ff fb52 	bl	80047b8 <lcd_rd_data>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	4b33      	ldr	r3, [pc, #204]	; (80051e8 <lcd_init+0x2f0>)
 800511a:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X00 */
 800511c:	f7ff fb4c 	bl	80047b8 <lcd_rd_data>
 8005120:	4603      	mov	r3, r0
 8005122:	461a      	mov	r2, r3
 8005124:	4b30      	ldr	r3, [pc, #192]	; (80051e8 <lcd_init+0x2f0>)
 8005126:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X98 */
 8005128:	f7ff fb46 	bl	80047b8 <lcd_rd_data>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <lcd_init+0x2f0>)
 8005132:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8005134:	4b2c      	ldr	r3, [pc, #176]	; (80051e8 <lcd_init+0x2f0>)
 8005136:	889b      	ldrh	r3, [r3, #4]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	b29a      	uxth	r2, r3
 800513c:	4b2a      	ldr	r3, [pc, #168]	; (80051e8 <lcd_init+0x2f0>)
 800513e:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* Read back 0X06 */
 8005140:	f7ff fb3a 	bl	80047b8 <lcd_rd_data>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <lcd_init+0x2f0>)
 800514a:	889b      	ldrh	r3, [r3, #4]
 800514c:	4313      	orrs	r3, r2
 800514e:	b29a      	uxth	r2, r3
 8005150:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <lcd_init+0x2f0>)
 8005152:	809a      	strh	r2, [r3, #4]

                        if (lcddev.id != 0x9806)    /* Not ILI9806 either, try to see if it's SSD1963 */
 8005154:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <lcd_init+0x2f0>)
 8005156:	889b      	ldrh	r3, [r3, #4]
 8005158:	f649 0206 	movw	r2, #38918	; 0x9806
 800515c:	4293      	cmp	r3, r2
 800515e:	d028      	beq.n	80051b2 <lcd_init+0x2ba>
                        {
                            lcd_wr_regno(0xA1);
 8005160:	20a1      	movs	r0, #161	; 0xa1
 8005162:	f7ff faff 	bl	8004764 <lcd_wr_regno>
                            lcddev.id = lcd_rd_data();
 8005166:	f7ff fb27 	bl	80047b8 <lcd_rd_data>
 800516a:	4603      	mov	r3, r0
 800516c:	461a      	mov	r2, r3
 800516e:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <lcd_init+0x2f0>)
 8005170:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* Read back 0x57 */
 8005172:	f7ff fb21 	bl	80047b8 <lcd_rd_data>
 8005176:	4603      	mov	r3, r0
 8005178:	461a      	mov	r2, r3
 800517a:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <lcd_init+0x2f0>)
 800517c:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 800517e:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <lcd_init+0x2f0>)
 8005180:	889b      	ldrh	r3, [r3, #4]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	b29a      	uxth	r2, r3
 8005186:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <lcd_init+0x2f0>)
 8005188:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* Read back 0x61 */
 800518a:	f7ff fb15 	bl	80047b8 <lcd_rd_data>
 800518e:	4603      	mov	r3, r0
 8005190:	461a      	mov	r2, r3
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <lcd_init+0x2f0>)
 8005194:	889b      	ldrh	r3, [r3, #4]
 8005196:	4313      	orrs	r3, r2
 8005198:	b29a      	uxth	r2, r3
 800519a:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <lcd_init+0x2f0>)
 800519c:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* The ID read back by SSD1963 is 5761H, which we force to be 1963 for convenience */
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <lcd_init+0x2f0>)
 80051a0:	889b      	ldrh	r3, [r3, #4]
 80051a2:	f245 7261 	movw	r2, #22369	; 0x5761
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d103      	bne.n	80051b2 <lcd_init+0x2ba>
 80051aa:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <lcd_init+0x2f0>)
 80051ac:	f641 1263 	movw	r2, #6499	; 0x1963
 80051b0:	809a      	strh	r2, [r3, #4]
                }
            }
        }
    }

    if (lcddev.id == 0X7789)
 80051b2:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <lcd_init+0x2f0>)
 80051b4:	889b      	ldrh	r3, [r3, #4]
 80051b6:	f247 7289 	movw	r2, #30601	; 0x7789
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d102      	bne.n	80051c4 <lcd_init+0x2cc>
    {
        lcd_ex_st7789_reginit();    /* Perform ST7789 initialization */
 80051be:	f7fc fe93 	bl	8001ee8 <lcd_ex_st7789_reginit>
 80051c2:	e039      	b.n	8005238 <lcd_init+0x340>
    }
    else if (lcddev.id == 0X9341)
 80051c4:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <lcd_init+0x2f0>)
 80051c6:	889b      	ldrh	r3, [r3, #4]
 80051c8:	f249 3241 	movw	r2, #37697	; 0x9341
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d102      	bne.n	80051d6 <lcd_init+0x2de>
    {
        lcd_ex_ili9341_reginit();   /* Perform ILI9341 initialization */
 80051d0:	f7fc ff60 	bl	8002094 <lcd_ex_ili9341_reginit>
 80051d4:	e030      	b.n	8005238 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x5310)
 80051d6:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <lcd_init+0x2f0>)
 80051d8:	889b      	ldrh	r3, [r3, #4]
 80051da:	f245 3210 	movw	r2, #21264	; 0x5310
 80051de:	4293      	cmp	r3, r2
 80051e0:	d104      	bne.n	80051ec <lcd_init+0x2f4>
    {
        lcd_ex_nt35310_reginit();   /* Perform NT35310 initialization */
 80051e2:	f7fd f86f 	bl	80022c4 <lcd_ex_nt35310_reginit>
 80051e6:	e027      	b.n	8005238 <lcd_init+0x340>
 80051e8:	200001b8 	.word	0x200001b8
    }
    else if (lcddev.id == 0x7796)
 80051ec:	4b44      	ldr	r3, [pc, #272]	; (8005300 <lcd_init+0x408>)
 80051ee:	889b      	ldrh	r3, [r3, #4]
 80051f0:	f247 7296 	movw	r2, #30614	; 0x7796
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d102      	bne.n	80051fe <lcd_init+0x306>
    {
        lcd_ex_st7796_reginit();    /* Perform ST7796 initialization */
 80051f8:	f7fd ffdf 	bl	80031ba <lcd_ex_st7796_reginit>
 80051fc:	e01c      	b.n	8005238 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x5510)
 80051fe:	4b40      	ldr	r3, [pc, #256]	; (8005300 <lcd_init+0x408>)
 8005200:	889b      	ldrh	r3, [r3, #4]
 8005202:	f245 5210 	movw	r2, #21776	; 0x5510
 8005206:	4293      	cmp	r3, r2
 8005208:	d102      	bne.n	8005210 <lcd_init+0x318>
    {
        lcd_ex_nt35510_reginit();   /* Perform NT35510 initialization */
 800520a:	f7fe f8bb 	bl	8003384 <lcd_ex_nt35510_reginit>
 800520e:	e013      	b.n	8005238 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x9806)
 8005210:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <lcd_init+0x408>)
 8005212:	889b      	ldrh	r3, [r3, #4]
 8005214:	f649 0206 	movw	r2, #38918	; 0x9806
 8005218:	4293      	cmp	r3, r2
 800521a:	d102      	bne.n	8005222 <lcd_init+0x32a>
    {
        lcd_ex_ili9806_reginit();   /* Perform ILI9806 initialization */
 800521c:	f7ff f832 	bl	8004284 <lcd_ex_ili9806_reginit>
 8005220:	e00a      	b.n	8005238 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x1963)
 8005222:	4b37      	ldr	r3, [pc, #220]	; (8005300 <lcd_init+0x408>)
 8005224:	889b      	ldrh	r3, [r3, #4]
 8005226:	f641 1263 	movw	r2, #6499	; 0x1963
 800522a:	4293      	cmp	r3, r2
 800522c:	d104      	bne.n	8005238 <lcd_init+0x340>
    {
        lcd_ex_ssd1963_reginit();   /* Perform SSD1963 initialization */
 800522e:	f7ff f9cb 	bl	80045c8 <lcd_ex_ssd1963_reginit>
        lcd_ssd_backlight_set(100); /* The backlight is set to its brightest */
 8005232:	2064      	movs	r0, #100	; 0x64
 8005234:	f7ff fd54 	bl	8004ce0 <lcd_ssd_backlight_set>
    }

    if (lcddev.id == 0x7789)
 8005238:	4b31      	ldr	r3, [pc, #196]	; (8005300 <lcd_init+0x408>)
 800523a:	889b      	ldrh	r3, [r3, #4]
 800523c:	f247 7289 	movw	r2, #30601	; 0x7789
 8005240:	4293      	cmp	r3, r2
 8005242:	d10d      	bne.n	8005260 <lcd_init+0x368>
    {
    	ExtTiming.AddressSetupTime = 3;
 8005244:	2303      	movs	r3, #3
 8005246:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 3;
 8005248:	2303      	movs	r3, #3
 800524a:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 800524c:	4b2d      	ldr	r3, [pc, #180]	; (8005304 <lcd_init+0x40c>)
 800524e:	6858      	ldr	r0, [r3, #4]
 8005250:	4b2c      	ldr	r3, [pc, #176]	; (8005304 <lcd_init+0x40c>)
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <lcd_init+0x40c>)
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	1d39      	adds	r1, r7, #4
 800525a:	f004 fcbd 	bl	8009bd8 <FSMC_NORSRAM_Extended_Timing_Init>
 800525e:	e03e      	b.n	80052de <lcd_init+0x3e6>
    }
    else if ((lcddev.id == 0x5310) ||
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <lcd_init+0x408>)
 8005262:	889b      	ldrh	r3, [r3, #4]
 8005264:	f245 3210 	movw	r2, #21264	; 0x5310
 8005268:	4293      	cmp	r3, r2
 800526a:	d017      	beq.n	800529c <lcd_init+0x3a4>
             (lcddev.id == 0x7796) ||
 800526c:	4b24      	ldr	r3, [pc, #144]	; (8005300 <lcd_init+0x408>)
 800526e:	889b      	ldrh	r3, [r3, #4]
    else if ((lcddev.id == 0x5310) ||
 8005270:	f247 7296 	movw	r2, #30614	; 0x7796
 8005274:	4293      	cmp	r3, r2
 8005276:	d011      	beq.n	800529c <lcd_init+0x3a4>
             (lcddev.id == 0x5510) ||
 8005278:	4b21      	ldr	r3, [pc, #132]	; (8005300 <lcd_init+0x408>)
 800527a:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x7796) ||
 800527c:	f245 5210 	movw	r2, #21776	; 0x5510
 8005280:	4293      	cmp	r3, r2
 8005282:	d00b      	beq.n	800529c <lcd_init+0x3a4>
             (lcddev.id == 0x9806) ||
 8005284:	4b1e      	ldr	r3, [pc, #120]	; (8005300 <lcd_init+0x408>)
 8005286:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x5510) ||
 8005288:	f649 0206 	movw	r2, #38918	; 0x9806
 800528c:	4293      	cmp	r3, r2
 800528e:	d005      	beq.n	800529c <lcd_init+0x3a4>
             (lcddev.id == 0x1963))
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <lcd_init+0x408>)
 8005292:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x9806) ||
 8005294:	f641 1263 	movw	r2, #6499	; 0x1963
 8005298:	4293      	cmp	r3, r2
 800529a:	d10d      	bne.n	80052b8 <lcd_init+0x3c0>
    {
    	ExtTiming.AddressSetupTime = 2;
 800529c:	2302      	movs	r3, #2
 800529e:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 2;
 80052a0:	2302      	movs	r3, #2
 80052a2:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 80052a4:	4b17      	ldr	r3, [pc, #92]	; (8005304 <lcd_init+0x40c>)
 80052a6:	6858      	ldr	r0, [r3, #4]
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <lcd_init+0x40c>)
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <lcd_init+0x40c>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	1d39      	adds	r1, r7, #4
 80052b2:	f004 fc91 	bl	8009bd8 <FSMC_NORSRAM_Extended_Timing_Init>
 80052b6:	e012      	b.n	80052de <lcd_init+0x3e6>
    }
    else if (lcddev.id == 0x9341)
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <lcd_init+0x408>)
 80052ba:	889b      	ldrh	r3, [r3, #4]
 80052bc:	f249 3241 	movw	r2, #37697	; 0x9341
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10c      	bne.n	80052de <lcd_init+0x3e6>
    {
    	ExtTiming.AddressSetupTime = 1;
 80052c4:	2301      	movs	r3, #1
 80052c6:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 1;
 80052c8:	2301      	movs	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 80052cc:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <lcd_init+0x40c>)
 80052ce:	6858      	ldr	r0, [r3, #4]
 80052d0:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <lcd_init+0x40c>)
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <lcd_init+0x40c>)
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	1d39      	adds	r1, r7, #4
 80052da:	f004 fc7d 	bl	8009bd8 <FSMC_NORSRAM_Extended_Timing_Init>
    }

    lcd_display_dir(0); /* Portrait is the default */
 80052de:	2000      	movs	r0, #0
 80052e0:	f7ff fd32 	bl	8004d48 <lcd_display_dir>
    LCD_BL(1);          /* Light up the backlight */
 80052e4:	2201      	movs	r2, #1
 80052e6:	2120      	movs	r1, #32
 80052e8:	4807      	ldr	r0, [pc, #28]	; (8005308 <lcd_init+0x410>)
 80052ea:	f001 fce1 	bl	8006cb0 <HAL_GPIO_WritePin>
    lcd_clear(WHITE);
 80052ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80052f2:	f000 f80b 	bl	800530c <lcd_clear>
}
 80052f6:	bf00      	nop
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200001b8 	.word	0x200001b8
 8005304:	200001c8 	.word	0x200001c8
 8005308:	40020400 	.word	0x40020400

0800530c <lcd_clear>:
 * @brief   Screen clearing function
 * @param   color : To clear the screen color
 * @retval  None.
 */
void lcd_clear(uint16_t color)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	60bb      	str	r3, [r7, #8]

    totalpoint = lcddev.width * lcddev.height;    /* Get the total points */
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <lcd_clear+0x54>)
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <lcd_clear+0x54>)
 8005326:	885b      	ldrh	r3, [r3, #2]
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	60bb      	str	r3, [r7, #8]
    lcd_set_cursor(0x00, 0x0000);   /* Sets the cursor position */
 800532e:	2100      	movs	r1, #0
 8005330:	2000      	movs	r0, #0
 8005332:	f7ff fa63 	bl	80047fc <lcd_set_cursor>
    lcd_write_ram_prepare();        /* Start writing GRAM */
 8005336:	f7ff fa51 	bl	80047dc <lcd_write_ram_prepare>

    for (index = 0; index < totalpoint; index++)
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e005      	b.n	800534c <lcd_clear+0x40>
    {
        LCD->LCD_RAM = color;
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <lcd_clear+0x58>)
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	d3f5      	bcc.n	8005340 <lcd_clear+0x34>
   }
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	200001b8 	.word	0x200001b8
 8005364:	600ffffe 	.word	0x600ffffe

08005368 <lcd_show_char>:
 * @param   mode  : Overlay mode (1); Non-superposition (0);
 * @param   color : The color of the character;
 * @retval  None.
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	4611      	mov	r1, r2
 8005374:	461a      	mov	r2, r3
 8005376:	4623      	mov	r3, r4
 8005378:	80fb      	strh	r3, [r7, #6]
 800537a:	4603      	mov	r3, r0
 800537c:	80bb      	strh	r3, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	70fb      	strb	r3, [r7, #3]
 8005382:	4613      	mov	r3, r2
 8005384:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8005386:	88bb      	ldrh	r3, [r7, #4]
 8005388:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	613b      	str	r3, [r7, #16]

    csize = ((size >> 3) + (((size & 0x7) != 0) ? 1 : 0)) * (size >> 1); /* Get the number of bytes of a font character corresponding to the dot matrix set */
 8005392:	78bb      	ldrb	r3, [r7, #2]
 8005394:	08db      	lsrs	r3, r3, #3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	78bb      	ldrb	r3, [r7, #2]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	4413      	add	r3, r2
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	78bb      	ldrb	r3, [r7, #2]
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	fb12 f303 	smulbb	r3, r2, r3
 80053b8:	737b      	strb	r3, [r7, #13]
    chr -= ' ';    /* Get the offset value (ASCII fonts start modulo Spaces, so - "is the font for the corresponding character) */
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	3b20      	subs	r3, #32
 80053be:	70fb      	strb	r3, [r7, #3]

    switch (size)
 80053c0:	78bb      	ldrb	r3, [r7, #2]
 80053c2:	3b0c      	subs	r3, #12
 80053c4:	2b14      	cmp	r3, #20
 80053c6:	f200 809a 	bhi.w	80054fe <lcd_show_char+0x196>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <lcd_show_char+0x68>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	08005425 	.word	0x08005425
 80053d4:	080054ff 	.word	0x080054ff
 80053d8:	080054ff 	.word	0x080054ff
 80053dc:	080054ff 	.word	0x080054ff
 80053e0:	08005437 	.word	0x08005437
 80053e4:	080054ff 	.word	0x080054ff
 80053e8:	080054ff 	.word	0x080054ff
 80053ec:	080054ff 	.word	0x080054ff
 80053f0:	080054ff 	.word	0x080054ff
 80053f4:	080054ff 	.word	0x080054ff
 80053f8:	080054ff 	.word	0x080054ff
 80053fc:	080054ff 	.word	0x080054ff
 8005400:	08005443 	.word	0x08005443
 8005404:	080054ff 	.word	0x080054ff
 8005408:	080054ff 	.word	0x080054ff
 800540c:	080054ff 	.word	0x080054ff
 8005410:	080054ff 	.word	0x080054ff
 8005414:	080054ff 	.word	0x080054ff
 8005418:	080054ff 	.word	0x080054ff
 800541c:	080054ff 	.word	0x080054ff
 8005420:	08005455 	.word	0x08005455
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[(uint8_t)chr];  /* Call 1206 font */
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	4613      	mov	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4a37      	ldr	r2, [pc, #220]	; (800550c <lcd_show_char+0x1a4>)
 8005430:	4413      	add	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
            break;
 8005434:	e014      	b.n	8005460 <lcd_show_char+0xf8>

        case 16:
            pfont = (uint8_t *)asc2_1608[(uint8_t)chr];  /* Call 1608 font */
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	4a35      	ldr	r2, [pc, #212]	; (8005510 <lcd_show_char+0x1a8>)
 800543c:	4413      	add	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
            break;
 8005440:	e00e      	b.n	8005460 <lcd_show_char+0xf8>

        case 24:
            pfont = (uint8_t *)asc2_2412[(uint8_t)chr];  /* Call 2412 font */
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4a31      	ldr	r2, [pc, #196]	; (8005514 <lcd_show_char+0x1ac>)
 800544e:	4413      	add	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
            break;
 8005452:	e005      	b.n	8005460 <lcd_show_char+0xf8>

        case 32:
            pfont = (uint8_t *)asc2_3216[(uint8_t)chr];  /* Call 3216 font */
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	019b      	lsls	r3, r3, #6
 8005458:	4a2f      	ldr	r2, [pc, #188]	; (8005518 <lcd_show_char+0x1b0>)
 800545a:	4413      	add	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
            break;
 800545e:	bf00      	nop

        default:
            return ;
    }

    y0 = y;
 8005460:	88bb      	ldrh	r3, [r7, #4]
 8005462:	81fb      	strh	r3, [r7, #14]
    for (t = 0; t < csize; t++)
 8005464:	2300      	movs	r3, #0
 8005466:	757b      	strb	r3, [r7, #21]
 8005468:	e044      	b.n	80054f4 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* Retrieves the dot matrix data of the character */
 800546a:	7d7b      	ldrb	r3, [r7, #21]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 8005474:	2300      	movs	r3, #0
 8005476:	75bb      	strb	r3, [r7, #22]
 8005478:	e034      	b.n	80054e4 <lcd_show_char+0x17c>
        {
            if ((temp & 0x80) != 0)        /* Valid points, need to be displayed */
 800547a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800547e:	2b00      	cmp	r3, #0
 8005480:	da06      	bge.n	8005490 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* Let me draw the dot, let me show the dot */
 8005482:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005484:	88b9      	ldrh	r1, [r7, #4]
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fc0f 	bl	8004cac <lcd_draw_point>
 800548e:	e00a      	b.n	80054a6 <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* Invalid point, not shown */
 8005490:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* Drawing the background color is equivalent to not showing the point (note that the background color is controlled by a global variable). */
 8005498:	4b20      	ldr	r3, [pc, #128]	; (800551c <lcd_show_char+0x1b4>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	88b9      	ldrh	r1, [r7, #4]
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff fc03 	bl	8004cac <lcd_draw_point>
            }

            temp <<= 1; /* Shift in order to get the state of the next bit */
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
            y++;
 80054ac:	88bb      	ldrh	r3, [r7, #4]
 80054ae:	3301      	adds	r3, #1
 80054b0:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* Hyper region */
 80054b2:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <lcd_show_char+0x1b8>)
 80054b4:	885b      	ldrh	r3, [r3, #2]
 80054b6:	88ba      	ldrh	r2, [r7, #4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d222      	bcs.n	8005502 <lcd_show_char+0x19a>

            if ((y - y0) == size)
 80054bc:	88ba      	ldrh	r2, [r7, #4]
 80054be:	89fb      	ldrh	r3, [r7, #14]
 80054c0:	1ad2      	subs	r2, r2, r3
 80054c2:	78bb      	ldrb	r3, [r7, #2]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d10a      	bne.n	80054de <lcd_show_char+0x176>
            {
                y = y0;          /* y coordinate reset */
 80054c8:	89fb      	ldrh	r3, [r7, #14]
 80054ca:	80bb      	strh	r3, [r7, #4]
                x++;             /* The x-coordinate is increasing */
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	3301      	adds	r3, #1
 80054d0:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)
 80054d2:	4b13      	ldr	r3, [pc, #76]	; (8005520 <lcd_show_char+0x1b8>)
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	88fa      	ldrh	r2, [r7, #6]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d307      	bcc.n	80054ec <lcd_show_char+0x184>
                {
                    return;     /* The x-coordinate hyperregion */
 80054dc:	e012      	b.n	8005504 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 80054de:	7dbb      	ldrb	r3, [r7, #22]
 80054e0:	3301      	adds	r3, #1
 80054e2:	75bb      	strb	r3, [r7, #22]
 80054e4:	7dbb      	ldrb	r3, [r7, #22]
 80054e6:	2b07      	cmp	r3, #7
 80054e8:	d9c7      	bls.n	800547a <lcd_show_char+0x112>
 80054ea:	e000      	b.n	80054ee <lcd_show_char+0x186>
                }

                break;
 80054ec:	bf00      	nop
    for (t = 0; t < csize; t++)
 80054ee:	7d7b      	ldrb	r3, [r7, #21]
 80054f0:	3301      	adds	r3, #1
 80054f2:	757b      	strb	r3, [r7, #21]
 80054f4:	7d7a      	ldrb	r2, [r7, #21]
 80054f6:	7b7b      	ldrb	r3, [r7, #13]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d3b6      	bcc.n	800546a <lcd_show_char+0x102>
 80054fc:	e002      	b.n	8005504 <lcd_show_char+0x19c>
            return ;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* Hyper region */
 8005502:	bf00      	nop
            }
        }
    }
}
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	bd90      	pop	{r4, r7, pc}
 800550a:	bf00      	nop
 800550c:	0800b8e0 	.word	0x0800b8e0
 8005510:	0800bd54 	.word	0x0800bd54
 8005514:	0800c344 	.word	0x0800c344
 8005518:	0800d0a0 	.word	0x0800d0a0
 800551c:	20000130 	.word	0x20000130
 8005520:	200001b8 	.word	0x200001b8

08005524 <lcd_show_string>:
 * @param   p            : The first address of the string
 * @param   color        : The color of the string;
 * @retval  None
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b087      	sub	sp, #28
 8005528:	af02      	add	r7, sp, #8
 800552a:	4604      	mov	r4, r0
 800552c:	4608      	mov	r0, r1
 800552e:	4611      	mov	r1, r2
 8005530:	461a      	mov	r2, r3
 8005532:	4623      	mov	r3, r4
 8005534:	80fb      	strh	r3, [r7, #6]
 8005536:	4603      	mov	r3, r0
 8005538:	80bb      	strh	r3, [r7, #4]
 800553a:	460b      	mov	r3, r1
 800553c:	807b      	strh	r3, [r7, #2]
 800553e:	4613      	mov	r3, r2
 8005540:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	73fb      	strb	r3, [r7, #15]
    width += x;
 8005546:	887a      	ldrh	r2, [r7, #2]
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	4413      	add	r3, r2
 800554c:	807b      	strh	r3, [r7, #2]
    height += y;
 800554e:	883a      	ldrh	r2, [r7, #0]
 8005550:	88bb      	ldrh	r3, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 8005556:	e027      	b.n	80055a8 <lcd_show_string+0x84>
    {
        if (x >= width)
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	887b      	ldrh	r3, [r7, #2]
 800555c:	429a      	cmp	r2, r3
 800555e:	d307      	bcc.n	8005570 <lcd_show_string+0x4c>
        {
            x = x0;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	80fb      	strh	r3, [r7, #6]
            y += size;
 8005564:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005568:	b29a      	uxth	r2, r3
 800556a:	88bb      	ldrh	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* quit */
 8005570:	88ba      	ldrh	r2, [r7, #4]
 8005572:	883b      	ldrh	r3, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d220      	bcs.n	80055ba <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	781a      	ldrb	r2, [r3, #0]
 800557c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8005580:	88b9      	ldrh	r1, [r7, #4]
 8005582:	88f8      	ldrh	r0, [r7, #6]
 8005584:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	2300      	movs	r3, #0
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	4623      	mov	r3, r4
 800558e:	f7ff feeb 	bl	8005368 <lcd_show_char>
        x += size / 2;
 8005592:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	b29a      	uxth	r2, r3
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	4413      	add	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
        p++;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	3301      	adds	r3, #1
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b7e      	cmp	r3, #126	; 0x7e
 80055ae:	d805      	bhi.n	80055bc <lcd_show_string+0x98>
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b1f      	cmp	r3, #31
 80055b6:	d8cf      	bhi.n	8005558 <lcd_show_string+0x34>
    }
}
 80055b8:	e000      	b.n	80055bc <lcd_show_string+0x98>
        if (y >= height)break;  /* quit */
 80055ba:	bf00      	nop
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd90      	pop	{r4, r7, pc}

080055c4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08e      	sub	sp, #56	; 0x38
 80055c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80055ca:	f107 031c 	add.w	r3, r7, #28
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	605a      	str	r2, [r3, #4]
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	60da      	str	r2, [r3, #12]
 80055d8:	611a      	str	r2, [r3, #16]
 80055da:	615a      	str	r2, [r3, #20]
 80055dc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80055de:	463b      	mov	r3, r7
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	611a      	str	r2, [r3, #16]
 80055ec:	615a      	str	r2, [r3, #20]
 80055ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80055f0:	4b2f      	ldr	r3, [pc, #188]	; (80056b0 <MX_FSMC_Init+0xec>)
 80055f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80055f6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80055f8:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <MX_FSMC_Init+0xec>)
 80055fa:	4a2e      	ldr	r2, [pc, #184]	; (80056b4 <MX_FSMC_Init+0xf0>)
 80055fc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80055fe:	4b2c      	ldr	r3, [pc, #176]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005600:	2200      	movs	r2, #0
 8005602:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8005604:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005606:	2200      	movs	r2, #0
 8005608:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800560a:	4b29      	ldr	r3, [pc, #164]	; (80056b0 <MX_FSMC_Init+0xec>)
 800560c:	2200      	movs	r2, #0
 800560e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8005610:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005612:	2210      	movs	r2, #16
 8005614:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8005616:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005618:	2200      	movs	r2, #0
 800561a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800561c:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <MX_FSMC_Init+0xec>)
 800561e:	2200      	movs	r2, #0
 8005620:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8005622:	4b23      	ldr	r3, [pc, #140]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005624:	2200      	movs	r2, #0
 8005626:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8005628:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <MX_FSMC_Init+0xec>)
 800562a:	2200      	movs	r2, #0
 800562c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800562e:	4b20      	ldr	r3, [pc, #128]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005634:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8005636:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005638:	2200      	movs	r2, #0
 800563a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800563c:	4b1c      	ldr	r3, [pc, #112]	; (80056b0 <MX_FSMC_Init+0xec>)
 800563e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8005644:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005646:	2200      	movs	r2, #0
 8005648:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800564a:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <MX_FSMC_Init+0xec>)
 800564c:	2200      	movs	r2, #0
 800564e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8005650:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005652:	2200      	movs	r2, #0
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8005656:	230f      	movs	r3, #15
 8005658:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800565a:	230f      	movs	r3, #15
 800565c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800565e:	233c      	movs	r3, #60	; 0x3c
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8005666:	2310      	movs	r3, #16
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800566a:	2311      	movs	r3, #17
 800566c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800566e:	2300      	movs	r3, #0
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 8005672:	2309      	movs	r3, #9
 8005674:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8005676:	230f      	movs	r3, #15
 8005678:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800567a:	2309      	movs	r3, #9
 800567c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 800567e:	230f      	movs	r3, #15
 8005680:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8005682:	2310      	movs	r3, #16
 8005684:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8005686:	2311      	movs	r3, #17
 8005688:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800568e:	463a      	mov	r2, r7
 8005690:	f107 031c 	add.w	r3, r7, #28
 8005694:	4619      	mov	r1, r3
 8005696:	4806      	ldr	r0, [pc, #24]	; (80056b0 <MX_FSMC_Init+0xec>)
 8005698:	f002 fe16 	bl	80082c8 <HAL_SRAM_Init>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80056a2:	f000 fa5d 	bl	8005b60 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80056a6:	bf00      	nop
 80056a8:	3738      	adds	r7, #56	; 0x38
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200001c8 	.word	0x200001c8
 80056b4:	a0000104 	.word	0xa0000104

080056b8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056be:	1d3b      	adds	r3, r7, #4
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80056cc:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <HAL_FSMC_MspInit+0x88>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d131      	bne.n	8005738 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80056d4:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <HAL_FSMC_MspInit+0x88>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80056da:	2300      	movs	r3, #0
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	4b19      	ldr	r3, [pc, #100]	; (8005744 <HAL_FSMC_MspInit+0x8c>)
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	4a18      	ldr	r2, [pc, #96]	; (8005744 <HAL_FSMC_MspInit+0x8c>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	6393      	str	r3, [r2, #56]	; 0x38
 80056ea:	4b16      	ldr	r3, [pc, #88]	; (8005744 <HAL_FSMC_MspInit+0x8c>)
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80056f6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80056fa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fc:	2302      	movs	r3, #2
 80056fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005704:	2303      	movs	r3, #3
 8005706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005708:	230c      	movs	r3, #12
 800570a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800570c:	1d3b      	adds	r3, r7, #4
 800570e:	4619      	mov	r1, r3
 8005710:	480d      	ldr	r0, [pc, #52]	; (8005748 <HAL_FSMC_MspInit+0x90>)
 8005712:	f001 f931 	bl	8006978 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005716:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800571a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	2302      	movs	r3, #2
 800571e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005724:	2303      	movs	r3, #3
 8005726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005728:	230c      	movs	r3, #12
 800572a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800572c:	1d3b      	adds	r3, r7, #4
 800572e:	4619      	mov	r1, r3
 8005730:	4806      	ldr	r0, [pc, #24]	; (800574c <HAL_FSMC_MspInit+0x94>)
 8005732:	f001 f921 	bl	8006978 <HAL_GPIO_Init>
 8005736:	e000      	b.n	800573a <HAL_FSMC_MspInit+0x82>
    return;
 8005738:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000218 	.word	0x20000218
 8005744:	40023800 	.word	0x40023800
 8005748:	40021000 	.word	0x40021000
 800574c:	40020c00 	.word	0x40020c00

08005750 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005758:	f7ff ffae 	bl	80056b8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	; 0x30
 8005768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800576a:	f107 031c 	add.w	r3, r7, #28
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	609a      	str	r2, [r3, #8]
 8005776:	60da      	str	r2, [r3, #12]
 8005778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	4b44      	ldr	r3, [pc, #272]	; (8005890 <MX_GPIO_Init+0x12c>)
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	4a43      	ldr	r2, [pc, #268]	; (8005890 <MX_GPIO_Init+0x12c>)
 8005784:	f043 0310 	orr.w	r3, r3, #16
 8005788:	6313      	str	r3, [r2, #48]	; 0x30
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <MX_GPIO_Init+0x12c>)
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	4b3d      	ldr	r3, [pc, #244]	; (8005890 <MX_GPIO_Init+0x12c>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	4a3c      	ldr	r2, [pc, #240]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057a0:	f043 0304 	orr.w	r3, r3, #4
 80057a4:	6313      	str	r3, [r2, #48]	; 0x30
 80057a6:	4b3a      	ldr	r3, [pc, #232]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	4b36      	ldr	r3, [pc, #216]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	4a35      	ldr	r2, [pc, #212]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	6313      	str	r3, [r2, #48]	; 0x30
 80057c2:	4b33      	ldr	r3, [pc, #204]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	4a2e      	ldr	r2, [pc, #184]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6313      	str	r3, [r2, #48]	; 0x30
 80057de:	4b2c      	ldr	r3, [pc, #176]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	4b28      	ldr	r3, [pc, #160]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	4a27      	ldr	r2, [pc, #156]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057f4:	f043 0308 	orr.w	r3, r3, #8
 80057f8:	6313      	str	r3, [r2, #48]	; 0x30
 80057fa:	4b25      	ldr	r3, [pc, #148]	; (8005890 <MX_GPIO_Init+0x12c>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	60bb      	str	r3, [r7, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
 800580a:	4b21      	ldr	r3, [pc, #132]	; (8005890 <MX_GPIO_Init+0x12c>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	4a20      	ldr	r2, [pc, #128]	; (8005890 <MX_GPIO_Init+0x12c>)
 8005810:	f043 0302 	orr.w	r3, r3, #2
 8005814:	6313      	str	r3, [r2, #48]	; 0x30
 8005816:	4b1e      	ldr	r3, [pc, #120]	; (8005890 <MX_GPIO_Init+0x12c>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	607b      	str	r3, [r7, #4]
 8005820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8005822:	2201      	movs	r2, #1
 8005824:	2160      	movs	r1, #96	; 0x60
 8005826:	481b      	ldr	r0, [pc, #108]	; (8005894 <MX_GPIO_Init+0x130>)
 8005828:	f001 fa42 	bl	8006cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 800582c:	2201      	movs	r2, #1
 800582e:	2120      	movs	r1, #32
 8005830:	4819      	ldr	r0, [pc, #100]	; (8005898 <MX_GPIO_Init+0x134>)
 8005832:	f001 fa3d 	bl	8006cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8005836:	2360      	movs	r3, #96	; 0x60
 8005838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800583a:	2301      	movs	r3, #1
 800583c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800583e:	2301      	movs	r3, #1
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005842:	2302      	movs	r3, #2
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005846:	f107 031c 	add.w	r3, r7, #28
 800584a:	4619      	mov	r1, r3
 800584c:	4811      	ldr	r0, [pc, #68]	; (8005894 <MX_GPIO_Init+0x130>)
 800584e:	f001 f893 	bl	8006978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WK_UP_Pin|KEY0_Pin;
 8005852:	f248 0301 	movw	r3, #32769	; 0x8001
 8005856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005858:	2300      	movs	r3, #0
 800585a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800585c:	2302      	movs	r3, #2
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005860:	f107 031c 	add.w	r3, r7, #28
 8005864:	4619      	mov	r1, r3
 8005866:	480d      	ldr	r0, [pc, #52]	; (800589c <MX_GPIO_Init+0x138>)
 8005868:	f001 f886 	bl	8006978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800586c:	2320      	movs	r3, #32
 800586e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005870:	2301      	movs	r3, #1
 8005872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005874:	2301      	movs	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005878:	2302      	movs	r3, #2
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800587c:	f107 031c 	add.w	r3, r7, #28
 8005880:	4619      	mov	r1, r3
 8005882:	4805      	ldr	r0, [pc, #20]	; (8005898 <MX_GPIO_Init+0x134>)
 8005884:	f001 f878 	bl	8006978 <HAL_GPIO_Init>

}
 8005888:	bf00      	nop
 800588a:	3730      	adds	r7, #48	; 0x30
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40023800 	.word	0x40023800
 8005894:	40021000 	.word	0x40021000
 8005898:	40020400 	.word	0x40020400
 800589c:	40020000 	.word	0x40020000

080058a0 <stm32f407vg_show_mesg>:
 * @brief   Displays information about the experiment
 * @param   None
 * @retval  None
 */
void stm32f407vg_show_mesg(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
	/* The serial port outputs the experimental information */
	printf("\n");
 80058a4:	200a      	movs	r0, #10
 80058a6:	f004 faa3 	bl	8009df0 <putchar>
	printf("********************************\r\n");
 80058aa:	480a      	ldr	r0, [pc, #40]	; (80058d4 <stm32f407vg_show_mesg+0x34>)
 80058ac:	f004 fafc 	bl	8009ea8 <puts>
	printf("STM32F407\r\n");
 80058b0:	4809      	ldr	r0, [pc, #36]	; (80058d8 <stm32f407vg_show_mesg+0x38>)
 80058b2:	f004 faf9 	bl	8009ea8 <puts>
	printf("RTC Test\r\n");
 80058b6:	4809      	ldr	r0, [pc, #36]	; (80058dc <stm32f407vg_show_mesg+0x3c>)
 80058b8:	f004 faf6 	bl	8009ea8 <puts>
	printf("ATOM@ALIENTEK\r\n");
 80058bc:	4808      	ldr	r0, [pc, #32]	; (80058e0 <stm32f407vg_show_mesg+0x40>)
 80058be:	f004 faf3 	bl	8009ea8 <puts>
	printf("********************************\r\n");
 80058c2:	4804      	ldr	r0, [pc, #16]	; (80058d4 <stm32f407vg_show_mesg+0x34>)
 80058c4:	f004 faf0 	bl	8009ea8 <puts>
	printf("\r\n");
 80058c8:	4806      	ldr	r0, [pc, #24]	; (80058e4 <stm32f407vg_show_mesg+0x44>)
 80058ca:	f004 faed 	bl	8009ea8 <puts>
}
 80058ce:	bf00      	nop
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	0800b7e8 	.word	0x0800b7e8
 80058d8:	0800b80c 	.word	0x0800b80c
 80058dc:	0800b818 	.word	0x0800b818
 80058e0:	0800b824 	.word	0x0800b824
 80058e4:	0800b834 	.word	0x0800b834

080058e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b092      	sub	sp, #72	; 0x48
 80058ec:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint8_t t = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058f4:	f000 fe06 	bl	8006504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058f8:	f000 f8c6 	bl	8005a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058fc:	f7ff ff32 	bl	8005764 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8005900:	f000 fcfc 	bl	80062fc <MX_USART1_UART_Init>
  MX_FSMC_Init();
 8005904:	f7ff fe5e 	bl	80055c4 <MX_FSMC_Init>
  MX_TIM4_Init();
 8005908:	f000 fc6c 	bl	80061e4 <MX_TIM4_Init>
  MX_RTC_Init();
 800590c:	f000 f92e 	bl	8005b6c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();                                         /* Initialize LCD */
 8005910:	f7ff faf2 	bl	8004ef8 <lcd_init>
  stm32f407vg_show_mesg();
 8005914:	f7ff ffc4 	bl	80058a0 <stm32f407vg_show_mesg>
  lcd_show_string(30, 50, 200, 16, 16, "STM32", RED);
 8005918:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800591c:	9302      	str	r3, [sp, #8]
 800591e:	4b52      	ldr	r3, [pc, #328]	; (8005a68 <main+0x180>)
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	2310      	movs	r3, #16
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	2310      	movs	r3, #16
 8005928:	22c8      	movs	r2, #200	; 0xc8
 800592a:	2132      	movs	r1, #50	; 0x32
 800592c:	201e      	movs	r0, #30
 800592e:	f7ff fdf9 	bl	8005524 <lcd_show_string>
  lcd_show_string(30, 70, 200, 16, 16, "RTC TEST", RED);
 8005932:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005936:	9302      	str	r3, [sp, #8]
 8005938:	4b4c      	ldr	r3, [pc, #304]	; (8005a6c <main+0x184>)
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	2310      	movs	r3, #16
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	2310      	movs	r3, #16
 8005942:	22c8      	movs	r2, #200	; 0xc8
 8005944:	2146      	movs	r1, #70	; 0x46
 8005946:	201e      	movs	r0, #30
 8005948:	f7ff fdec 	bl	8005524 <lcd_show_string>
  lcd_show_string(30, 90, 200, 16, 16, "ATOM@ALIENTEK", RED);
 800594c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005950:	9302      	str	r3, [sp, #8]
 8005952:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <main+0x188>)
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	2310      	movs	r3, #16
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	2310      	movs	r3, #16
 800595c:	22c8      	movs	r2, #200	; 0xc8
 800595e:	215a      	movs	r1, #90	; 0x5a
 8005960:	201e      	movs	r0, #30
 8005962:	f7ff fddf 	bl	8005524 <lcd_show_string>

  /* Set RTC periodic wake-up interrupt */
  rtc_set_wakeup(RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0);
 8005966:	2100      	movs	r1, #0
 8005968:	2004      	movs	r0, #4
 800596a:	f000 fae9 	bl	8005f40 <rtc_set_wakeup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  t++;
 800596e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005972:	3301      	adds	r3, #1
 8005974:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  if ((t % 10) == 0)
 8005978:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800597c:	4b3d      	ldr	r3, [pc, #244]	; (8005a74 <main+0x18c>)
 800597e:	fba3 1302 	umull	r1, r3, r3, r2
 8005982:	08d9      	lsrs	r1, r3, #3
 8005984:	460b      	mov	r3, r1
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d159      	bne.n	8005a48 <main+0x160>
	  {
	  	 /* Get the RTC time information */
		  rtc_get_time(&hour, &minute, &second, &ampm);
 8005994:	f107 0308 	add.w	r3, r7, #8
 8005998:	f107 0209 	add.w	r2, r7, #9
 800599c:	f107 010a 	add.w	r1, r7, #10
 80059a0:	f107 000b 	add.w	r0, r7, #11
 80059a4:	f000 fa74 	bl	8005e90 <rtc_get_time>
		  sprintf(tbuf, "Time:%02d:%02d:%02d", hour, minute, second);
 80059a8:	7afb      	ldrb	r3, [r7, #11]
 80059aa:	461a      	mov	r2, r3
 80059ac:	7abb      	ldrb	r3, [r7, #10]
 80059ae:	4619      	mov	r1, r3
 80059b0:	7a7b      	ldrb	r3, [r7, #9]
 80059b2:	f107 000c 	add.w	r0, r7, #12
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	460b      	mov	r3, r1
 80059ba:	492f      	ldr	r1, [pc, #188]	; (8005a78 <main+0x190>)
 80059bc:	f004 fa7c 	bl	8009eb8 <siprintf>
		  lcd_show_string(30, 120, 210, 16, 16, tbuf, RED);
 80059c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80059c4:	9302      	str	r3, [sp, #8]
 80059c6:	f107 030c 	add.w	r3, r7, #12
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	2310      	movs	r3, #16
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	2310      	movs	r3, #16
 80059d2:	22d2      	movs	r2, #210	; 0xd2
 80059d4:	2178      	movs	r1, #120	; 0x78
 80059d6:	201e      	movs	r0, #30
 80059d8:	f7ff fda4 	bl	8005524 <lcd_show_string>
		  /* Get the RTC date information */
		  rtc_get_date(&year, &month, &date, &week);
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	1d7a      	adds	r2, r7, #5
 80059e0:	1db9      	adds	r1, r7, #6
 80059e2:	1df8      	adds	r0, r7, #7
 80059e4:	f000 fa7c 	bl	8005ee0 <rtc_get_date>
		  sprintf(tbuf, "Date:20%02d-%02d-%02d", year, month, date);
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	461a      	mov	r2, r3
 80059ec:	79bb      	ldrb	r3, [r7, #6]
 80059ee:	4619      	mov	r1, r3
 80059f0:	797b      	ldrb	r3, [r7, #5]
 80059f2:	f107 000c 	add.w	r0, r7, #12
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	460b      	mov	r3, r1
 80059fa:	4920      	ldr	r1, [pc, #128]	; (8005a7c <main+0x194>)
 80059fc:	f004 fa5c 	bl	8009eb8 <siprintf>
		  lcd_show_string(30, 140, 210, 16, 16, tbuf, RED);
 8005a00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a04:	9302      	str	r3, [sp, #8]
 8005a06:	f107 030c 	add.w	r3, r7, #12
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2310      	movs	r3, #16
 8005a12:	22d2      	movs	r2, #210	; 0xd2
 8005a14:	218c      	movs	r1, #140	; 0x8c
 8005a16:	201e      	movs	r0, #30
 8005a18:	f7ff fd84 	bl	8005524 <lcd_show_string>
		  sprintf(tbuf, "Week:%d", week);
 8005a1c:	793b      	ldrb	r3, [r7, #4]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f107 030c 	add.w	r3, r7, #12
 8005a24:	4916      	ldr	r1, [pc, #88]	; (8005a80 <main+0x198>)
 8005a26:	4618      	mov	r0, r3
 8005a28:	f004 fa46 	bl	8009eb8 <siprintf>
		  lcd_show_string(30, 160, 210, 16, 16, tbuf, RED);
 8005a2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a30:	9302      	str	r3, [sp, #8]
 8005a32:	f107 030c 	add.w	r3, r7, #12
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	2310      	movs	r3, #16
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	22d2      	movs	r2, #210	; 0xd2
 8005a40:	21a0      	movs	r1, #160	; 0xa0
 8005a42:	201e      	movs	r0, #30
 8005a44:	f7ff fd6e 	bl	8005524 <lcd_show_string>
	  }

	  if (t == 20)
 8005a48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a4c:	2b14      	cmp	r3, #20
 8005a4e:	d106      	bne.n	8005a5e <main+0x176>
	  {
	  	 t = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  	 LED0_TOGGLE();   /* LED0 blinks to indicate that the program is running */
 8005a56:	2120      	movs	r1, #32
 8005a58:	480a      	ldr	r0, [pc, #40]	; (8005a84 <main+0x19c>)
 8005a5a:	f001 f942 	bl	8006ce2 <HAL_GPIO_TogglePin>
	  }

	  HAL_Delay(10);   	   /* delay 10ms */
 8005a5e:	200a      	movs	r0, #10
 8005a60:	f000 fdc2 	bl	80065e8 <HAL_Delay>
	  t++;
 8005a64:	e783      	b.n	800596e <main+0x86>
 8005a66:	bf00      	nop
 8005a68:	0800b87c 	.word	0x0800b87c
 8005a6c:	0800b884 	.word	0x0800b884
 8005a70:	0800b890 	.word	0x0800b890
 8005a74:	cccccccd 	.word	0xcccccccd
 8005a78:	0800b8a0 	.word	0x0800b8a0
 8005a7c:	0800b8b4 	.word	0x0800b8b4
 8005a80:	0800b8cc 	.word	0x0800b8cc
 8005a84:	40021000 	.word	0x40021000

08005a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b094      	sub	sp, #80	; 0x50
 8005a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a8e:	f107 0320 	add.w	r3, r7, #32
 8005a92:	2230      	movs	r2, #48	; 0x30
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f004 fb06 	bl	800a0a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a9c:	f107 030c 	add.w	r3, r7, #12
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	60da      	str	r2, [r3, #12]
 8005aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aac:	2300      	movs	r3, #0
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	4b29      	ldr	r3, [pc, #164]	; (8005b58 <SystemClock_Config+0xd0>)
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	4a28      	ldr	r2, [pc, #160]	; (8005b58 <SystemClock_Config+0xd0>)
 8005ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aba:	6413      	str	r3, [r2, #64]	; 0x40
 8005abc:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <SystemClock_Config+0xd0>)
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ac8:	2300      	movs	r3, #0
 8005aca:	607b      	str	r3, [r7, #4]
 8005acc:	4b23      	ldr	r3, [pc, #140]	; (8005b5c <SystemClock_Config+0xd4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a22      	ldr	r2, [pc, #136]	; (8005b5c <SystemClock_Config+0xd4>)
 8005ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <SystemClock_Config+0xd4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005aec:	2301      	movs	r3, #1
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005af0:	2310      	movs	r3, #16
 8005af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005af4:	2302      	movs	r3, #2
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005af8:	2300      	movs	r3, #0
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005afc:	2308      	movs	r3, #8
 8005afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005b00:	23a8      	movs	r3, #168	; 0xa8
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b04:	2302      	movs	r3, #2
 8005b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005b08:	2304      	movs	r3, #4
 8005b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b0c:	f107 0320 	add.w	r3, r7, #32
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 f901 	bl	8006d18 <HAL_RCC_OscConfig>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005b1c:	f000 f820 	bl	8005b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b20:	230f      	movs	r3, #15
 8005b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b24:	2302      	movs	r3, #2
 8005b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005b2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005b38:	f107 030c 	add.w	r3, r7, #12
 8005b3c:	2105      	movs	r1, #5
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 fb62 	bl	8007208 <HAL_RCC_ClockConfig>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8005b4a:	f000 f809 	bl	8005b60 <Error_Handler>
  }
}
 8005b4e:	bf00      	nop
 8005b50:	3750      	adds	r7, #80	; 0x50
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	40007000 	.word	0x40007000

08005b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b64:	b672      	cpsid	i
}
 8005b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b68:	e7fe      	b.n	8005b68 <Error_Handler+0x8>
	...

08005b6c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b092      	sub	sp, #72	; 0x48
 8005b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
  uint16_t flag = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005b78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	609a      	str	r2, [r3, #8]
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8005b88:	2300      	movs	r3, #0
 8005b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	2228      	movs	r2, #40	; 0x28
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f004 fa88 	bl	800a0a8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005b98:	4b49      	ldr	r3, [pc, #292]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005b9a:	4a4a      	ldr	r2, [pc, #296]	; (8005cc4 <MX_RTC_Init+0x158>)
 8005b9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005b9e:	4b48      	ldr	r3, [pc, #288]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005ba4:	4b46      	ldr	r3, [pc, #280]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005ba6:	227f      	movs	r2, #127	; 0x7f
 8005ba8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005baa:	4b45      	ldr	r3, [pc, #276]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005bac:	22ff      	movs	r2, #255	; 0xff
 8005bae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005bb0:	4b43      	ldr	r3, [pc, #268]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005bb6:	4b42      	ldr	r3, [pc, #264]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005bbc:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005bc2:	483f      	ldr	r0, [pc, #252]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005bc4:	f001 fde2 	bl	800778c <HAL_RTC_Init>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8005bce:	f7ff ffc7 	bl	8005b60 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  flag = rtc_read_bkr(0);  	/* Read the value of BKP0 */
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f000 f8aa 	bl	8005d2c <rtc_read_bkr>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  if ((flag != 0x5051) && (flag != 0x5050))
 8005bde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005be2:	f245 0251 	movw	r2, #20561	; 0x5051
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d065      	beq.n	8005cb6 <MX_RTC_Init+0x14a>
 8005bea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005bee:	f245 0250 	movw	r2, #20560	; 0x5050
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d05f      	beq.n	8005cb6 <MX_RTC_Init+0x14a>
  {
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8005bf6:	2309      	movs	r3, #9
 8005bf8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c14:	2201      	movs	r2, #1
 8005c16:	4619      	mov	r1, r3
 8005c18:	4829      	ldr	r0, [pc, #164]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005c1a:	f001 fe3a 	bl	8007892 <HAL_RTC_SetTime>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8005c24:	f7ff ff9c 	bl	8005b60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_APRIL;
 8005c2e:	2304      	movs	r3, #4
 8005c30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x18;
 8005c34:	2318      	movs	r3, #24
 8005c36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x24;
 8005c3a:	2324      	movs	r3, #36	; 0x24
 8005c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c44:	2201      	movs	r2, #1
 8005c46:	4619      	mov	r1, r3
 8005c48:	481d      	ldr	r0, [pc, #116]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005c4a:	f001 ff1a 	bl	8007a82 <HAL_RTC_SetDate>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <MX_RTC_Init+0xec>
  {
    Error_Handler();
 8005c54:	f7ff ff84 	bl	8005b60 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8005c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	480c      	ldr	r0, [pc, #48]	; (8005cc0 <MX_RTC_Init+0x154>)
 8005c90:	f001 ffca 	bl	8007c28 <HAL_RTC_SetAlarm_IT>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_RTC_Init+0x132>
  {
    Error_Handler();
 8005c9a:	f7ff ff61 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
    rtc_set_time(8, 0, 0, 0);      	   /* set time */
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	2008      	movs	r0, #8
 8005ca6:	f000 f881 	bl	8005dac <rtc_set_time>
    rtc_set_date(23, 4, 23, 7);
 8005caa:	2307      	movs	r3, #7
 8005cac:	2217      	movs	r2, #23
 8005cae:	2104      	movs	r1, #4
 8005cb0:	2017      	movs	r0, #23
 8005cb2:	f000 f84f 	bl	8005d54 <rtc_set_date>
  }
  /* USER CODE END RTC_Init 2 */

}
 8005cb6:	bf00      	nop
 8005cb8:	3748      	adds	r7, #72	; 0x48
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2000021c 	.word	0x2000021c
 8005cc4:	40002800 	.word	0x40002800

08005cc8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005cd0:	f107 0308 	add.w	r3, r7, #8
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	605a      	str	r2, [r3, #4]
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <HAL_RTC_MspInit+0x5c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d119      	bne.n	8005d1c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cf0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cf2:	f107 0308 	add.w	r3, r7, #8
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fc66 	bl	80075c8 <HAL_RCCEx_PeriphCLKConfig>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005d02:	f7ff ff2d 	bl	8005b60 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005d06:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <HAL_RTC_MspInit+0x60>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2100      	movs	r1, #0
 8005d10:	2029      	movs	r0, #41	; 0x29
 8005d12:	f000 fd68 	bl	80067e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005d16:	2029      	movs	r0, #41	; 0x29
 8005d18:	f000 fd81 	bl	800681e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40002800 	.word	0x40002800
 8005d28:	42470e3c 	.word	0x42470e3c

08005d2c <rtc_read_bkr>:
 * @param   bkrx: fallback register number, range: 0-31
 *                Corresponding to RTC_BKP_DR1 to RTC_BKP_DR42
 * @retval  the value read
 */
uint16_t rtc_read_bkr(uint32_t bkrx)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
    temp = HAL_RTCEx_BKUPRead(&hrtc, bkrx);
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4805      	ldr	r0, [pc, #20]	; (8005d50 <rtc_read_bkr+0x24>)
 8005d3c:	f002 faa2 	bl	8008284 <HAL_RTCEx_BKUPRead>
 8005d40:	60f8      	str	r0, [r7, #12]
    return (uint16_t)temp; /* Returns the value read */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	b29b      	uxth	r3, r3
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	2000021c 	.word	0x2000021c

08005d54 <rtc_set_date>:
 * @retval Sets the result
 * @arg    0: The setup was successful
 * @arg    1: Failed to set
 */
uint8_t rtc_set_date(uint8_t year, uint8_t month, uint8_t date, uint8_t week)
{
 8005d54:	b590      	push	{r4, r7, lr}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	71fb      	strb	r3, [r7, #7]
 8005d66:	4603      	mov	r3, r0
 8005d68:	71bb      	strb	r3, [r7, #6]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	717b      	strb	r3, [r7, #5]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	713b      	strb	r3, [r7, #4]
    RTC_DateTypeDef sDate = {0};
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]

    sDate.WeekDay = week;
 8005d76:	793b      	ldrb	r3, [r7, #4]
 8005d78:	733b      	strb	r3, [r7, #12]
    sDate.Month = month;
 8005d7a:	79bb      	ldrb	r3, [r7, #6]
 8005d7c:	737b      	strb	r3, [r7, #13]
    sDate.Date = date;
 8005d7e:	797b      	ldrb	r3, [r7, #5]
 8005d80:	73bb      	strb	r3, [r7, #14]
    sDate.Year = year;
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	73fb      	strb	r3, [r7, #15]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4806      	ldr	r0, [pc, #24]	; (8005da8 <rtc_set_date+0x54>)
 8005d90:	f001 fe77 	bl	8007a82 <HAL_RTC_SetDate>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <rtc_set_date+0x4a>
    {
        return 1;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <rtc_set_date+0x4c>
    }

    return 0;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd90      	pop	{r4, r7, pc}
 8005da8:	2000021c 	.word	0x2000021c

08005dac <rtc_set_time>:
 * @retval Sets the result
 * @arg     0: The setup was successful
 * @arg     1: Failed to set
 */
uint8_t rtc_set_time(uint8_t hour, uint8_t minute, uint8_t second, uint8_t ampm)
{
 8005dac:	b590      	push	{r4, r7, lr}
 8005dae:	b089      	sub	sp, #36	; 0x24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4623      	mov	r3, r4
 8005dbc:	71fb      	strb	r3, [r7, #7]
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71bb      	strb	r3, [r7, #6]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	717b      	strb	r3, [r7, #5]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	713b      	strb	r3, [r7, #4]
    RTC_TimeTypeDef sTime = {0};
 8005dca:	f107 030c 	add.w	r3, r7, #12
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	605a      	str	r2, [r3, #4]
 8005dd4:	609a      	str	r2, [r3, #8]
 8005dd6:	60da      	str	r2, [r3, #12]
 8005dd8:	611a      	str	r2, [r3, #16]

    sTime.Hours = hour;
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = minute;
 8005dde:	79bb      	ldrb	r3, [r7, #6]
 8005de0:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = second;
 8005de2:	797b      	ldrb	r3, [r7, #5]
 8005de4:	73bb      	strb	r3, [r7, #14]
    sTime.TimeFormat = ampm;
 8005de6:	793b      	ldrb	r3, [r7, #4]
 8005de8:	73fb      	strb	r3, [r7, #15]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005df2:	f107 030c 	add.w	r3, r7, #12
 8005df6:	2200      	movs	r2, #0
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4806      	ldr	r0, [pc, #24]	; (8005e14 <rtc_set_time+0x68>)
 8005dfc:	f001 fd49 	bl	8007892 <HAL_RTC_SetTime>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <rtc_set_time+0x5e>
    {
        return 1;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <rtc_set_time+0x60>
    }

    return 0;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3724      	adds	r7, #36	; 0x24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd90      	pop	{r4, r7, pc}
 8005e14:	2000021c 	.word	0x2000021c

08005e18 <rtc_set_alarm>:
 * @param   minute : minutes
 * @param   second : Seconds
 * @retval  None
 */
void rtc_set_alarm(uint8_t week, uint8_t hour, uint8_t minute, uint8_t second)
{
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b08d      	sub	sp, #52	; 0x34
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	461a      	mov	r2, r3
 8005e26:	4623      	mov	r3, r4
 8005e28:	71fb      	strb	r3, [r7, #7]
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	71bb      	strb	r3, [r7, #6]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	717b      	strb	r3, [r7, #5]
 8005e32:	4613      	mov	r3, r2
 8005e34:	713b      	strb	r3, [r7, #4]
    RTC_AlarmTypeDef sAlarm = {0};
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	2228      	movs	r2, #40	; 0x28
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f004 f932 	bl	800a0a8 <memset>

    /* Set an alarm to interrupt */
    sAlarm.AlarmTime.Hours = hour;
 8005e44:	79bb      	ldrb	r3, [r7, #6]
 8005e46:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = minute;
 8005e48:	797b      	ldrb	r3, [r7, #5]
 8005e4a:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = second;
 8005e4c:	793b      	ldrb	r3, [r7, #4]
 8005e4e:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8005e50:	2300      	movs	r3, #0
 8005e52:	72fb      	strb	r3, [r7, #11]
    sAlarm.AlarmTime.SubSeconds = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
    sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8005e5c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005e60:	623b      	str	r3, [r7, #32]
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8005e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
    sAlarm.AlarmDateWeekDay = week;
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    sAlarm.Alarm = RTC_ALARM_A;
 8005e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8005e74:	f107 0308 	add.w	r3, r7, #8
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4803      	ldr	r0, [pc, #12]	; (8005e8c <rtc_set_alarm+0x74>)
 8005e7e:	f001 fed3 	bl	8007c28 <HAL_RTC_SetAlarm_IT>
}
 8005e82:	bf00      	nop
 8005e84:	3734      	adds	r7, #52	; 0x34
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2000021c 	.word	0x2000021c

08005e90 <rtc_get_time>:
 * @arg     0: Morning
 * @arg     1: Afternoon
 * @retval  None
 */
void rtc_get_time(uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *ampm)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	; 0x28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef sTime = {0};
 8005e9e:	f107 0314 	add.w	r3, r7, #20
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
 8005ea8:	609a      	str	r2, [r3, #8]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	611a      	str	r2, [r3, #16]

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005eae:	f107 0314 	add.w	r3, r7, #20
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4809      	ldr	r0, [pc, #36]	; (8005edc <rtc_get_time+0x4c>)
 8005eb8:	f001 fd85 	bl	80079c6 <HAL_RTC_GetTime>

    *hour = sTime.Hours;
 8005ebc:	7d3a      	ldrb	r2, [r7, #20]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	701a      	strb	r2, [r3, #0]
    *minute = sTime.Minutes;
 8005ec2:	7d7a      	ldrb	r2, [r7, #21]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	701a      	strb	r2, [r3, #0]
    *second = sTime.Seconds;
 8005ec8:	7dba      	ldrb	r2, [r7, #22]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	701a      	strb	r2, [r3, #0]
    *ampm = sTime.TimeFormat;
 8005ece:	7dfa      	ldrb	r2, [r7, #23]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	701a      	strb	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	3728      	adds	r7, #40	; 0x28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	2000021c 	.word	0x2000021c

08005ee0 <rtc_get_date>:
 * @param   date  : Day
 * @param   week  : Week
 * @retval  None
 */
void rtc_get_date(uint8_t *year, uint8_t *month, uint8_t *date, uint8_t *week)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
    RTC_DateTypeDef sDate = {0};
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]

    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005ef2:	f107 0314 	add.w	r3, r7, #20
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4809      	ldr	r0, [pc, #36]	; (8005f20 <rtc_get_date+0x40>)
 8005efc:	f001 fe45 	bl	8007b8a <HAL_RTC_GetDate>

    *year = sDate.Year;
 8005f00:	7dfa      	ldrb	r2, [r7, #23]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	701a      	strb	r2, [r3, #0]
    *month = sDate.Month;
 8005f06:	7d7a      	ldrb	r2, [r7, #21]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	701a      	strb	r2, [r3, #0]
    *date = sDate.Date;
 8005f0c:	7dba      	ldrb	r2, [r7, #22]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	701a      	strb	r2, [r3, #0]
    *week = sDate.WeekDay;
 8005f12:	7d3a      	ldrb	r2, [r7, #20]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	701a      	strb	r2, [r3, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	2000021c 	.word	0x2000021c

08005f24 <HAL_RTC_AlarmAEventCallback>:
 * @brief    HAL library RTC alarm clock A interrupt callback function
 * @param    hrtc : RTC handle
 * @retval   None
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
    printf("Alarm A!\r\n");
 8005f2c:	4803      	ldr	r0, [pc, #12]	; (8005f3c <HAL_RTC_AlarmAEventCallback+0x18>)
 8005f2e:	f003 ffbb 	bl	8009ea8 <puts>
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	0800b8d4 	.word	0x0800b8d4

08005f40 <rtc_set_wakeup>:
 * @param  clock : Wake up clock
 * @param  count : Wake up counter
 * @retval None
 */
void rtc_set_wakeup(uint8_t clock, uint8_t count)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	460a      	mov	r2, r1
 8005f4a:	71fb      	strb	r3, [r7, #7]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	71bb      	strb	r3, [r7, #6]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8005f50:	2200      	movs	r2, #0
 8005f52:	2100      	movs	r1, #0
 8005f54:	2003      	movs	r0, #3
 8005f56:	f000 fc46 	bl	80067e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8005f5a:	2003      	movs	r0, #3
 8005f5c:	f000 fc5f 	bl	800681e <HAL_NVIC_EnableIRQ>

    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, count, clock);
 8005f60:	79bb      	ldrb	r3, [r7, #6]
 8005f62:	79fa      	ldrb	r2, [r7, #7]
 8005f64:	4619      	mov	r1, r3
 8005f66:	4803      	ldr	r0, [pc, #12]	; (8005f74 <rtc_set_wakeup+0x34>)
 8005f68:	f002 f8a6 	bl	80080b8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	2000021c 	.word	0x2000021c

08005f78 <HAL_RTCEx_WakeUpTimerEventCallback>:
 * @brief   HAL library RTC wakeup interrupt callback function
 * @param   hrtc : RTC handle
 * @retval  None
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
    LED1_TOGGLE();
 8005f80:	2140      	movs	r1, #64	; 0x40
 8005f82:	4803      	ldr	r0, [pc, #12]	; (8005f90 <HAL_RTCEx_WakeUpTimerEventCallback+0x18>)
 8005f84:	f000 fead 	bl	8006ce2 <HAL_GPIO_TogglePin>
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40021000 	.word	0x40021000

08005f94 <RTC_WKUP_IRQHandler>:
 * @brief  RTC wakeup interrupt service function
 * @param  None
 * @retval None
 */
void RTC_WKUP_IRQHandler(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
    HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005f98:	4802      	ldr	r0, [pc, #8]	; (8005fa4 <RTC_WKUP_IRQHandler+0x10>)
 8005f9a:	f002 f94f 	bl	800823c <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8005f9e:	bf00      	nop
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	2000021c 	.word	0x2000021c

08005fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fae:	2300      	movs	r3, #0
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	4b10      	ldr	r3, [pc, #64]	; (8005ff4 <HAL_MspInit+0x4c>)
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	4a0f      	ldr	r2, [pc, #60]	; (8005ff4 <HAL_MspInit+0x4c>)
 8005fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <HAL_MspInit+0x4c>)
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <HAL_MspInit+0x4c>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <HAL_MspInit+0x4c>)
 8005fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <HAL_MspInit+0x4c>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8005fe6:	2005      	movs	r0, #5
 8005fe8:	f000 fbf2 	bl	80067d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fec:	bf00      	nop
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40023800 	.word	0x40023800

08005ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ffc:	e7fe      	b.n	8005ffc <NMI_Handler+0x4>

08005ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ffe:	b480      	push	{r7}
 8006000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006002:	e7fe      	b.n	8006002 <HardFault_Handler+0x4>

08006004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006008:	e7fe      	b.n	8006008 <MemManage_Handler+0x4>

0800600a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800600a:	b480      	push	{r7}
 800600c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800600e:	e7fe      	b.n	800600e <BusFault_Handler+0x4>

08006010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006014:	e7fe      	b.n	8006014 <UsageFault_Handler+0x4>

08006016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006016:	b480      	push	{r7}
 8006018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800601a:	bf00      	nop
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006028:	bf00      	nop
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006032:	b480      	push	{r7}
 8006034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006036:	bf00      	nop
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006044:	f000 fab0 	bl	80065a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006048:	bf00      	nop
 800604a:	bd80      	pop	{r7, pc}

0800604c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006050:	4802      	ldr	r0, [pc, #8]	; (800605c <USART1_IRQHandler+0x10>)
 8006052:	f002 fdcb 	bl	8008bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006056:	bf00      	nop
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000358 	.word	0x20000358

08006060 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006064:	4803      	ldr	r0, [pc, #12]	; (8006074 <RTC_Alarm_IRQHandler+0x14>)
 8006066:	f002 f8e9 	bl	800823c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800606a:	4802      	ldr	r0, [pc, #8]	; (8006074 <RTC_Alarm_IRQHandler+0x14>)
 800606c:	f001 ff20 	bl	8007eb0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8006070:	bf00      	nop
 8006072:	bd80      	pop	{r7, pc}
 8006074:	2000021c 	.word	0x2000021c

08006078 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e00a      	b.n	80060a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800608a:	f3af 8000 	nop.w
 800608e:	4601      	mov	r1, r0
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	60ba      	str	r2, [r7, #8]
 8006096:	b2ca      	uxtb	r2, r1
 8006098:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	3301      	adds	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	dbf0      	blt.n	800608a <_read+0x12>
  }

  return len;
 80060a8:	687b      	ldr	r3, [r7, #4]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	e009      	b.n	80060d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	60ba      	str	r2, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 f903 	bl	80062d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	3301      	adds	r3, #1
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	dbf1      	blt.n	80060c4 <_write+0x12>
  }
  return len;
 80060e0:	687b      	ldr	r3, [r7, #4]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <_close>:

int _close(int file)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006112:	605a      	str	r2, [r3, #4]
  return 0;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <_isatty>:

int _isatty(int file)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800612a:	2301      	movs	r3, #1
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800615c:	4a14      	ldr	r2, [pc, #80]	; (80061b0 <_sbrk+0x5c>)
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <_sbrk+0x60>)
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006168:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <_sbrk+0x64>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d102      	bne.n	8006176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <_sbrk+0x64>)
 8006172:	4a12      	ldr	r2, [pc, #72]	; (80061bc <_sbrk+0x68>)
 8006174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006176:	4b10      	ldr	r3, [pc, #64]	; (80061b8 <_sbrk+0x64>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	429a      	cmp	r2, r3
 8006182:	d207      	bcs.n	8006194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006184:	f003 ffde 	bl	800a144 <__errno>
 8006188:	4603      	mov	r3, r0
 800618a:	220c      	movs	r2, #12
 800618c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800618e:	f04f 33ff 	mov.w	r3, #4294967295
 8006192:	e009      	b.n	80061a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006194:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <_sbrk+0x64>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <_sbrk+0x64>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4413      	add	r3, r2
 80061a2:	4a05      	ldr	r2, [pc, #20]	; (80061b8 <_sbrk+0x64>)
 80061a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20020000 	.word	0x20020000
 80061b4:	00000400 	.word	0x00000400
 80061b8:	2000023c 	.word	0x2000023c
 80061bc:	200004f0 	.word	0x200004f0

080061c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <SystemInit+0x20>)
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ca:	4a05      	ldr	r2, [pc, #20]	; (80061e0 <SystemInit+0x20>)
 80061cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80061ea:	f107 0308 	add.w	r3, r7, #8
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	609a      	str	r2, [r3, #8]
 80061f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061f8:	463b      	mov	r3, r7
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006200:	4b1f      	ldr	r3, [pc, #124]	; (8006280 <MX_TIM4_Init+0x9c>)
 8006202:	4a20      	ldr	r2, [pc, #128]	; (8006284 <MX_TIM4_Init+0xa0>)
 8006204:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 8006206:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <MX_TIM4_Init+0x9c>)
 8006208:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800620c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800620e:	4b1c      	ldr	r3, [pc, #112]	; (8006280 <MX_TIM4_Init+0x9c>)
 8006210:	2200      	movs	r2, #0
 8006212:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8006214:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <MX_TIM4_Init+0x9c>)
 8006216:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800621a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800621c:	4b18      	ldr	r3, [pc, #96]	; (8006280 <MX_TIM4_Init+0x9c>)
 800621e:	2200      	movs	r2, #0
 8006220:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006222:	4b17      	ldr	r3, [pc, #92]	; (8006280 <MX_TIM4_Init+0x9c>)
 8006224:	2280      	movs	r2, #128	; 0x80
 8006226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006228:	4815      	ldr	r0, [pc, #84]	; (8006280 <MX_TIM4_Init+0x9c>)
 800622a:	f002 f895 	bl	8008358 <HAL_TIM_Base_Init>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8006234:	f7ff fc94 	bl	8005b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800623c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800623e:	f107 0308 	add.w	r3, r7, #8
 8006242:	4619      	mov	r1, r3
 8006244:	480e      	ldr	r0, [pc, #56]	; (8006280 <MX_TIM4_Init+0x9c>)
 8006246:	f002 f947 	bl	80084d8 <HAL_TIM_ConfigClockSource>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8006250:	f7ff fc86 	bl	8005b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006254:	2300      	movs	r3, #0
 8006256:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006258:	2300      	movs	r3, #0
 800625a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800625c:	463b      	mov	r3, r7
 800625e:	4619      	mov	r1, r3
 8006260:	4807      	ldr	r0, [pc, #28]	; (8006280 <MX_TIM4_Init+0x9c>)
 8006262:	f002 fb47 	bl	80088f4 <HAL_TIMEx_MasterConfigSynchronization>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800626c:	f7ff fc78 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);        	/* Enable timers and timer interrupts */
 8006270:	4803      	ldr	r0, [pc, #12]	; (8006280 <MX_TIM4_Init+0x9c>)
 8006272:	f002 f8c1 	bl	80083f8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8006276:	bf00      	nop
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000240 	.word	0x20000240
 8006284:	40000800 	.word	0x40000800

08006288 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0e      	ldr	r2, [pc, #56]	; (80062d0 <HAL_TIM_Base_MspInit+0x48>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d115      	bne.n	80062c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <HAL_TIM_Base_MspInit+0x4c>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	4a0c      	ldr	r2, [pc, #48]	; (80062d4 <HAL_TIM_Base_MspInit+0x4c>)
 80062a4:	f043 0304 	orr.w	r3, r3, #4
 80062a8:	6413      	str	r3, [r2, #64]	; 0x40
 80062aa:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <HAL_TIM_Base_MspInit+0x4c>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 1);
 80062b6:	2201      	movs	r2, #1
 80062b8:	2102      	movs	r1, #2
 80062ba:	201e      	movs	r0, #30
 80062bc:	f000 fa93 	bl	80067e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80062c0:	201e      	movs	r0, #30
 80062c2:	f000 faac 	bl	800681e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40023800 	.word	0x40023800

080062d8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80062e0:	1d39      	adds	r1, r7, #4
 80062e2:	f04f 33ff 	mov.w	r3, #4294967295
 80062e6:	2201      	movs	r2, #1
 80062e8:	4803      	ldr	r0, [pc, #12]	; (80062f8 <__io_putchar+0x20>)
 80062ea:	f002 fbcf 	bl	8008a8c <HAL_UART_Transmit>
	return ch;
 80062ee:	687b      	ldr	r3, [r7, #4]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000358 	.word	0x20000358

080062fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006300:	4b13      	ldr	r3, [pc, #76]	; (8006350 <MX_USART1_UART_Init+0x54>)
 8006302:	4a14      	ldr	r2, [pc, #80]	; (8006354 <MX_USART1_UART_Init+0x58>)
 8006304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006306:	4b12      	ldr	r3, [pc, #72]	; (8006350 <MX_USART1_UART_Init+0x54>)
 8006308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800630c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800630e:	4b10      	ldr	r3, [pc, #64]	; (8006350 <MX_USART1_UART_Init+0x54>)
 8006310:	2200      	movs	r2, #0
 8006312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006314:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <MX_USART1_UART_Init+0x54>)
 8006316:	2200      	movs	r2, #0
 8006318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <MX_USART1_UART_Init+0x54>)
 800631c:	2200      	movs	r2, #0
 800631e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <MX_USART1_UART_Init+0x54>)
 8006322:	220c      	movs	r2, #12
 8006324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006326:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <MX_USART1_UART_Init+0x54>)
 8006328:	2200      	movs	r2, #0
 800632a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800632c:	4b08      	ldr	r3, [pc, #32]	; (8006350 <MX_USART1_UART_Init+0x54>)
 800632e:	2200      	movs	r2, #0
 8006330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006332:	4807      	ldr	r0, [pc, #28]	; (8006350 <MX_USART1_UART_Init+0x54>)
 8006334:	f002 fb5a 	bl	80089ec <HAL_UART_Init>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800633e:	f7ff fc0f 	bl	8005b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* This function enables the receive interrupt: flag UART_IT_RXNE and sets
   * the receive buffer and the maximum amount of data the receive buffer can receive */
   HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8006342:	2201      	movs	r2, #1
 8006344:	4904      	ldr	r1, [pc, #16]	; (8006358 <MX_USART1_UART_Init+0x5c>)
 8006346:	4802      	ldr	r0, [pc, #8]	; (8006350 <MX_USART1_UART_Init+0x54>)
 8006348:	f002 fc2b 	bl	8008ba2 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800634c:	bf00      	nop
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20000358 	.word	0x20000358
 8006354:	40011000 	.word	0x40011000
 8006358:	20000354 	.word	0x20000354

0800635c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006364:	f107 0314 	add.w	r3, r7, #20
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1d      	ldr	r2, [pc, #116]	; (80063f0 <HAL_UART_MspInit+0x94>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d134      	bne.n	80063e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <HAL_UART_MspInit+0x98>)
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	4a1b      	ldr	r2, [pc, #108]	; (80063f4 <HAL_UART_MspInit+0x98>)
 8006388:	f043 0310 	orr.w	r3, r3, #16
 800638c:	6453      	str	r3, [r2, #68]	; 0x44
 800638e:	4b19      	ldr	r3, [pc, #100]	; (80063f4 <HAL_UART_MspInit+0x98>)
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <HAL_UART_MspInit+0x98>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	4a14      	ldr	r2, [pc, #80]	; (80063f4 <HAL_UART_MspInit+0x98>)
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	6313      	str	r3, [r2, #48]	; 0x30
 80063aa:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <HAL_UART_MspInit+0x98>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80063b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80063ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063bc:	2302      	movs	r3, #2
 80063be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c4:	2303      	movs	r3, #3
 80063c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80063c8:	2307      	movs	r3, #7
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063cc:	f107 0314 	add.w	r3, r7, #20
 80063d0:	4619      	mov	r1, r3
 80063d2:	4809      	ldr	r0, [pc, #36]	; (80063f8 <HAL_UART_MspInit+0x9c>)
 80063d4:	f000 fad0 	bl	8006978 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 2);
 80063d8:	2202      	movs	r2, #2
 80063da:	2102      	movs	r1, #2
 80063dc:	2025      	movs	r0, #37	; 0x25
 80063de:	f000 fa02 	bl	80067e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80063e2:	2025      	movs	r0, #37	; 0x25
 80063e4:	f000 fa1b 	bl	800681e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80063e8:	bf00      	nop
 80063ea:	3728      	adds	r7, #40	; 0x28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40011000 	.word	0x40011000
 80063f4:	40023800 	.word	0x40023800
 80063f8:	40020000 	.word	0x40020000

080063fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)                      /* if it is serial port USART1 */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a24      	ldr	r2, [pc, #144]	; (800649c <HAL_UART_RxCpltCallback+0xa0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d142      	bne.n	8006494 <HAL_UART_RxCpltCallback+0x98>
    {
        if ((g_usart_rx_sta & 0x8000) == 0)             /* receipt not completed */
 800640e:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b21b      	sxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	db38      	blt.n	800648a <HAL_UART_RxCpltCallback+0x8e>
        {
            if (g_usart_rx_sta & 0x4000)                /* 0x0d has been received (the Enter key). */
 8006418:	4b21      	ldr	r3, [pc, #132]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d011      	beq.n	8006448 <HAL_UART_RxCpltCallback+0x4c>
            {
                if (g_rx_buffer[0] != 0x0a)             /* this is not 0x0a (that is, not a newline key) */
 8006424:	4b1f      	ldr	r3, [pc, #124]	; (80064a4 <HAL_UART_RxCpltCallback+0xa8>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b0a      	cmp	r3, #10
 800642a:	d003      	beq.n	8006434 <HAL_UART_RxCpltCallback+0x38>
                {
                    g_usart_rx_sta = 0;                 /* receive error,restart */
 800642c:	4b1c      	ldr	r3, [pc, #112]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 800642e:	2200      	movs	r2, #0
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e02a      	b.n	800648a <HAL_UART_RxCpltCallback+0x8e>
                }
                else                                    /* it gets 0x0a (the newline key) */
                {
                    g_usart_rx_sta |= 0x8000;           /* the reception is complete */
 8006434:	4b1a      	ldr	r3, [pc, #104]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006440:	b29a      	uxth	r2, r3
 8006442:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e020      	b.n	800648a <HAL_UART_RxCpltCallback+0x8e>
                }
            }
            else                                        /* 0X0d has not been reached yet (the Enter key) */
            {
                if (g_rx_buffer[0] == 0x0d)
 8006448:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <HAL_UART_RxCpltCallback+0xa8>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b0d      	cmp	r3, #13
 800644e:	d107      	bne.n	8006460 <HAL_UART_RxCpltCallback+0x64>
                    g_usart_rx_sta |= 0x4000;
 8006450:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006458:	b29a      	uxth	r2, r3
 800645a:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	e014      	b.n	800648a <HAL_UART_RxCpltCallback+0x8e>
                else
                {
                    g_usart_rx_buf[g_usart_rx_sta & 0X3FFF] = g_rx_buffer[0];
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006468:	4a0e      	ldr	r2, [pc, #56]	; (80064a4 <HAL_UART_RxCpltCallback+0xa8>)
 800646a:	7811      	ldrb	r1, [r2, #0]
 800646c:	4a0e      	ldr	r2, [pc, #56]	; (80064a8 <HAL_UART_RxCpltCallback+0xac>)
 800646e:	54d1      	strb	r1, [r2, r3]
                    g_usart_rx_sta++;
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	3301      	adds	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 800647a:	801a      	strh	r2, [r3, #0]

                    if (g_usart_rx_sta > (USART_REC_LEN - 1))
 800647c:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	2bc7      	cmp	r3, #199	; 0xc7
 8006482:	d902      	bls.n	800648a <HAL_UART_RxCpltCallback+0x8e>
                    {
                        g_usart_rx_sta = 0;             /* receive data error, start receive again */
 8006484:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <HAL_UART_RxCpltCallback+0xa4>)
 8006486:	2200      	movs	r2, #0
 8006488:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 800648a:	2201      	movs	r2, #1
 800648c:	4905      	ldr	r1, [pc, #20]	; (80064a4 <HAL_UART_RxCpltCallback+0xa8>)
 800648e:	4807      	ldr	r0, [pc, #28]	; (80064ac <HAL_UART_RxCpltCallback+0xb0>)
 8006490:	f002 fb87 	bl	8008ba2 <HAL_UART_Receive_IT>
    }
}
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40011000 	.word	0x40011000
 80064a0:	20000350 	.word	0x20000350
 80064a4:	20000354 	.word	0x20000354
 80064a8:	20000288 	.word	0x20000288
 80064ac:	20000358 	.word	0x20000358

080064b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80064b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80064b4:	f7ff fe84 	bl	80061c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80064b8:	480c      	ldr	r0, [pc, #48]	; (80064ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80064ba:	490d      	ldr	r1, [pc, #52]	; (80064f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80064bc:	4a0d      	ldr	r2, [pc, #52]	; (80064f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80064be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064c0:	e002      	b.n	80064c8 <LoopCopyDataInit>

080064c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064c6:	3304      	adds	r3, #4

080064c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064cc:	d3f9      	bcc.n	80064c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064ce:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80064d0:	4c0a      	ldr	r4, [pc, #40]	; (80064fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80064d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064d4:	e001      	b.n	80064da <LoopFillZerobss>

080064d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064d8:	3204      	adds	r2, #4

080064da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064dc:	d3fb      	bcc.n	80064d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80064de:	f003 fe37 	bl	800a150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80064e2:	f7ff fa01 	bl	80058e8 <main>
  bx  lr    
 80064e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80064e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80064ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064f0:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 80064f4:	0800e8bc 	.word	0x0800e8bc
  ldr r2, =_sbss
 80064f8:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80064fc:	200004f0 	.word	0x200004f0

08006500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006500:	e7fe      	b.n	8006500 <ADC_IRQHandler>
	...

08006504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006508:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <HAL_Init+0x40>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a0d      	ldr	r2, [pc, #52]	; (8006544 <HAL_Init+0x40>)
 800650e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006514:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <HAL_Init+0x40>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a0a      	ldr	r2, [pc, #40]	; (8006544 <HAL_Init+0x40>)
 800651a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800651e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006520:	4b08      	ldr	r3, [pc, #32]	; (8006544 <HAL_Init+0x40>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a07      	ldr	r2, [pc, #28]	; (8006544 <HAL_Init+0x40>)
 8006526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800652c:	2003      	movs	r0, #3
 800652e:	f000 f94f 	bl	80067d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006532:	2000      	movs	r0, #0
 8006534:	f000 f808 	bl	8006548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006538:	f7ff fd36 	bl	8005fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40023c00 	.word	0x40023c00

08006548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006550:	4b12      	ldr	r3, [pc, #72]	; (800659c <HAL_InitTick+0x54>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_InitTick+0x58>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	4619      	mov	r1, r3
 800655a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800655e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006562:	fbb2 f3f3 	udiv	r3, r2, r3
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f967 	bl	800683a <HAL_SYSTICK_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e00e      	b.n	8006594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b0f      	cmp	r3, #15
 800657a:	d80a      	bhi.n	8006592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800657c:	2200      	movs	r2, #0
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	f000 f92f 	bl	80067e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006588:	4a06      	ldr	r2, [pc, #24]	; (80065a4 <HAL_InitTick+0x5c>)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e000      	b.n	8006594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000134 	.word	0x20000134
 80065a0:	2000013c 	.word	0x2000013c
 80065a4:	20000138 	.word	0x20000138

080065a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <HAL_IncTick+0x20>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <HAL_IncTick+0x24>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4413      	add	r3, r2
 80065b8:	4a04      	ldr	r2, [pc, #16]	; (80065cc <HAL_IncTick+0x24>)
 80065ba:	6013      	str	r3, [r2, #0]
}
 80065bc:	bf00      	nop
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	2000013c 	.word	0x2000013c
 80065cc:	200003a0 	.word	0x200003a0

080065d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return uwTick;
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <HAL_GetTick+0x14>)
 80065d6:	681b      	ldr	r3, [r3, #0]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	200003a0 	.word	0x200003a0

080065e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065f0:	f7ff ffee 	bl	80065d0 <HAL_GetTick>
 80065f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d005      	beq.n	800660e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006602:	4b0a      	ldr	r3, [pc, #40]	; (800662c <HAL_Delay+0x44>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800660e:	bf00      	nop
 8006610:	f7ff ffde 	bl	80065d0 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	d8f7      	bhi.n	8006610 <HAL_Delay+0x28>
  {
  }
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	2000013c 	.word	0x2000013c

08006630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006640:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <__NVIC_SetPriorityGrouping+0x44>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800664c:	4013      	ands	r3, r2
 800664e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800665c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006662:	4a04      	ldr	r2, [pc, #16]	; (8006674 <__NVIC_SetPriorityGrouping+0x44>)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	60d3      	str	r3, [r2, #12]
}
 8006668:	bf00      	nop
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	e000ed00 	.word	0xe000ed00

08006678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <__NVIC_GetPriorityGrouping+0x18>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	f003 0307 	and.w	r3, r3, #7
}
 8006686:	4618      	mov	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	e000ed00 	.word	0xe000ed00

08006694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	db0b      	blt.n	80066be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	f003 021f 	and.w	r2, r3, #31
 80066ac:	4907      	ldr	r1, [pc, #28]	; (80066cc <__NVIC_EnableIRQ+0x38>)
 80066ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	2001      	movs	r0, #1
 80066b6:	fa00 f202 	lsl.w	r2, r0, r2
 80066ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	e000e100 	.word	0xe000e100

080066d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db0a      	blt.n	80066fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	490c      	ldr	r1, [pc, #48]	; (800671c <__NVIC_SetPriority+0x4c>)
 80066ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ee:	0112      	lsls	r2, r2, #4
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	440b      	add	r3, r1
 80066f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066f8:	e00a      	b.n	8006710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	4908      	ldr	r1, [pc, #32]	; (8006720 <__NVIC_SetPriority+0x50>)
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	3b04      	subs	r3, #4
 8006708:	0112      	lsls	r2, r2, #4
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	440b      	add	r3, r1
 800670e:	761a      	strb	r2, [r3, #24]
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	e000e100 	.word	0xe000e100
 8006720:	e000ed00 	.word	0xe000ed00

08006724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006724:	b480      	push	{r7}
 8006726:	b089      	sub	sp, #36	; 0x24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f1c3 0307 	rsb	r3, r3, #7
 800673e:	2b04      	cmp	r3, #4
 8006740:	bf28      	it	cs
 8006742:	2304      	movcs	r3, #4
 8006744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3304      	adds	r3, #4
 800674a:	2b06      	cmp	r3, #6
 800674c:	d902      	bls.n	8006754 <NVIC_EncodePriority+0x30>
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	3b03      	subs	r3, #3
 8006752:	e000      	b.n	8006756 <NVIC_EncodePriority+0x32>
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006758:	f04f 32ff 	mov.w	r2, #4294967295
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	43da      	mvns	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	401a      	ands	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800676c:	f04f 31ff 	mov.w	r1, #4294967295
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	fa01 f303 	lsl.w	r3, r1, r3
 8006776:	43d9      	mvns	r1, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800677c:	4313      	orrs	r3, r2
         );
}
 800677e:	4618      	mov	r0, r3
 8006780:	3724      	adds	r7, #36	; 0x24
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3b01      	subs	r3, #1
 8006798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800679c:	d301      	bcc.n	80067a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800679e:	2301      	movs	r3, #1
 80067a0:	e00f      	b.n	80067c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067a2:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <SysTick_Config+0x40>)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067aa:	210f      	movs	r1, #15
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	f7ff ff8e 	bl	80066d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067b4:	4b05      	ldr	r3, [pc, #20]	; (80067cc <SysTick_Config+0x40>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067ba:	4b04      	ldr	r3, [pc, #16]	; (80067cc <SysTick_Config+0x40>)
 80067bc:	2207      	movs	r2, #7
 80067be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	e000e010 	.word	0xe000e010

080067d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff ff29 	bl	8006630 <__NVIC_SetPriorityGrouping>
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b086      	sub	sp, #24
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	4603      	mov	r3, r0
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067f8:	f7ff ff3e 	bl	8006678 <__NVIC_GetPriorityGrouping>
 80067fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	6978      	ldr	r0, [r7, #20]
 8006804:	f7ff ff8e 	bl	8006724 <NVIC_EncodePriority>
 8006808:	4602      	mov	r2, r0
 800680a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff ff5d 	bl	80066d0 <__NVIC_SetPriority>
}
 8006816:	bf00      	nop
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	4603      	mov	r3, r0
 8006826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff ff31 	bl	8006694 <__NVIC_EnableIRQ>
}
 8006832:	bf00      	nop
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff ffa2 	bl	800678c <SysTick_Config>
 8006848:	4603      	mov	r3, r0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006860:	f7ff feb6 	bl	80065d0 <HAL_GetTick>
 8006864:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d008      	beq.n	8006884 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2280      	movs	r2, #128	; 0x80
 8006876:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e052      	b.n	800692a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0216 	bic.w	r2, r2, #22
 8006892:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <HAL_DMA_Abort+0x62>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d007      	beq.n	80068c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0208 	bic.w	r2, r2, #8
 80068c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068d4:	e013      	b.n	80068fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068d6:	f7ff fe7b 	bl	80065d0 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b05      	cmp	r3, #5
 80068e2:	d90c      	bls.n	80068fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2203      	movs	r2, #3
 80068ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e015      	b.n	800692a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e4      	bne.n	80068d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006910:	223f      	movs	r2, #63	; 0x3f
 8006912:	409a      	lsls	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d004      	beq.n	8006950 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2280      	movs	r2, #128	; 0x80
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e00c      	b.n	800696a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2205      	movs	r2, #5
 8006954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006978:	b480      	push	{r7}
 800697a:	b089      	sub	sp, #36	; 0x24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006986:	2300      	movs	r3, #0
 8006988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800698a:	2300      	movs	r3, #0
 800698c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
 8006992:	e16b      	b.n	8006c6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006994:	2201      	movs	r2, #1
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4013      	ands	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	f040 815a 	bne.w	8006c66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d005      	beq.n	80069ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d130      	bne.n	8006a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	2203      	movs	r2, #3
 80069d6:	fa02 f303 	lsl.w	r3, r2, r3
 80069da:	43db      	mvns	r3, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4013      	ands	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a00:	2201      	movs	r2, #1
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	091b      	lsrs	r3, r3, #4
 8006a16:	f003 0201 	and.w	r2, r3, #1
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d017      	beq.n	8006a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	2203      	movs	r2, #3
 8006a44:	fa02 f303 	lsl.w	r3, r2, r3
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d123      	bne.n	8006abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	08da      	lsrs	r2, r3, #3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3208      	adds	r2, #8
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	220f      	movs	r2, #15
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	08da      	lsrs	r2, r3, #3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3208      	adds	r2, #8
 8006ab6:	69b9      	ldr	r1, [r7, #24]
 8006ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 0203 	and.w	r2, r3, #3
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80b4 	beq.w	8006c66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	4b60      	ldr	r3, [pc, #384]	; (8006c84 <HAL_GPIO_Init+0x30c>)
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	4a5f      	ldr	r2, [pc, #380]	; (8006c84 <HAL_GPIO_Init+0x30c>)
 8006b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b0e:	4b5d      	ldr	r3, [pc, #372]	; (8006c84 <HAL_GPIO_Init+0x30c>)
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b1a:	4a5b      	ldr	r2, [pc, #364]	; (8006c88 <HAL_GPIO_Init+0x310>)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	089b      	lsrs	r3, r3, #2
 8006b20:	3302      	adds	r3, #2
 8006b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	220f      	movs	r2, #15
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	43db      	mvns	r3, r3
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a52      	ldr	r2, [pc, #328]	; (8006c8c <HAL_GPIO_Init+0x314>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d02b      	beq.n	8006b9e <HAL_GPIO_Init+0x226>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a51      	ldr	r2, [pc, #324]	; (8006c90 <HAL_GPIO_Init+0x318>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d025      	beq.n	8006b9a <HAL_GPIO_Init+0x222>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a50      	ldr	r2, [pc, #320]	; (8006c94 <HAL_GPIO_Init+0x31c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01f      	beq.n	8006b96 <HAL_GPIO_Init+0x21e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a4f      	ldr	r2, [pc, #316]	; (8006c98 <HAL_GPIO_Init+0x320>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d019      	beq.n	8006b92 <HAL_GPIO_Init+0x21a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a4e      	ldr	r2, [pc, #312]	; (8006c9c <HAL_GPIO_Init+0x324>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d013      	beq.n	8006b8e <HAL_GPIO_Init+0x216>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a4d      	ldr	r2, [pc, #308]	; (8006ca0 <HAL_GPIO_Init+0x328>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00d      	beq.n	8006b8a <HAL_GPIO_Init+0x212>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a4c      	ldr	r2, [pc, #304]	; (8006ca4 <HAL_GPIO_Init+0x32c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <HAL_GPIO_Init+0x20e>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a4b      	ldr	r2, [pc, #300]	; (8006ca8 <HAL_GPIO_Init+0x330>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d101      	bne.n	8006b82 <HAL_GPIO_Init+0x20a>
 8006b7e:	2307      	movs	r3, #7
 8006b80:	e00e      	b.n	8006ba0 <HAL_GPIO_Init+0x228>
 8006b82:	2308      	movs	r3, #8
 8006b84:	e00c      	b.n	8006ba0 <HAL_GPIO_Init+0x228>
 8006b86:	2306      	movs	r3, #6
 8006b88:	e00a      	b.n	8006ba0 <HAL_GPIO_Init+0x228>
 8006b8a:	2305      	movs	r3, #5
 8006b8c:	e008      	b.n	8006ba0 <HAL_GPIO_Init+0x228>
 8006b8e:	2304      	movs	r3, #4
 8006b90:	e006      	b.n	8006ba0 <HAL_GPIO_Init+0x228>
 8006b92:	2303      	movs	r3, #3
 8006b94:	e004      	b.n	8006ba0 <HAL_GPIO_Init+0x228>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e002      	b.n	8006ba0 <HAL_GPIO_Init+0x228>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e000      	b.n	8006ba0 <HAL_GPIO_Init+0x228>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	f002 0203 	and.w	r2, r2, #3
 8006ba6:	0092      	lsls	r2, r2, #2
 8006ba8:	4093      	lsls	r3, r2
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bb0:	4935      	ldr	r1, [pc, #212]	; (8006c88 <HAL_GPIO_Init+0x310>)
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	089b      	lsrs	r3, r3, #2
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bbe:	4b3b      	ldr	r3, [pc, #236]	; (8006cac <HAL_GPIO_Init+0x334>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006be2:	4a32      	ldr	r2, [pc, #200]	; (8006cac <HAL_GPIO_Init+0x334>)
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006be8:	4b30      	ldr	r3, [pc, #192]	; (8006cac <HAL_GPIO_Init+0x334>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c0c:	4a27      	ldr	r2, [pc, #156]	; (8006cac <HAL_GPIO_Init+0x334>)
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c12:	4b26      	ldr	r3, [pc, #152]	; (8006cac <HAL_GPIO_Init+0x334>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c36:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <HAL_GPIO_Init+0x334>)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <HAL_GPIO_Init+0x334>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	43db      	mvns	r3, r3
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c60:	4a12      	ldr	r2, [pc, #72]	; (8006cac <HAL_GPIO_Init+0x334>)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b0f      	cmp	r3, #15
 8006c70:	f67f ae90 	bls.w	8006994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	3724      	adds	r7, #36	; 0x24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40023800 	.word	0x40023800
 8006c88:	40013800 	.word	0x40013800
 8006c8c:	40020000 	.word	0x40020000
 8006c90:	40020400 	.word	0x40020400
 8006c94:	40020800 	.word	0x40020800
 8006c98:	40020c00 	.word	0x40020c00
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	40021400 	.word	0x40021400
 8006ca4:	40021800 	.word	0x40021800
 8006ca8:	40021c00 	.word	0x40021c00
 8006cac:	40013c00 	.word	0x40013c00

08006cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	807b      	strh	r3, [r7, #2]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cc0:	787b      	ldrb	r3, [r7, #1]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cc6:	887a      	ldrh	r2, [r7, #2]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ccc:	e003      	b.n	8006cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006cce:	887b      	ldrh	r3, [r7, #2]
 8006cd0:	041a      	lsls	r2, r3, #16
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	619a      	str	r2, [r3, #24]
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006cf4:	887a      	ldrh	r2, [r7, #2]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	041a      	lsls	r2, r3, #16
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	43d9      	mvns	r1, r3
 8006d00:	887b      	ldrh	r3, [r7, #2]
 8006d02:	400b      	ands	r3, r1
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	619a      	str	r2, [r3, #24]
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
	...

08006d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e267      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d075      	beq.n	8006e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d36:	4b88      	ldr	r3, [pc, #544]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 030c 	and.w	r3, r3, #12
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d00c      	beq.n	8006d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d42:	4b85      	ldr	r3, [pc, #532]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d112      	bne.n	8006d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d4e:	4b82      	ldr	r3, [pc, #520]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d5a:	d10b      	bne.n	8006d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d5c:	4b7e      	ldr	r3, [pc, #504]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d05b      	beq.n	8006e20 <HAL_RCC_OscConfig+0x108>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d157      	bne.n	8006e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e242      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d106      	bne.n	8006d8c <HAL_RCC_OscConfig+0x74>
 8006d7e:	4b76      	ldr	r3, [pc, #472]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a75      	ldr	r2, [pc, #468]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	e01d      	b.n	8006dc8 <HAL_RCC_OscConfig+0xb0>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d94:	d10c      	bne.n	8006db0 <HAL_RCC_OscConfig+0x98>
 8006d96:	4b70      	ldr	r3, [pc, #448]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a6f      	ldr	r2, [pc, #444]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	4b6d      	ldr	r3, [pc, #436]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a6c      	ldr	r2, [pc, #432]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	e00b      	b.n	8006dc8 <HAL_RCC_OscConfig+0xb0>
 8006db0:	4b69      	ldr	r3, [pc, #420]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a68      	ldr	r2, [pc, #416]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	4b66      	ldr	r3, [pc, #408]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a65      	ldr	r2, [pc, #404]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d013      	beq.n	8006df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd0:	f7ff fbfe 	bl	80065d0 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dd8:	f7ff fbfa 	bl	80065d0 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b64      	cmp	r3, #100	; 0x64
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e207      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dea:	4b5b      	ldr	r3, [pc, #364]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0xc0>
 8006df6:	e014      	b.n	8006e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df8:	f7ff fbea 	bl	80065d0 <HAL_GetTick>
 8006dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e00:	f7ff fbe6 	bl	80065d0 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b64      	cmp	r3, #100	; 0x64
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e1f3      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e12:	4b51      	ldr	r3, [pc, #324]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1f0      	bne.n	8006e00 <HAL_RCC_OscConfig+0xe8>
 8006e1e:	e000      	b.n	8006e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d063      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e2e:	4b4a      	ldr	r3, [pc, #296]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 030c 	and.w	r3, r3, #12
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e3a:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d11c      	bne.n	8006e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e46:	4b44      	ldr	r3, [pc, #272]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d116      	bne.n	8006e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e52:	4b41      	ldr	r3, [pc, #260]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <HAL_RCC_OscConfig+0x152>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d001      	beq.n	8006e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e1c7      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e6a:	4b3b      	ldr	r3, [pc, #236]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	4937      	ldr	r1, [pc, #220]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e7e:	e03a      	b.n	8006ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d020      	beq.n	8006eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e88:	4b34      	ldr	r3, [pc, #208]	; (8006f5c <HAL_RCC_OscConfig+0x244>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8e:	f7ff fb9f 	bl	80065d0 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e96:	f7ff fb9b 	bl	80065d0 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e1a8      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea8:	4b2b      	ldr	r3, [pc, #172]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0f0      	beq.n	8006e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eb4:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4925      	ldr	r1, [pc, #148]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	600b      	str	r3, [r1, #0]
 8006ec8:	e015      	b.n	8006ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eca:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <HAL_RCC_OscConfig+0x244>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed0:	f7ff fb7e 	bl	80065d0 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ed8:	f7ff fb7a 	bl	80065d0 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e187      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eea:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1f0      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d036      	beq.n	8006f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d016      	beq.n	8006f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f0a:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <HAL_RCC_OscConfig+0x248>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f10:	f7ff fb5e 	bl	80065d0 <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f18:	f7ff fb5a 	bl	80065d0 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e167      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <HAL_RCC_OscConfig+0x240>)
 8006f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f0      	beq.n	8006f18 <HAL_RCC_OscConfig+0x200>
 8006f36:	e01b      	b.n	8006f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f38:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <HAL_RCC_OscConfig+0x248>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f3e:	f7ff fb47 	bl	80065d0 <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f44:	e00e      	b.n	8006f64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f46:	f7ff fb43 	bl	80065d0 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d907      	bls.n	8006f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e150      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	42470000 	.word	0x42470000
 8006f60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f64:	4b88      	ldr	r3, [pc, #544]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1ea      	bne.n	8006f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8097 	beq.w	80070ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f82:	4b81      	ldr	r3, [pc, #516]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10f      	bne.n	8006fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	4b7d      	ldr	r3, [pc, #500]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	4a7c      	ldr	r2, [pc, #496]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f9e:	4b7a      	ldr	r3, [pc, #488]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa6:	60bb      	str	r3, [r7, #8]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006faa:	2301      	movs	r3, #1
 8006fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fae:	4b77      	ldr	r3, [pc, #476]	; (800718c <HAL_RCC_OscConfig+0x474>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d118      	bne.n	8006fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fba:	4b74      	ldr	r3, [pc, #464]	; (800718c <HAL_RCC_OscConfig+0x474>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a73      	ldr	r2, [pc, #460]	; (800718c <HAL_RCC_OscConfig+0x474>)
 8006fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fc6:	f7ff fb03 	bl	80065d0 <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fce:	f7ff faff 	bl	80065d0 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e10c      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe0:	4b6a      	ldr	r3, [pc, #424]	; (800718c <HAL_RCC_OscConfig+0x474>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0f0      	beq.n	8006fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d106      	bne.n	8007002 <HAL_RCC_OscConfig+0x2ea>
 8006ff4:	4b64      	ldr	r3, [pc, #400]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff8:	4a63      	ldr	r2, [pc, #396]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8006ffa:	f043 0301 	orr.w	r3, r3, #1
 8006ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8007000:	e01c      	b.n	800703c <HAL_RCC_OscConfig+0x324>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b05      	cmp	r3, #5
 8007008:	d10c      	bne.n	8007024 <HAL_RCC_OscConfig+0x30c>
 800700a:	4b5f      	ldr	r3, [pc, #380]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	4a5e      	ldr	r2, [pc, #376]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007010:	f043 0304 	orr.w	r3, r3, #4
 8007014:	6713      	str	r3, [r2, #112]	; 0x70
 8007016:	4b5c      	ldr	r3, [pc, #368]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	4a5b      	ldr	r2, [pc, #364]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	6713      	str	r3, [r2, #112]	; 0x70
 8007022:	e00b      	b.n	800703c <HAL_RCC_OscConfig+0x324>
 8007024:	4b58      	ldr	r3, [pc, #352]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	4a57      	ldr	r2, [pc, #348]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 800702a:	f023 0301 	bic.w	r3, r3, #1
 800702e:	6713      	str	r3, [r2, #112]	; 0x70
 8007030:	4b55      	ldr	r3, [pc, #340]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007034:	4a54      	ldr	r2, [pc, #336]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007036:	f023 0304 	bic.w	r3, r3, #4
 800703a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d015      	beq.n	8007070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007044:	f7ff fac4 	bl	80065d0 <HAL_GetTick>
 8007048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800704a:	e00a      	b.n	8007062 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800704c:	f7ff fac0 	bl	80065d0 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	f241 3288 	movw	r2, #5000	; 0x1388
 800705a:	4293      	cmp	r3, r2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e0cb      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007062:	4b49      	ldr	r3, [pc, #292]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0ee      	beq.n	800704c <HAL_RCC_OscConfig+0x334>
 800706e:	e014      	b.n	800709a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007070:	f7ff faae 	bl	80065d0 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007076:	e00a      	b.n	800708e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007078:	f7ff faaa 	bl	80065d0 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	; 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e0b5      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800708e:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1ee      	bne.n	8007078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d105      	bne.n	80070ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070a0:	4b39      	ldr	r3, [pc, #228]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	4a38      	ldr	r2, [pc, #224]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 80070a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80a1 	beq.w	80071f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070b6:	4b34      	ldr	r3, [pc, #208]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 030c 	and.w	r3, r3, #12
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d05c      	beq.n	800717c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d141      	bne.n	800714e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ca:	4b31      	ldr	r3, [pc, #196]	; (8007190 <HAL_RCC_OscConfig+0x478>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d0:	f7ff fa7e 	bl	80065d0 <HAL_GetTick>
 80070d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d6:	e008      	b.n	80070ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070d8:	f7ff fa7a 	bl	80065d0 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e087      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ea:	4b27      	ldr	r3, [pc, #156]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1f0      	bne.n	80070d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69da      	ldr	r2, [r3, #28]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	019b      	lsls	r3, r3, #6
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	085b      	lsrs	r3, r3, #1
 800710e:	3b01      	subs	r3, #1
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	061b      	lsls	r3, r3, #24
 800711a:	491b      	ldr	r1, [pc, #108]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 800711c:	4313      	orrs	r3, r2
 800711e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007120:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <HAL_RCC_OscConfig+0x478>)
 8007122:	2201      	movs	r2, #1
 8007124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007126:	f7ff fa53 	bl	80065d0 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800712e:	f7ff fa4f 	bl	80065d0 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e05c      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007140:	4b11      	ldr	r3, [pc, #68]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0f0      	beq.n	800712e <HAL_RCC_OscConfig+0x416>
 800714c:	e054      	b.n	80071f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800714e:	4b10      	ldr	r3, [pc, #64]	; (8007190 <HAL_RCC_OscConfig+0x478>)
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007154:	f7ff fa3c 	bl	80065d0 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800715c:	f7ff fa38 	bl	80065d0 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e045      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800716e:	4b06      	ldr	r3, [pc, #24]	; (8007188 <HAL_RCC_OscConfig+0x470>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0x444>
 800717a:	e03d      	b.n	80071f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d107      	bne.n	8007194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e038      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
 8007188:	40023800 	.word	0x40023800
 800718c:	40007000 	.word	0x40007000
 8007190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007194:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <HAL_RCC_OscConfig+0x4ec>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d028      	beq.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d121      	bne.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d11a      	bne.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071c4:	4013      	ands	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d111      	bne.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	085b      	lsrs	r3, r3, #1
 80071dc:	3b01      	subs	r3, #1
 80071de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d107      	bne.n	80071f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d001      	beq.n	80071f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	40023800 	.word	0x40023800

08007208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0cc      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800721c:	4b68      	ldr	r3, [pc, #416]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0307 	and.w	r3, r3, #7
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	d90c      	bls.n	8007244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800722a:	4b65      	ldr	r3, [pc, #404]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007232:	4b63      	ldr	r3, [pc, #396]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d001      	beq.n	8007244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e0b8      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d020      	beq.n	8007292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800725c:	4b59      	ldr	r3, [pc, #356]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	4a58      	ldr	r2, [pc, #352]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007274:	4b53      	ldr	r3, [pc, #332]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	4a52      	ldr	r2, [pc, #328]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800727a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800727e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007280:	4b50      	ldr	r3, [pc, #320]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	494d      	ldr	r1, [pc, #308]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800728e:	4313      	orrs	r3, r2
 8007290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d044      	beq.n	8007328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d107      	bne.n	80072b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072a6:	4b47      	ldr	r3, [pc, #284]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d119      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e07f      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d003      	beq.n	80072c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d107      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072c6:	4b3f      	ldr	r3, [pc, #252]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e06f      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d6:	4b3b      	ldr	r3, [pc, #236]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e067      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072e6:	4b37      	ldr	r3, [pc, #220]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f023 0203 	bic.w	r2, r3, #3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	4934      	ldr	r1, [pc, #208]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072f8:	f7ff f96a 	bl	80065d0 <HAL_GetTick>
 80072fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072fe:	e00a      	b.n	8007316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007300:	f7ff f966 	bl	80065d0 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	f241 3288 	movw	r2, #5000	; 0x1388
 800730e:	4293      	cmp	r3, r2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e04f      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007316:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 020c 	and.w	r2, r3, #12
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	429a      	cmp	r2, r3
 8007326:	d1eb      	bne.n	8007300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007328:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d20c      	bcs.n	8007350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007336:	4b22      	ldr	r3, [pc, #136]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800733e:	4b20      	ldr	r3, [pc, #128]	; (80073c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d001      	beq.n	8007350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e032      	b.n	80073b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800735c:	4b19      	ldr	r3, [pc, #100]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	4916      	ldr	r1, [pc, #88]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800736a:	4313      	orrs	r3, r2
 800736c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800737a:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	490e      	ldr	r1, [pc, #56]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	4313      	orrs	r3, r2
 800738c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800738e:	f000 f821 	bl	80073d4 <HAL_RCC_GetSysClockFreq>
 8007392:	4602      	mov	r2, r0
 8007394:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	091b      	lsrs	r3, r3, #4
 800739a:	f003 030f 	and.w	r3, r3, #15
 800739e:	490a      	ldr	r1, [pc, #40]	; (80073c8 <HAL_RCC_ClockConfig+0x1c0>)
 80073a0:	5ccb      	ldrb	r3, [r1, r3]
 80073a2:	fa22 f303 	lsr.w	r3, r2, r3
 80073a6:	4a09      	ldr	r2, [pc, #36]	; (80073cc <HAL_RCC_ClockConfig+0x1c4>)
 80073a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073aa:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <HAL_RCC_ClockConfig+0x1c8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff f8ca 	bl	8006548 <HAL_InitTick>

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40023c00 	.word	0x40023c00
 80073c4:	40023800 	.word	0x40023800
 80073c8:	0800e860 	.word	0x0800e860
 80073cc:	20000134 	.word	0x20000134
 80073d0:	20000138 	.word	0x20000138

080073d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d8:	b090      	sub	sp, #64	; 0x40
 80073da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
 80073e0:	2300      	movs	r3, #0
 80073e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e4:	2300      	movs	r3, #0
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073ec:	4b59      	ldr	r3, [pc, #356]	; (8007554 <HAL_RCC_GetSysClockFreq+0x180>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 030c 	and.w	r3, r3, #12
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d00d      	beq.n	8007414 <HAL_RCC_GetSysClockFreq+0x40>
 80073f8:	2b08      	cmp	r3, #8
 80073fa:	f200 80a1 	bhi.w	8007540 <HAL_RCC_GetSysClockFreq+0x16c>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <HAL_RCC_GetSysClockFreq+0x34>
 8007402:	2b04      	cmp	r3, #4
 8007404:	d003      	beq.n	800740e <HAL_RCC_GetSysClockFreq+0x3a>
 8007406:	e09b      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007408:	4b53      	ldr	r3, [pc, #332]	; (8007558 <HAL_RCC_GetSysClockFreq+0x184>)
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800740c:	e09b      	b.n	8007546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800740e:	4b53      	ldr	r3, [pc, #332]	; (800755c <HAL_RCC_GetSysClockFreq+0x188>)
 8007410:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007412:	e098      	b.n	8007546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007414:	4b4f      	ldr	r3, [pc, #316]	; (8007554 <HAL_RCC_GetSysClockFreq+0x180>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800741e:	4b4d      	ldr	r3, [pc, #308]	; (8007554 <HAL_RCC_GetSysClockFreq+0x180>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d028      	beq.n	800747c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800742a:	4b4a      	ldr	r3, [pc, #296]	; (8007554 <HAL_RCC_GetSysClockFreq+0x180>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	099b      	lsrs	r3, r3, #6
 8007430:	2200      	movs	r2, #0
 8007432:	623b      	str	r3, [r7, #32]
 8007434:	627a      	str	r2, [r7, #36]	; 0x24
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800743c:	2100      	movs	r1, #0
 800743e:	4b47      	ldr	r3, [pc, #284]	; (800755c <HAL_RCC_GetSysClockFreq+0x188>)
 8007440:	fb03 f201 	mul.w	r2, r3, r1
 8007444:	2300      	movs	r3, #0
 8007446:	fb00 f303 	mul.w	r3, r0, r3
 800744a:	4413      	add	r3, r2
 800744c:	4a43      	ldr	r2, [pc, #268]	; (800755c <HAL_RCC_GetSysClockFreq+0x188>)
 800744e:	fba0 1202 	umull	r1, r2, r0, r2
 8007452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007454:	460a      	mov	r2, r1
 8007456:	62ba      	str	r2, [r7, #40]	; 0x28
 8007458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800745a:	4413      	add	r3, r2
 800745c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	2200      	movs	r2, #0
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	61fa      	str	r2, [r7, #28]
 8007466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800746a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800746e:	f7f9 fa05 	bl	800087c <__aeabi_uldivmod>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4613      	mov	r3, r2
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800747a:	e053      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800747c:	4b35      	ldr	r3, [pc, #212]	; (8007554 <HAL_RCC_GetSysClockFreq+0x180>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	099b      	lsrs	r3, r3, #6
 8007482:	2200      	movs	r2, #0
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	617a      	str	r2, [r7, #20]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800748e:	f04f 0b00 	mov.w	fp, #0
 8007492:	4652      	mov	r2, sl
 8007494:	465b      	mov	r3, fp
 8007496:	f04f 0000 	mov.w	r0, #0
 800749a:	f04f 0100 	mov.w	r1, #0
 800749e:	0159      	lsls	r1, r3, #5
 80074a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074a4:	0150      	lsls	r0, r2, #5
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	ebb2 080a 	subs.w	r8, r2, sl
 80074ae:	eb63 090b 	sbc.w	r9, r3, fp
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80074be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80074c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80074c6:	ebb2 0408 	subs.w	r4, r2, r8
 80074ca:	eb63 0509 	sbc.w	r5, r3, r9
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	00eb      	lsls	r3, r5, #3
 80074d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074dc:	00e2      	lsls	r2, r4, #3
 80074de:	4614      	mov	r4, r2
 80074e0:	461d      	mov	r5, r3
 80074e2:	eb14 030a 	adds.w	r3, r4, sl
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	eb45 030b 	adc.w	r3, r5, fp
 80074ec:	607b      	str	r3, [r7, #4]
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074fa:	4629      	mov	r1, r5
 80074fc:	028b      	lsls	r3, r1, #10
 80074fe:	4621      	mov	r1, r4
 8007500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007504:	4621      	mov	r1, r4
 8007506:	028a      	lsls	r2, r1, #10
 8007508:	4610      	mov	r0, r2
 800750a:	4619      	mov	r1, r3
 800750c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750e:	2200      	movs	r2, #0
 8007510:	60bb      	str	r3, [r7, #8]
 8007512:	60fa      	str	r2, [r7, #12]
 8007514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007518:	f7f9 f9b0 	bl	800087c <__aeabi_uldivmod>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4613      	mov	r3, r2
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007524:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <HAL_RCC_GetSysClockFreq+0x180>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	3301      	adds	r3, #1
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	fbb2 f3f3 	udiv	r3, r2, r3
 800753c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800753e:	e002      	b.n	8007546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <HAL_RCC_GetSysClockFreq+0x184>)
 8007542:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007548:	4618      	mov	r0, r3
 800754a:	3740      	adds	r7, #64	; 0x40
 800754c:	46bd      	mov	sp, r7
 800754e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007552:	bf00      	nop
 8007554:	40023800 	.word	0x40023800
 8007558:	00f42400 	.word	0x00f42400
 800755c:	017d7840 	.word	0x017d7840

08007560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007564:	4b03      	ldr	r3, [pc, #12]	; (8007574 <HAL_RCC_GetHCLKFreq+0x14>)
 8007566:	681b      	ldr	r3, [r3, #0]
}
 8007568:	4618      	mov	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000134 	.word	0x20000134

08007578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800757c:	f7ff fff0 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 8007580:	4602      	mov	r2, r0
 8007582:	4b05      	ldr	r3, [pc, #20]	; (8007598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	0a9b      	lsrs	r3, r3, #10
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	4903      	ldr	r1, [pc, #12]	; (800759c <HAL_RCC_GetPCLK1Freq+0x24>)
 800758e:	5ccb      	ldrb	r3, [r1, r3]
 8007590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007594:	4618      	mov	r0, r3
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40023800 	.word	0x40023800
 800759c:	0800e870 	.word	0x0800e870

080075a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075a4:	f7ff ffdc 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 80075a8:	4602      	mov	r2, r0
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	0b5b      	lsrs	r3, r3, #13
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	4903      	ldr	r1, [pc, #12]	; (80075c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075b6:	5ccb      	ldrb	r3, [r1, r3]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075bc:	4618      	mov	r0, r3
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40023800 	.word	0x40023800
 80075c4:	0800e870 	.word	0x0800e870

080075c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d035      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075f0:	4b62      	ldr	r3, [pc, #392]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075f6:	f7fe ffeb 	bl	80065d0 <HAL_GetTick>
 80075fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075fc:	e008      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075fe:	f7fe ffe7 	bl	80065d0 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e0b0      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007610:	4b5b      	ldr	r3, [pc, #364]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f0      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	019a      	lsls	r2, r3, #6
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	071b      	lsls	r3, r3, #28
 8007628:	4955      	ldr	r1, [pc, #340]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007630:	4b52      	ldr	r3, [pc, #328]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007632:	2201      	movs	r2, #1
 8007634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007636:	f7fe ffcb 	bl	80065d0 <HAL_GetTick>
 800763a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800763c:	e008      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800763e:	f7fe ffc7 	bl	80065d0 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e090      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007650:	4b4b      	ldr	r3, [pc, #300]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0f0      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 8083 	beq.w	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	4b44      	ldr	r3, [pc, #272]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4a43      	ldr	r2, [pc, #268]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007678:	6413      	str	r3, [r2, #64]	; 0x40
 800767a:	4b41      	ldr	r3, [pc, #260]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007686:	4b3f      	ldr	r3, [pc, #252]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a3e      	ldr	r2, [pc, #248]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800768c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007690:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007692:	f7fe ff9d 	bl	80065d0 <HAL_GetTick>
 8007696:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007698:	e008      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800769a:	f7fe ff99 	bl	80065d0 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e062      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80076ac:	4b35      	ldr	r3, [pc, #212]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f0      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076b8:	4b31      	ldr	r3, [pc, #196]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d02f      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d028      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076d6:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076e0:	4b29      	ldr	r3, [pc, #164]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076e6:	4b28      	ldr	r3, [pc, #160]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80076ec:	4a24      	ldr	r2, [pc, #144]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80076f2:	4b23      	ldr	r3, [pc, #140]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d114      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80076fe:	f7fe ff67 	bl	80065d0 <HAL_GetTick>
 8007702:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007704:	e00a      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007706:	f7fe ff63 	bl	80065d0 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f241 3288 	movw	r2, #5000	; 0x1388
 8007714:	4293      	cmp	r3, r2
 8007716:	d901      	bls.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e02a      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800771c:	4b18      	ldr	r3, [pc, #96]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0ee      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007734:	d10d      	bne.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007736:	4b12      	ldr	r3, [pc, #72]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800774a:	490d      	ldr	r1, [pc, #52]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800774c:	4313      	orrs	r3, r2
 800774e:	608b      	str	r3, [r1, #8]
 8007750:	e005      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007752:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007758:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800775c:	6093      	str	r3, [r2, #8]
 800775e:	4b08      	ldr	r3, [pc, #32]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800776a:	4905      	ldr	r1, [pc, #20]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800776c:	4313      	orrs	r3, r2
 800776e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	42470068 	.word	0x42470068
 8007780:	40023800 	.word	0x40023800
 8007784:	40007000 	.word	0x40007000
 8007788:	42470e40 	.word	0x42470e40

0800778c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e073      	b.n	800788a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7f5b      	ldrb	r3, [r3, #29]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fe fa88 	bl	8005cc8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d055      	beq.n	8007878 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	22ca      	movs	r2, #202	; 0xca
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2253      	movs	r2, #83	; 0x53
 80077da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fbd3 	bl	8007f88 <RTC_EnterInitMode>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d12c      	bne.n	8007846 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6812      	ldr	r2, [r2, #0]
 80077f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80077fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077fe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6899      	ldr	r1, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68d2      	ldr	r2, [r2, #12]
 8007826:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6919      	ldr	r1, [r3, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	041a      	lsls	r2, r3, #16
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fbda 	bl	8007ff6 <RTC_ExitInitMode>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d110      	bne.n	800786e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800785a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	22ff      	movs	r2, #255	; 0xff
 8007874:	625a      	str	r2, [r3, #36]	; 0x24
 8007876:	e001      	b.n	800787c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007888:	7bfb      	ldrb	r3, [r7, #15]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007892:	b590      	push	{r4, r7, lr}
 8007894:	b087      	sub	sp, #28
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	7f1b      	ldrb	r3, [r3, #28]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d101      	bne.n	80078ae <HAL_RTC_SetTime+0x1c>
 80078aa:	2302      	movs	r3, #2
 80078ac:	e087      	b.n	80079be <HAL_RTC_SetTime+0x12c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2202      	movs	r2, #2
 80078b8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d126      	bne.n	800790e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2200      	movs	r2, #0
 80078d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fbb1 	bl	8008040 <RTC_ByteToBcd2>
 80078de:	4603      	mov	r3, r0
 80078e0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	785b      	ldrb	r3, [r3, #1]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fbaa 	bl	8008040 <RTC_ByteToBcd2>
 80078ec:	4603      	mov	r3, r0
 80078ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80078f0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	789b      	ldrb	r3, [r3, #2]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fba2 	bl	8008040 <RTC_ByteToBcd2>
 80078fc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80078fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	78db      	ldrb	r3, [r3, #3]
 8007906:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	e018      	b.n	8007940 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d102      	bne.n	8007922 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2200      	movs	r2, #0
 8007920:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800792e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007934:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	78db      	ldrb	r3, [r3, #3]
 800793a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800793c:	4313      	orrs	r3, r2
 800793e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	22ca      	movs	r2, #202	; 0xca
 8007946:	625a      	str	r2, [r3, #36]	; 0x24
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2253      	movs	r2, #83	; 0x53
 800794e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fb19 	bl	8007f88 <RTC_EnterInitMode>
 8007956:	4603      	mov	r3, r0
 8007958:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800795a:	7cfb      	ldrb	r3, [r7, #19]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d120      	bne.n	80079a2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800796a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800796e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800797e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6899      	ldr	r1, [r3, #8]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	431a      	orrs	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 fb2c 	bl	8007ff6 <RTC_ExitInitMode>
 800799e:	4603      	mov	r3, r0
 80079a0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80079a2:	7cfb      	ldrb	r3, [r7, #19]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d102      	bne.n	80079ae <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2201      	movs	r2, #1
 80079ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	22ff      	movs	r2, #255	; 0xff
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	771a      	strb	r2, [r3, #28]

  return status;
 80079bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd90      	pop	{r4, r7, pc}

080079c6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80079f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80079fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	0c1b      	lsrs	r3, r3, #16
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	0a1b      	lsrs	r3, r3, #8
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	0d9b      	lsrs	r3, r3, #22
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11a      	bne.n	8007a78 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fb18 	bl	800807c <RTC_Bcd2ToByte>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fb0f 	bl	800807c <RTC_Bcd2ToByte>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	461a      	mov	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	789b      	ldrb	r3, [r3, #2]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fb06 	bl	800807c <RTC_Bcd2ToByte>
 8007a70:	4603      	mov	r3, r0
 8007a72:	461a      	mov	r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a82:	b590      	push	{r4, r7, lr}
 8007a84:	b087      	sub	sp, #28
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	7f1b      	ldrb	r3, [r3, #28]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d101      	bne.n	8007a9e <HAL_RTC_SetDate+0x1c>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e071      	b.n	8007b82 <HAL_RTC_SetDate+0x100>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10e      	bne.n	8007ace <HAL_RTC_SetDate+0x4c>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d008      	beq.n	8007ace <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	f023 0310 	bic.w	r3, r3, #16
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	330a      	adds	r3, #10
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11c      	bne.n	8007b0e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	78db      	ldrb	r3, [r3, #3]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 fab1 	bl	8008040 <RTC_ByteToBcd2>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 faaa 	bl	8008040 <RTC_ByteToBcd2>
 8007aec:	4603      	mov	r3, r0
 8007aee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007af0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	789b      	ldrb	r3, [r3, #2]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 faa2 	bl	8008040 <RTC_ByteToBcd2>
 8007afc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007afe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e00e      	b.n	8007b2c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	78db      	ldrb	r3, [r3, #3]
 8007b12:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007b1a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007b20:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	22ca      	movs	r2, #202	; 0xca
 8007b32:	625a      	str	r2, [r3, #36]	; 0x24
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2253      	movs	r2, #83	; 0x53
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 fa23 	bl	8007f88 <RTC_EnterInitMode>
 8007b42:	4603      	mov	r3, r0
 8007b44:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007b46:	7cfb      	ldrb	r3, [r7, #19]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10c      	bne.n	8007b66 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b5a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fa4a 	bl	8007ff6 <RTC_ExitInitMode>
 8007b62:	4603      	mov	r3, r0
 8007b64:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007b66:	7cfb      	ldrb	r3, [r7, #19]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	22ff      	movs	r2, #255	; 0xff
 8007b78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	771a      	strb	r2, [r3, #28]

  return status;
 8007b80:	7cfb      	ldrb	r3, [r7, #19]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd90      	pop	{r4, r7, pc}

08007b8a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b086      	sub	sp, #24
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007ba4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	0c1b      	lsrs	r3, r3, #16
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	0a1b      	lsrs	r3, r3, #8
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	0b5b      	lsrs	r3, r3, #13
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11a      	bne.n	8007c1e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	78db      	ldrb	r3, [r3, #3]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fa45 	bl	800807c <RTC_Bcd2ToByte>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	785b      	ldrb	r3, [r3, #1]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fa3c 	bl	800807c <RTC_Bcd2ToByte>
 8007c04:	4603      	mov	r3, r0
 8007c06:	461a      	mov	r2, r3
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	789b      	ldrb	r3, [r3, #2]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fa33 	bl	800807c <RTC_Bcd2ToByte>
 8007c16:	4603      	mov	r3, r0
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b089      	sub	sp, #36	; 0x24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007c34:	4b9b      	ldr	r3, [pc, #620]	; (8007ea4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a9b      	ldr	r2, [pc, #620]	; (8007ea8 <HAL_RTC_SetAlarm_IT+0x280>)
 8007c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3e:	0adb      	lsrs	r3, r3, #11
 8007c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
 8007c48:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	7f1b      	ldrb	r3, [r3, #28]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d101      	bne.n	8007c5e <HAL_RTC_SetAlarm_IT+0x36>
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	e11e      	b.n	8007e9c <HAL_RTC_SetAlarm_IT+0x274>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2201      	movs	r2, #1
 8007c62:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2202      	movs	r2, #2
 8007c68:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d137      	bne.n	8007ce0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 f9d9 	bl	8008040 <RTC_ByteToBcd2>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f9d2 	bl	8008040 <RTC_ByteToBcd2>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007ca0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	789b      	ldrb	r3, [r3, #2]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 f9ca 	bl	8008040 <RTC_ByteToBcd2>
 8007cac:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007cae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	78db      	ldrb	r3, [r3, #3]
 8007cb6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007cb8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 f9bc 	bl	8008040 <RTC_ByteToBcd2>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007ccc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007cd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	e023      	b.n	8007d28 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d102      	bne.n	8007cf4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007d00:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007d06:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	78db      	ldrb	r3, [r3, #3]
 8007d0c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007d0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d16:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007d18:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007d1e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007d24:	4313      	orrs	r3, r2
 8007d26:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007d30:	4313      	orrs	r3, r2
 8007d32:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	22ca      	movs	r2, #202	; 0xca
 8007d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2253      	movs	r2, #83	; 0x53
 8007d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d4c:	d142      	bne.n	8007dd4 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d5c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007d6e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10b      	bne.n	8007d94 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	22ff      	movs	r2, #255	; 0xff
 8007d82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2203      	movs	r2, #3
 8007d88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e083      	b.n	8007e9c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0e6      	beq.n	8007d70 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dd0:	609a      	str	r2, [r3, #8]
 8007dd2:	e04c      	b.n	8007e6e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689a      	ldr	r2, [r3, #8]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007de2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007df4:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007df6:	4b2b      	ldr	r3, [pc, #172]	; (8007ea4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a2b      	ldr	r2, [pc, #172]	; (8007ea8 <HAL_RTC_SetAlarm_IT+0x280>)
 8007dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007e00:	0adb      	lsrs	r3, r3, #11
 8007e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10b      	bne.n	8007e30 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	22ff      	movs	r2, #255	; 0xff
 8007e1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2203      	movs	r2, #3
 8007e24:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e035      	b.n	8007e9c <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0e6      	beq.n	8007e0c <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e5c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e6c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007e6e:	4b0f      	ldr	r3, [pc, #60]	; (8007eac <HAL_RTC_SetAlarm_IT+0x284>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a0e      	ldr	r2, [pc, #56]	; (8007eac <HAL_RTC_SetAlarm_IT+0x284>)
 8007e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e78:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007e7a:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <HAL_RTC_SetAlarm_IT+0x284>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	4a0b      	ldr	r2, [pc, #44]	; (8007eac <HAL_RTC_SetAlarm_IT+0x284>)
 8007e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e84:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	22ff      	movs	r2, #255	; 0xff
 8007e8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3724      	adds	r7, #36	; 0x24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd90      	pop	{r4, r7, pc}
 8007ea4:	20000134 	.word	0x20000134
 8007ea8:	10624dd3 	.word	0x10624dd3
 8007eac:	40013c00 	.word	0x40013c00

08007eb0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007eb8:	4b1f      	ldr	r3, [pc, #124]	; (8007f38 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007ebe:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d012      	beq.n	8007ef4 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007eec:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7fe f818 	bl	8005f24 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d012      	beq.n	8007f28 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007f20:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f9c6 	bl	80082b4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	775a      	strb	r2, [r3, #29]
}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40013c00 	.word	0x40013c00

08007f3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a0d      	ldr	r2, [pc, #52]	; (8007f84 <HAL_RTC_WaitForSynchro+0x48>)
 8007f4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f50:	f7fe fb3e 	bl	80065d0 <HAL_GetTick>
 8007f54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f56:	e009      	b.n	8007f6c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f58:	f7fe fb3a 	bl	80065d0 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f66:	d901      	bls.n	8007f6c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e007      	b.n	8007f7c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f003 0320 	and.w	r3, r3, #32
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0ee      	beq.n	8007f58 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	00017f5f 	.word	0x00017f5f

08007f88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d122      	bne.n	8007fec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fb6:	f7fe fb0b 	bl	80065d0 <HAL_GetTick>
 8007fba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007fbc:	e00c      	b.n	8007fd8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007fbe:	f7fe fb07 	bl	80065d0 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fcc:	d904      	bls.n	8007fd8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2204      	movs	r2, #4
 8007fd2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <RTC_EnterInitMode+0x64>
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d1e8      	bne.n	8007fbe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008010:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f003 0320 	and.w	r3, r3, #32
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff ff8b 	bl	8007f3c <HAL_RTC_WaitForSynchro>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d004      	beq.n	8008036 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2204      	movs	r2, #4
 8008030:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800804e:	e005      	b.n	800805c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	3b0a      	subs	r3, #10
 800805a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	2b09      	cmp	r3, #9
 8008060:	d8f6      	bhi.n	8008050 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	b2da      	uxtb	r2, r3
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	4313      	orrs	r3, r2
 800806e:	b2db      	uxtb	r3, r3
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	091b      	lsrs	r3, r3, #4
 800808e:	b2db      	uxtb	r3, r3
 8008090:	461a      	mov	r2, r3
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	4413      	add	r3, r2
 80080aa:	b2db      	uxtb	r3, r3
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80080c4:	4b5a      	ldr	r3, [pc, #360]	; (8008230 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a5a      	ldr	r2, [pc, #360]	; (8008234 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80080ca:	fba2 2303 	umull	r2, r3, r2, r3
 80080ce:	0adb      	lsrs	r3, r3, #11
 80080d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080d4:	fb02 f303 	mul.w	r3, r2, r3
 80080d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	7f1b      	ldrb	r3, [r3, #28]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d101      	bne.n	80080e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 80080e2:	2302      	movs	r3, #2
 80080e4:	e09d      	b.n	8008222 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2202      	movs	r2, #2
 80080f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	22ca      	movs	r2, #202	; 0xca
 80080f8:	625a      	str	r2, [r3, #36]	; 0x24
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2253      	movs	r2, #83	; 0x53
 8008100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800810c:	2b00      	cmp	r3, #0
 800810e:	d018      	beq.n	8008142 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	3b01      	subs	r3, #1
 8008114:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10b      	bne.n	8008134 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	22ff      	movs	r2, #255	; 0xff
 8008122:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2203      	movs	r2, #3
 8008128:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e076      	b.n	8008222 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e6      	bne.n	8008110 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008150:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	b2da      	uxtb	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008162:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008164:	4b32      	ldr	r3, [pc, #200]	; (8008230 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a32      	ldr	r2, [pc, #200]	; (8008234 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800816a:	fba2 2303 	umull	r2, r3, r2, r3
 800816e:	0adb      	lsrs	r3, r3, #11
 8008170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008174:	fb02 f303 	mul.w	r3, r2, r3
 8008178:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	3b01      	subs	r3, #1
 800817e:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10b      	bne.n	800819e <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	22ff      	movs	r2, #255	; 0xff
 800818c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2203      	movs	r2, #3
 8008192:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e041      	b.n	8008222 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0e6      	beq.n	800817a <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0207 	bic.w	r2, r2, #7
 80081ba:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6899      	ldr	r1, [r3, #8]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80081d4:	4b18      	ldr	r3, [pc, #96]	; (8008238 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a17      	ldr	r2, [pc, #92]	; (8008238 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80081da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081de:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80081e0:	4b15      	ldr	r3, [pc, #84]	; (8008238 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	4a14      	ldr	r2, [pc, #80]	; (8008238 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80081e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081ea:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081fa:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800820a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	22ff      	movs	r2, #255	; 0xff
 8008212:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	20000134 	.word	0x20000134
 8008234:	10624dd3 	.word	0x10624dd3
 8008238:	40013c00 	.word	0x40013c00

0800823c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008244:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8008246:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800824a:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	b2da      	uxtb	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800826a:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7fd fe83 	bl	8005f78 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	775a      	strb	r2, [r3, #29]
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40013c00 	.word	0x40013c00

08008284 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3350      	adds	r3, #80	; 0x50
 8008298:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4413      	add	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e038      	b.n	8008350 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f7fd fa2c 	bl	8005750 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3308      	adds	r3, #8
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f001 fbc8 	bl	8009a98 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6818      	ldr	r0, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	461a      	mov	r2, r3
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	f001 fc2a 	bl	8009b6c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6858      	ldr	r0, [r3, #4]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	f001 fc57 	bl	8009bd8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	6892      	ldr	r2, [r2, #8]
 8008332:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	6892      	ldr	r2, [r2, #8]
 800833e:	f041 0101 	orr.w	r1, r1, #1
 8008342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e041      	b.n	80083ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d106      	bne.n	8008384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7fd ff82 	bl	8006288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3304      	adds	r3, #4
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f000 f966 	bl	8008668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b01      	cmp	r3, #1
 800840a:	d001      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e04e      	b.n	80084ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
 8008426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a23      	ldr	r2, [pc, #140]	; (80084bc <HAL_TIM_Base_Start_IT+0xc4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d022      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x80>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800843a:	d01d      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x80>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d018      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x80>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1e      	ldr	r2, [pc, #120]	; (80084c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d013      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x80>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a1c      	ldr	r2, [pc, #112]	; (80084c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d00e      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x80>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a1b      	ldr	r2, [pc, #108]	; (80084cc <HAL_TIM_Base_Start_IT+0xd4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d009      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x80>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a19      	ldr	r2, [pc, #100]	; (80084d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d004      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x80>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a18      	ldr	r2, [pc, #96]	; (80084d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d111      	bne.n	800849c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b06      	cmp	r3, #6
 8008488:	d010      	beq.n	80084ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0201 	orr.w	r2, r2, #1
 8008498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800849a:	e007      	b.n	80084ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	40010000 	.word	0x40010000
 80084c0:	40000400 	.word	0x40000400
 80084c4:	40000800 	.word	0x40000800
 80084c8:	40000c00 	.word	0x40000c00
 80084cc:	40010400 	.word	0x40010400
 80084d0:	40014000 	.word	0x40014000
 80084d4:	40001800 	.word	0x40001800

080084d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d101      	bne.n	80084f4 <HAL_TIM_ConfigClockSource+0x1c>
 80084f0:	2302      	movs	r3, #2
 80084f2:	e0b4      	b.n	800865e <HAL_TIM_ConfigClockSource+0x186>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2202      	movs	r2, #2
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800851a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800852c:	d03e      	beq.n	80085ac <HAL_TIM_ConfigClockSource+0xd4>
 800852e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008532:	f200 8087 	bhi.w	8008644 <HAL_TIM_ConfigClockSource+0x16c>
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853a:	f000 8086 	beq.w	800864a <HAL_TIM_ConfigClockSource+0x172>
 800853e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008542:	d87f      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x16c>
 8008544:	2b70      	cmp	r3, #112	; 0x70
 8008546:	d01a      	beq.n	800857e <HAL_TIM_ConfigClockSource+0xa6>
 8008548:	2b70      	cmp	r3, #112	; 0x70
 800854a:	d87b      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x16c>
 800854c:	2b60      	cmp	r3, #96	; 0x60
 800854e:	d050      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0x11a>
 8008550:	2b60      	cmp	r3, #96	; 0x60
 8008552:	d877      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x16c>
 8008554:	2b50      	cmp	r3, #80	; 0x50
 8008556:	d03c      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0xfa>
 8008558:	2b50      	cmp	r3, #80	; 0x50
 800855a:	d873      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x16c>
 800855c:	2b40      	cmp	r3, #64	; 0x40
 800855e:	d058      	beq.n	8008612 <HAL_TIM_ConfigClockSource+0x13a>
 8008560:	2b40      	cmp	r3, #64	; 0x40
 8008562:	d86f      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x16c>
 8008564:	2b30      	cmp	r3, #48	; 0x30
 8008566:	d064      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x15a>
 8008568:	2b30      	cmp	r3, #48	; 0x30
 800856a:	d86b      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x16c>
 800856c:	2b20      	cmp	r3, #32
 800856e:	d060      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x15a>
 8008570:	2b20      	cmp	r3, #32
 8008572:	d867      	bhi.n	8008644 <HAL_TIM_ConfigClockSource+0x16c>
 8008574:	2b00      	cmp	r3, #0
 8008576:	d05c      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x15a>
 8008578:	2b10      	cmp	r3, #16
 800857a:	d05a      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x15a>
 800857c:	e062      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800858e:	f000 f991 	bl	80088b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	609a      	str	r2, [r3, #8]
      break;
 80085aa:	e04f      	b.n	800864c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085bc:	f000 f97a 	bl	80088b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085ce:	609a      	str	r2, [r3, #8]
      break;
 80085d0:	e03c      	b.n	800864c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085de:	461a      	mov	r2, r3
 80085e0:	f000 f8ee 	bl	80087c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2150      	movs	r1, #80	; 0x50
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 f947 	bl	800887e <TIM_ITRx_SetConfig>
      break;
 80085f0:	e02c      	b.n	800864c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085fe:	461a      	mov	r2, r3
 8008600:	f000 f90d 	bl	800881e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2160      	movs	r1, #96	; 0x60
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f937 	bl	800887e <TIM_ITRx_SetConfig>
      break;
 8008610:	e01c      	b.n	800864c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800861e:	461a      	mov	r2, r3
 8008620:	f000 f8ce 	bl	80087c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2140      	movs	r1, #64	; 0x40
 800862a:	4618      	mov	r0, r3
 800862c:	f000 f927 	bl	800887e <TIM_ITRx_SetConfig>
      break;
 8008630:	e00c      	b.n	800864c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f000 f91e 	bl	800887e <TIM_ITRx_SetConfig>
      break;
 8008642:	e003      	b.n	800864c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	73fb      	strb	r3, [r7, #15]
      break;
 8008648:	e000      	b.n	800864c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800864a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a46      	ldr	r2, [pc, #280]	; (8008794 <TIM_Base_SetConfig+0x12c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d013      	beq.n	80086a8 <TIM_Base_SetConfig+0x40>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008686:	d00f      	beq.n	80086a8 <TIM_Base_SetConfig+0x40>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a43      	ldr	r2, [pc, #268]	; (8008798 <TIM_Base_SetConfig+0x130>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00b      	beq.n	80086a8 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a42      	ldr	r2, [pc, #264]	; (800879c <TIM_Base_SetConfig+0x134>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d007      	beq.n	80086a8 <TIM_Base_SetConfig+0x40>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a41      	ldr	r2, [pc, #260]	; (80087a0 <TIM_Base_SetConfig+0x138>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d003      	beq.n	80086a8 <TIM_Base_SetConfig+0x40>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a40      	ldr	r2, [pc, #256]	; (80087a4 <TIM_Base_SetConfig+0x13c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d108      	bne.n	80086ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a35      	ldr	r2, [pc, #212]	; (8008794 <TIM_Base_SetConfig+0x12c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d02b      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086c8:	d027      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a32      	ldr	r2, [pc, #200]	; (8008798 <TIM_Base_SetConfig+0x130>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d023      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a31      	ldr	r2, [pc, #196]	; (800879c <TIM_Base_SetConfig+0x134>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d01f      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a30      	ldr	r2, [pc, #192]	; (80087a0 <TIM_Base_SetConfig+0x138>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d01b      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2f      	ldr	r2, [pc, #188]	; (80087a4 <TIM_Base_SetConfig+0x13c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d017      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a2e      	ldr	r2, [pc, #184]	; (80087a8 <TIM_Base_SetConfig+0x140>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d013      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2d      	ldr	r2, [pc, #180]	; (80087ac <TIM_Base_SetConfig+0x144>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00f      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2c      	ldr	r2, [pc, #176]	; (80087b0 <TIM_Base_SetConfig+0x148>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00b      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a2b      	ldr	r2, [pc, #172]	; (80087b4 <TIM_Base_SetConfig+0x14c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d007      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a2a      	ldr	r2, [pc, #168]	; (80087b8 <TIM_Base_SetConfig+0x150>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d003      	beq.n	800871a <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a29      	ldr	r2, [pc, #164]	; (80087bc <TIM_Base_SetConfig+0x154>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d108      	bne.n	800872c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a10      	ldr	r2, [pc, #64]	; (8008794 <TIM_Base_SetConfig+0x12c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_Base_SetConfig+0xf8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a12      	ldr	r2, [pc, #72]	; (80087a4 <TIM_Base_SetConfig+0x13c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d103      	bne.n	8008768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b01      	cmp	r3, #1
 8008778:	d105      	bne.n	8008786 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	f023 0201 	bic.w	r2, r3, #1
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	611a      	str	r2, [r3, #16]
  }
}
 8008786:	bf00      	nop
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40010000 	.word	0x40010000
 8008798:	40000400 	.word	0x40000400
 800879c:	40000800 	.word	0x40000800
 80087a0:	40000c00 	.word	0x40000c00
 80087a4:	40010400 	.word	0x40010400
 80087a8:	40014000 	.word	0x40014000
 80087ac:	40014400 	.word	0x40014400
 80087b0:	40014800 	.word	0x40014800
 80087b4:	40001800 	.word	0x40001800
 80087b8:	40001c00 	.word	0x40001c00
 80087bc:	40002000 	.word	0x40002000

080087c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f023 0201 	bic.w	r2, r3, #1
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	011b      	lsls	r3, r3, #4
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f023 030a 	bic.w	r3, r3, #10
 80087fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	621a      	str	r2, [r3, #32]
}
 8008812:	bf00      	nop
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800881e:	b480      	push	{r7}
 8008820:	b087      	sub	sp, #28
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	f023 0210 	bic.w	r2, r3, #16
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	031b      	lsls	r3, r3, #12
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	4313      	orrs	r3, r2
 8008852:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800885a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	011b      	lsls	r3, r3, #4
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	4313      	orrs	r3, r2
 8008864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800887e:	b480      	push	{r7}
 8008880:	b085      	sub	sp, #20
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	f043 0307 	orr.w	r3, r3, #7
 80088a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	609a      	str	r2, [r3, #8]
}
 80088a8:	bf00      	nop
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	021a      	lsls	r2, r3, #8
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	431a      	orrs	r2, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4313      	orrs	r3, r2
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	609a      	str	r2, [r3, #8]
}
 80088e8:	bf00      	nop
 80088ea:	371c      	adds	r7, #28
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008908:	2302      	movs	r3, #2
 800890a:	e05a      	b.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a21      	ldr	r2, [pc, #132]	; (80089d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d022      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008958:	d01d      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a1d      	ldr	r2, [pc, #116]	; (80089d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d018      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a1b      	ldr	r2, [pc, #108]	; (80089d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d013      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a1a      	ldr	r2, [pc, #104]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00e      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a18      	ldr	r2, [pc, #96]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d009      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a17      	ldr	r2, [pc, #92]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d004      	beq.n	8008996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a15      	ldr	r2, [pc, #84]	; (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d10c      	bne.n	80089b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800899c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	40010000 	.word	0x40010000
 80089d4:	40000400 	.word	0x40000400
 80089d8:	40000800 	.word	0x40000800
 80089dc:	40000c00 	.word	0x40000c00
 80089e0:	40010400 	.word	0x40010400
 80089e4:	40014000 	.word	0x40014000
 80089e8:	40001800 	.word	0x40001800

080089ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e042      	b.n	8008a84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7fd fca2 	bl	800635c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2224      	movs	r2, #36	; 0x24
 8008a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fdbd 	bl	80095b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	691a      	ldr	r2, [r3, #16]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	695a      	ldr	r2, [r3, #20]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	; 0x28
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	d175      	bne.n	8008b98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <HAL_UART_Transmit+0x2c>
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e06e      	b.n	8008b9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2221      	movs	r2, #33	; 0x21
 8008ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aca:	f7fd fd81 	bl	80065d0 <HAL_GetTick>
 8008ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	88fa      	ldrh	r2, [r7, #6]
 8008ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	88fa      	ldrh	r2, [r7, #6]
 8008ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae4:	d108      	bne.n	8008af8 <HAL_UART_Transmit+0x6c>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d104      	bne.n	8008af8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	61bb      	str	r3, [r7, #24]
 8008af6:	e003      	b.n	8008b00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b00:	e02e      	b.n	8008b60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2180      	movs	r1, #128	; 0x80
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 fb1f 	bl	8009150 <UART_WaitOnFlagUntilTimeout>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e03a      	b.n	8008b9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10b      	bne.n	8008b42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	61bb      	str	r3, [r7, #24]
 8008b40:	e007      	b.n	8008b52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1cb      	bne.n	8008b02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2200      	movs	r2, #0
 8008b72:	2140      	movs	r1, #64	; 0x40
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 faeb 	bl	8009150 <UART_WaitOnFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e006      	b.n	8008b9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	e000      	b.n	8008b9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008b98:	2302      	movs	r3, #2
  }
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3720      	adds	r7, #32
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	4613      	mov	r3, r2
 8008bae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b20      	cmp	r3, #32
 8008bba:	d112      	bne.n	8008be2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <HAL_UART_Receive_IT+0x26>
 8008bc2:	88fb      	ldrh	r3, [r7, #6]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e00b      	b.n	8008be4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008bd2:	88fb      	ldrh	r3, [r7, #6]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 fb12 	bl	8009202 <UART_Start_Receive_IT>
 8008bde:	4603      	mov	r3, r0
 8008be0:	e000      	b.n	8008be4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008be2:	2302      	movs	r3, #2
  }
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b0ba      	sub	sp, #232	; 0xe8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c22:	f003 030f 	and.w	r3, r3, #15
 8008c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10f      	bne.n	8008c52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <HAL_UART_IRQHandler+0x66>
 8008c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fbf2 	bl	8009434 <UART_Receive_IT>
      return;
 8008c50:	e25b      	b.n	800910a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 80de 	beq.w	8008e18 <HAL_UART_IRQHandler+0x22c>
 8008c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 80d1 	beq.w	8008e18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <HAL_UART_IRQHandler+0xae>
 8008c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	f043 0201 	orr.w	r2, r3, #1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9e:	f003 0304 	and.w	r3, r3, #4
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00b      	beq.n	8008cbe <HAL_UART_IRQHandler+0xd2>
 8008ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d005      	beq.n	8008cbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb6:	f043 0202 	orr.w	r2, r3, #2
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <HAL_UART_IRQHandler+0xf6>
 8008cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d005      	beq.n	8008ce2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cda:	f043 0204 	orr.w	r2, r3, #4
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce6:	f003 0308 	and.w	r3, r3, #8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d011      	beq.n	8008d12 <HAL_UART_IRQHandler+0x126>
 8008cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d105      	bne.n	8008d06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0a:	f043 0208 	orr.w	r2, r3, #8
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 81f2 	beq.w	8009100 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d20:	f003 0320 	and.w	r3, r3, #32
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d008      	beq.n	8008d3a <HAL_UART_IRQHandler+0x14e>
 8008d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fb7d 	bl	8009434 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d44:	2b40      	cmp	r3, #64	; 0x40
 8008d46:	bf0c      	ite	eq
 8008d48:	2301      	moveq	r3, #1
 8008d4a:	2300      	movne	r3, #0
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d56:	f003 0308 	and.w	r3, r3, #8
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d103      	bne.n	8008d66 <HAL_UART_IRQHandler+0x17a>
 8008d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d04f      	beq.n	8008e06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa85 	bl	8009276 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d76:	2b40      	cmp	r3, #64	; 0x40
 8008d78:	d141      	bne.n	8008dfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	3314      	adds	r3, #20
 8008d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3314      	adds	r3, #20
 8008da2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008da6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008db2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008db6:	e841 2300 	strex	r3, r2, [r1]
 8008dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1d9      	bne.n	8008d7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d013      	beq.n	8008df6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd2:	4a7e      	ldr	r2, [pc, #504]	; (8008fcc <HAL_UART_IRQHandler+0x3e0>)
 8008dd4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fd fda9 	bl	8006932 <HAL_DMA_Abort_IT>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d016      	beq.n	8008e14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008df0:	4610      	mov	r0, r2
 8008df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df4:	e00e      	b.n	8008e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f994 	bl	8009124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dfc:	e00a      	b.n	8008e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f990 	bl	8009124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e04:	e006      	b.n	8008e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f98c 	bl	8009124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008e12:	e175      	b.n	8009100 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e14:	bf00      	nop
    return;
 8008e16:	e173      	b.n	8009100 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	f040 814f 	bne.w	80090c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e26:	f003 0310 	and.w	r3, r3, #16
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 8148 	beq.w	80090c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e34:	f003 0310 	and.w	r3, r3, #16
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 8141 	beq.w	80090c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60bb      	str	r3, [r7, #8]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	60bb      	str	r3, [r7, #8]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	60bb      	str	r3, [r7, #8]
 8008e52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5e:	2b40      	cmp	r3, #64	; 0x40
 8008e60:	f040 80b6 	bne.w	8008fd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 8145 	beq.w	8009104 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e82:	429a      	cmp	r2, r3
 8008e84:	f080 813e 	bcs.w	8009104 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e9a:	f000 8088 	beq.w	8008fae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	330c      	adds	r3, #12
 8008ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	330c      	adds	r3, #12
 8008ec6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008eca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ed6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1d9      	bne.n	8008e9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3314      	adds	r3, #20
 8008ef0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008efc:	f023 0301 	bic.w	r3, r3, #1
 8008f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3314      	adds	r3, #20
 8008f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e1      	bne.n	8008eea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3314      	adds	r3, #20
 8008f2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3314      	adds	r3, #20
 8008f46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e3      	bne.n	8008f26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	330c      	adds	r3, #12
 8008f72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7e:	f023 0310 	bic.w	r3, r3, #16
 8008f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	330c      	adds	r3, #12
 8008f8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f90:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f98:	e841 2300 	strex	r3, r2, [r1]
 8008f9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e3      	bne.n	8008f6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fd fc52 	bl	8006852 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f8b7 	bl	8009138 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fca:	e09b      	b.n	8009104 <HAL_UART_IRQHandler+0x518>
 8008fcc:	0800933d 	.word	0x0800933d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 808e 	beq.w	8009108 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 8089 	beq.w	8009108 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	330c      	adds	r3, #12
 8008ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800900c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	330c      	adds	r3, #12
 8009016:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800901a:	647a      	str	r2, [r7, #68]	; 0x44
 800901c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009022:	e841 2300 	strex	r3, r2, [r1]
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e3      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3314      	adds	r3, #20
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	623b      	str	r3, [r7, #32]
   return(result);
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	f023 0301 	bic.w	r3, r3, #1
 8009044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3314      	adds	r3, #20
 800904e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009052:	633a      	str	r2, [r7, #48]	; 0x30
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e3      	bne.n	800902e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2220      	movs	r2, #32
 800906a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	330c      	adds	r3, #12
 800907a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	e853 3f00 	ldrex	r3, [r3]
 8009082:	60fb      	str	r3, [r7, #12]
   return(result);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0310 	bic.w	r3, r3, #16
 800908a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	330c      	adds	r3, #12
 8009094:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009098:	61fa      	str	r2, [r7, #28]
 800909a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	69b9      	ldr	r1, [r7, #24]
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	e841 2300 	strex	r3, r2, [r1]
 80090a4:	617b      	str	r3, [r7, #20]
   return(result);
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e3      	bne.n	8009074 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f83d 	bl	8009138 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090be:	e023      	b.n	8009108 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d009      	beq.n	80090e0 <HAL_UART_IRQHandler+0x4f4>
 80090cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f943 	bl	8009364 <UART_Transmit_IT>
    return;
 80090de:	e014      	b.n	800910a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00e      	beq.n	800910a <HAL_UART_IRQHandler+0x51e>
 80090ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d008      	beq.n	800910a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f983 	bl	8009404 <UART_EndTransmit_IT>
    return;
 80090fe:	e004      	b.n	800910a <HAL_UART_IRQHandler+0x51e>
    return;
 8009100:	bf00      	nop
 8009102:	e002      	b.n	800910a <HAL_UART_IRQHandler+0x51e>
      return;
 8009104:	bf00      	nop
 8009106:	e000      	b.n	800910a <HAL_UART_IRQHandler+0x51e>
      return;
 8009108:	bf00      	nop
  }
}
 800910a:	37e8      	adds	r7, #232	; 0xe8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	4613      	mov	r3, r2
 800915e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009160:	e03b      	b.n	80091da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009162:	6a3b      	ldr	r3, [r7, #32]
 8009164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009168:	d037      	beq.n	80091da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800916a:	f7fd fa31 	bl	80065d0 <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	6a3a      	ldr	r2, [r7, #32]
 8009176:	429a      	cmp	r2, r3
 8009178:	d302      	bcc.n	8009180 <UART_WaitOnFlagUntilTimeout+0x30>
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e03a      	b.n	80091fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f003 0304 	and.w	r3, r3, #4
 800918e:	2b00      	cmp	r3, #0
 8009190:	d023      	beq.n	80091da <UART_WaitOnFlagUntilTimeout+0x8a>
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2b80      	cmp	r3, #128	; 0x80
 8009196:	d020      	beq.n	80091da <UART_WaitOnFlagUntilTimeout+0x8a>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b40      	cmp	r3, #64	; 0x40
 800919c:	d01d      	beq.n	80091da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0308 	and.w	r3, r3, #8
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d116      	bne.n	80091da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80091ac:	2300      	movs	r3, #0
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f857 	bl	8009276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2208      	movs	r2, #8
 80091cc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e00f      	b.n	80091fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	4013      	ands	r3, r2
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	bf0c      	ite	eq
 80091ea:	2301      	moveq	r3, #1
 80091ec:	2300      	movne	r3, #0
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	461a      	mov	r2, r3
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d0b4      	beq.n	8009162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	4613      	mov	r3, r2
 800920e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	88fa      	ldrh	r2, [r7, #6]
 800921a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	88fa      	ldrh	r2, [r7, #6]
 8009220:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2222      	movs	r2, #34	; 0x22
 800922c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d007      	beq.n	8009248 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68da      	ldr	r2, [r3, #12]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009246:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695a      	ldr	r2, [r3, #20]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68da      	ldr	r2, [r3, #12]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0220 	orr.w	r2, r2, #32
 8009266:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009276:	b480      	push	{r7}
 8009278:	b095      	sub	sp, #84	; 0x54
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	330c      	adds	r3, #12
 8009284:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	330c      	adds	r3, #12
 800929c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800929e:	643a      	str	r2, [r7, #64]	; 0x40
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e5      	bne.n	800927e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3314      	adds	r3, #20
 80092b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	f023 0301 	bic.w	r3, r3, #1
 80092c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3314      	adds	r3, #20
 80092d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e5      	bne.n	80092b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d119      	bne.n	8009322 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	330c      	adds	r3, #12
 80092f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f023 0310 	bic.w	r3, r3, #16
 8009304:	647b      	str	r3, [r7, #68]	; 0x44
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	330c      	adds	r3, #12
 800930c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800930e:	61ba      	str	r2, [r7, #24]
 8009310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	6979      	ldr	r1, [r7, #20]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	e841 2300 	strex	r3, r2, [r1]
 800931a:	613b      	str	r3, [r7, #16]
   return(result);
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e5      	bne.n	80092ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009330:	bf00      	nop
 8009332:	3754      	adds	r7, #84	; 0x54
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f7ff fee4 	bl	8009124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800935c:	bf00      	nop
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b21      	cmp	r3, #33	; 0x21
 8009376:	d13e      	bne.n	80093f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009380:	d114      	bne.n	80093ac <UART_Transmit_IT+0x48>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d110      	bne.n	80093ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800939e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	1c9a      	adds	r2, r3, #2
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	621a      	str	r2, [r3, #32]
 80093aa:	e008      	b.n	80093be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	1c59      	adds	r1, r3, #1
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6211      	str	r1, [r2, #32]
 80093b6:	781a      	ldrb	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	4619      	mov	r1, r3
 80093cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10f      	bne.n	80093f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68da      	ldr	r2, [r3, #12]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	e000      	b.n	80093f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80093f6:	2302      	movs	r3, #2
  }
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800941a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2220      	movs	r2, #32
 8009420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff fe73 	bl	8009110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08c      	sub	sp, #48	; 0x30
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b22      	cmp	r3, #34	; 0x22
 8009446:	f040 80ae 	bne.w	80095a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009452:	d117      	bne.n	8009484 <UART_Receive_IT+0x50>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d113      	bne.n	8009484 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800945c:	2300      	movs	r3, #0
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	b29b      	uxth	r3, r3
 800946e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009472:	b29a      	uxth	r2, r3
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947c:	1c9a      	adds	r2, r3, #2
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	629a      	str	r2, [r3, #40]	; 0x28
 8009482:	e026      	b.n	80094d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009488:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800948a:	2300      	movs	r3, #0
 800948c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009496:	d007      	beq.n	80094a8 <UART_Receive_IT+0x74>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <UART_Receive_IT+0x82>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d106      	bne.n	80094b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	701a      	strb	r2, [r3, #0]
 80094b4:	e008      	b.n	80094c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	1c5a      	adds	r2, r3, #1
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29b      	uxth	r3, r3
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	4619      	mov	r1, r3
 80094e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d15d      	bne.n	80095a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0220 	bic.w	r2, r2, #32
 80094f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	695a      	ldr	r2, [r3, #20]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0201 	bic.w	r2, r2, #1
 8009514:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2220      	movs	r2, #32
 800951a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	2b01      	cmp	r3, #1
 800952a:	d135      	bne.n	8009598 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	330c      	adds	r3, #12
 8009538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	613b      	str	r3, [r7, #16]
   return(result);
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f023 0310 	bic.w	r3, r3, #16
 8009548:	627b      	str	r3, [r7, #36]	; 0x24
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	330c      	adds	r3, #12
 8009550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009552:	623a      	str	r2, [r7, #32]
 8009554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	69f9      	ldr	r1, [r7, #28]
 8009558:	6a3a      	ldr	r2, [r7, #32]
 800955a:	e841 2300 	strex	r3, r2, [r1]
 800955e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e5      	bne.n	8009532 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0310 	and.w	r3, r3, #16
 8009570:	2b10      	cmp	r3, #16
 8009572:	d10a      	bne.n	800958a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009574:	2300      	movs	r3, #0
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff fdd1 	bl	8009138 <HAL_UARTEx_RxEventCallback>
 8009596:	e002      	b.n	800959e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7fc ff2f 	bl	80063fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	e002      	b.n	80095a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e000      	b.n	80095a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80095a6:	2302      	movs	r3, #2
  }
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3730      	adds	r7, #48	; 0x30
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b4:	b0c0      	sub	sp, #256	; 0x100
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095cc:	68d9      	ldr	r1, [r3, #12]
 80095ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	ea40 0301 	orr.w	r3, r0, r1
 80095d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	431a      	orrs	r2, r3
 80095e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	431a      	orrs	r2, r3
 80095f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80095fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009608:	f021 010c 	bic.w	r1, r1, #12
 800960c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009616:	430b      	orrs	r3, r1
 8009618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800961a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	6999      	ldr	r1, [r3, #24]
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	ea40 0301 	orr.w	r3, r0, r1
 8009636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	4b8f      	ldr	r3, [pc, #572]	; (800987c <UART_SetConfig+0x2cc>)
 8009640:	429a      	cmp	r2, r3
 8009642:	d005      	beq.n	8009650 <UART_SetConfig+0xa0>
 8009644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b8d      	ldr	r3, [pc, #564]	; (8009880 <UART_SetConfig+0x2d0>)
 800964c:	429a      	cmp	r2, r3
 800964e:	d104      	bne.n	800965a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009650:	f7fd ffa6 	bl	80075a0 <HAL_RCC_GetPCLK2Freq>
 8009654:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009658:	e003      	b.n	8009662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800965a:	f7fd ff8d 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
 800965e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800966c:	f040 810c 	bne.w	8009888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009674:	2200      	movs	r2, #0
 8009676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800967a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800967e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009682:	4622      	mov	r2, r4
 8009684:	462b      	mov	r3, r5
 8009686:	1891      	adds	r1, r2, r2
 8009688:	65b9      	str	r1, [r7, #88]	; 0x58
 800968a:	415b      	adcs	r3, r3
 800968c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800968e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009692:	4621      	mov	r1, r4
 8009694:	eb12 0801 	adds.w	r8, r2, r1
 8009698:	4629      	mov	r1, r5
 800969a:	eb43 0901 	adc.w	r9, r3, r1
 800969e:	f04f 0200 	mov.w	r2, #0
 80096a2:	f04f 0300 	mov.w	r3, #0
 80096a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096b2:	4690      	mov	r8, r2
 80096b4:	4699      	mov	r9, r3
 80096b6:	4623      	mov	r3, r4
 80096b8:	eb18 0303 	adds.w	r3, r8, r3
 80096bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096c0:	462b      	mov	r3, r5
 80096c2:	eb49 0303 	adc.w	r3, r9, r3
 80096c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80096da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096de:	460b      	mov	r3, r1
 80096e0:	18db      	adds	r3, r3, r3
 80096e2:	653b      	str	r3, [r7, #80]	; 0x50
 80096e4:	4613      	mov	r3, r2
 80096e6:	eb42 0303 	adc.w	r3, r2, r3
 80096ea:	657b      	str	r3, [r7, #84]	; 0x54
 80096ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80096f4:	f7f7 f8c2 	bl	800087c <__aeabi_uldivmod>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4b61      	ldr	r3, [pc, #388]	; (8009884 <UART_SetConfig+0x2d4>)
 80096fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009702:	095b      	lsrs	r3, r3, #5
 8009704:	011c      	lsls	r4, r3, #4
 8009706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800970a:	2200      	movs	r2, #0
 800970c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009710:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009718:	4642      	mov	r2, r8
 800971a:	464b      	mov	r3, r9
 800971c:	1891      	adds	r1, r2, r2
 800971e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009720:	415b      	adcs	r3, r3
 8009722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009728:	4641      	mov	r1, r8
 800972a:	eb12 0a01 	adds.w	sl, r2, r1
 800972e:	4649      	mov	r1, r9
 8009730:	eb43 0b01 	adc.w	fp, r3, r1
 8009734:	f04f 0200 	mov.w	r2, #0
 8009738:	f04f 0300 	mov.w	r3, #0
 800973c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009748:	4692      	mov	sl, r2
 800974a:	469b      	mov	fp, r3
 800974c:	4643      	mov	r3, r8
 800974e:	eb1a 0303 	adds.w	r3, sl, r3
 8009752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009756:	464b      	mov	r3, r9
 8009758:	eb4b 0303 	adc.w	r3, fp, r3
 800975c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800976c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009774:	460b      	mov	r3, r1
 8009776:	18db      	adds	r3, r3, r3
 8009778:	643b      	str	r3, [r7, #64]	; 0x40
 800977a:	4613      	mov	r3, r2
 800977c:	eb42 0303 	adc.w	r3, r2, r3
 8009780:	647b      	str	r3, [r7, #68]	; 0x44
 8009782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800978a:	f7f7 f877 	bl	800087c <__aeabi_uldivmod>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4611      	mov	r1, r2
 8009794:	4b3b      	ldr	r3, [pc, #236]	; (8009884 <UART_SetConfig+0x2d4>)
 8009796:	fba3 2301 	umull	r2, r3, r3, r1
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	2264      	movs	r2, #100	; 0x64
 800979e:	fb02 f303 	mul.w	r3, r2, r3
 80097a2:	1acb      	subs	r3, r1, r3
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097aa:	4b36      	ldr	r3, [pc, #216]	; (8009884 <UART_SetConfig+0x2d4>)
 80097ac:	fba3 2302 	umull	r2, r3, r3, r2
 80097b0:	095b      	lsrs	r3, r3, #5
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097b8:	441c      	add	r4, r3
 80097ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80097c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80097cc:	4642      	mov	r2, r8
 80097ce:	464b      	mov	r3, r9
 80097d0:	1891      	adds	r1, r2, r2
 80097d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80097d4:	415b      	adcs	r3, r3
 80097d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097dc:	4641      	mov	r1, r8
 80097de:	1851      	adds	r1, r2, r1
 80097e0:	6339      	str	r1, [r7, #48]	; 0x30
 80097e2:	4649      	mov	r1, r9
 80097e4:	414b      	adcs	r3, r1
 80097e6:	637b      	str	r3, [r7, #52]	; 0x34
 80097e8:	f04f 0200 	mov.w	r2, #0
 80097ec:	f04f 0300 	mov.w	r3, #0
 80097f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80097f4:	4659      	mov	r1, fp
 80097f6:	00cb      	lsls	r3, r1, #3
 80097f8:	4651      	mov	r1, sl
 80097fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097fe:	4651      	mov	r1, sl
 8009800:	00ca      	lsls	r2, r1, #3
 8009802:	4610      	mov	r0, r2
 8009804:	4619      	mov	r1, r3
 8009806:	4603      	mov	r3, r0
 8009808:	4642      	mov	r2, r8
 800980a:	189b      	adds	r3, r3, r2
 800980c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009810:	464b      	mov	r3, r9
 8009812:	460a      	mov	r2, r1
 8009814:	eb42 0303 	adc.w	r3, r2, r3
 8009818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009828:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800982c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009830:	460b      	mov	r3, r1
 8009832:	18db      	adds	r3, r3, r3
 8009834:	62bb      	str	r3, [r7, #40]	; 0x28
 8009836:	4613      	mov	r3, r2
 8009838:	eb42 0303 	adc.w	r3, r2, r3
 800983c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800983e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009846:	f7f7 f819 	bl	800087c <__aeabi_uldivmod>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <UART_SetConfig+0x2d4>)
 8009850:	fba3 1302 	umull	r1, r3, r3, r2
 8009854:	095b      	lsrs	r3, r3, #5
 8009856:	2164      	movs	r1, #100	; 0x64
 8009858:	fb01 f303 	mul.w	r3, r1, r3
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	3332      	adds	r3, #50	; 0x32
 8009862:	4a08      	ldr	r2, [pc, #32]	; (8009884 <UART_SetConfig+0x2d4>)
 8009864:	fba2 2303 	umull	r2, r3, r2, r3
 8009868:	095b      	lsrs	r3, r3, #5
 800986a:	f003 0207 	and.w	r2, r3, #7
 800986e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4422      	add	r2, r4
 8009876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009878:	e106      	b.n	8009a88 <UART_SetConfig+0x4d8>
 800987a:	bf00      	nop
 800987c:	40011000 	.word	0x40011000
 8009880:	40011400 	.word	0x40011400
 8009884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800988c:	2200      	movs	r2, #0
 800988e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009892:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800989a:	4642      	mov	r2, r8
 800989c:	464b      	mov	r3, r9
 800989e:	1891      	adds	r1, r2, r2
 80098a0:	6239      	str	r1, [r7, #32]
 80098a2:	415b      	adcs	r3, r3
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
 80098a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098aa:	4641      	mov	r1, r8
 80098ac:	1854      	adds	r4, r2, r1
 80098ae:	4649      	mov	r1, r9
 80098b0:	eb43 0501 	adc.w	r5, r3, r1
 80098b4:	f04f 0200 	mov.w	r2, #0
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	00eb      	lsls	r3, r5, #3
 80098be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098c2:	00e2      	lsls	r2, r4, #3
 80098c4:	4614      	mov	r4, r2
 80098c6:	461d      	mov	r5, r3
 80098c8:	4643      	mov	r3, r8
 80098ca:	18e3      	adds	r3, r4, r3
 80098cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098d0:	464b      	mov	r3, r9
 80098d2:	eb45 0303 	adc.w	r3, r5, r3
 80098d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	f04f 0300 	mov.w	r3, #0
 80098f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80098f6:	4629      	mov	r1, r5
 80098f8:	008b      	lsls	r3, r1, #2
 80098fa:	4621      	mov	r1, r4
 80098fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009900:	4621      	mov	r1, r4
 8009902:	008a      	lsls	r2, r1, #2
 8009904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009908:	f7f6 ffb8 	bl	800087c <__aeabi_uldivmod>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4b60      	ldr	r3, [pc, #384]	; (8009a94 <UART_SetConfig+0x4e4>)
 8009912:	fba3 2302 	umull	r2, r3, r3, r2
 8009916:	095b      	lsrs	r3, r3, #5
 8009918:	011c      	lsls	r4, r3, #4
 800991a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800991e:	2200      	movs	r2, #0
 8009920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800992c:	4642      	mov	r2, r8
 800992e:	464b      	mov	r3, r9
 8009930:	1891      	adds	r1, r2, r2
 8009932:	61b9      	str	r1, [r7, #24]
 8009934:	415b      	adcs	r3, r3
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800993c:	4641      	mov	r1, r8
 800993e:	1851      	adds	r1, r2, r1
 8009940:	6139      	str	r1, [r7, #16]
 8009942:	4649      	mov	r1, r9
 8009944:	414b      	adcs	r3, r1
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009954:	4659      	mov	r1, fp
 8009956:	00cb      	lsls	r3, r1, #3
 8009958:	4651      	mov	r1, sl
 800995a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800995e:	4651      	mov	r1, sl
 8009960:	00ca      	lsls	r2, r1, #3
 8009962:	4610      	mov	r0, r2
 8009964:	4619      	mov	r1, r3
 8009966:	4603      	mov	r3, r0
 8009968:	4642      	mov	r2, r8
 800996a:	189b      	adds	r3, r3, r2
 800996c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009970:	464b      	mov	r3, r9
 8009972:	460a      	mov	r2, r1
 8009974:	eb42 0303 	adc.w	r3, r2, r3
 8009978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800997c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	67bb      	str	r3, [r7, #120]	; 0x78
 8009986:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009988:	f04f 0200 	mov.w	r2, #0
 800998c:	f04f 0300 	mov.w	r3, #0
 8009990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009994:	4649      	mov	r1, r9
 8009996:	008b      	lsls	r3, r1, #2
 8009998:	4641      	mov	r1, r8
 800999a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800999e:	4641      	mov	r1, r8
 80099a0:	008a      	lsls	r2, r1, #2
 80099a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099a6:	f7f6 ff69 	bl	800087c <__aeabi_uldivmod>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4611      	mov	r1, r2
 80099b0:	4b38      	ldr	r3, [pc, #224]	; (8009a94 <UART_SetConfig+0x4e4>)
 80099b2:	fba3 2301 	umull	r2, r3, r3, r1
 80099b6:	095b      	lsrs	r3, r3, #5
 80099b8:	2264      	movs	r2, #100	; 0x64
 80099ba:	fb02 f303 	mul.w	r3, r2, r3
 80099be:	1acb      	subs	r3, r1, r3
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	3332      	adds	r3, #50	; 0x32
 80099c4:	4a33      	ldr	r2, [pc, #204]	; (8009a94 <UART_SetConfig+0x4e4>)
 80099c6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ca:	095b      	lsrs	r3, r3, #5
 80099cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099d0:	441c      	add	r4, r3
 80099d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099d6:	2200      	movs	r2, #0
 80099d8:	673b      	str	r3, [r7, #112]	; 0x70
 80099da:	677a      	str	r2, [r7, #116]	; 0x74
 80099dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80099e0:	4642      	mov	r2, r8
 80099e2:	464b      	mov	r3, r9
 80099e4:	1891      	adds	r1, r2, r2
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	415b      	adcs	r3, r3
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099f0:	4641      	mov	r1, r8
 80099f2:	1851      	adds	r1, r2, r1
 80099f4:	6039      	str	r1, [r7, #0]
 80099f6:	4649      	mov	r1, r9
 80099f8:	414b      	adcs	r3, r1
 80099fa:	607b      	str	r3, [r7, #4]
 80099fc:	f04f 0200 	mov.w	r2, #0
 8009a00:	f04f 0300 	mov.w	r3, #0
 8009a04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a08:	4659      	mov	r1, fp
 8009a0a:	00cb      	lsls	r3, r1, #3
 8009a0c:	4651      	mov	r1, sl
 8009a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a12:	4651      	mov	r1, sl
 8009a14:	00ca      	lsls	r2, r1, #3
 8009a16:	4610      	mov	r0, r2
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	4642      	mov	r2, r8
 8009a1e:	189b      	adds	r3, r3, r2
 8009a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a22:	464b      	mov	r3, r9
 8009a24:	460a      	mov	r2, r1
 8009a26:	eb42 0303 	adc.w	r3, r2, r3
 8009a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	663b      	str	r3, [r7, #96]	; 0x60
 8009a36:	667a      	str	r2, [r7, #100]	; 0x64
 8009a38:	f04f 0200 	mov.w	r2, #0
 8009a3c:	f04f 0300 	mov.w	r3, #0
 8009a40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a44:	4649      	mov	r1, r9
 8009a46:	008b      	lsls	r3, r1, #2
 8009a48:	4641      	mov	r1, r8
 8009a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a4e:	4641      	mov	r1, r8
 8009a50:	008a      	lsls	r2, r1, #2
 8009a52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a56:	f7f6 ff11 	bl	800087c <__aeabi_uldivmod>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <UART_SetConfig+0x4e4>)
 8009a60:	fba3 1302 	umull	r1, r3, r3, r2
 8009a64:	095b      	lsrs	r3, r3, #5
 8009a66:	2164      	movs	r1, #100	; 0x64
 8009a68:	fb01 f303 	mul.w	r3, r1, r3
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	011b      	lsls	r3, r3, #4
 8009a70:	3332      	adds	r3, #50	; 0x32
 8009a72:	4a08      	ldr	r2, [pc, #32]	; (8009a94 <UART_SetConfig+0x4e4>)
 8009a74:	fba2 2303 	umull	r2, r3, r2, r3
 8009a78:	095b      	lsrs	r3, r3, #5
 8009a7a:	f003 020f 	and.w	r2, r3, #15
 8009a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4422      	add	r2, r4
 8009a86:	609a      	str	r2, [r3, #8]
}
 8009a88:	bf00      	nop
 8009a8a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a94:	51eb851f 	.word	0x51eb851f

08009a98 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	6812      	ldr	r2, [r2, #0]
 8009ab0:	f023 0101 	bic.w	r1, r3, #1
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	2b08      	cmp	r3, #8
 8009ac0:	d102      	bne.n	8009ac8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009ac2:	2340      	movs	r3, #64	; 0x40
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	e001      	b.n	8009acc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009ad8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009ade:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009ae4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009aea:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009af0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009af6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8009afc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8009b02:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8009b08:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009b26:	4b10      	ldr	r3, [pc, #64]	; (8009b68 <FSMC_NORSRAM_Init+0xd0>)
 8009b28:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b30:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009b38:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	43db      	mvns	r3, r3
 8009b48:	ea02 0103 	and.w	r1, r2, r3
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	4319      	orrs	r1, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	371c      	adds	r7, #28
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	0008fb7f 	.word	0x0008fb7f

08009b6c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b82:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	011b      	lsls	r3, r3, #4
 8009b90:	431a      	orrs	r2, r3
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	021b      	lsls	r3, r3, #8
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	041b      	lsls	r3, r3, #16
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	051b      	lsls	r3, r3, #20
 8009baa:	431a      	orrs	r2, r3
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	3b02      	subs	r3, #2
 8009bb2:	061b      	lsls	r3, r3, #24
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	3201      	adds	r2, #1
 8009bc0:	4319      	orrs	r1, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
	...

08009bd8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bec:	d11d      	bne.n	8009c2a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bf6:	4b13      	ldr	r3, [pc, #76]	; (8009c44 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	6811      	ldr	r1, [r2, #0]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	6852      	ldr	r2, [r2, #4]
 8009c02:	0112      	lsls	r2, r2, #4
 8009c04:	4311      	orrs	r1, r2
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	6892      	ldr	r2, [r2, #8]
 8009c0a:	0212      	lsls	r2, r2, #8
 8009c0c:	4311      	orrs	r1, r2
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	6992      	ldr	r2, [r2, #24]
 8009c12:	4311      	orrs	r1, r2
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	68d2      	ldr	r2, [r2, #12]
 8009c18:	0412      	lsls	r2, r2, #16
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	ea43 0102 	orr.w	r1, r3, r2
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009c28:	e005      	b.n	8009c36 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	cff00000 	.word	0xcff00000

08009c48 <std>:
 8009c48:	2300      	movs	r3, #0
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c56:	6083      	str	r3, [r0, #8]
 8009c58:	8181      	strh	r1, [r0, #12]
 8009c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c5c:	81c2      	strh	r2, [r0, #14]
 8009c5e:	6183      	str	r3, [r0, #24]
 8009c60:	4619      	mov	r1, r3
 8009c62:	2208      	movs	r2, #8
 8009c64:	305c      	adds	r0, #92	; 0x5c
 8009c66:	f000 fa1f 	bl	800a0a8 <memset>
 8009c6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ca0 <std+0x58>)
 8009c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c6e:	4b0d      	ldr	r3, [pc, #52]	; (8009ca4 <std+0x5c>)
 8009c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c72:	4b0d      	ldr	r3, [pc, #52]	; (8009ca8 <std+0x60>)
 8009c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c76:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <std+0x64>)
 8009c78:	6323      	str	r3, [r4, #48]	; 0x30
 8009c7a:	4b0d      	ldr	r3, [pc, #52]	; (8009cb0 <std+0x68>)
 8009c7c:	6224      	str	r4, [r4, #32]
 8009c7e:	429c      	cmp	r4, r3
 8009c80:	d006      	beq.n	8009c90 <std+0x48>
 8009c82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009c86:	4294      	cmp	r4, r2
 8009c88:	d002      	beq.n	8009c90 <std+0x48>
 8009c8a:	33d0      	adds	r3, #208	; 0xd0
 8009c8c:	429c      	cmp	r4, r3
 8009c8e:	d105      	bne.n	8009c9c <std+0x54>
 8009c90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c98:	f000 ba7e 	b.w	800a198 <__retarget_lock_init_recursive>
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	bf00      	nop
 8009ca0:	08009ef9 	.word	0x08009ef9
 8009ca4:	08009f1b 	.word	0x08009f1b
 8009ca8:	08009f53 	.word	0x08009f53
 8009cac:	08009f77 	.word	0x08009f77
 8009cb0:	200003a4 	.word	0x200003a4

08009cb4 <stdio_exit_handler>:
 8009cb4:	4a02      	ldr	r2, [pc, #8]	; (8009cc0 <stdio_exit_handler+0xc>)
 8009cb6:	4903      	ldr	r1, [pc, #12]	; (8009cc4 <stdio_exit_handler+0x10>)
 8009cb8:	4803      	ldr	r0, [pc, #12]	; (8009cc8 <stdio_exit_handler+0x14>)
 8009cba:	f000 b869 	b.w	8009d90 <_fwalk_sglue>
 8009cbe:	bf00      	nop
 8009cc0:	20000140 	.word	0x20000140
 8009cc4:	0800acf5 	.word	0x0800acf5
 8009cc8:	2000014c 	.word	0x2000014c

08009ccc <cleanup_stdio>:
 8009ccc:	6841      	ldr	r1, [r0, #4]
 8009cce:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <cleanup_stdio+0x34>)
 8009cd0:	4299      	cmp	r1, r3
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	d001      	beq.n	8009cdc <cleanup_stdio+0x10>
 8009cd8:	f001 f80c 	bl	800acf4 <_fflush_r>
 8009cdc:	68a1      	ldr	r1, [r4, #8]
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <cleanup_stdio+0x38>)
 8009ce0:	4299      	cmp	r1, r3
 8009ce2:	d002      	beq.n	8009cea <cleanup_stdio+0x1e>
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f001 f805 	bl	800acf4 <_fflush_r>
 8009cea:	68e1      	ldr	r1, [r4, #12]
 8009cec:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <cleanup_stdio+0x3c>)
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	d004      	beq.n	8009cfc <cleanup_stdio+0x30>
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf8:	f000 bffc 	b.w	800acf4 <_fflush_r>
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	bf00      	nop
 8009d00:	200003a4 	.word	0x200003a4
 8009d04:	2000040c 	.word	0x2000040c
 8009d08:	20000474 	.word	0x20000474

08009d0c <global_stdio_init.part.0>:
 8009d0c:	b510      	push	{r4, lr}
 8009d0e:	4b0b      	ldr	r3, [pc, #44]	; (8009d3c <global_stdio_init.part.0+0x30>)
 8009d10:	4c0b      	ldr	r4, [pc, #44]	; (8009d40 <global_stdio_init.part.0+0x34>)
 8009d12:	4a0c      	ldr	r2, [pc, #48]	; (8009d44 <global_stdio_init.part.0+0x38>)
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	4620      	mov	r0, r4
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2104      	movs	r1, #4
 8009d1c:	f7ff ff94 	bl	8009c48 <std>
 8009d20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009d24:	2201      	movs	r2, #1
 8009d26:	2109      	movs	r1, #9
 8009d28:	f7ff ff8e 	bl	8009c48 <std>
 8009d2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009d30:	2202      	movs	r2, #2
 8009d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d36:	2112      	movs	r1, #18
 8009d38:	f7ff bf86 	b.w	8009c48 <std>
 8009d3c:	200004dc 	.word	0x200004dc
 8009d40:	200003a4 	.word	0x200003a4
 8009d44:	08009cb5 	.word	0x08009cb5

08009d48 <__sfp_lock_acquire>:
 8009d48:	4801      	ldr	r0, [pc, #4]	; (8009d50 <__sfp_lock_acquire+0x8>)
 8009d4a:	f000 ba26 	b.w	800a19a <__retarget_lock_acquire_recursive>
 8009d4e:	bf00      	nop
 8009d50:	200004e5 	.word	0x200004e5

08009d54 <__sfp_lock_release>:
 8009d54:	4801      	ldr	r0, [pc, #4]	; (8009d5c <__sfp_lock_release+0x8>)
 8009d56:	f000 ba21 	b.w	800a19c <__retarget_lock_release_recursive>
 8009d5a:	bf00      	nop
 8009d5c:	200004e5 	.word	0x200004e5

08009d60 <__sinit>:
 8009d60:	b510      	push	{r4, lr}
 8009d62:	4604      	mov	r4, r0
 8009d64:	f7ff fff0 	bl	8009d48 <__sfp_lock_acquire>
 8009d68:	6a23      	ldr	r3, [r4, #32]
 8009d6a:	b11b      	cbz	r3, 8009d74 <__sinit+0x14>
 8009d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d70:	f7ff bff0 	b.w	8009d54 <__sfp_lock_release>
 8009d74:	4b04      	ldr	r3, [pc, #16]	; (8009d88 <__sinit+0x28>)
 8009d76:	6223      	str	r3, [r4, #32]
 8009d78:	4b04      	ldr	r3, [pc, #16]	; (8009d8c <__sinit+0x2c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1f5      	bne.n	8009d6c <__sinit+0xc>
 8009d80:	f7ff ffc4 	bl	8009d0c <global_stdio_init.part.0>
 8009d84:	e7f2      	b.n	8009d6c <__sinit+0xc>
 8009d86:	bf00      	nop
 8009d88:	08009ccd 	.word	0x08009ccd
 8009d8c:	200004dc 	.word	0x200004dc

08009d90 <_fwalk_sglue>:
 8009d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d94:	4607      	mov	r7, r0
 8009d96:	4688      	mov	r8, r1
 8009d98:	4614      	mov	r4, r2
 8009d9a:	2600      	movs	r6, #0
 8009d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009da0:	f1b9 0901 	subs.w	r9, r9, #1
 8009da4:	d505      	bpl.n	8009db2 <_fwalk_sglue+0x22>
 8009da6:	6824      	ldr	r4, [r4, #0]
 8009da8:	2c00      	cmp	r4, #0
 8009daa:	d1f7      	bne.n	8009d9c <_fwalk_sglue+0xc>
 8009dac:	4630      	mov	r0, r6
 8009dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d907      	bls.n	8009dc8 <_fwalk_sglue+0x38>
 8009db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	d003      	beq.n	8009dc8 <_fwalk_sglue+0x38>
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	47c0      	blx	r8
 8009dc6:	4306      	orrs	r6, r0
 8009dc8:	3568      	adds	r5, #104	; 0x68
 8009dca:	e7e9      	b.n	8009da0 <_fwalk_sglue+0x10>

08009dcc <iprintf>:
 8009dcc:	b40f      	push	{r0, r1, r2, r3}
 8009dce:	b507      	push	{r0, r1, r2, lr}
 8009dd0:	4906      	ldr	r1, [pc, #24]	; (8009dec <iprintf+0x20>)
 8009dd2:	ab04      	add	r3, sp, #16
 8009dd4:	6808      	ldr	r0, [r1, #0]
 8009dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dda:	6881      	ldr	r1, [r0, #8]
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	f000 fc59 	bl	800a694 <_vfiprintf_r>
 8009de2:	b003      	add	sp, #12
 8009de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009de8:	b004      	add	sp, #16
 8009dea:	4770      	bx	lr
 8009dec:	20000198 	.word	0x20000198

08009df0 <putchar>:
 8009df0:	4b02      	ldr	r3, [pc, #8]	; (8009dfc <putchar+0xc>)
 8009df2:	4601      	mov	r1, r0
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	6882      	ldr	r2, [r0, #8]
 8009df8:	f001 b806 	b.w	800ae08 <_putc_r>
 8009dfc:	20000198 	.word	0x20000198

08009e00 <_puts_r>:
 8009e00:	6a03      	ldr	r3, [r0, #32]
 8009e02:	b570      	push	{r4, r5, r6, lr}
 8009e04:	6884      	ldr	r4, [r0, #8]
 8009e06:	4605      	mov	r5, r0
 8009e08:	460e      	mov	r6, r1
 8009e0a:	b90b      	cbnz	r3, 8009e10 <_puts_r+0x10>
 8009e0c:	f7ff ffa8 	bl	8009d60 <__sinit>
 8009e10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e12:	07db      	lsls	r3, r3, #31
 8009e14:	d405      	bmi.n	8009e22 <_puts_r+0x22>
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	0598      	lsls	r0, r3, #22
 8009e1a:	d402      	bmi.n	8009e22 <_puts_r+0x22>
 8009e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e1e:	f000 f9bc 	bl	800a19a <__retarget_lock_acquire_recursive>
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	0719      	lsls	r1, r3, #28
 8009e26:	d513      	bpl.n	8009e50 <_puts_r+0x50>
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	b18b      	cbz	r3, 8009e50 <_puts_r+0x50>
 8009e2c:	3e01      	subs	r6, #1
 8009e2e:	68a3      	ldr	r3, [r4, #8]
 8009e30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e34:	3b01      	subs	r3, #1
 8009e36:	60a3      	str	r3, [r4, #8]
 8009e38:	b9e9      	cbnz	r1, 8009e76 <_puts_r+0x76>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da2e      	bge.n	8009e9c <_puts_r+0x9c>
 8009e3e:	4622      	mov	r2, r4
 8009e40:	210a      	movs	r1, #10
 8009e42:	4628      	mov	r0, r5
 8009e44:	f000 f89b 	bl	8009f7e <__swbuf_r>
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d007      	beq.n	8009e5c <_puts_r+0x5c>
 8009e4c:	250a      	movs	r5, #10
 8009e4e:	e007      	b.n	8009e60 <_puts_r+0x60>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 f8d0 	bl	8009ff8 <__swsetup_r>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d0e7      	beq.n	8009e2c <_puts_r+0x2c>
 8009e5c:	f04f 35ff 	mov.w	r5, #4294967295
 8009e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e62:	07da      	lsls	r2, r3, #31
 8009e64:	d405      	bmi.n	8009e72 <_puts_r+0x72>
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	059b      	lsls	r3, r3, #22
 8009e6a:	d402      	bmi.n	8009e72 <_puts_r+0x72>
 8009e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e6e:	f000 f995 	bl	800a19c <__retarget_lock_release_recursive>
 8009e72:	4628      	mov	r0, r5
 8009e74:	bd70      	pop	{r4, r5, r6, pc}
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	da04      	bge.n	8009e84 <_puts_r+0x84>
 8009e7a:	69a2      	ldr	r2, [r4, #24]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	dc06      	bgt.n	8009e8e <_puts_r+0x8e>
 8009e80:	290a      	cmp	r1, #10
 8009e82:	d004      	beq.n	8009e8e <_puts_r+0x8e>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	6022      	str	r2, [r4, #0]
 8009e8a:	7019      	strb	r1, [r3, #0]
 8009e8c:	e7cf      	b.n	8009e2e <_puts_r+0x2e>
 8009e8e:	4622      	mov	r2, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f000 f874 	bl	8009f7e <__swbuf_r>
 8009e96:	3001      	adds	r0, #1
 8009e98:	d1c9      	bne.n	8009e2e <_puts_r+0x2e>
 8009e9a:	e7df      	b.n	8009e5c <_puts_r+0x5c>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	250a      	movs	r5, #10
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	6022      	str	r2, [r4, #0]
 8009ea4:	701d      	strb	r5, [r3, #0]
 8009ea6:	e7db      	b.n	8009e60 <_puts_r+0x60>

08009ea8 <puts>:
 8009ea8:	4b02      	ldr	r3, [pc, #8]	; (8009eb4 <puts+0xc>)
 8009eaa:	4601      	mov	r1, r0
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	f7ff bfa7 	b.w	8009e00 <_puts_r>
 8009eb2:	bf00      	nop
 8009eb4:	20000198 	.word	0x20000198

08009eb8 <siprintf>:
 8009eb8:	b40e      	push	{r1, r2, r3}
 8009eba:	b500      	push	{lr}
 8009ebc:	b09c      	sub	sp, #112	; 0x70
 8009ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8009ec0:	9002      	str	r0, [sp, #8]
 8009ec2:	9006      	str	r0, [sp, #24]
 8009ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ec8:	4809      	ldr	r0, [pc, #36]	; (8009ef0 <siprintf+0x38>)
 8009eca:	9107      	str	r1, [sp, #28]
 8009ecc:	9104      	str	r1, [sp, #16]
 8009ece:	4909      	ldr	r1, [pc, #36]	; (8009ef4 <siprintf+0x3c>)
 8009ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed4:	9105      	str	r1, [sp, #20]
 8009ed6:	6800      	ldr	r0, [r0, #0]
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	a902      	add	r1, sp, #8
 8009edc:	f000 fab2 	bl	800a444 <_svfiprintf_r>
 8009ee0:	9b02      	ldr	r3, [sp, #8]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	b01c      	add	sp, #112	; 0x70
 8009ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eec:	b003      	add	sp, #12
 8009eee:	4770      	bx	lr
 8009ef0:	20000198 	.word	0x20000198
 8009ef4:	ffff0208 	.word	0xffff0208

08009ef8 <__sread>:
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	460c      	mov	r4, r1
 8009efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f00:	f000 f8fc 	bl	800a0fc <_read_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	bfab      	itete	ge
 8009f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f0c:	181b      	addge	r3, r3, r0
 8009f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f12:	bfac      	ite	ge
 8009f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f16:	81a3      	strhlt	r3, [r4, #12]
 8009f18:	bd10      	pop	{r4, pc}

08009f1a <__swrite>:
 8009f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1e:	461f      	mov	r7, r3
 8009f20:	898b      	ldrh	r3, [r1, #12]
 8009f22:	05db      	lsls	r3, r3, #23
 8009f24:	4605      	mov	r5, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	4616      	mov	r6, r2
 8009f2a:	d505      	bpl.n	8009f38 <__swrite+0x1e>
 8009f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f30:	2302      	movs	r3, #2
 8009f32:	2200      	movs	r2, #0
 8009f34:	f000 f8d0 	bl	800a0d8 <_lseek_r>
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f42:	81a3      	strh	r3, [r4, #12]
 8009f44:	4632      	mov	r2, r6
 8009f46:	463b      	mov	r3, r7
 8009f48:	4628      	mov	r0, r5
 8009f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4e:	f000 b8e7 	b.w	800a120 <_write_r>

08009f52 <__sseek>:
 8009f52:	b510      	push	{r4, lr}
 8009f54:	460c      	mov	r4, r1
 8009f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f5a:	f000 f8bd 	bl	800a0d8 <_lseek_r>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	bf15      	itete	ne
 8009f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f6e:	81a3      	strheq	r3, [r4, #12]
 8009f70:	bf18      	it	ne
 8009f72:	81a3      	strhne	r3, [r4, #12]
 8009f74:	bd10      	pop	{r4, pc}

08009f76 <__sclose>:
 8009f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f7a:	f000 b89d 	b.w	800a0b8 <_close_r>

08009f7e <__swbuf_r>:
 8009f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f80:	460e      	mov	r6, r1
 8009f82:	4614      	mov	r4, r2
 8009f84:	4605      	mov	r5, r0
 8009f86:	b118      	cbz	r0, 8009f90 <__swbuf_r+0x12>
 8009f88:	6a03      	ldr	r3, [r0, #32]
 8009f8a:	b90b      	cbnz	r3, 8009f90 <__swbuf_r+0x12>
 8009f8c:	f7ff fee8 	bl	8009d60 <__sinit>
 8009f90:	69a3      	ldr	r3, [r4, #24]
 8009f92:	60a3      	str	r3, [r4, #8]
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	071a      	lsls	r2, r3, #28
 8009f98:	d525      	bpl.n	8009fe6 <__swbuf_r+0x68>
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	b31b      	cbz	r3, 8009fe6 <__swbuf_r+0x68>
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	6922      	ldr	r2, [r4, #16]
 8009fa2:	1a98      	subs	r0, r3, r2
 8009fa4:	6963      	ldr	r3, [r4, #20]
 8009fa6:	b2f6      	uxtb	r6, r6
 8009fa8:	4283      	cmp	r3, r0
 8009faa:	4637      	mov	r7, r6
 8009fac:	dc04      	bgt.n	8009fb8 <__swbuf_r+0x3a>
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f000 fe9f 	bl	800acf4 <_fflush_r>
 8009fb6:	b9e0      	cbnz	r0, 8009ff2 <__swbuf_r+0x74>
 8009fb8:	68a3      	ldr	r3, [r4, #8]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	60a3      	str	r3, [r4, #8]
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	6022      	str	r2, [r4, #0]
 8009fc4:	701e      	strb	r6, [r3, #0]
 8009fc6:	6962      	ldr	r2, [r4, #20]
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d004      	beq.n	8009fd8 <__swbuf_r+0x5a>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	07db      	lsls	r3, r3, #31
 8009fd2:	d506      	bpl.n	8009fe2 <__swbuf_r+0x64>
 8009fd4:	2e0a      	cmp	r6, #10
 8009fd6:	d104      	bne.n	8009fe2 <__swbuf_r+0x64>
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 fe8a 	bl	800acf4 <_fflush_r>
 8009fe0:	b938      	cbnz	r0, 8009ff2 <__swbuf_r+0x74>
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f000 f805 	bl	8009ff8 <__swsetup_r>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d0d5      	beq.n	8009f9e <__swbuf_r+0x20>
 8009ff2:	f04f 37ff 	mov.w	r7, #4294967295
 8009ff6:	e7f4      	b.n	8009fe2 <__swbuf_r+0x64>

08009ff8 <__swsetup_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <__swsetup_r+0xac>)
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	460c      	mov	r4, r1
 800a002:	b118      	cbz	r0, 800a00c <__swsetup_r+0x14>
 800a004:	6a03      	ldr	r3, [r0, #32]
 800a006:	b90b      	cbnz	r3, 800a00c <__swsetup_r+0x14>
 800a008:	f7ff feaa 	bl	8009d60 <__sinit>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a012:	0718      	lsls	r0, r3, #28
 800a014:	d422      	bmi.n	800a05c <__swsetup_r+0x64>
 800a016:	06d9      	lsls	r1, r3, #27
 800a018:	d407      	bmi.n	800a02a <__swsetup_r+0x32>
 800a01a:	2309      	movs	r3, #9
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a022:	81a3      	strh	r3, [r4, #12]
 800a024:	f04f 30ff 	mov.w	r0, #4294967295
 800a028:	e034      	b.n	800a094 <__swsetup_r+0x9c>
 800a02a:	0758      	lsls	r0, r3, #29
 800a02c:	d512      	bpl.n	800a054 <__swsetup_r+0x5c>
 800a02e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a030:	b141      	cbz	r1, 800a044 <__swsetup_r+0x4c>
 800a032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a036:	4299      	cmp	r1, r3
 800a038:	d002      	beq.n	800a040 <__swsetup_r+0x48>
 800a03a:	4628      	mov	r0, r5
 800a03c:	f000 f8b0 	bl	800a1a0 <_free_r>
 800a040:	2300      	movs	r3, #0
 800a042:	6363      	str	r3, [r4, #52]	; 0x34
 800a044:	89a3      	ldrh	r3, [r4, #12]
 800a046:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	2300      	movs	r3, #0
 800a04e:	6063      	str	r3, [r4, #4]
 800a050:	6923      	ldr	r3, [r4, #16]
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f043 0308 	orr.w	r3, r3, #8
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	6923      	ldr	r3, [r4, #16]
 800a05e:	b94b      	cbnz	r3, 800a074 <__swsetup_r+0x7c>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a06a:	d003      	beq.n	800a074 <__swsetup_r+0x7c>
 800a06c:	4621      	mov	r1, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 fe8e 	bl	800ad90 <__smakebuf_r>
 800a074:	89a0      	ldrh	r0, [r4, #12]
 800a076:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a07a:	f010 0301 	ands.w	r3, r0, #1
 800a07e:	d00a      	beq.n	800a096 <__swsetup_r+0x9e>
 800a080:	2300      	movs	r3, #0
 800a082:	60a3      	str	r3, [r4, #8]
 800a084:	6963      	ldr	r3, [r4, #20]
 800a086:	425b      	negs	r3, r3
 800a088:	61a3      	str	r3, [r4, #24]
 800a08a:	6923      	ldr	r3, [r4, #16]
 800a08c:	b943      	cbnz	r3, 800a0a0 <__swsetup_r+0xa8>
 800a08e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a092:	d1c4      	bne.n	800a01e <__swsetup_r+0x26>
 800a094:	bd38      	pop	{r3, r4, r5, pc}
 800a096:	0781      	lsls	r1, r0, #30
 800a098:	bf58      	it	pl
 800a09a:	6963      	ldrpl	r3, [r4, #20]
 800a09c:	60a3      	str	r3, [r4, #8]
 800a09e:	e7f4      	b.n	800a08a <__swsetup_r+0x92>
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	e7f7      	b.n	800a094 <__swsetup_r+0x9c>
 800a0a4:	20000198 	.word	0x20000198

0800a0a8 <memset>:
 800a0a8:	4402      	add	r2, r0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d100      	bne.n	800a0b2 <memset+0xa>
 800a0b0:	4770      	bx	lr
 800a0b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a0b6:	e7f9      	b.n	800a0ac <memset+0x4>

0800a0b8 <_close_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d06      	ldr	r5, [pc, #24]	; (800a0d4 <_close_r+0x1c>)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	f7fc f811 	bl	80060ea <_close>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_close_r+0x1a>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_close_r+0x1a>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	200004e0 	.word	0x200004e0

0800a0d8 <_lseek_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d07      	ldr	r5, [pc, #28]	; (800a0f8 <_lseek_r+0x20>)
 800a0dc:	4604      	mov	r4, r0
 800a0de:	4608      	mov	r0, r1
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	602a      	str	r2, [r5, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f7fc f826 	bl	8006138 <_lseek>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_lseek_r+0x1e>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_lseek_r+0x1e>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	200004e0 	.word	0x200004e0

0800a0fc <_read_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	4d07      	ldr	r5, [pc, #28]	; (800a11c <_read_r+0x20>)
 800a100:	4604      	mov	r4, r0
 800a102:	4608      	mov	r0, r1
 800a104:	4611      	mov	r1, r2
 800a106:	2200      	movs	r2, #0
 800a108:	602a      	str	r2, [r5, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	f7fb ffb4 	bl	8006078 <_read>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_read_r+0x1e>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_read_r+0x1e>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	200004e0 	.word	0x200004e0

0800a120 <_write_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d07      	ldr	r5, [pc, #28]	; (800a140 <_write_r+0x20>)
 800a124:	4604      	mov	r4, r0
 800a126:	4608      	mov	r0, r1
 800a128:	4611      	mov	r1, r2
 800a12a:	2200      	movs	r2, #0
 800a12c:	602a      	str	r2, [r5, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	f7fb ffbf 	bl	80060b2 <_write>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_write_r+0x1e>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_write_r+0x1e>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	200004e0 	.word	0x200004e0

0800a144 <__errno>:
 800a144:	4b01      	ldr	r3, [pc, #4]	; (800a14c <__errno+0x8>)
 800a146:	6818      	ldr	r0, [r3, #0]
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	20000198 	.word	0x20000198

0800a150 <__libc_init_array>:
 800a150:	b570      	push	{r4, r5, r6, lr}
 800a152:	4d0d      	ldr	r5, [pc, #52]	; (800a188 <__libc_init_array+0x38>)
 800a154:	4c0d      	ldr	r4, [pc, #52]	; (800a18c <__libc_init_array+0x3c>)
 800a156:	1b64      	subs	r4, r4, r5
 800a158:	10a4      	asrs	r4, r4, #2
 800a15a:	2600      	movs	r6, #0
 800a15c:	42a6      	cmp	r6, r4
 800a15e:	d109      	bne.n	800a174 <__libc_init_array+0x24>
 800a160:	4d0b      	ldr	r5, [pc, #44]	; (800a190 <__libc_init_array+0x40>)
 800a162:	4c0c      	ldr	r4, [pc, #48]	; (800a194 <__libc_init_array+0x44>)
 800a164:	f000 ff16 	bl	800af94 <_init>
 800a168:	1b64      	subs	r4, r4, r5
 800a16a:	10a4      	asrs	r4, r4, #2
 800a16c:	2600      	movs	r6, #0
 800a16e:	42a6      	cmp	r6, r4
 800a170:	d105      	bne.n	800a17e <__libc_init_array+0x2e>
 800a172:	bd70      	pop	{r4, r5, r6, pc}
 800a174:	f855 3b04 	ldr.w	r3, [r5], #4
 800a178:	4798      	blx	r3
 800a17a:	3601      	adds	r6, #1
 800a17c:	e7ee      	b.n	800a15c <__libc_init_array+0xc>
 800a17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a182:	4798      	blx	r3
 800a184:	3601      	adds	r6, #1
 800a186:	e7f2      	b.n	800a16e <__libc_init_array+0x1e>
 800a188:	0800e8b4 	.word	0x0800e8b4
 800a18c:	0800e8b4 	.word	0x0800e8b4
 800a190:	0800e8b4 	.word	0x0800e8b4
 800a194:	0800e8b8 	.word	0x0800e8b8

0800a198 <__retarget_lock_init_recursive>:
 800a198:	4770      	bx	lr

0800a19a <__retarget_lock_acquire_recursive>:
 800a19a:	4770      	bx	lr

0800a19c <__retarget_lock_release_recursive>:
 800a19c:	4770      	bx	lr
	...

0800a1a0 <_free_r>:
 800a1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	d044      	beq.n	800a230 <_free_r+0x90>
 800a1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1aa:	9001      	str	r0, [sp, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a1b2:	bfb8      	it	lt
 800a1b4:	18e4      	addlt	r4, r4, r3
 800a1b6:	f000 f8df 	bl	800a378 <__malloc_lock>
 800a1ba:	4a1e      	ldr	r2, [pc, #120]	; (800a234 <_free_r+0x94>)
 800a1bc:	9801      	ldr	r0, [sp, #4]
 800a1be:	6813      	ldr	r3, [r2, #0]
 800a1c0:	b933      	cbnz	r3, 800a1d0 <_free_r+0x30>
 800a1c2:	6063      	str	r3, [r4, #4]
 800a1c4:	6014      	str	r4, [r2, #0]
 800a1c6:	b003      	add	sp, #12
 800a1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1cc:	f000 b8da 	b.w	800a384 <__malloc_unlock>
 800a1d0:	42a3      	cmp	r3, r4
 800a1d2:	d908      	bls.n	800a1e6 <_free_r+0x46>
 800a1d4:	6825      	ldr	r5, [r4, #0]
 800a1d6:	1961      	adds	r1, r4, r5
 800a1d8:	428b      	cmp	r3, r1
 800a1da:	bf01      	itttt	eq
 800a1dc:	6819      	ldreq	r1, [r3, #0]
 800a1de:	685b      	ldreq	r3, [r3, #4]
 800a1e0:	1949      	addeq	r1, r1, r5
 800a1e2:	6021      	streq	r1, [r4, #0]
 800a1e4:	e7ed      	b.n	800a1c2 <_free_r+0x22>
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	b10b      	cbz	r3, 800a1f0 <_free_r+0x50>
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	d9fa      	bls.n	800a1e6 <_free_r+0x46>
 800a1f0:	6811      	ldr	r1, [r2, #0]
 800a1f2:	1855      	adds	r5, r2, r1
 800a1f4:	42a5      	cmp	r5, r4
 800a1f6:	d10b      	bne.n	800a210 <_free_r+0x70>
 800a1f8:	6824      	ldr	r4, [r4, #0]
 800a1fa:	4421      	add	r1, r4
 800a1fc:	1854      	adds	r4, r2, r1
 800a1fe:	42a3      	cmp	r3, r4
 800a200:	6011      	str	r1, [r2, #0]
 800a202:	d1e0      	bne.n	800a1c6 <_free_r+0x26>
 800a204:	681c      	ldr	r4, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	6053      	str	r3, [r2, #4]
 800a20a:	440c      	add	r4, r1
 800a20c:	6014      	str	r4, [r2, #0]
 800a20e:	e7da      	b.n	800a1c6 <_free_r+0x26>
 800a210:	d902      	bls.n	800a218 <_free_r+0x78>
 800a212:	230c      	movs	r3, #12
 800a214:	6003      	str	r3, [r0, #0]
 800a216:	e7d6      	b.n	800a1c6 <_free_r+0x26>
 800a218:	6825      	ldr	r5, [r4, #0]
 800a21a:	1961      	adds	r1, r4, r5
 800a21c:	428b      	cmp	r3, r1
 800a21e:	bf04      	itt	eq
 800a220:	6819      	ldreq	r1, [r3, #0]
 800a222:	685b      	ldreq	r3, [r3, #4]
 800a224:	6063      	str	r3, [r4, #4]
 800a226:	bf04      	itt	eq
 800a228:	1949      	addeq	r1, r1, r5
 800a22a:	6021      	streq	r1, [r4, #0]
 800a22c:	6054      	str	r4, [r2, #4]
 800a22e:	e7ca      	b.n	800a1c6 <_free_r+0x26>
 800a230:	b003      	add	sp, #12
 800a232:	bd30      	pop	{r4, r5, pc}
 800a234:	200004e8 	.word	0x200004e8

0800a238 <sbrk_aligned>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	4e0e      	ldr	r6, [pc, #56]	; (800a274 <sbrk_aligned+0x3c>)
 800a23c:	460c      	mov	r4, r1
 800a23e:	6831      	ldr	r1, [r6, #0]
 800a240:	4605      	mov	r5, r0
 800a242:	b911      	cbnz	r1, 800a24a <sbrk_aligned+0x12>
 800a244:	f000 fe50 	bl	800aee8 <_sbrk_r>
 800a248:	6030      	str	r0, [r6, #0]
 800a24a:	4621      	mov	r1, r4
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 fe4b 	bl	800aee8 <_sbrk_r>
 800a252:	1c43      	adds	r3, r0, #1
 800a254:	d00a      	beq.n	800a26c <sbrk_aligned+0x34>
 800a256:	1cc4      	adds	r4, r0, #3
 800a258:	f024 0403 	bic.w	r4, r4, #3
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d007      	beq.n	800a270 <sbrk_aligned+0x38>
 800a260:	1a21      	subs	r1, r4, r0
 800a262:	4628      	mov	r0, r5
 800a264:	f000 fe40 	bl	800aee8 <_sbrk_r>
 800a268:	3001      	adds	r0, #1
 800a26a:	d101      	bne.n	800a270 <sbrk_aligned+0x38>
 800a26c:	f04f 34ff 	mov.w	r4, #4294967295
 800a270:	4620      	mov	r0, r4
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	200004ec 	.word	0x200004ec

0800a278 <_malloc_r>:
 800a278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a27c:	1ccd      	adds	r5, r1, #3
 800a27e:	f025 0503 	bic.w	r5, r5, #3
 800a282:	3508      	adds	r5, #8
 800a284:	2d0c      	cmp	r5, #12
 800a286:	bf38      	it	cc
 800a288:	250c      	movcc	r5, #12
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	4607      	mov	r7, r0
 800a28e:	db01      	blt.n	800a294 <_malloc_r+0x1c>
 800a290:	42a9      	cmp	r1, r5
 800a292:	d905      	bls.n	800a2a0 <_malloc_r+0x28>
 800a294:	230c      	movs	r3, #12
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	2600      	movs	r6, #0
 800a29a:	4630      	mov	r0, r6
 800a29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a374 <_malloc_r+0xfc>
 800a2a4:	f000 f868 	bl	800a378 <__malloc_lock>
 800a2a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ac:	461c      	mov	r4, r3
 800a2ae:	bb5c      	cbnz	r4, 800a308 <_malloc_r+0x90>
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f7ff ffc0 	bl	800a238 <sbrk_aligned>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	d155      	bne.n	800a36a <_malloc_r+0xf2>
 800a2be:	f8d8 4000 	ldr.w	r4, [r8]
 800a2c2:	4626      	mov	r6, r4
 800a2c4:	2e00      	cmp	r6, #0
 800a2c6:	d145      	bne.n	800a354 <_malloc_r+0xdc>
 800a2c8:	2c00      	cmp	r4, #0
 800a2ca:	d048      	beq.n	800a35e <_malloc_r+0xe6>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	eb04 0903 	add.w	r9, r4, r3
 800a2d6:	f000 fe07 	bl	800aee8 <_sbrk_r>
 800a2da:	4581      	cmp	r9, r0
 800a2dc:	d13f      	bne.n	800a35e <_malloc_r+0xe6>
 800a2de:	6821      	ldr	r1, [r4, #0]
 800a2e0:	1a6d      	subs	r5, r5, r1
 800a2e2:	4629      	mov	r1, r5
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	f7ff ffa7 	bl	800a238 <sbrk_aligned>
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d037      	beq.n	800a35e <_malloc_r+0xe6>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	442b      	add	r3, r5
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d038      	beq.n	800a36e <_malloc_r+0xf6>
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	42a2      	cmp	r2, r4
 800a300:	d12b      	bne.n	800a35a <_malloc_r+0xe2>
 800a302:	2200      	movs	r2, #0
 800a304:	605a      	str	r2, [r3, #4]
 800a306:	e00f      	b.n	800a328 <_malloc_r+0xb0>
 800a308:	6822      	ldr	r2, [r4, #0]
 800a30a:	1b52      	subs	r2, r2, r5
 800a30c:	d41f      	bmi.n	800a34e <_malloc_r+0xd6>
 800a30e:	2a0b      	cmp	r2, #11
 800a310:	d917      	bls.n	800a342 <_malloc_r+0xca>
 800a312:	1961      	adds	r1, r4, r5
 800a314:	42a3      	cmp	r3, r4
 800a316:	6025      	str	r5, [r4, #0]
 800a318:	bf18      	it	ne
 800a31a:	6059      	strne	r1, [r3, #4]
 800a31c:	6863      	ldr	r3, [r4, #4]
 800a31e:	bf08      	it	eq
 800a320:	f8c8 1000 	streq.w	r1, [r8]
 800a324:	5162      	str	r2, [r4, r5]
 800a326:	604b      	str	r3, [r1, #4]
 800a328:	4638      	mov	r0, r7
 800a32a:	f104 060b 	add.w	r6, r4, #11
 800a32e:	f000 f829 	bl	800a384 <__malloc_unlock>
 800a332:	f026 0607 	bic.w	r6, r6, #7
 800a336:	1d23      	adds	r3, r4, #4
 800a338:	1af2      	subs	r2, r6, r3
 800a33a:	d0ae      	beq.n	800a29a <_malloc_r+0x22>
 800a33c:	1b9b      	subs	r3, r3, r6
 800a33e:	50a3      	str	r3, [r4, r2]
 800a340:	e7ab      	b.n	800a29a <_malloc_r+0x22>
 800a342:	42a3      	cmp	r3, r4
 800a344:	6862      	ldr	r2, [r4, #4]
 800a346:	d1dd      	bne.n	800a304 <_malloc_r+0x8c>
 800a348:	f8c8 2000 	str.w	r2, [r8]
 800a34c:	e7ec      	b.n	800a328 <_malloc_r+0xb0>
 800a34e:	4623      	mov	r3, r4
 800a350:	6864      	ldr	r4, [r4, #4]
 800a352:	e7ac      	b.n	800a2ae <_malloc_r+0x36>
 800a354:	4634      	mov	r4, r6
 800a356:	6876      	ldr	r6, [r6, #4]
 800a358:	e7b4      	b.n	800a2c4 <_malloc_r+0x4c>
 800a35a:	4613      	mov	r3, r2
 800a35c:	e7cc      	b.n	800a2f8 <_malloc_r+0x80>
 800a35e:	230c      	movs	r3, #12
 800a360:	603b      	str	r3, [r7, #0]
 800a362:	4638      	mov	r0, r7
 800a364:	f000 f80e 	bl	800a384 <__malloc_unlock>
 800a368:	e797      	b.n	800a29a <_malloc_r+0x22>
 800a36a:	6025      	str	r5, [r4, #0]
 800a36c:	e7dc      	b.n	800a328 <_malloc_r+0xb0>
 800a36e:	605b      	str	r3, [r3, #4]
 800a370:	deff      	udf	#255	; 0xff
 800a372:	bf00      	nop
 800a374:	200004e8 	.word	0x200004e8

0800a378 <__malloc_lock>:
 800a378:	4801      	ldr	r0, [pc, #4]	; (800a380 <__malloc_lock+0x8>)
 800a37a:	f7ff bf0e 	b.w	800a19a <__retarget_lock_acquire_recursive>
 800a37e:	bf00      	nop
 800a380:	200004e4 	.word	0x200004e4

0800a384 <__malloc_unlock>:
 800a384:	4801      	ldr	r0, [pc, #4]	; (800a38c <__malloc_unlock+0x8>)
 800a386:	f7ff bf09 	b.w	800a19c <__retarget_lock_release_recursive>
 800a38a:	bf00      	nop
 800a38c:	200004e4 	.word	0x200004e4

0800a390 <__ssputs_r>:
 800a390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a394:	688e      	ldr	r6, [r1, #8]
 800a396:	461f      	mov	r7, r3
 800a398:	42be      	cmp	r6, r7
 800a39a:	680b      	ldr	r3, [r1, #0]
 800a39c:	4682      	mov	sl, r0
 800a39e:	460c      	mov	r4, r1
 800a3a0:	4690      	mov	r8, r2
 800a3a2:	d82c      	bhi.n	800a3fe <__ssputs_r+0x6e>
 800a3a4:	898a      	ldrh	r2, [r1, #12]
 800a3a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3aa:	d026      	beq.n	800a3fa <__ssputs_r+0x6a>
 800a3ac:	6965      	ldr	r5, [r4, #20]
 800a3ae:	6909      	ldr	r1, [r1, #16]
 800a3b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b4:	eba3 0901 	sub.w	r9, r3, r1
 800a3b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3bc:	1c7b      	adds	r3, r7, #1
 800a3be:	444b      	add	r3, r9
 800a3c0:	106d      	asrs	r5, r5, #1
 800a3c2:	429d      	cmp	r5, r3
 800a3c4:	bf38      	it	cc
 800a3c6:	461d      	movcc	r5, r3
 800a3c8:	0553      	lsls	r3, r2, #21
 800a3ca:	d527      	bpl.n	800a41c <__ssputs_r+0x8c>
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	f7ff ff53 	bl	800a278 <_malloc_r>
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	b360      	cbz	r0, 800a430 <__ssputs_r+0xa0>
 800a3d6:	6921      	ldr	r1, [r4, #16]
 800a3d8:	464a      	mov	r2, r9
 800a3da:	f000 fd95 	bl	800af08 <memcpy>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	6126      	str	r6, [r4, #16]
 800a3ec:	6165      	str	r5, [r4, #20]
 800a3ee:	444e      	add	r6, r9
 800a3f0:	eba5 0509 	sub.w	r5, r5, r9
 800a3f4:	6026      	str	r6, [r4, #0]
 800a3f6:	60a5      	str	r5, [r4, #8]
 800a3f8:	463e      	mov	r6, r7
 800a3fa:	42be      	cmp	r6, r7
 800a3fc:	d900      	bls.n	800a400 <__ssputs_r+0x70>
 800a3fe:	463e      	mov	r6, r7
 800a400:	6820      	ldr	r0, [r4, #0]
 800a402:	4632      	mov	r2, r6
 800a404:	4641      	mov	r1, r8
 800a406:	f000 fd33 	bl	800ae70 <memmove>
 800a40a:	68a3      	ldr	r3, [r4, #8]
 800a40c:	1b9b      	subs	r3, r3, r6
 800a40e:	60a3      	str	r3, [r4, #8]
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	4433      	add	r3, r6
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	2000      	movs	r0, #0
 800a418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41c:	462a      	mov	r2, r5
 800a41e:	f000 fd81 	bl	800af24 <_realloc_r>
 800a422:	4606      	mov	r6, r0
 800a424:	2800      	cmp	r0, #0
 800a426:	d1e0      	bne.n	800a3ea <__ssputs_r+0x5a>
 800a428:	6921      	ldr	r1, [r4, #16]
 800a42a:	4650      	mov	r0, sl
 800a42c:	f7ff feb8 	bl	800a1a0 <_free_r>
 800a430:	230c      	movs	r3, #12
 800a432:	f8ca 3000 	str.w	r3, [sl]
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a43c:	81a3      	strh	r3, [r4, #12]
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	e7e9      	b.n	800a418 <__ssputs_r+0x88>

0800a444 <_svfiprintf_r>:
 800a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	4698      	mov	r8, r3
 800a44a:	898b      	ldrh	r3, [r1, #12]
 800a44c:	061b      	lsls	r3, r3, #24
 800a44e:	b09d      	sub	sp, #116	; 0x74
 800a450:	4607      	mov	r7, r0
 800a452:	460d      	mov	r5, r1
 800a454:	4614      	mov	r4, r2
 800a456:	d50e      	bpl.n	800a476 <_svfiprintf_r+0x32>
 800a458:	690b      	ldr	r3, [r1, #16]
 800a45a:	b963      	cbnz	r3, 800a476 <_svfiprintf_r+0x32>
 800a45c:	2140      	movs	r1, #64	; 0x40
 800a45e:	f7ff ff0b 	bl	800a278 <_malloc_r>
 800a462:	6028      	str	r0, [r5, #0]
 800a464:	6128      	str	r0, [r5, #16]
 800a466:	b920      	cbnz	r0, 800a472 <_svfiprintf_r+0x2e>
 800a468:	230c      	movs	r3, #12
 800a46a:	603b      	str	r3, [r7, #0]
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	e0d0      	b.n	800a614 <_svfiprintf_r+0x1d0>
 800a472:	2340      	movs	r3, #64	; 0x40
 800a474:	616b      	str	r3, [r5, #20]
 800a476:	2300      	movs	r3, #0
 800a478:	9309      	str	r3, [sp, #36]	; 0x24
 800a47a:	2320      	movs	r3, #32
 800a47c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a480:	f8cd 800c 	str.w	r8, [sp, #12]
 800a484:	2330      	movs	r3, #48	; 0x30
 800a486:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a62c <_svfiprintf_r+0x1e8>
 800a48a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a48e:	f04f 0901 	mov.w	r9, #1
 800a492:	4623      	mov	r3, r4
 800a494:	469a      	mov	sl, r3
 800a496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a49a:	b10a      	cbz	r2, 800a4a0 <_svfiprintf_r+0x5c>
 800a49c:	2a25      	cmp	r2, #37	; 0x25
 800a49e:	d1f9      	bne.n	800a494 <_svfiprintf_r+0x50>
 800a4a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a4:	d00b      	beq.n	800a4be <_svfiprintf_r+0x7a>
 800a4a6:	465b      	mov	r3, fp
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	f7ff ff6f 	bl	800a390 <__ssputs_r>
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	f000 80a9 	beq.w	800a60a <_svfiprintf_r+0x1c6>
 800a4b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ba:	445a      	add	r2, fp
 800a4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4be:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80a1 	beq.w	800a60a <_svfiprintf_r+0x1c6>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d2:	f10a 0a01 	add.w	sl, sl, #1
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	9307      	str	r3, [sp, #28]
 800a4da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4de:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e0:	4654      	mov	r4, sl
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e8:	4850      	ldr	r0, [pc, #320]	; (800a62c <_svfiprintf_r+0x1e8>)
 800a4ea:	f7f5 fe71 	bl	80001d0 <memchr>
 800a4ee:	9a04      	ldr	r2, [sp, #16]
 800a4f0:	b9d8      	cbnz	r0, 800a52a <_svfiprintf_r+0xe6>
 800a4f2:	06d0      	lsls	r0, r2, #27
 800a4f4:	bf44      	itt	mi
 800a4f6:	2320      	movmi	r3, #32
 800a4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fc:	0711      	lsls	r1, r2, #28
 800a4fe:	bf44      	itt	mi
 800a500:	232b      	movmi	r3, #43	; 0x2b
 800a502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a506:	f89a 3000 	ldrb.w	r3, [sl]
 800a50a:	2b2a      	cmp	r3, #42	; 0x2a
 800a50c:	d015      	beq.n	800a53a <_svfiprintf_r+0xf6>
 800a50e:	9a07      	ldr	r2, [sp, #28]
 800a510:	4654      	mov	r4, sl
 800a512:	2000      	movs	r0, #0
 800a514:	f04f 0c0a 	mov.w	ip, #10
 800a518:	4621      	mov	r1, r4
 800a51a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51e:	3b30      	subs	r3, #48	; 0x30
 800a520:	2b09      	cmp	r3, #9
 800a522:	d94d      	bls.n	800a5c0 <_svfiprintf_r+0x17c>
 800a524:	b1b0      	cbz	r0, 800a554 <_svfiprintf_r+0x110>
 800a526:	9207      	str	r2, [sp, #28]
 800a528:	e014      	b.n	800a554 <_svfiprintf_r+0x110>
 800a52a:	eba0 0308 	sub.w	r3, r0, r8
 800a52e:	fa09 f303 	lsl.w	r3, r9, r3
 800a532:	4313      	orrs	r3, r2
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	46a2      	mov	sl, r4
 800a538:	e7d2      	b.n	800a4e0 <_svfiprintf_r+0x9c>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	1d19      	adds	r1, r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	9103      	str	r1, [sp, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfbb      	ittet	lt
 800a546:	425b      	neglt	r3, r3
 800a548:	f042 0202 	orrlt.w	r2, r2, #2
 800a54c:	9307      	strge	r3, [sp, #28]
 800a54e:	9307      	strlt	r3, [sp, #28]
 800a550:	bfb8      	it	lt
 800a552:	9204      	strlt	r2, [sp, #16]
 800a554:	7823      	ldrb	r3, [r4, #0]
 800a556:	2b2e      	cmp	r3, #46	; 0x2e
 800a558:	d10c      	bne.n	800a574 <_svfiprintf_r+0x130>
 800a55a:	7863      	ldrb	r3, [r4, #1]
 800a55c:	2b2a      	cmp	r3, #42	; 0x2a
 800a55e:	d134      	bne.n	800a5ca <_svfiprintf_r+0x186>
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9203      	str	r2, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfb8      	it	lt
 800a56c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a570:	3402      	adds	r4, #2
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a63c <_svfiprintf_r+0x1f8>
 800a578:	7821      	ldrb	r1, [r4, #0]
 800a57a:	2203      	movs	r2, #3
 800a57c:	4650      	mov	r0, sl
 800a57e:	f7f5 fe27 	bl	80001d0 <memchr>
 800a582:	b138      	cbz	r0, 800a594 <_svfiprintf_r+0x150>
 800a584:	9b04      	ldr	r3, [sp, #16]
 800a586:	eba0 000a 	sub.w	r0, r0, sl
 800a58a:	2240      	movs	r2, #64	; 0x40
 800a58c:	4082      	lsls	r2, r0
 800a58e:	4313      	orrs	r3, r2
 800a590:	3401      	adds	r4, #1
 800a592:	9304      	str	r3, [sp, #16]
 800a594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a598:	4825      	ldr	r0, [pc, #148]	; (800a630 <_svfiprintf_r+0x1ec>)
 800a59a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a59e:	2206      	movs	r2, #6
 800a5a0:	f7f5 fe16 	bl	80001d0 <memchr>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d038      	beq.n	800a61a <_svfiprintf_r+0x1d6>
 800a5a8:	4b22      	ldr	r3, [pc, #136]	; (800a634 <_svfiprintf_r+0x1f0>)
 800a5aa:	bb1b      	cbnz	r3, 800a5f4 <_svfiprintf_r+0x1b0>
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	3307      	adds	r3, #7
 800a5b0:	f023 0307 	bic.w	r3, r3, #7
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ba:	4433      	add	r3, r6
 800a5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5be:	e768      	b.n	800a492 <_svfiprintf_r+0x4e>
 800a5c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	2001      	movs	r0, #1
 800a5c8:	e7a6      	b.n	800a518 <_svfiprintf_r+0xd4>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	3401      	adds	r4, #1
 800a5ce:	9305      	str	r3, [sp, #20]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	f04f 0c0a 	mov.w	ip, #10
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5dc:	3a30      	subs	r2, #48	; 0x30
 800a5de:	2a09      	cmp	r2, #9
 800a5e0:	d903      	bls.n	800a5ea <_svfiprintf_r+0x1a6>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d0c6      	beq.n	800a574 <_svfiprintf_r+0x130>
 800a5e6:	9105      	str	r1, [sp, #20]
 800a5e8:	e7c4      	b.n	800a574 <_svfiprintf_r+0x130>
 800a5ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e7f0      	b.n	800a5d6 <_svfiprintf_r+0x192>
 800a5f4:	ab03      	add	r3, sp, #12
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	462a      	mov	r2, r5
 800a5fa:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <_svfiprintf_r+0x1f4>)
 800a5fc:	a904      	add	r1, sp, #16
 800a5fe:	4638      	mov	r0, r7
 800a600:	f3af 8000 	nop.w
 800a604:	1c42      	adds	r2, r0, #1
 800a606:	4606      	mov	r6, r0
 800a608:	d1d6      	bne.n	800a5b8 <_svfiprintf_r+0x174>
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	065b      	lsls	r3, r3, #25
 800a60e:	f53f af2d 	bmi.w	800a46c <_svfiprintf_r+0x28>
 800a612:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a614:	b01d      	add	sp, #116	; 0x74
 800a616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61a:	ab03      	add	r3, sp, #12
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	462a      	mov	r2, r5
 800a620:	4b05      	ldr	r3, [pc, #20]	; (800a638 <_svfiprintf_r+0x1f4>)
 800a622:	a904      	add	r1, sp, #16
 800a624:	4638      	mov	r0, r7
 800a626:	f000 f9bd 	bl	800a9a4 <_printf_i>
 800a62a:	e7eb      	b.n	800a604 <_svfiprintf_r+0x1c0>
 800a62c:	0800e878 	.word	0x0800e878
 800a630:	0800e882 	.word	0x0800e882
 800a634:	00000000 	.word	0x00000000
 800a638:	0800a391 	.word	0x0800a391
 800a63c:	0800e87e 	.word	0x0800e87e

0800a640 <__sfputc_r>:
 800a640:	6893      	ldr	r3, [r2, #8]
 800a642:	3b01      	subs	r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	b410      	push	{r4}
 800a648:	6093      	str	r3, [r2, #8]
 800a64a:	da08      	bge.n	800a65e <__sfputc_r+0x1e>
 800a64c:	6994      	ldr	r4, [r2, #24]
 800a64e:	42a3      	cmp	r3, r4
 800a650:	db01      	blt.n	800a656 <__sfputc_r+0x16>
 800a652:	290a      	cmp	r1, #10
 800a654:	d103      	bne.n	800a65e <__sfputc_r+0x1e>
 800a656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65a:	f7ff bc90 	b.w	8009f7e <__swbuf_r>
 800a65e:	6813      	ldr	r3, [r2, #0]
 800a660:	1c58      	adds	r0, r3, #1
 800a662:	6010      	str	r0, [r2, #0]
 800a664:	7019      	strb	r1, [r3, #0]
 800a666:	4608      	mov	r0, r1
 800a668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <__sfputs_r>:
 800a66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a670:	4606      	mov	r6, r0
 800a672:	460f      	mov	r7, r1
 800a674:	4614      	mov	r4, r2
 800a676:	18d5      	adds	r5, r2, r3
 800a678:	42ac      	cmp	r4, r5
 800a67a:	d101      	bne.n	800a680 <__sfputs_r+0x12>
 800a67c:	2000      	movs	r0, #0
 800a67e:	e007      	b.n	800a690 <__sfputs_r+0x22>
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	463a      	mov	r2, r7
 800a686:	4630      	mov	r0, r6
 800a688:	f7ff ffda 	bl	800a640 <__sfputc_r>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d1f3      	bne.n	800a678 <__sfputs_r+0xa>
 800a690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a694 <_vfiprintf_r>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	460d      	mov	r5, r1
 800a69a:	b09d      	sub	sp, #116	; 0x74
 800a69c:	4614      	mov	r4, r2
 800a69e:	4698      	mov	r8, r3
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	b118      	cbz	r0, 800a6ac <_vfiprintf_r+0x18>
 800a6a4:	6a03      	ldr	r3, [r0, #32]
 800a6a6:	b90b      	cbnz	r3, 800a6ac <_vfiprintf_r+0x18>
 800a6a8:	f7ff fb5a 	bl	8009d60 <__sinit>
 800a6ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ae:	07d9      	lsls	r1, r3, #31
 800a6b0:	d405      	bmi.n	800a6be <_vfiprintf_r+0x2a>
 800a6b2:	89ab      	ldrh	r3, [r5, #12]
 800a6b4:	059a      	lsls	r2, r3, #22
 800a6b6:	d402      	bmi.n	800a6be <_vfiprintf_r+0x2a>
 800a6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ba:	f7ff fd6e 	bl	800a19a <__retarget_lock_acquire_recursive>
 800a6be:	89ab      	ldrh	r3, [r5, #12]
 800a6c0:	071b      	lsls	r3, r3, #28
 800a6c2:	d501      	bpl.n	800a6c8 <_vfiprintf_r+0x34>
 800a6c4:	692b      	ldr	r3, [r5, #16]
 800a6c6:	b99b      	cbnz	r3, 800a6f0 <_vfiprintf_r+0x5c>
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7ff fc94 	bl	8009ff8 <__swsetup_r>
 800a6d0:	b170      	cbz	r0, 800a6f0 <_vfiprintf_r+0x5c>
 800a6d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6d4:	07dc      	lsls	r4, r3, #31
 800a6d6:	d504      	bpl.n	800a6e2 <_vfiprintf_r+0x4e>
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	b01d      	add	sp, #116	; 0x74
 800a6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e2:	89ab      	ldrh	r3, [r5, #12]
 800a6e4:	0598      	lsls	r0, r3, #22
 800a6e6:	d4f7      	bmi.n	800a6d8 <_vfiprintf_r+0x44>
 800a6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ea:	f7ff fd57 	bl	800a19c <__retarget_lock_release_recursive>
 800a6ee:	e7f3      	b.n	800a6d8 <_vfiprintf_r+0x44>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f4:	2320      	movs	r3, #32
 800a6f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6fe:	2330      	movs	r3, #48	; 0x30
 800a700:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a8b4 <_vfiprintf_r+0x220>
 800a704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a708:	f04f 0901 	mov.w	r9, #1
 800a70c:	4623      	mov	r3, r4
 800a70e:	469a      	mov	sl, r3
 800a710:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a714:	b10a      	cbz	r2, 800a71a <_vfiprintf_r+0x86>
 800a716:	2a25      	cmp	r2, #37	; 0x25
 800a718:	d1f9      	bne.n	800a70e <_vfiprintf_r+0x7a>
 800a71a:	ebba 0b04 	subs.w	fp, sl, r4
 800a71e:	d00b      	beq.n	800a738 <_vfiprintf_r+0xa4>
 800a720:	465b      	mov	r3, fp
 800a722:	4622      	mov	r2, r4
 800a724:	4629      	mov	r1, r5
 800a726:	4630      	mov	r0, r6
 800a728:	f7ff ffa1 	bl	800a66e <__sfputs_r>
 800a72c:	3001      	adds	r0, #1
 800a72e:	f000 80a9 	beq.w	800a884 <_vfiprintf_r+0x1f0>
 800a732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a734:	445a      	add	r2, fp
 800a736:	9209      	str	r2, [sp, #36]	; 0x24
 800a738:	f89a 3000 	ldrb.w	r3, [sl]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 80a1 	beq.w	800a884 <_vfiprintf_r+0x1f0>
 800a742:	2300      	movs	r3, #0
 800a744:	f04f 32ff 	mov.w	r2, #4294967295
 800a748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a74c:	f10a 0a01 	add.w	sl, sl, #1
 800a750:	9304      	str	r3, [sp, #16]
 800a752:	9307      	str	r3, [sp, #28]
 800a754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a758:	931a      	str	r3, [sp, #104]	; 0x68
 800a75a:	4654      	mov	r4, sl
 800a75c:	2205      	movs	r2, #5
 800a75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a762:	4854      	ldr	r0, [pc, #336]	; (800a8b4 <_vfiprintf_r+0x220>)
 800a764:	f7f5 fd34 	bl	80001d0 <memchr>
 800a768:	9a04      	ldr	r2, [sp, #16]
 800a76a:	b9d8      	cbnz	r0, 800a7a4 <_vfiprintf_r+0x110>
 800a76c:	06d1      	lsls	r1, r2, #27
 800a76e:	bf44      	itt	mi
 800a770:	2320      	movmi	r3, #32
 800a772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a776:	0713      	lsls	r3, r2, #28
 800a778:	bf44      	itt	mi
 800a77a:	232b      	movmi	r3, #43	; 0x2b
 800a77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a780:	f89a 3000 	ldrb.w	r3, [sl]
 800a784:	2b2a      	cmp	r3, #42	; 0x2a
 800a786:	d015      	beq.n	800a7b4 <_vfiprintf_r+0x120>
 800a788:	9a07      	ldr	r2, [sp, #28]
 800a78a:	4654      	mov	r4, sl
 800a78c:	2000      	movs	r0, #0
 800a78e:	f04f 0c0a 	mov.w	ip, #10
 800a792:	4621      	mov	r1, r4
 800a794:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a798:	3b30      	subs	r3, #48	; 0x30
 800a79a:	2b09      	cmp	r3, #9
 800a79c:	d94d      	bls.n	800a83a <_vfiprintf_r+0x1a6>
 800a79e:	b1b0      	cbz	r0, 800a7ce <_vfiprintf_r+0x13a>
 800a7a0:	9207      	str	r2, [sp, #28]
 800a7a2:	e014      	b.n	800a7ce <_vfiprintf_r+0x13a>
 800a7a4:	eba0 0308 	sub.w	r3, r0, r8
 800a7a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	46a2      	mov	sl, r4
 800a7b2:	e7d2      	b.n	800a75a <_vfiprintf_r+0xc6>
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	1d19      	adds	r1, r3, #4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	9103      	str	r1, [sp, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bfbb      	ittet	lt
 800a7c0:	425b      	neglt	r3, r3
 800a7c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7c6:	9307      	strge	r3, [sp, #28]
 800a7c8:	9307      	strlt	r3, [sp, #28]
 800a7ca:	bfb8      	it	lt
 800a7cc:	9204      	strlt	r2, [sp, #16]
 800a7ce:	7823      	ldrb	r3, [r4, #0]
 800a7d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7d2:	d10c      	bne.n	800a7ee <_vfiprintf_r+0x15a>
 800a7d4:	7863      	ldrb	r3, [r4, #1]
 800a7d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d8:	d134      	bne.n	800a844 <_vfiprintf_r+0x1b0>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	1d1a      	adds	r2, r3, #4
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	9203      	str	r2, [sp, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bfb8      	it	lt
 800a7e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7ea:	3402      	adds	r4, #2
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a8c4 <_vfiprintf_r+0x230>
 800a7f2:	7821      	ldrb	r1, [r4, #0]
 800a7f4:	2203      	movs	r2, #3
 800a7f6:	4650      	mov	r0, sl
 800a7f8:	f7f5 fcea 	bl	80001d0 <memchr>
 800a7fc:	b138      	cbz	r0, 800a80e <_vfiprintf_r+0x17a>
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	eba0 000a 	sub.w	r0, r0, sl
 800a804:	2240      	movs	r2, #64	; 0x40
 800a806:	4082      	lsls	r2, r0
 800a808:	4313      	orrs	r3, r2
 800a80a:	3401      	adds	r4, #1
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a812:	4829      	ldr	r0, [pc, #164]	; (800a8b8 <_vfiprintf_r+0x224>)
 800a814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a818:	2206      	movs	r2, #6
 800a81a:	f7f5 fcd9 	bl	80001d0 <memchr>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d03f      	beq.n	800a8a2 <_vfiprintf_r+0x20e>
 800a822:	4b26      	ldr	r3, [pc, #152]	; (800a8bc <_vfiprintf_r+0x228>)
 800a824:	bb1b      	cbnz	r3, 800a86e <_vfiprintf_r+0x1da>
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	3307      	adds	r3, #7
 800a82a:	f023 0307 	bic.w	r3, r3, #7
 800a82e:	3308      	adds	r3, #8
 800a830:	9303      	str	r3, [sp, #12]
 800a832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a834:	443b      	add	r3, r7
 800a836:	9309      	str	r3, [sp, #36]	; 0x24
 800a838:	e768      	b.n	800a70c <_vfiprintf_r+0x78>
 800a83a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a83e:	460c      	mov	r4, r1
 800a840:	2001      	movs	r0, #1
 800a842:	e7a6      	b.n	800a792 <_vfiprintf_r+0xfe>
 800a844:	2300      	movs	r3, #0
 800a846:	3401      	adds	r4, #1
 800a848:	9305      	str	r3, [sp, #20]
 800a84a:	4619      	mov	r1, r3
 800a84c:	f04f 0c0a 	mov.w	ip, #10
 800a850:	4620      	mov	r0, r4
 800a852:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a856:	3a30      	subs	r2, #48	; 0x30
 800a858:	2a09      	cmp	r2, #9
 800a85a:	d903      	bls.n	800a864 <_vfiprintf_r+0x1d0>
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0c6      	beq.n	800a7ee <_vfiprintf_r+0x15a>
 800a860:	9105      	str	r1, [sp, #20]
 800a862:	e7c4      	b.n	800a7ee <_vfiprintf_r+0x15a>
 800a864:	fb0c 2101 	mla	r1, ip, r1, r2
 800a868:	4604      	mov	r4, r0
 800a86a:	2301      	movs	r3, #1
 800a86c:	e7f0      	b.n	800a850 <_vfiprintf_r+0x1bc>
 800a86e:	ab03      	add	r3, sp, #12
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	462a      	mov	r2, r5
 800a874:	4b12      	ldr	r3, [pc, #72]	; (800a8c0 <_vfiprintf_r+0x22c>)
 800a876:	a904      	add	r1, sp, #16
 800a878:	4630      	mov	r0, r6
 800a87a:	f3af 8000 	nop.w
 800a87e:	4607      	mov	r7, r0
 800a880:	1c78      	adds	r0, r7, #1
 800a882:	d1d6      	bne.n	800a832 <_vfiprintf_r+0x19e>
 800a884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a886:	07d9      	lsls	r1, r3, #31
 800a888:	d405      	bmi.n	800a896 <_vfiprintf_r+0x202>
 800a88a:	89ab      	ldrh	r3, [r5, #12]
 800a88c:	059a      	lsls	r2, r3, #22
 800a88e:	d402      	bmi.n	800a896 <_vfiprintf_r+0x202>
 800a890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a892:	f7ff fc83 	bl	800a19c <__retarget_lock_release_recursive>
 800a896:	89ab      	ldrh	r3, [r5, #12]
 800a898:	065b      	lsls	r3, r3, #25
 800a89a:	f53f af1d 	bmi.w	800a6d8 <_vfiprintf_r+0x44>
 800a89e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a0:	e71c      	b.n	800a6dc <_vfiprintf_r+0x48>
 800a8a2:	ab03      	add	r3, sp, #12
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	462a      	mov	r2, r5
 800a8a8:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <_vfiprintf_r+0x22c>)
 800a8aa:	a904      	add	r1, sp, #16
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f000 f879 	bl	800a9a4 <_printf_i>
 800a8b2:	e7e4      	b.n	800a87e <_vfiprintf_r+0x1ea>
 800a8b4:	0800e878 	.word	0x0800e878
 800a8b8:	0800e882 	.word	0x0800e882
 800a8bc:	00000000 	.word	0x00000000
 800a8c0:	0800a66f 	.word	0x0800a66f
 800a8c4:	0800e87e 	.word	0x0800e87e

0800a8c8 <_printf_common>:
 800a8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8cc:	4616      	mov	r6, r2
 800a8ce:	4699      	mov	r9, r3
 800a8d0:	688a      	ldr	r2, [r1, #8]
 800a8d2:	690b      	ldr	r3, [r1, #16]
 800a8d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	bfb8      	it	lt
 800a8dc:	4613      	movlt	r3, r2
 800a8de:	6033      	str	r3, [r6, #0]
 800a8e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8e4:	4607      	mov	r7, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	b10a      	cbz	r2, 800a8ee <_printf_common+0x26>
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	6033      	str	r3, [r6, #0]
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	0699      	lsls	r1, r3, #26
 800a8f2:	bf42      	ittt	mi
 800a8f4:	6833      	ldrmi	r3, [r6, #0]
 800a8f6:	3302      	addmi	r3, #2
 800a8f8:	6033      	strmi	r3, [r6, #0]
 800a8fa:	6825      	ldr	r5, [r4, #0]
 800a8fc:	f015 0506 	ands.w	r5, r5, #6
 800a900:	d106      	bne.n	800a910 <_printf_common+0x48>
 800a902:	f104 0a19 	add.w	sl, r4, #25
 800a906:	68e3      	ldr	r3, [r4, #12]
 800a908:	6832      	ldr	r2, [r6, #0]
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	42ab      	cmp	r3, r5
 800a90e:	dc26      	bgt.n	800a95e <_printf_common+0x96>
 800a910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a914:	1e13      	subs	r3, r2, #0
 800a916:	6822      	ldr	r2, [r4, #0]
 800a918:	bf18      	it	ne
 800a91a:	2301      	movne	r3, #1
 800a91c:	0692      	lsls	r2, r2, #26
 800a91e:	d42b      	bmi.n	800a978 <_printf_common+0xb0>
 800a920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a924:	4649      	mov	r1, r9
 800a926:	4638      	mov	r0, r7
 800a928:	47c0      	blx	r8
 800a92a:	3001      	adds	r0, #1
 800a92c:	d01e      	beq.n	800a96c <_printf_common+0xa4>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	6922      	ldr	r2, [r4, #16]
 800a932:	f003 0306 	and.w	r3, r3, #6
 800a936:	2b04      	cmp	r3, #4
 800a938:	bf02      	ittt	eq
 800a93a:	68e5      	ldreq	r5, [r4, #12]
 800a93c:	6833      	ldreq	r3, [r6, #0]
 800a93e:	1aed      	subeq	r5, r5, r3
 800a940:	68a3      	ldr	r3, [r4, #8]
 800a942:	bf0c      	ite	eq
 800a944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a948:	2500      	movne	r5, #0
 800a94a:	4293      	cmp	r3, r2
 800a94c:	bfc4      	itt	gt
 800a94e:	1a9b      	subgt	r3, r3, r2
 800a950:	18ed      	addgt	r5, r5, r3
 800a952:	2600      	movs	r6, #0
 800a954:	341a      	adds	r4, #26
 800a956:	42b5      	cmp	r5, r6
 800a958:	d11a      	bne.n	800a990 <_printf_common+0xc8>
 800a95a:	2000      	movs	r0, #0
 800a95c:	e008      	b.n	800a970 <_printf_common+0xa8>
 800a95e:	2301      	movs	r3, #1
 800a960:	4652      	mov	r2, sl
 800a962:	4649      	mov	r1, r9
 800a964:	4638      	mov	r0, r7
 800a966:	47c0      	blx	r8
 800a968:	3001      	adds	r0, #1
 800a96a:	d103      	bne.n	800a974 <_printf_common+0xac>
 800a96c:	f04f 30ff 	mov.w	r0, #4294967295
 800a970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a974:	3501      	adds	r5, #1
 800a976:	e7c6      	b.n	800a906 <_printf_common+0x3e>
 800a978:	18e1      	adds	r1, r4, r3
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	2030      	movs	r0, #48	; 0x30
 800a97e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a982:	4422      	add	r2, r4
 800a984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a98c:	3302      	adds	r3, #2
 800a98e:	e7c7      	b.n	800a920 <_printf_common+0x58>
 800a990:	2301      	movs	r3, #1
 800a992:	4622      	mov	r2, r4
 800a994:	4649      	mov	r1, r9
 800a996:	4638      	mov	r0, r7
 800a998:	47c0      	blx	r8
 800a99a:	3001      	adds	r0, #1
 800a99c:	d0e6      	beq.n	800a96c <_printf_common+0xa4>
 800a99e:	3601      	adds	r6, #1
 800a9a0:	e7d9      	b.n	800a956 <_printf_common+0x8e>
	...

0800a9a4 <_printf_i>:
 800a9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a8:	7e0f      	ldrb	r7, [r1, #24]
 800a9aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9ac:	2f78      	cmp	r7, #120	; 0x78
 800a9ae:	4691      	mov	r9, r2
 800a9b0:	4680      	mov	r8, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	469a      	mov	sl, r3
 800a9b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9ba:	d807      	bhi.n	800a9cc <_printf_i+0x28>
 800a9bc:	2f62      	cmp	r7, #98	; 0x62
 800a9be:	d80a      	bhi.n	800a9d6 <_printf_i+0x32>
 800a9c0:	2f00      	cmp	r7, #0
 800a9c2:	f000 80d4 	beq.w	800ab6e <_printf_i+0x1ca>
 800a9c6:	2f58      	cmp	r7, #88	; 0x58
 800a9c8:	f000 80c0 	beq.w	800ab4c <_printf_i+0x1a8>
 800a9cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9d4:	e03a      	b.n	800aa4c <_printf_i+0xa8>
 800a9d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9da:	2b15      	cmp	r3, #21
 800a9dc:	d8f6      	bhi.n	800a9cc <_printf_i+0x28>
 800a9de:	a101      	add	r1, pc, #4	; (adr r1, 800a9e4 <_printf_i+0x40>)
 800a9e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9e4:	0800aa3d 	.word	0x0800aa3d
 800a9e8:	0800aa51 	.word	0x0800aa51
 800a9ec:	0800a9cd 	.word	0x0800a9cd
 800a9f0:	0800a9cd 	.word	0x0800a9cd
 800a9f4:	0800a9cd 	.word	0x0800a9cd
 800a9f8:	0800a9cd 	.word	0x0800a9cd
 800a9fc:	0800aa51 	.word	0x0800aa51
 800aa00:	0800a9cd 	.word	0x0800a9cd
 800aa04:	0800a9cd 	.word	0x0800a9cd
 800aa08:	0800a9cd 	.word	0x0800a9cd
 800aa0c:	0800a9cd 	.word	0x0800a9cd
 800aa10:	0800ab55 	.word	0x0800ab55
 800aa14:	0800aa7d 	.word	0x0800aa7d
 800aa18:	0800ab0f 	.word	0x0800ab0f
 800aa1c:	0800a9cd 	.word	0x0800a9cd
 800aa20:	0800a9cd 	.word	0x0800a9cd
 800aa24:	0800ab77 	.word	0x0800ab77
 800aa28:	0800a9cd 	.word	0x0800a9cd
 800aa2c:	0800aa7d 	.word	0x0800aa7d
 800aa30:	0800a9cd 	.word	0x0800a9cd
 800aa34:	0800a9cd 	.word	0x0800a9cd
 800aa38:	0800ab17 	.word	0x0800ab17
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	1d1a      	adds	r2, r3, #4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	602a      	str	r2, [r5, #0]
 800aa44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e09f      	b.n	800ab90 <_printf_i+0x1ec>
 800aa50:	6820      	ldr	r0, [r4, #0]
 800aa52:	682b      	ldr	r3, [r5, #0]
 800aa54:	0607      	lsls	r7, r0, #24
 800aa56:	f103 0104 	add.w	r1, r3, #4
 800aa5a:	6029      	str	r1, [r5, #0]
 800aa5c:	d501      	bpl.n	800aa62 <_printf_i+0xbe>
 800aa5e:	681e      	ldr	r6, [r3, #0]
 800aa60:	e003      	b.n	800aa6a <_printf_i+0xc6>
 800aa62:	0646      	lsls	r6, r0, #25
 800aa64:	d5fb      	bpl.n	800aa5e <_printf_i+0xba>
 800aa66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa6a:	2e00      	cmp	r6, #0
 800aa6c:	da03      	bge.n	800aa76 <_printf_i+0xd2>
 800aa6e:	232d      	movs	r3, #45	; 0x2d
 800aa70:	4276      	negs	r6, r6
 800aa72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa76:	485a      	ldr	r0, [pc, #360]	; (800abe0 <_printf_i+0x23c>)
 800aa78:	230a      	movs	r3, #10
 800aa7a:	e012      	b.n	800aaa2 <_printf_i+0xfe>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	6820      	ldr	r0, [r4, #0]
 800aa80:	1d19      	adds	r1, r3, #4
 800aa82:	6029      	str	r1, [r5, #0]
 800aa84:	0605      	lsls	r5, r0, #24
 800aa86:	d501      	bpl.n	800aa8c <_printf_i+0xe8>
 800aa88:	681e      	ldr	r6, [r3, #0]
 800aa8a:	e002      	b.n	800aa92 <_printf_i+0xee>
 800aa8c:	0641      	lsls	r1, r0, #25
 800aa8e:	d5fb      	bpl.n	800aa88 <_printf_i+0xe4>
 800aa90:	881e      	ldrh	r6, [r3, #0]
 800aa92:	4853      	ldr	r0, [pc, #332]	; (800abe0 <_printf_i+0x23c>)
 800aa94:	2f6f      	cmp	r7, #111	; 0x6f
 800aa96:	bf0c      	ite	eq
 800aa98:	2308      	moveq	r3, #8
 800aa9a:	230a      	movne	r3, #10
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaa2:	6865      	ldr	r5, [r4, #4]
 800aaa4:	60a5      	str	r5, [r4, #8]
 800aaa6:	2d00      	cmp	r5, #0
 800aaa8:	bfa2      	ittt	ge
 800aaaa:	6821      	ldrge	r1, [r4, #0]
 800aaac:	f021 0104 	bicge.w	r1, r1, #4
 800aab0:	6021      	strge	r1, [r4, #0]
 800aab2:	b90e      	cbnz	r6, 800aab8 <_printf_i+0x114>
 800aab4:	2d00      	cmp	r5, #0
 800aab6:	d04b      	beq.n	800ab50 <_printf_i+0x1ac>
 800aab8:	4615      	mov	r5, r2
 800aaba:	fbb6 f1f3 	udiv	r1, r6, r3
 800aabe:	fb03 6711 	mls	r7, r3, r1, r6
 800aac2:	5dc7      	ldrb	r7, [r0, r7]
 800aac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aac8:	4637      	mov	r7, r6
 800aaca:	42bb      	cmp	r3, r7
 800aacc:	460e      	mov	r6, r1
 800aace:	d9f4      	bls.n	800aaba <_printf_i+0x116>
 800aad0:	2b08      	cmp	r3, #8
 800aad2:	d10b      	bne.n	800aaec <_printf_i+0x148>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	07de      	lsls	r6, r3, #31
 800aad8:	d508      	bpl.n	800aaec <_printf_i+0x148>
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	6861      	ldr	r1, [r4, #4]
 800aade:	4299      	cmp	r1, r3
 800aae0:	bfde      	ittt	le
 800aae2:	2330      	movle	r3, #48	; 0x30
 800aae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aaec:	1b52      	subs	r2, r2, r5
 800aaee:	6122      	str	r2, [r4, #16]
 800aaf0:	f8cd a000 	str.w	sl, [sp]
 800aaf4:	464b      	mov	r3, r9
 800aaf6:	aa03      	add	r2, sp, #12
 800aaf8:	4621      	mov	r1, r4
 800aafa:	4640      	mov	r0, r8
 800aafc:	f7ff fee4 	bl	800a8c8 <_printf_common>
 800ab00:	3001      	adds	r0, #1
 800ab02:	d14a      	bne.n	800ab9a <_printf_i+0x1f6>
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	b004      	add	sp, #16
 800ab0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	f043 0320 	orr.w	r3, r3, #32
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	4833      	ldr	r0, [pc, #204]	; (800abe4 <_printf_i+0x240>)
 800ab18:	2778      	movs	r7, #120	; 0x78
 800ab1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	6829      	ldr	r1, [r5, #0]
 800ab22:	061f      	lsls	r7, r3, #24
 800ab24:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab28:	d402      	bmi.n	800ab30 <_printf_i+0x18c>
 800ab2a:	065f      	lsls	r7, r3, #25
 800ab2c:	bf48      	it	mi
 800ab2e:	b2b6      	uxthmi	r6, r6
 800ab30:	07df      	lsls	r7, r3, #31
 800ab32:	bf48      	it	mi
 800ab34:	f043 0320 	orrmi.w	r3, r3, #32
 800ab38:	6029      	str	r1, [r5, #0]
 800ab3a:	bf48      	it	mi
 800ab3c:	6023      	strmi	r3, [r4, #0]
 800ab3e:	b91e      	cbnz	r6, 800ab48 <_printf_i+0x1a4>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	f023 0320 	bic.w	r3, r3, #32
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	2310      	movs	r3, #16
 800ab4a:	e7a7      	b.n	800aa9c <_printf_i+0xf8>
 800ab4c:	4824      	ldr	r0, [pc, #144]	; (800abe0 <_printf_i+0x23c>)
 800ab4e:	e7e4      	b.n	800ab1a <_printf_i+0x176>
 800ab50:	4615      	mov	r5, r2
 800ab52:	e7bd      	b.n	800aad0 <_printf_i+0x12c>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	6826      	ldr	r6, [r4, #0]
 800ab58:	6961      	ldr	r1, [r4, #20]
 800ab5a:	1d18      	adds	r0, r3, #4
 800ab5c:	6028      	str	r0, [r5, #0]
 800ab5e:	0635      	lsls	r5, r6, #24
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	d501      	bpl.n	800ab68 <_printf_i+0x1c4>
 800ab64:	6019      	str	r1, [r3, #0]
 800ab66:	e002      	b.n	800ab6e <_printf_i+0x1ca>
 800ab68:	0670      	lsls	r0, r6, #25
 800ab6a:	d5fb      	bpl.n	800ab64 <_printf_i+0x1c0>
 800ab6c:	8019      	strh	r1, [r3, #0]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	6123      	str	r3, [r4, #16]
 800ab72:	4615      	mov	r5, r2
 800ab74:	e7bc      	b.n	800aaf0 <_printf_i+0x14c>
 800ab76:	682b      	ldr	r3, [r5, #0]
 800ab78:	1d1a      	adds	r2, r3, #4
 800ab7a:	602a      	str	r2, [r5, #0]
 800ab7c:	681d      	ldr	r5, [r3, #0]
 800ab7e:	6862      	ldr	r2, [r4, #4]
 800ab80:	2100      	movs	r1, #0
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7f5 fb24 	bl	80001d0 <memchr>
 800ab88:	b108      	cbz	r0, 800ab8e <_printf_i+0x1ea>
 800ab8a:	1b40      	subs	r0, r0, r5
 800ab8c:	6060      	str	r0, [r4, #4]
 800ab8e:	6863      	ldr	r3, [r4, #4]
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	2300      	movs	r3, #0
 800ab94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab98:	e7aa      	b.n	800aaf0 <_printf_i+0x14c>
 800ab9a:	6923      	ldr	r3, [r4, #16]
 800ab9c:	462a      	mov	r2, r5
 800ab9e:	4649      	mov	r1, r9
 800aba0:	4640      	mov	r0, r8
 800aba2:	47d0      	blx	sl
 800aba4:	3001      	adds	r0, #1
 800aba6:	d0ad      	beq.n	800ab04 <_printf_i+0x160>
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	079b      	lsls	r3, r3, #30
 800abac:	d413      	bmi.n	800abd6 <_printf_i+0x232>
 800abae:	68e0      	ldr	r0, [r4, #12]
 800abb0:	9b03      	ldr	r3, [sp, #12]
 800abb2:	4298      	cmp	r0, r3
 800abb4:	bfb8      	it	lt
 800abb6:	4618      	movlt	r0, r3
 800abb8:	e7a6      	b.n	800ab08 <_printf_i+0x164>
 800abba:	2301      	movs	r3, #1
 800abbc:	4632      	mov	r2, r6
 800abbe:	4649      	mov	r1, r9
 800abc0:	4640      	mov	r0, r8
 800abc2:	47d0      	blx	sl
 800abc4:	3001      	adds	r0, #1
 800abc6:	d09d      	beq.n	800ab04 <_printf_i+0x160>
 800abc8:	3501      	adds	r5, #1
 800abca:	68e3      	ldr	r3, [r4, #12]
 800abcc:	9903      	ldr	r1, [sp, #12]
 800abce:	1a5b      	subs	r3, r3, r1
 800abd0:	42ab      	cmp	r3, r5
 800abd2:	dcf2      	bgt.n	800abba <_printf_i+0x216>
 800abd4:	e7eb      	b.n	800abae <_printf_i+0x20a>
 800abd6:	2500      	movs	r5, #0
 800abd8:	f104 0619 	add.w	r6, r4, #25
 800abdc:	e7f5      	b.n	800abca <_printf_i+0x226>
 800abde:	bf00      	nop
 800abe0:	0800e889 	.word	0x0800e889
 800abe4:	0800e89a 	.word	0x0800e89a

0800abe8 <__sflush_r>:
 800abe8:	898a      	ldrh	r2, [r1, #12]
 800abea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abee:	4605      	mov	r5, r0
 800abf0:	0710      	lsls	r0, r2, #28
 800abf2:	460c      	mov	r4, r1
 800abf4:	d458      	bmi.n	800aca8 <__sflush_r+0xc0>
 800abf6:	684b      	ldr	r3, [r1, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dc05      	bgt.n	800ac08 <__sflush_r+0x20>
 800abfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dc02      	bgt.n	800ac08 <__sflush_r+0x20>
 800ac02:	2000      	movs	r0, #0
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac0a:	2e00      	cmp	r6, #0
 800ac0c:	d0f9      	beq.n	800ac02 <__sflush_r+0x1a>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac14:	682f      	ldr	r7, [r5, #0]
 800ac16:	6a21      	ldr	r1, [r4, #32]
 800ac18:	602b      	str	r3, [r5, #0]
 800ac1a:	d032      	beq.n	800ac82 <__sflush_r+0x9a>
 800ac1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	075a      	lsls	r2, r3, #29
 800ac22:	d505      	bpl.n	800ac30 <__sflush_r+0x48>
 800ac24:	6863      	ldr	r3, [r4, #4]
 800ac26:	1ac0      	subs	r0, r0, r3
 800ac28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac2a:	b10b      	cbz	r3, 800ac30 <__sflush_r+0x48>
 800ac2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac2e:	1ac0      	subs	r0, r0, r3
 800ac30:	2300      	movs	r3, #0
 800ac32:	4602      	mov	r2, r0
 800ac34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac36:	6a21      	ldr	r1, [r4, #32]
 800ac38:	4628      	mov	r0, r5
 800ac3a:	47b0      	blx	r6
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	d106      	bne.n	800ac50 <__sflush_r+0x68>
 800ac42:	6829      	ldr	r1, [r5, #0]
 800ac44:	291d      	cmp	r1, #29
 800ac46:	d82b      	bhi.n	800aca0 <__sflush_r+0xb8>
 800ac48:	4a29      	ldr	r2, [pc, #164]	; (800acf0 <__sflush_r+0x108>)
 800ac4a:	410a      	asrs	r2, r1
 800ac4c:	07d6      	lsls	r6, r2, #31
 800ac4e:	d427      	bmi.n	800aca0 <__sflush_r+0xb8>
 800ac50:	2200      	movs	r2, #0
 800ac52:	6062      	str	r2, [r4, #4]
 800ac54:	04d9      	lsls	r1, r3, #19
 800ac56:	6922      	ldr	r2, [r4, #16]
 800ac58:	6022      	str	r2, [r4, #0]
 800ac5a:	d504      	bpl.n	800ac66 <__sflush_r+0x7e>
 800ac5c:	1c42      	adds	r2, r0, #1
 800ac5e:	d101      	bne.n	800ac64 <__sflush_r+0x7c>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b903      	cbnz	r3, 800ac66 <__sflush_r+0x7e>
 800ac64:	6560      	str	r0, [r4, #84]	; 0x54
 800ac66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac68:	602f      	str	r7, [r5, #0]
 800ac6a:	2900      	cmp	r1, #0
 800ac6c:	d0c9      	beq.n	800ac02 <__sflush_r+0x1a>
 800ac6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac72:	4299      	cmp	r1, r3
 800ac74:	d002      	beq.n	800ac7c <__sflush_r+0x94>
 800ac76:	4628      	mov	r0, r5
 800ac78:	f7ff fa92 	bl	800a1a0 <_free_r>
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	6360      	str	r0, [r4, #52]	; 0x34
 800ac80:	e7c0      	b.n	800ac04 <__sflush_r+0x1c>
 800ac82:	2301      	movs	r3, #1
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b0      	blx	r6
 800ac88:	1c41      	adds	r1, r0, #1
 800ac8a:	d1c8      	bne.n	800ac1e <__sflush_r+0x36>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d0c5      	beq.n	800ac1e <__sflush_r+0x36>
 800ac92:	2b1d      	cmp	r3, #29
 800ac94:	d001      	beq.n	800ac9a <__sflush_r+0xb2>
 800ac96:	2b16      	cmp	r3, #22
 800ac98:	d101      	bne.n	800ac9e <__sflush_r+0xb6>
 800ac9a:	602f      	str	r7, [r5, #0]
 800ac9c:	e7b1      	b.n	800ac02 <__sflush_r+0x1a>
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca4:	81a3      	strh	r3, [r4, #12]
 800aca6:	e7ad      	b.n	800ac04 <__sflush_r+0x1c>
 800aca8:	690f      	ldr	r7, [r1, #16]
 800acaa:	2f00      	cmp	r7, #0
 800acac:	d0a9      	beq.n	800ac02 <__sflush_r+0x1a>
 800acae:	0793      	lsls	r3, r2, #30
 800acb0:	680e      	ldr	r6, [r1, #0]
 800acb2:	bf08      	it	eq
 800acb4:	694b      	ldreq	r3, [r1, #20]
 800acb6:	600f      	str	r7, [r1, #0]
 800acb8:	bf18      	it	ne
 800acba:	2300      	movne	r3, #0
 800acbc:	eba6 0807 	sub.w	r8, r6, r7
 800acc0:	608b      	str	r3, [r1, #8]
 800acc2:	f1b8 0f00 	cmp.w	r8, #0
 800acc6:	dd9c      	ble.n	800ac02 <__sflush_r+0x1a>
 800acc8:	6a21      	ldr	r1, [r4, #32]
 800acca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800accc:	4643      	mov	r3, r8
 800acce:	463a      	mov	r2, r7
 800acd0:	4628      	mov	r0, r5
 800acd2:	47b0      	blx	r6
 800acd4:	2800      	cmp	r0, #0
 800acd6:	dc06      	bgt.n	800ace6 <__sflush_r+0xfe>
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acde:	81a3      	strh	r3, [r4, #12]
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	e78e      	b.n	800ac04 <__sflush_r+0x1c>
 800ace6:	4407      	add	r7, r0
 800ace8:	eba8 0800 	sub.w	r8, r8, r0
 800acec:	e7e9      	b.n	800acc2 <__sflush_r+0xda>
 800acee:	bf00      	nop
 800acf0:	dfbffffe 	.word	0xdfbffffe

0800acf4 <_fflush_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	690b      	ldr	r3, [r1, #16]
 800acf8:	4605      	mov	r5, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	b913      	cbnz	r3, 800ad04 <_fflush_r+0x10>
 800acfe:	2500      	movs	r5, #0
 800ad00:	4628      	mov	r0, r5
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	b118      	cbz	r0, 800ad0e <_fflush_r+0x1a>
 800ad06:	6a03      	ldr	r3, [r0, #32]
 800ad08:	b90b      	cbnz	r3, 800ad0e <_fflush_r+0x1a>
 800ad0a:	f7ff f829 	bl	8009d60 <__sinit>
 800ad0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d0f3      	beq.n	800acfe <_fflush_r+0xa>
 800ad16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad18:	07d0      	lsls	r0, r2, #31
 800ad1a:	d404      	bmi.n	800ad26 <_fflush_r+0x32>
 800ad1c:	0599      	lsls	r1, r3, #22
 800ad1e:	d402      	bmi.n	800ad26 <_fflush_r+0x32>
 800ad20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad22:	f7ff fa3a 	bl	800a19a <__retarget_lock_acquire_recursive>
 800ad26:	4628      	mov	r0, r5
 800ad28:	4621      	mov	r1, r4
 800ad2a:	f7ff ff5d 	bl	800abe8 <__sflush_r>
 800ad2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad30:	07da      	lsls	r2, r3, #31
 800ad32:	4605      	mov	r5, r0
 800ad34:	d4e4      	bmi.n	800ad00 <_fflush_r+0xc>
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	059b      	lsls	r3, r3, #22
 800ad3a:	d4e1      	bmi.n	800ad00 <_fflush_r+0xc>
 800ad3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad3e:	f7ff fa2d 	bl	800a19c <__retarget_lock_release_recursive>
 800ad42:	e7dd      	b.n	800ad00 <_fflush_r+0xc>

0800ad44 <__swhatbuf_r>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	460c      	mov	r4, r1
 800ad48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad4c:	2900      	cmp	r1, #0
 800ad4e:	b096      	sub	sp, #88	; 0x58
 800ad50:	4615      	mov	r5, r2
 800ad52:	461e      	mov	r6, r3
 800ad54:	da0d      	bge.n	800ad72 <__swhatbuf_r+0x2e>
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad5c:	f04f 0100 	mov.w	r1, #0
 800ad60:	bf0c      	ite	eq
 800ad62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad66:	2340      	movne	r3, #64	; 0x40
 800ad68:	2000      	movs	r0, #0
 800ad6a:	6031      	str	r1, [r6, #0]
 800ad6c:	602b      	str	r3, [r5, #0]
 800ad6e:	b016      	add	sp, #88	; 0x58
 800ad70:	bd70      	pop	{r4, r5, r6, pc}
 800ad72:	466a      	mov	r2, sp
 800ad74:	f000 f896 	bl	800aea4 <_fstat_r>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	dbec      	blt.n	800ad56 <__swhatbuf_r+0x12>
 800ad7c:	9901      	ldr	r1, [sp, #4]
 800ad7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad86:	4259      	negs	r1, r3
 800ad88:	4159      	adcs	r1, r3
 800ad8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad8e:	e7eb      	b.n	800ad68 <__swhatbuf_r+0x24>

0800ad90 <__smakebuf_r>:
 800ad90:	898b      	ldrh	r3, [r1, #12]
 800ad92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad94:	079d      	lsls	r5, r3, #30
 800ad96:	4606      	mov	r6, r0
 800ad98:	460c      	mov	r4, r1
 800ad9a:	d507      	bpl.n	800adac <__smakebuf_r+0x1c>
 800ad9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	6123      	str	r3, [r4, #16]
 800ada4:	2301      	movs	r3, #1
 800ada6:	6163      	str	r3, [r4, #20]
 800ada8:	b002      	add	sp, #8
 800adaa:	bd70      	pop	{r4, r5, r6, pc}
 800adac:	ab01      	add	r3, sp, #4
 800adae:	466a      	mov	r2, sp
 800adb0:	f7ff ffc8 	bl	800ad44 <__swhatbuf_r>
 800adb4:	9900      	ldr	r1, [sp, #0]
 800adb6:	4605      	mov	r5, r0
 800adb8:	4630      	mov	r0, r6
 800adba:	f7ff fa5d 	bl	800a278 <_malloc_r>
 800adbe:	b948      	cbnz	r0, 800add4 <__smakebuf_r+0x44>
 800adc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc4:	059a      	lsls	r2, r3, #22
 800adc6:	d4ef      	bmi.n	800ada8 <__smakebuf_r+0x18>
 800adc8:	f023 0303 	bic.w	r3, r3, #3
 800adcc:	f043 0302 	orr.w	r3, r3, #2
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	e7e3      	b.n	800ad9c <__smakebuf_r+0xc>
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	6020      	str	r0, [r4, #0]
 800add8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800addc:	81a3      	strh	r3, [r4, #12]
 800adde:	9b00      	ldr	r3, [sp, #0]
 800ade0:	6163      	str	r3, [r4, #20]
 800ade2:	9b01      	ldr	r3, [sp, #4]
 800ade4:	6120      	str	r0, [r4, #16]
 800ade6:	b15b      	cbz	r3, 800ae00 <__smakebuf_r+0x70>
 800ade8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adec:	4630      	mov	r0, r6
 800adee:	f000 f86b 	bl	800aec8 <_isatty_r>
 800adf2:	b128      	cbz	r0, 800ae00 <__smakebuf_r+0x70>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f023 0303 	bic.w	r3, r3, #3
 800adfa:	f043 0301 	orr.w	r3, r3, #1
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	431d      	orrs	r5, r3
 800ae04:	81a5      	strh	r5, [r4, #12]
 800ae06:	e7cf      	b.n	800ada8 <__smakebuf_r+0x18>

0800ae08 <_putc_r>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	4606      	mov	r6, r0
 800ae10:	b118      	cbz	r0, 800ae1a <_putc_r+0x12>
 800ae12:	6a03      	ldr	r3, [r0, #32]
 800ae14:	b90b      	cbnz	r3, 800ae1a <_putc_r+0x12>
 800ae16:	f7fe ffa3 	bl	8009d60 <__sinit>
 800ae1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae1c:	07d8      	lsls	r0, r3, #31
 800ae1e:	d405      	bmi.n	800ae2c <_putc_r+0x24>
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	0599      	lsls	r1, r3, #22
 800ae24:	d402      	bmi.n	800ae2c <_putc_r+0x24>
 800ae26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae28:	f7ff f9b7 	bl	800a19a <__retarget_lock_acquire_recursive>
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	60a3      	str	r3, [r4, #8]
 800ae34:	da05      	bge.n	800ae42 <_putc_r+0x3a>
 800ae36:	69a2      	ldr	r2, [r4, #24]
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	db12      	blt.n	800ae62 <_putc_r+0x5a>
 800ae3c:	b2eb      	uxtb	r3, r5
 800ae3e:	2b0a      	cmp	r3, #10
 800ae40:	d00f      	beq.n	800ae62 <_putc_r+0x5a>
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	6022      	str	r2, [r4, #0]
 800ae48:	701d      	strb	r5, [r3, #0]
 800ae4a:	b2ed      	uxtb	r5, r5
 800ae4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae4e:	07da      	lsls	r2, r3, #31
 800ae50:	d405      	bmi.n	800ae5e <_putc_r+0x56>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	059b      	lsls	r3, r3, #22
 800ae56:	d402      	bmi.n	800ae5e <_putc_r+0x56>
 800ae58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5a:	f7ff f99f 	bl	800a19c <__retarget_lock_release_recursive>
 800ae5e:	4628      	mov	r0, r5
 800ae60:	bd70      	pop	{r4, r5, r6, pc}
 800ae62:	4629      	mov	r1, r5
 800ae64:	4622      	mov	r2, r4
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff f889 	bl	8009f7e <__swbuf_r>
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	e7ed      	b.n	800ae4c <_putc_r+0x44>

0800ae70 <memmove>:
 800ae70:	4288      	cmp	r0, r1
 800ae72:	b510      	push	{r4, lr}
 800ae74:	eb01 0402 	add.w	r4, r1, r2
 800ae78:	d902      	bls.n	800ae80 <memmove+0x10>
 800ae7a:	4284      	cmp	r4, r0
 800ae7c:	4623      	mov	r3, r4
 800ae7e:	d807      	bhi.n	800ae90 <memmove+0x20>
 800ae80:	1e43      	subs	r3, r0, #1
 800ae82:	42a1      	cmp	r1, r4
 800ae84:	d008      	beq.n	800ae98 <memmove+0x28>
 800ae86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae8e:	e7f8      	b.n	800ae82 <memmove+0x12>
 800ae90:	4402      	add	r2, r0
 800ae92:	4601      	mov	r1, r0
 800ae94:	428a      	cmp	r2, r1
 800ae96:	d100      	bne.n	800ae9a <memmove+0x2a>
 800ae98:	bd10      	pop	{r4, pc}
 800ae9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aea2:	e7f7      	b.n	800ae94 <memmove+0x24>

0800aea4 <_fstat_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4d07      	ldr	r5, [pc, #28]	; (800aec4 <_fstat_r+0x20>)
 800aea8:	2300      	movs	r3, #0
 800aeaa:	4604      	mov	r4, r0
 800aeac:	4608      	mov	r0, r1
 800aeae:	4611      	mov	r1, r2
 800aeb0:	602b      	str	r3, [r5, #0]
 800aeb2:	f7fb f926 	bl	8006102 <_fstat>
 800aeb6:	1c43      	adds	r3, r0, #1
 800aeb8:	d102      	bne.n	800aec0 <_fstat_r+0x1c>
 800aeba:	682b      	ldr	r3, [r5, #0]
 800aebc:	b103      	cbz	r3, 800aec0 <_fstat_r+0x1c>
 800aebe:	6023      	str	r3, [r4, #0]
 800aec0:	bd38      	pop	{r3, r4, r5, pc}
 800aec2:	bf00      	nop
 800aec4:	200004e0 	.word	0x200004e0

0800aec8 <_isatty_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d06      	ldr	r5, [pc, #24]	; (800aee4 <_isatty_r+0x1c>)
 800aecc:	2300      	movs	r3, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	4608      	mov	r0, r1
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	f7fb f925 	bl	8006122 <_isatty>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_isatty_r+0x1a>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_isatty_r+0x1a>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	200004e0 	.word	0x200004e0

0800aee8 <_sbrk_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d06      	ldr	r5, [pc, #24]	; (800af04 <_sbrk_r+0x1c>)
 800aeec:	2300      	movs	r3, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	4608      	mov	r0, r1
 800aef2:	602b      	str	r3, [r5, #0]
 800aef4:	f7fb f92e 	bl	8006154 <_sbrk>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	d102      	bne.n	800af02 <_sbrk_r+0x1a>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	b103      	cbz	r3, 800af02 <_sbrk_r+0x1a>
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	bd38      	pop	{r3, r4, r5, pc}
 800af04:	200004e0 	.word	0x200004e0

0800af08 <memcpy>:
 800af08:	440a      	add	r2, r1
 800af0a:	4291      	cmp	r1, r2
 800af0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af10:	d100      	bne.n	800af14 <memcpy+0xc>
 800af12:	4770      	bx	lr
 800af14:	b510      	push	{r4, lr}
 800af16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af1e:	4291      	cmp	r1, r2
 800af20:	d1f9      	bne.n	800af16 <memcpy+0xe>
 800af22:	bd10      	pop	{r4, pc}

0800af24 <_realloc_r>:
 800af24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af28:	4680      	mov	r8, r0
 800af2a:	4614      	mov	r4, r2
 800af2c:	460e      	mov	r6, r1
 800af2e:	b921      	cbnz	r1, 800af3a <_realloc_r+0x16>
 800af30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af34:	4611      	mov	r1, r2
 800af36:	f7ff b99f 	b.w	800a278 <_malloc_r>
 800af3a:	b92a      	cbnz	r2, 800af48 <_realloc_r+0x24>
 800af3c:	f7ff f930 	bl	800a1a0 <_free_r>
 800af40:	4625      	mov	r5, r4
 800af42:	4628      	mov	r0, r5
 800af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af48:	f000 f81b 	bl	800af82 <_malloc_usable_size_r>
 800af4c:	4284      	cmp	r4, r0
 800af4e:	4607      	mov	r7, r0
 800af50:	d802      	bhi.n	800af58 <_realloc_r+0x34>
 800af52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af56:	d812      	bhi.n	800af7e <_realloc_r+0x5a>
 800af58:	4621      	mov	r1, r4
 800af5a:	4640      	mov	r0, r8
 800af5c:	f7ff f98c 	bl	800a278 <_malloc_r>
 800af60:	4605      	mov	r5, r0
 800af62:	2800      	cmp	r0, #0
 800af64:	d0ed      	beq.n	800af42 <_realloc_r+0x1e>
 800af66:	42bc      	cmp	r4, r7
 800af68:	4622      	mov	r2, r4
 800af6a:	4631      	mov	r1, r6
 800af6c:	bf28      	it	cs
 800af6e:	463a      	movcs	r2, r7
 800af70:	f7ff ffca 	bl	800af08 <memcpy>
 800af74:	4631      	mov	r1, r6
 800af76:	4640      	mov	r0, r8
 800af78:	f7ff f912 	bl	800a1a0 <_free_r>
 800af7c:	e7e1      	b.n	800af42 <_realloc_r+0x1e>
 800af7e:	4635      	mov	r5, r6
 800af80:	e7df      	b.n	800af42 <_realloc_r+0x1e>

0800af82 <_malloc_usable_size_r>:
 800af82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af86:	1f18      	subs	r0, r3, #4
 800af88:	2b00      	cmp	r3, #0
 800af8a:	bfbc      	itt	lt
 800af8c:	580b      	ldrlt	r3, [r1, r0]
 800af8e:	18c0      	addlt	r0, r0, r3
 800af90:	4770      	bx	lr
	...

0800af94 <_init>:
 800af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af96:	bf00      	nop
 800af98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9a:	bc08      	pop	{r3}
 800af9c:	469e      	mov	lr, r3
 800af9e:	4770      	bx	lr

0800afa0 <_fini>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	bf00      	nop
 800afa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afa6:	bc08      	pop	{r3}
 800afa8:	469e      	mov	lr, r3
 800afaa:	4770      	bx	lr
