
19_1_dac_output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008754  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000305c  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b938  0800b938  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b938  0800b938  0001b938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b940  0800b940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b940  0800b940  0001b940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b944  0800b944  0001b944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000348  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b8  200003b8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ef57  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e02  00000000  00000000  0002f03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000cd8  00000000  00000000  00031e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009b3  00000000  00000000  00032b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024801  00000000  00000000  000334cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013265  00000000  00000000  00057ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6ef6  00000000  00000000  0006af31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003a0c  00000000  00000000  00141e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00145834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080088c4 	.word	0x080088c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080088c4 	.word	0x080088c4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b970 	b.w	8000acc <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9e08      	ldr	r6, [sp, #32]
 800080a:	460d      	mov	r5, r1
 800080c:	4604      	mov	r4, r0
 800080e:	460f      	mov	r7, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14a      	bne.n	80008aa <__udivmoddi4+0xa6>
 8000814:	428a      	cmp	r2, r1
 8000816:	4694      	mov	ip, r2
 8000818:	d965      	bls.n	80008e6 <__udivmoddi4+0xe2>
 800081a:	fab2 f382 	clz	r3, r2
 800081e:	b143      	cbz	r3, 8000832 <__udivmoddi4+0x2e>
 8000820:	fa02 fc03 	lsl.w	ip, r2, r3
 8000824:	f1c3 0220 	rsb	r2, r3, #32
 8000828:	409f      	lsls	r7, r3
 800082a:	fa20 f202 	lsr.w	r2, r0, r2
 800082e:	4317      	orrs	r7, r2
 8000830:	409c      	lsls	r4, r3
 8000832:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000836:	fa1f f58c 	uxth.w	r5, ip
 800083a:	fbb7 f1fe 	udiv	r1, r7, lr
 800083e:	0c22      	lsrs	r2, r4, #16
 8000840:	fb0e 7711 	mls	r7, lr, r1, r7
 8000844:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000848:	fb01 f005 	mul.w	r0, r1, r5
 800084c:	4290      	cmp	r0, r2
 800084e:	d90a      	bls.n	8000866 <__udivmoddi4+0x62>
 8000850:	eb1c 0202 	adds.w	r2, ip, r2
 8000854:	f101 37ff 	add.w	r7, r1, #4294967295
 8000858:	f080 811c 	bcs.w	8000a94 <__udivmoddi4+0x290>
 800085c:	4290      	cmp	r0, r2
 800085e:	f240 8119 	bls.w	8000a94 <__udivmoddi4+0x290>
 8000862:	3902      	subs	r1, #2
 8000864:	4462      	add	r2, ip
 8000866:	1a12      	subs	r2, r2, r0
 8000868:	b2a4      	uxth	r4, r4
 800086a:	fbb2 f0fe 	udiv	r0, r2, lr
 800086e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000872:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000876:	fb00 f505 	mul.w	r5, r0, r5
 800087a:	42a5      	cmp	r5, r4
 800087c:	d90a      	bls.n	8000894 <__udivmoddi4+0x90>
 800087e:	eb1c 0404 	adds.w	r4, ip, r4
 8000882:	f100 32ff 	add.w	r2, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x294>
 800088a:	42a5      	cmp	r5, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x294>
 8000890:	4464      	add	r4, ip
 8000892:	3802      	subs	r0, #2
 8000894:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000898:	1b64      	subs	r4, r4, r5
 800089a:	2100      	movs	r1, #0
 800089c:	b11e      	cbz	r6, 80008a6 <__udivmoddi4+0xa2>
 800089e:	40dc      	lsrs	r4, r3
 80008a0:	2300      	movs	r3, #0
 80008a2:	e9c6 4300 	strd	r4, r3, [r6]
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0xbc>
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	f000 80ed 	beq.w	8000a8e <__udivmoddi4+0x28a>
 80008b4:	2100      	movs	r1, #0
 80008b6:	e9c6 0500 	strd	r0, r5, [r6]
 80008ba:	4608      	mov	r0, r1
 80008bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c0:	fab3 f183 	clz	r1, r3
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d149      	bne.n	800095c <__udivmoddi4+0x158>
 80008c8:	42ab      	cmp	r3, r5
 80008ca:	d302      	bcc.n	80008d2 <__udivmoddi4+0xce>
 80008cc:	4282      	cmp	r2, r0
 80008ce:	f200 80f8 	bhi.w	8000ac2 <__udivmoddi4+0x2be>
 80008d2:	1a84      	subs	r4, r0, r2
 80008d4:	eb65 0203 	sbc.w	r2, r5, r3
 80008d8:	2001      	movs	r0, #1
 80008da:	4617      	mov	r7, r2
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d0e2      	beq.n	80008a6 <__udivmoddi4+0xa2>
 80008e0:	e9c6 4700 	strd	r4, r7, [r6]
 80008e4:	e7df      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008e6:	b902      	cbnz	r2, 80008ea <__udivmoddi4+0xe6>
 80008e8:	deff      	udf	#255	; 0xff
 80008ea:	fab2 f382 	clz	r3, r2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f040 8090 	bne.w	8000a14 <__udivmoddi4+0x210>
 80008f4:	1a8a      	subs	r2, r1, r2
 80008f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fa:	fa1f fe8c 	uxth.w	lr, ip
 80008fe:	2101      	movs	r1, #1
 8000900:	fbb2 f5f7 	udiv	r5, r2, r7
 8000904:	fb07 2015 	mls	r0, r7, r5, r2
 8000908:	0c22      	lsrs	r2, r4, #16
 800090a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800090e:	fb0e f005 	mul.w	r0, lr, r5
 8000912:	4290      	cmp	r0, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x124>
 8000916:	eb1c 0202 	adds.w	r2, ip, r2
 800091a:	f105 38ff 	add.w	r8, r5, #4294967295
 800091e:	d202      	bcs.n	8000926 <__udivmoddi4+0x122>
 8000920:	4290      	cmp	r0, r2
 8000922:	f200 80cb 	bhi.w	8000abc <__udivmoddi4+0x2b8>
 8000926:	4645      	mov	r5, r8
 8000928:	1a12      	subs	r2, r2, r0
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000930:	fb07 2210 	mls	r2, r7, r0, r2
 8000934:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000938:	fb0e fe00 	mul.w	lr, lr, r0
 800093c:	45a6      	cmp	lr, r4
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x14e>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 32ff 	add.w	r2, r0, #4294967295
 8000948:	d202      	bcs.n	8000950 <__udivmoddi4+0x14c>
 800094a:	45a6      	cmp	lr, r4
 800094c:	f200 80bb 	bhi.w	8000ac6 <__udivmoddi4+0x2c2>
 8000950:	4610      	mov	r0, r2
 8000952:	eba4 040e 	sub.w	r4, r4, lr
 8000956:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800095a:	e79f      	b.n	800089c <__udivmoddi4+0x98>
 800095c:	f1c1 0720 	rsb	r7, r1, #32
 8000960:	408b      	lsls	r3, r1
 8000962:	fa22 fc07 	lsr.w	ip, r2, r7
 8000966:	ea4c 0c03 	orr.w	ip, ip, r3
 800096a:	fa05 f401 	lsl.w	r4, r5, r1
 800096e:	fa20 f307 	lsr.w	r3, r0, r7
 8000972:	40fd      	lsrs	r5, r7
 8000974:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000978:	4323      	orrs	r3, r4
 800097a:	fbb5 f8f9 	udiv	r8, r5, r9
 800097e:	fa1f fe8c 	uxth.w	lr, ip
 8000982:	fb09 5518 	mls	r5, r9, r8, r5
 8000986:	0c1c      	lsrs	r4, r3, #16
 8000988:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800098c:	fb08 f50e 	mul.w	r5, r8, lr
 8000990:	42a5      	cmp	r5, r4
 8000992:	fa02 f201 	lsl.w	r2, r2, r1
 8000996:	fa00 f001 	lsl.w	r0, r0, r1
 800099a:	d90b      	bls.n	80009b4 <__udivmoddi4+0x1b0>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a4:	f080 8088 	bcs.w	8000ab8 <__udivmoddi4+0x2b4>
 80009a8:	42a5      	cmp	r5, r4
 80009aa:	f240 8085 	bls.w	8000ab8 <__udivmoddi4+0x2b4>
 80009ae:	f1a8 0802 	sub.w	r8, r8, #2
 80009b2:	4464      	add	r4, ip
 80009b4:	1b64      	subs	r4, r4, r5
 80009b6:	b29d      	uxth	r5, r3
 80009b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009bc:	fb09 4413 	mls	r4, r9, r3, r4
 80009c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009c8:	45a6      	cmp	lr, r4
 80009ca:	d908      	bls.n	80009de <__udivmoddi4+0x1da>
 80009cc:	eb1c 0404 	adds.w	r4, ip, r4
 80009d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80009d4:	d26c      	bcs.n	8000ab0 <__udivmoddi4+0x2ac>
 80009d6:	45a6      	cmp	lr, r4
 80009d8:	d96a      	bls.n	8000ab0 <__udivmoddi4+0x2ac>
 80009da:	3b02      	subs	r3, #2
 80009dc:	4464      	add	r4, ip
 80009de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009e2:	fba3 9502 	umull	r9, r5, r3, r2
 80009e6:	eba4 040e 	sub.w	r4, r4, lr
 80009ea:	42ac      	cmp	r4, r5
 80009ec:	46c8      	mov	r8, r9
 80009ee:	46ae      	mov	lr, r5
 80009f0:	d356      	bcc.n	8000aa0 <__udivmoddi4+0x29c>
 80009f2:	d053      	beq.n	8000a9c <__udivmoddi4+0x298>
 80009f4:	b156      	cbz	r6, 8000a0c <__udivmoddi4+0x208>
 80009f6:	ebb0 0208 	subs.w	r2, r0, r8
 80009fa:	eb64 040e 	sbc.w	r4, r4, lr
 80009fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000a02:	40ca      	lsrs	r2, r1
 8000a04:	40cc      	lsrs	r4, r1
 8000a06:	4317      	orrs	r7, r2
 8000a08:	e9c6 7400 	strd	r7, r4, [r6]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a14:	f1c3 0120 	rsb	r1, r3, #32
 8000a18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a1c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a20:	fa25 f101 	lsr.w	r1, r5, r1
 8000a24:	409d      	lsls	r5, r3
 8000a26:	432a      	orrs	r2, r5
 8000a28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2c:	fa1f fe8c 	uxth.w	lr, ip
 8000a30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a34:	fb07 1510 	mls	r5, r7, r0, r1
 8000a38:	0c11      	lsrs	r1, r2, #16
 8000a3a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a3e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a42:	428d      	cmp	r5, r1
 8000a44:	fa04 f403 	lsl.w	r4, r4, r3
 8000a48:	d908      	bls.n	8000a5c <__udivmoddi4+0x258>
 8000a4a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a52:	d22f      	bcs.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a54:	428d      	cmp	r5, r1
 8000a56:	d92d      	bls.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	4461      	add	r1, ip
 8000a5c:	1b49      	subs	r1, r1, r5
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a64:	fb07 1115 	mls	r1, r7, r5, r1
 8000a68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a6c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a70:	4291      	cmp	r1, r2
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x282>
 8000a74:	eb1c 0202 	adds.w	r2, ip, r2
 8000a78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a7c:	d216      	bcs.n	8000aac <__udivmoddi4+0x2a8>
 8000a7e:	4291      	cmp	r1, r2
 8000a80:	d914      	bls.n	8000aac <__udivmoddi4+0x2a8>
 8000a82:	3d02      	subs	r5, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a52      	subs	r2, r2, r1
 8000a88:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a8c:	e738      	b.n	8000900 <__udivmoddi4+0xfc>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e708      	b.n	80008a6 <__udivmoddi4+0xa2>
 8000a94:	4639      	mov	r1, r7
 8000a96:	e6e6      	b.n	8000866 <__udivmoddi4+0x62>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x90>
 8000a9c:	4548      	cmp	r0, r9
 8000a9e:	d2a9      	bcs.n	80009f4 <__udivmoddi4+0x1f0>
 8000aa0:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	e7a3      	b.n	80009f4 <__udivmoddi4+0x1f0>
 8000aac:	4645      	mov	r5, r8
 8000aae:	e7ea      	b.n	8000a86 <__udivmoddi4+0x282>
 8000ab0:	462b      	mov	r3, r5
 8000ab2:	e794      	b.n	80009de <__udivmoddi4+0x1da>
 8000ab4:	4640      	mov	r0, r8
 8000ab6:	e7d1      	b.n	8000a5c <__udivmoddi4+0x258>
 8000ab8:	46d0      	mov	r8, sl
 8000aba:	e77b      	b.n	80009b4 <__udivmoddi4+0x1b0>
 8000abc:	3d02      	subs	r5, #2
 8000abe:	4462      	add	r2, ip
 8000ac0:	e732      	b.n	8000928 <__udivmoddi4+0x124>
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e70a      	b.n	80008dc <__udivmoddi4+0xd8>
 8000ac6:	4464      	add	r4, ip
 8000ac8:	3802      	subs	r0, #2
 8000aca:	e742      	b.n	8000952 <__udivmoddi4+0x14e>

08000acc <__aeabi_idiv0>:
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <key_scan>:
 * @retval      key,defined as follows:
 *              KEY0_PRES, 1,KEY0 pressed
 *              WKUP_PRES, 2,WKUP is pressed
 */
uint8_t key_scan(uint8_t mode)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1;                /* Press the button to release the flag */
    uint8_t keyval = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	73fb      	strb	r3, [r7, #15]

    if (mode == 1)
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d102      	bne.n	8000aea <key_scan+0x1a>
    {
    	key_up = 1;                           /* support for linking */
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <key_scan+0xa4>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
    }

    if (key_up && (KEY0 == 1 || WK_UP == 1))  /* The key release flag is 1, and any key is pressed */
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <key_scan+0xa4>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d028      	beq.n	8000b44 <key_scan+0x74>
 8000af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af6:	4820      	ldr	r0, [pc, #128]	; (8000b78 <key_scan+0xa8>)
 8000af8:	f005 fbe2 	bl	80062c0 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d006      	beq.n	8000b10 <key_scan+0x40>
 8000b02:	2101      	movs	r1, #1
 8000b04:	481c      	ldr	r0, [pc, #112]	; (8000b78 <key_scan+0xa8>)
 8000b06:	f005 fbdb 	bl	80062c0 <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d119      	bne.n	8000b44 <key_scan+0x74>
    {
    	HAL_Delay(10);                        /* delay 10ms */
 8000b10:	200a      	movs	r0, #10
 8000b12:	f004 fb8f 	bl	8005234 <HAL_Delay>
        key_up = 0;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <key_scan+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

        if (KEY0 == 1)
 8000b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b20:	4815      	ldr	r0, [pc, #84]	; (8000b78 <key_scan+0xa8>)
 8000b22:	f005 fbcd 	bl	80062c0 <HAL_GPIO_ReadPin>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d101      	bne.n	8000b30 <key_scan+0x60>
        {
        	keyval = KEY0_PRES;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
        }

        if (WK_UP == 1)
 8000b30:	2101      	movs	r1, #1
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <key_scan+0xa8>)
 8000b34:	f005 fbc4 	bl	80062c0 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d114      	bne.n	8000b68 <key_scan+0x98>
        {
        	keyval = WKUP_PRES;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	73fb      	strb	r3, [r7, #15]
        if (WK_UP == 1)
 8000b42:	e011      	b.n	8000b68 <key_scan+0x98>
        }
    }
    else if (KEY0 == 0 && WK_UP == 0)         /* Without any key pressed, the marker key is released */
 8000b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <key_scan+0xa8>)
 8000b4a:	f005 fbb9 	bl	80062c0 <HAL_GPIO_ReadPin>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d109      	bne.n	8000b68 <key_scan+0x98>
 8000b54:	2101      	movs	r1, #1
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <key_scan+0xa8>)
 8000b58:	f005 fbb2 	bl	80062c0 <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <key_scan+0x98>
    {
        key_up = 1;
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <key_scan+0xa4>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
    }

    return keyval;                            /* return key value */
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000
 8000b78:	40020000 	.word	0x40020000

08000b7c <lcd_ex_st7789_reginit>:
 * @brief  ST7789 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7789_reginit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8000b80:	2011      	movs	r0, #17
 8000b82:	f002 fc39 	bl	80033f8 <lcd_wr_regno>

    HAL_Delay(120);
 8000b86:	2078      	movs	r0, #120	; 0x78
 8000b88:	f004 fb54 	bl	8005234 <HAL_Delay>

    lcd_wr_regno(0x36);
 8000b8c:	2036      	movs	r0, #54	; 0x36
 8000b8e:	f002 fc33 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f002 fc1c 	bl	80033d0 <lcd_wr_data>


    lcd_wr_regno(0x3A);
 8000b98:	203a      	movs	r0, #58	; 0x3a
 8000b9a:	f002 fc2d 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0X05);
 8000b9e:	2005      	movs	r0, #5
 8000ba0:	f002 fc16 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8000ba4:	20b2      	movs	r0, #178	; 0xb2
 8000ba6:	f002 fc27 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8000baa:	200c      	movs	r0, #12
 8000bac:	f002 fc10 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8000bb0:	200c      	movs	r0, #12
 8000bb2:	f002 fc0d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f002 fc0a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x33);
 8000bbc:	2033      	movs	r0, #51	; 0x33
 8000bbe:	f002 fc07 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x33);
 8000bc2:	2033      	movs	r0, #51	; 0x33
 8000bc4:	f002 fc04 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8000bc8:	20b7      	movs	r0, #183	; 0xb7
 8000bca:	f002 fc15 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x35);
 8000bce:	2035      	movs	r0, #53	; 0x35
 8000bd0:	f002 fbfe 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 8000bd4:	20bb      	movs	r0, #187	; 0xbb
 8000bd6:	f002 fc0f 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 8000bda:	2032      	movs	r0, #50	; 0x32
 8000bdc:	f002 fbf8 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8000be0:	20c0      	movs	r0, #192	; 0xc0
 8000be2:	f002 fc09 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8000be6:	200c      	movs	r0, #12
 8000be8:	f002 fbf2 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8000bec:	20c2      	movs	r0, #194	; 0xc2
 8000bee:	f002 fc03 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f002 fbec 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 8000bf8:	20c3      	movs	r0, #195	; 0xc3
 8000bfa:	f002 fbfd 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 8000bfe:	2010      	movs	r0, #16
 8000c00:	f002 fbe6 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 8000c04:	20c4      	movs	r0, #196	; 0xc4
 8000c06:	f002 fbf7 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 8000c0a:	2020      	movs	r0, #32
 8000c0c:	f002 fbe0 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8000c10:	20c6      	movs	r0, #198	; 0xc6
 8000c12:	f002 fbf1 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x0f);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f002 fbda 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xD0);
 8000c1c:	20d0      	movs	r0, #208	; 0xd0
 8000c1e:	f002 fbeb 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xA4);
 8000c22:	20a4      	movs	r0, #164	; 0xa4
 8000c24:	f002 fbd4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA1);
 8000c28:	20a1      	movs	r0, #161	; 0xa1
 8000c2a:	f002 fbd1 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 8000c2e:	20e0      	movs	r0, #224	; 0xe0
 8000c30:	f002 fbe2 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8000c34:	20d0      	movs	r0, #208	; 0xd0
 8000c36:	f002 fbcb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f002 fbc8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000c40:	2002      	movs	r0, #2
 8000c42:	f002 fbc5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x07);
 8000c46:	2007      	movs	r0, #7
 8000c48:	f002 fbc2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f002 fbbf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x28);
 8000c52:	2028      	movs	r0, #40	; 0x28
 8000c54:	f002 fbbc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x32);
 8000c58:	2032      	movs	r0, #50	; 0x32
 8000c5a:	f002 fbb9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0X44);
 8000c5e:	2044      	movs	r0, #68	; 0x44
 8000c60:	f002 fbb6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x42);
 8000c64:	2042      	movs	r0, #66	; 0x42
 8000c66:	f002 fbb3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x06);
 8000c6a:	2006      	movs	r0, #6
 8000c6c:	f002 fbb0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8000c70:	200e      	movs	r0, #14
 8000c72:	f002 fbad 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x12);
 8000c76:	2012      	movs	r0, #18
 8000c78:	f002 fbaa 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x14);
 8000c7c:	2014      	movs	r0, #20
 8000c7e:	f002 fba7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x17);
 8000c82:	2017      	movs	r0, #23
 8000c84:	f002 fba4 	bl	80033d0 <lcd_wr_data>


    lcd_wr_regno(0XE1);  /* Set Gamma */
 8000c88:	20e1      	movs	r0, #225	; 0xe1
 8000c8a:	f002 fbb5 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8000c8e:	20d0      	movs	r0, #208	; 0xd0
 8000c90:	f002 fb9e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f002 fb9b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f002 fb98 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x07);
 8000ca0:	2007      	movs	r0, #7
 8000ca2:	f002 fb95 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f002 fb92 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x28);
 8000cac:	2028      	movs	r0, #40	; 0x28
 8000cae:	f002 fb8f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x31);
 8000cb2:	2031      	movs	r0, #49	; 0x31
 8000cb4:	f002 fb8c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x54);
 8000cb8:	2054      	movs	r0, #84	; 0x54
 8000cba:	f002 fb89 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x47);
 8000cbe:	2047      	movs	r0, #71	; 0x47
 8000cc0:	f002 fb86 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8000cc4:	200e      	movs	r0, #14
 8000cc6:	f002 fb83 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1c);
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f002 fb80 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x17);
 8000cd0:	2017      	movs	r0, #23
 8000cd2:	f002 fb7d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1b);
 8000cd6:	201b      	movs	r0, #27
 8000cd8:	f002 fb7a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1e);
 8000cdc:	201e      	movs	r0, #30
 8000cde:	f002 fb77 	bl	80033d0 <lcd_wr_data>


    lcd_wr_regno(0x2A);
 8000ce2:	202a      	movs	r0, #42	; 0x2a
 8000ce4:	f002 fb88 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f002 fb71 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f002 fb6e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f002 fb6b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xef);
 8000cfa:	20ef      	movs	r0, #239	; 0xef
 8000cfc:	f002 fb68 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x2B);
 8000d00:	202b      	movs	r0, #43	; 0x2b
 8000d02:	f002 fb79 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f002 fb62 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f002 fb5f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f002 fb5c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8000d18:	203f      	movs	r0, #63	; 0x3f
 8000d1a:	f002 fb59 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 8000d1e:	2029      	movs	r0, #41	; 0x29
 8000d20:	f002 fb6a 	bl	80033f8 <lcd_wr_regno>
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <lcd_ex_ili9341_reginit>:
 * @brief  ILI9341 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9341_reginit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 8000d2c:	20cf      	movs	r0, #207	; 0xcf
 8000d2e:	f002 fb63 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f002 fb4c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xC1);
 8000d38:	20c1      	movs	r0, #193	; 0xc1
 8000d3a:	f002 fb49 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0X30);
 8000d3e:	2030      	movs	r0, #48	; 0x30
 8000d40:	f002 fb46 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xED);
 8000d44:	20ed      	movs	r0, #237	; 0xed
 8000d46:	f002 fb57 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x64);
 8000d4a:	2064      	movs	r0, #100	; 0x64
 8000d4c:	f002 fb40 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x03);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f002 fb3d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0X12);
 8000d56:	2012      	movs	r0, #18
 8000d58:	f002 fb3a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0X81);
 8000d5c:	2081      	movs	r0, #129	; 0x81
 8000d5e:	f002 fb37 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xE8);
 8000d62:	20e8      	movs	r0, #232	; 0xe8
 8000d64:	f002 fb48 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x85);
 8000d68:	2085      	movs	r0, #133	; 0x85
 8000d6a:	f002 fb31 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x10);
 8000d6e:	2010      	movs	r0, #16
 8000d70:	f002 fb2e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8000d74:	207a      	movs	r0, #122	; 0x7a
 8000d76:	f002 fb2b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xCB);
 8000d7a:	20cb      	movs	r0, #203	; 0xcb
 8000d7c:	f002 fb3c 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x39);
 8000d80:	2039      	movs	r0, #57	; 0x39
 8000d82:	f002 fb25 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8000d86:	202c      	movs	r0, #44	; 0x2c
 8000d88:	f002 fb22 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f002 fb1f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x34);
 8000d92:	2034      	movs	r0, #52	; 0x34
 8000d94:	f002 fb1c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f002 fb19 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xF7);
 8000d9e:	20f7      	movs	r0, #247	; 0xf7
 8000da0:	f002 fb2a 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8000da4:	2020      	movs	r0, #32
 8000da6:	f002 fb13 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xEA);
 8000daa:	20ea      	movs	r0, #234	; 0xea
 8000dac:	f002 fb24 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f002 fb0d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f002 fb0a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 8000dbc:	20c0      	movs	r0, #192	; 0xc0
 8000dbe:	f002 fb1b 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 8000dc2:	201b      	movs	r0, #27
 8000dc4:	f002 fb04 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 8000dc8:	20c1      	movs	r0, #193	; 0xc1
 8000dca:	f002 fb15 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f002 fafe 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 8000dd4:	20c5      	movs	r0, #197	; 0xc5
 8000dd6:	f002 fb0f 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 8000dda:	2030      	movs	r0, #48	; 0x30
 8000ddc:	f002 faf8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 8000de0:	2030      	movs	r0, #48	; 0x30
 8000de2:	f002 faf5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 8000de6:	20c7      	movs	r0, #199	; 0xc7
 8000de8:	f002 fb06 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0XB7);
 8000dec:	20b7      	movs	r0, #183	; 0xb7
 8000dee:	f002 faef 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0x36); /*  Memory Access Control */
 8000df2:	2036      	movs	r0, #54	; 0x36
 8000df4:	f002 fb00 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8000df8:	2048      	movs	r0, #72	; 0x48
 8000dfa:	f002 fae9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0x3A);
 8000dfe:	203a      	movs	r0, #58	; 0x3a
 8000e00:	f002 fafa 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8000e04:	2055      	movs	r0, #85	; 0x55
 8000e06:	f002 fae3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xB1);
 8000e0a:	20b1      	movs	r0, #177	; 0xb1
 8000e0c:	f002 faf4 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f002 fadd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1A);
 8000e16:	201a      	movs	r0, #26
 8000e18:	f002 fada 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xB6); /*  Display Function Control */
 8000e1c:	20b6      	movs	r0, #182	; 0xb6
 8000e1e:	f002 faeb 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8000e22:	200a      	movs	r0, #10
 8000e24:	f002 fad4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8000e28:	20a2      	movs	r0, #162	; 0xa2
 8000e2a:	f002 fad1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
 8000e2e:	20f2      	movs	r0, #242	; 0xf2
 8000e30:	f002 fae2 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f002 facb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 8000e3a:	2026      	movs	r0, #38	; 0x26
 8000e3c:	f002 fadc 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f002 fac5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 8000e46:	20e0      	movs	r0, #224	; 0xe0
 8000e48:	f002 fad6 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8000e4c:	200f      	movs	r0, #15
 8000e4e:	f002 fabf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2A);
 8000e52:	202a      	movs	r0, #42	; 0x2a
 8000e54:	f002 fabc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x28);
 8000e58:	2028      	movs	r0, #40	; 0x28
 8000e5a:	f002 fab9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x08);
 8000e5e:	2008      	movs	r0, #8
 8000e60:	f002 fab6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0E);
 8000e64:	200e      	movs	r0, #14
 8000e66:	f002 fab3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x08);
 8000e6a:	2008      	movs	r0, #8
 8000e6c:	f002 fab0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x54);
 8000e70:	2054      	movs	r0, #84	; 0x54
 8000e72:	f002 faad 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0XA9);
 8000e76:	20a9      	movs	r0, #169	; 0xa9
 8000e78:	f002 faaa 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x43);
 8000e7c:	2043      	movs	r0, #67	; 0x43
 8000e7e:	f002 faa7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0A);
 8000e82:	200a      	movs	r0, #10
 8000e84:	f002 faa4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000e88:	200f      	movs	r0, #15
 8000e8a:	f002 faa1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f002 fa9e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f002 fa9b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f002 fa98 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f002 fa95 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0XE1);    /* Set Gamma */
 8000ea6:	20e1      	movs	r0, #225	; 0xe1
 8000ea8:	f002 faa6 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f002 fa8f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x15);
 8000eb2:	2015      	movs	r0, #21
 8000eb4:	f002 fa8c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x17);
 8000eb8:	2017      	movs	r0, #23
 8000eba:	f002 fa89 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x07);
 8000ebe:	2007      	movs	r0, #7
 8000ec0:	f002 fa86 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x11);
 8000ec4:	2011      	movs	r0, #17
 8000ec6:	f002 fa83 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x06);
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f002 fa80 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2B);
 8000ed0:	202b      	movs	r0, #43	; 0x2b
 8000ed2:	f002 fa7d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x56);
 8000ed6:	2056      	movs	r0, #86	; 0x56
 8000ed8:	f002 fa7a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8000edc:	203c      	movs	r0, #60	; 0x3c
 8000ede:	f002 fa77 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x05);
 8000ee2:	2005      	movs	r0, #5
 8000ee4:	f002 fa74 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x10);
 8000ee8:	2010      	movs	r0, #16
 8000eea:	f002 fa71 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f002 fa6e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8000ef4:	203f      	movs	r0, #63	; 0x3f
 8000ef6:	f002 fa6b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8000efa:	203f      	movs	r0, #63	; 0x3f
 8000efc:	f002 fa68 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000f00:	200f      	movs	r0, #15
 8000f02:	f002 fa65 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0x2B);
 8000f06:	202b      	movs	r0, #43	; 0x2b
 8000f08:	f002 fa76 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f002 fa5f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f002 fa5c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f002 fa59 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8000f1e:	203f      	movs	r0, #63	; 0x3f
 8000f20:	f002 fa56 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8000f24:	202a      	movs	r0, #42	; 0x2a
 8000f26:	f002 fa67 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f002 fa50 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f002 fa4d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f002 fa4a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xef);
 8000f3c:	20ef      	movs	r0, #239	; 0xef
 8000f3e:	f002 fa47 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 8000f42:	2011      	movs	r0, #17
 8000f44:	f002 fa58 	bl	80033f8 <lcd_wr_regno>
    HAL_Delay(120);
 8000f48:	2078      	movs	r0, #120	; 0x78
 8000f4a:	f004 f973 	bl	8005234 <HAL_Delay>
    lcd_wr_regno(0x29); /* display on */
 8000f4e:	2029      	movs	r0, #41	; 0x29
 8000f50:	f002 fa52 	bl	80033f8 <lcd_wr_regno>
 }
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <lcd_ex_nt35310_reginit>:
 * @brief  NT35310 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35310_reginit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 8000f5c:	20ed      	movs	r0, #237	; 0xed
 8000f5e:	f002 fa4b 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f002 fa34 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFE);
 8000f68:	20fe      	movs	r0, #254	; 0xfe
 8000f6a:	f002 fa31 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xEE);
 8000f6e:	20ee      	movs	r0, #238	; 0xee
 8000f70:	f002 fa42 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xDE);
 8000f74:	20de      	movs	r0, #222	; 0xde
 8000f76:	f002 fa2b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x21);
 8000f7a:	2021      	movs	r0, #33	; 0x21
 8000f7c:	f002 fa28 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF1);
 8000f80:	20f1      	movs	r0, #241	; 0xf1
 8000f82:	f002 fa39 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f002 fa22 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xDF);
 8000f8c:	20df      	movs	r0, #223	; 0xdf
 8000f8e:	f002 fa33 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x10);
 8000f92:	2010      	movs	r0, #16
 8000f94:	f002 fa1c 	bl	80033d0 <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8000f98:	20c4      	movs	r0, #196	; 0xc4
 8000f9a:	f002 fa2d 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 8000f9e:	208f      	movs	r0, #143	; 0x8f
 8000fa0:	f002 fa16 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8000fa4:	20c6      	movs	r0, #198	; 0xc6
 8000fa6:	f002 fa27 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f002 fa10 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8000fb0:	20e2      	movs	r0, #226	; 0xe2
 8000fb2:	f002 fa0d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8000fb6:	20e2      	movs	r0, #226	; 0xe2
 8000fb8:	f002 fa0a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8000fbc:	20e2      	movs	r0, #226	; 0xe2
 8000fbe:	f002 fa07 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xBF);
 8000fc2:	20bf      	movs	r0, #191	; 0xbf
 8000fc4:	f002 fa18 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8000fc8:	20aa      	movs	r0, #170	; 0xaa
 8000fca:	f002 fa01 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB0);
 8000fce:	20b0      	movs	r0, #176	; 0xb0
 8000fd0:	f002 fa12 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x0D);
 8000fd4:	200d      	movs	r0, #13
 8000fd6:	f002 f9fb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f002 f9f8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8000fe0:	200d      	movs	r0, #13
 8000fe2:	f002 f9f5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f002 f9f2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x11);
 8000fec:	2011      	movs	r0, #17
 8000fee:	f002 f9ef 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f9ec 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x19);
 8000ff8:	2019      	movs	r0, #25
 8000ffa:	f002 f9e9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f002 f9e6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x21);
 8001004:	2021      	movs	r0, #33	; 0x21
 8001006:	f002 f9e3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800100a:	2000      	movs	r0, #0
 800100c:	f002 f9e0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2D);
 8001010:	202d      	movs	r0, #45	; 0x2d
 8001012:	f002 f9dd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001016:	2000      	movs	r0, #0
 8001018:	f002 f9da 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3D);
 800101c:	203d      	movs	r0, #61	; 0x3d
 800101e:	f002 f9d7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001022:	2000      	movs	r0, #0
 8001024:	f002 f9d4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001028:	205d      	movs	r0, #93	; 0x5d
 800102a:	f002 f9d1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800102e:	2000      	movs	r0, #0
 8001030:	f002 f9ce 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001034:	205d      	movs	r0, #93	; 0x5d
 8001036:	f002 f9cb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f002 f9c8 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB1);
 8001040:	20b1      	movs	r0, #177	; 0xb1
 8001042:	f002 f9d9 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8001046:	2080      	movs	r0, #128	; 0x80
 8001048:	f002 f9c2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f002 f9bf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8001052:	208b      	movs	r0, #139	; 0x8b
 8001054:	f002 f9bc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001058:	2000      	movs	r0, #0
 800105a:	f002 f9b9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x96);
 800105e:	2096      	movs	r0, #150	; 0x96
 8001060:	f002 f9b6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001064:	2000      	movs	r0, #0
 8001066:	f002 f9b3 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 800106a:	20b2      	movs	r0, #178	; 0xb2
 800106c:	f002 f9c4 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001070:	2000      	movs	r0, #0
 8001072:	f002 f9ad 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001076:	2000      	movs	r0, #0
 8001078:	f002 f9aa 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x02);
 800107c:	2002      	movs	r0, #2
 800107e:	f002 f9a7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001082:	2000      	movs	r0, #0
 8001084:	f002 f9a4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x03);
 8001088:	2003      	movs	r0, #3
 800108a:	f002 f9a1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800108e:	2000      	movs	r0, #0
 8001090:	f002 f99e 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB3);
 8001094:	20b3      	movs	r0, #179	; 0xb3
 8001096:	f002 f9af 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800109a:	2000      	movs	r0, #0
 800109c:	f002 f998 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f002 f995 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f002 f992 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f002 f98f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f002 f98c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f002 f989 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010be:	2000      	movs	r0, #0
 80010c0:	f002 f986 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f002 f983 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f002 f980 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f002 f97d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f002 f97a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010dc:	2000      	movs	r0, #0
 80010de:	f002 f977 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f002 f974 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f002 f971 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f002 f96e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f002 f96b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f002 f968 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f002 f965 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001106:	2000      	movs	r0, #0
 8001108:	f002 f962 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800110c:	2000      	movs	r0, #0
 800110e:	f002 f95f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001112:	2000      	movs	r0, #0
 8001114:	f002 f95c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001118:	2000      	movs	r0, #0
 800111a:	f002 f959 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800111e:	2000      	movs	r0, #0
 8001120:	f002 f956 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001124:	2000      	movs	r0, #0
 8001126:	f002 f953 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 800112a:	20b4      	movs	r0, #180	; 0xb4
 800112c:	f002 f964 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x8B);
 8001130:	208b      	movs	r0, #139	; 0x8b
 8001132:	f002 f94d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001136:	2000      	movs	r0, #0
 8001138:	f002 f94a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x96);
 800113c:	2096      	movs	r0, #150	; 0x96
 800113e:	f002 f947 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001142:	2000      	movs	r0, #0
 8001144:	f002 f944 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA1);
 8001148:	20a1      	movs	r0, #161	; 0xa1
 800114a:	f002 f941 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800114e:	2000      	movs	r0, #0
 8001150:	f002 f93e 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB5);
 8001154:	20b5      	movs	r0, #181	; 0xb5
 8001156:	f002 f94f 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x02);
 800115a:	2002      	movs	r0, #2
 800115c:	f002 f938 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001160:	2000      	movs	r0, #0
 8001162:	f002 f935 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x03);
 8001166:	2003      	movs	r0, #3
 8001168:	f002 f932 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800116c:	2000      	movs	r0, #0
 800116e:	f002 f92f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x04);
 8001172:	2004      	movs	r0, #4
 8001174:	f002 f92c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f002 f929 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB6);
 800117e:	20b6      	movs	r0, #182	; 0xb6
 8001180:	f002 f93a 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001184:	2000      	movs	r0, #0
 8001186:	f002 f923 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800118a:	2000      	movs	r0, #0
 800118c:	f002 f920 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8001190:	20b7      	movs	r0, #183	; 0xb7
 8001192:	f002 f931 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001196:	2000      	movs	r0, #0
 8001198:	f002 f91a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800119c:	2000      	movs	r0, #0
 800119e:	f002 f917 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3F);
 80011a2:	203f      	movs	r0, #63	; 0x3f
 80011a4:	f002 f914 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f002 f911 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x5E);
 80011ae:	205e      	movs	r0, #94	; 0x5e
 80011b0:	f002 f90e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f002 f90b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x64);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f002 f908 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f002 f905 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x8C);
 80011c6:	208c      	movs	r0, #140	; 0x8c
 80011c8:	f002 f902 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f002 f8ff 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xAC);
 80011d2:	20ac      	movs	r0, #172	; 0xac
 80011d4:	f002 f8fc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011d8:	2000      	movs	r0, #0
 80011da:	f002 f8f9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xDC);
 80011de:	20dc      	movs	r0, #220	; 0xdc
 80011e0:	f002 f8f6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f002 f8f3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x70);
 80011ea:	2070      	movs	r0, #112	; 0x70
 80011ec:	f002 f8f0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f002 f8ed 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x90);
 80011f6:	2090      	movs	r0, #144	; 0x90
 80011f8:	f002 f8ea 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f002 f8e7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xEB);
 8001202:	20eb      	movs	r0, #235	; 0xeb
 8001204:	f002 f8e4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001208:	2000      	movs	r0, #0
 800120a:	f002 f8e1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xDC);
 800120e:	20dc      	movs	r0, #220	; 0xdc
 8001210:	f002 f8de 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001214:	2000      	movs	r0, #0
 8001216:	f002 f8db 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB8);
 800121a:	20b8      	movs	r0, #184	; 0xb8
 800121c:	f002 f8ec 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f002 f8d5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f002 f8d2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800122c:	2000      	movs	r0, #0
 800122e:	f002 f8cf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f002 f8cc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001238:	2000      	movs	r0, #0
 800123a:	f002 f8c9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800123e:	2000      	movs	r0, #0
 8001240:	f002 f8c6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001244:	2000      	movs	r0, #0
 8001246:	f002 f8c3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800124a:	2000      	movs	r0, #0
 800124c:	f002 f8c0 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xBA);
 8001250:	20ba      	movs	r0, #186	; 0xba
 8001252:	f002 f8d1 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x24);
 8001256:	2024      	movs	r0, #36	; 0x24
 8001258:	f002 f8ba 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800125c:	2000      	movs	r0, #0
 800125e:	f002 f8b7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001262:	2000      	movs	r0, #0
 8001264:	f002 f8b4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001268:	2000      	movs	r0, #0
 800126a:	f002 f8b1 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 800126e:	20c1      	movs	r0, #193	; 0xc1
 8001270:	f002 f8c2 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8001274:	2020      	movs	r0, #32
 8001276:	f002 f8ab 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f002 f8a8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x54);
 8001280:	2054      	movs	r0, #84	; 0x54
 8001282:	f002 f8a5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001286:	2000      	movs	r0, #0
 8001288:	f002 f8a2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFF);
 800128c:	20ff      	movs	r0, #255	; 0xff
 800128e:	f002 f89f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001292:	2000      	movs	r0, #0
 8001294:	f002 f89c 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001298:	20c2      	movs	r0, #194	; 0xc2
 800129a:	f002 f8ad 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 800129e:	200a      	movs	r0, #10
 80012a0:	f002 f896 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f002 f893 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x04);
 80012aa:	2004      	movs	r0, #4
 80012ac:	f002 f890 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f002 f88d 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC3);
 80012b6:	20c3      	movs	r0, #195	; 0xc3
 80012b8:	f002 f89e 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 80012bc:	203c      	movs	r0, #60	; 0x3c
 80012be:	f002 f887 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f002 f884 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3A);
 80012c8:	203a      	movs	r0, #58	; 0x3a
 80012ca:	f002 f881 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f002 f87e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x39);
 80012d4:	2039      	movs	r0, #57	; 0x39
 80012d6:	f002 f87b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012da:	2000      	movs	r0, #0
 80012dc:	f002 f878 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x37);
 80012e0:	2037      	movs	r0, #55	; 0x37
 80012e2:	f002 f875 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f002 f872 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80012ec:	203c      	movs	r0, #60	; 0x3c
 80012ee:	f002 f86f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f002 f86c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x36);
 80012f8:	2036      	movs	r0, #54	; 0x36
 80012fa:	f002 f869 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012fe:	2000      	movs	r0, #0
 8001300:	f002 f866 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x32);
 8001304:	2032      	movs	r0, #50	; 0x32
 8001306:	f002 f863 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800130a:	2000      	movs	r0, #0
 800130c:	f002 f860 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2F);
 8001310:	202f      	movs	r0, #47	; 0x2f
 8001312:	f002 f85d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001316:	2000      	movs	r0, #0
 8001318:	f002 f85a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2C);
 800131c:	202c      	movs	r0, #44	; 0x2c
 800131e:	f002 f857 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001322:	2000      	movs	r0, #0
 8001324:	f002 f854 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001328:	2029      	movs	r0, #41	; 0x29
 800132a:	f002 f851 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800132e:	2000      	movs	r0, #0
 8001330:	f002 f84e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x26);
 8001334:	2026      	movs	r0, #38	; 0x26
 8001336:	f002 f84b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800133a:	2000      	movs	r0, #0
 800133c:	f002 f848 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x24);
 8001340:	2024      	movs	r0, #36	; 0x24
 8001342:	f002 f845 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f002 f842 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x24);
 800134c:	2024      	movs	r0, #36	; 0x24
 800134e:	f002 f83f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001352:	2000      	movs	r0, #0
 8001354:	f002 f83c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x23);
 8001358:	2023      	movs	r0, #35	; 0x23
 800135a:	f002 f839 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800135e:	2000      	movs	r0, #0
 8001360:	f002 f836 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001364:	203c      	movs	r0, #60	; 0x3c
 8001366:	f002 f833 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800136a:	2000      	movs	r0, #0
 800136c:	f002 f830 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x36);
 8001370:	2036      	movs	r0, #54	; 0x36
 8001372:	f002 f82d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f002 f82a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x32);
 800137c:	2032      	movs	r0, #50	; 0x32
 800137e:	f002 f827 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001382:	2000      	movs	r0, #0
 8001384:	f002 f824 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2F);
 8001388:	202f      	movs	r0, #47	; 0x2f
 800138a:	f002 f821 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800138e:	2000      	movs	r0, #0
 8001390:	f002 f81e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001394:	202c      	movs	r0, #44	; 0x2c
 8001396:	f002 f81b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f002 f818 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x29);
 80013a0:	2029      	movs	r0, #41	; 0x29
 80013a2:	f002 f815 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f002 f812 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x26);
 80013ac:	2026      	movs	r0, #38	; 0x26
 80013ae:	f002 f80f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f002 f80c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x24);
 80013b8:	2024      	movs	r0, #36	; 0x24
 80013ba:	f002 f809 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013be:	2000      	movs	r0, #0
 80013c0:	f002 f806 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x24);
 80013c4:	2024      	movs	r0, #36	; 0x24
 80013c6:	f002 f803 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f002 f800 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x23);
 80013d0:	2023      	movs	r0, #35	; 0x23
 80013d2:	f001 fffd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f001 fffa 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC4);
 80013dc:	20c4      	movs	r0, #196	; 0xc4
 80013de:	f002 f80b 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x62);
 80013e2:	2062      	movs	r0, #98	; 0x62
 80013e4:	f001 fff4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f001 fff1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x05);
 80013ee:	2005      	movs	r0, #5
 80013f0:	f001 ffee 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f001 ffeb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x84);
 80013fa:	2084      	movs	r0, #132	; 0x84
 80013fc:	f001 ffe8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001400:	2000      	movs	r0, #0
 8001402:	f001 ffe5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xF0);
 8001406:	20f0      	movs	r0, #240	; 0xf0
 8001408:	f001 ffe2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800140c:	2000      	movs	r0, #0
 800140e:	f001 ffdf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x18);
 8001412:	2018      	movs	r0, #24
 8001414:	f001 ffdc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001418:	2000      	movs	r0, #0
 800141a:	f001 ffd9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA4);
 800141e:	20a4      	movs	r0, #164	; 0xa4
 8001420:	f001 ffd6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001424:	2000      	movs	r0, #0
 8001426:	f001 ffd3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x18);
 800142a:	2018      	movs	r0, #24
 800142c:	f001 ffd0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001430:	2000      	movs	r0, #0
 8001432:	f001 ffcd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x50);
 8001436:	2050      	movs	r0, #80	; 0x50
 8001438:	f001 ffca 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800143c:	2000      	movs	r0, #0
 800143e:	f001 ffc7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8001442:	200c      	movs	r0, #12
 8001444:	f001 ffc4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001448:	2000      	movs	r0, #0
 800144a:	f001 ffc1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x17);
 800144e:	2017      	movs	r0, #23
 8001450:	f001 ffbe 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001454:	2000      	movs	r0, #0
 8001456:	f001 ffbb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x95);
 800145a:	2095      	movs	r0, #149	; 0x95
 800145c:	f001 ffb8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001460:	2000      	movs	r0, #0
 8001462:	f001 ffb5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001466:	20f3      	movs	r0, #243	; 0xf3
 8001468:	f001 ffb2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800146c:	2000      	movs	r0, #0
 800146e:	f001 ffaf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xE6);
 8001472:	20e6      	movs	r0, #230	; 0xe6
 8001474:	f001 ffac 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001478:	2000      	movs	r0, #0
 800147a:	f001 ffa9 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 800147e:	20c5      	movs	r0, #197	; 0xc5
 8001480:	f001 ffba 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8001484:	2032      	movs	r0, #50	; 0x32
 8001486:	f001 ffa3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800148a:	2000      	movs	r0, #0
 800148c:	f001 ffa0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001490:	2044      	movs	r0, #68	; 0x44
 8001492:	f001 ff9d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001496:	2000      	movs	r0, #0
 8001498:	f001 ff9a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x65);
 800149c:	2065      	movs	r0, #101	; 0x65
 800149e:	f001 ff97 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f001 ff94 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x76);
 80014a8:	2076      	movs	r0, #118	; 0x76
 80014aa:	f001 ff91 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f001 ff8e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x88);
 80014b4:	2088      	movs	r0, #136	; 0x88
 80014b6:	f001 ff8b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f001 ff88 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 80014c0:	20c6      	movs	r0, #198	; 0xc6
 80014c2:	f001 ff99 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x20);
 80014c6:	2020      	movs	r0, #32
 80014c8:	f001 ff82 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f001 ff7f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x17);
 80014d2:	2017      	movs	r0, #23
 80014d4:	f001 ff7c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014d8:	2000      	movs	r0, #0
 80014da:	f001 ff79 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 80014de:	2001      	movs	r0, #1
 80014e0:	f001 ff76 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f001 ff73 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC7);
 80014ea:	20c7      	movs	r0, #199	; 0xc7
 80014ec:	f001 ff84 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f001 ff6d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f001 ff6a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f001 ff67 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001502:	2000      	movs	r0, #0
 8001504:	f001 ff64 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC8);
 8001508:	20c8      	movs	r0, #200	; 0xc8
 800150a:	f001 ff75 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800150e:	2000      	movs	r0, #0
 8001510:	f001 ff5e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001514:	2000      	movs	r0, #0
 8001516:	f001 ff5b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800151a:	2000      	movs	r0, #0
 800151c:	f001 ff58 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001520:	2000      	movs	r0, #0
 8001522:	f001 ff55 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC9);
 8001526:	20c9      	movs	r0, #201	; 0xc9
 8001528:	f001 ff66 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800152c:	2000      	movs	r0, #0
 800152e:	f001 ff4f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001532:	2000      	movs	r0, #0
 8001534:	f001 ff4c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001538:	2000      	movs	r0, #0
 800153a:	f001 ff49 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800153e:	2000      	movs	r0, #0
 8001540:	f001 ff46 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001544:	2000      	movs	r0, #0
 8001546:	f001 ff43 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800154a:	2000      	movs	r0, #0
 800154c:	f001 ff40 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001550:	2000      	movs	r0, #0
 8001552:	f001 ff3d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001556:	2000      	movs	r0, #0
 8001558:	f001 ff3a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800155c:	2000      	movs	r0, #0
 800155e:	f001 ff37 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001562:	2000      	movs	r0, #0
 8001564:	f001 ff34 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001568:	2000      	movs	r0, #0
 800156a:	f001 ff31 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800156e:	2000      	movs	r0, #0
 8001570:	f001 ff2e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001574:	2000      	movs	r0, #0
 8001576:	f001 ff2b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800157a:	2000      	movs	r0, #0
 800157c:	f001 ff28 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001580:	2000      	movs	r0, #0
 8001582:	f001 ff25 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001586:	2000      	movs	r0, #0
 8001588:	f001 ff22 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 800158c:	20e0      	movs	r0, #224	; 0xe0
 800158e:	f001 ff33 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8001592:	2016      	movs	r0, #22
 8001594:	f001 ff1c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f001 ff19 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1C);
 800159e:	201c      	movs	r0, #28
 80015a0:	f001 ff16 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f001 ff13 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x21);
 80015aa:	2021      	movs	r0, #33	; 0x21
 80015ac:	f001 ff10 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f001 ff0d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x36);
 80015b6:	2036      	movs	r0, #54	; 0x36
 80015b8:	f001 ff0a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015bc:	2000      	movs	r0, #0
 80015be:	f001 ff07 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x46);
 80015c2:	2046      	movs	r0, #70	; 0x46
 80015c4:	f001 ff04 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f001 ff01 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x52);
 80015ce:	2052      	movs	r0, #82	; 0x52
 80015d0:	f001 fefe 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f001 fefb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x64);
 80015da:	2064      	movs	r0, #100	; 0x64
 80015dc:	f001 fef8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f001 fef5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x7A);
 80015e6:	207a      	movs	r0, #122	; 0x7a
 80015e8:	f001 fef2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f001 feef 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x8B);
 80015f2:	208b      	movs	r0, #139	; 0x8b
 80015f4:	f001 feec 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f001 fee9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x99);
 80015fe:	2099      	movs	r0, #153	; 0x99
 8001600:	f001 fee6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001604:	2000      	movs	r0, #0
 8001606:	f001 fee3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA8);
 800160a:	20a8      	movs	r0, #168	; 0xa8
 800160c:	f001 fee0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001610:	2000      	movs	r0, #0
 8001612:	f001 fedd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xB9);
 8001616:	20b9      	movs	r0, #185	; 0xb9
 8001618:	f001 feda 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800161c:	2000      	movs	r0, #0
 800161e:	f001 fed7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001622:	20c4      	movs	r0, #196	; 0xc4
 8001624:	f001 fed4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001628:	2000      	movs	r0, #0
 800162a:	f001 fed1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xCA);
 800162e:	20ca      	movs	r0, #202	; 0xca
 8001630:	f001 fece 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001634:	2000      	movs	r0, #0
 8001636:	f001 fecb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD2);
 800163a:	20d2      	movs	r0, #210	; 0xd2
 800163c:	f001 fec8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001640:	2000      	movs	r0, #0
 8001642:	f001 fec5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD9);
 8001646:	20d9      	movs	r0, #217	; 0xd9
 8001648:	f001 fec2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800164c:	2000      	movs	r0, #0
 800164e:	f001 febf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xE0);
 8001652:	20e0      	movs	r0, #224	; 0xe0
 8001654:	f001 febc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001658:	2000      	movs	r0, #0
 800165a:	f001 feb9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800165e:	20f3      	movs	r0, #243	; 0xf3
 8001660:	f001 feb6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001664:	2000      	movs	r0, #0
 8001666:	f001 feb3 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 800166a:	20e1      	movs	r0, #225	; 0xe1
 800166c:	f001 fec4 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8001670:	2016      	movs	r0, #22
 8001672:	f001 fead 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001676:	2000      	movs	r0, #0
 8001678:	f001 feaa 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1C);
 800167c:	201c      	movs	r0, #28
 800167e:	f001 fea7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001682:	2000      	movs	r0, #0
 8001684:	f001 fea4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x22);
 8001688:	2022      	movs	r0, #34	; 0x22
 800168a:	f001 fea1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800168e:	2000      	movs	r0, #0
 8001690:	f001 fe9e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x36);
 8001694:	2036      	movs	r0, #54	; 0x36
 8001696:	f001 fe9b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800169a:	2000      	movs	r0, #0
 800169c:	f001 fe98 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x45);
 80016a0:	2045      	movs	r0, #69	; 0x45
 80016a2:	f001 fe95 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f001 fe92 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x52);
 80016ac:	2052      	movs	r0, #82	; 0x52
 80016ae:	f001 fe8f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f001 fe8c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x64);
 80016b8:	2064      	movs	r0, #100	; 0x64
 80016ba:	f001 fe89 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016be:	2000      	movs	r0, #0
 80016c0:	f001 fe86 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x7A);
 80016c4:	207a      	movs	r0, #122	; 0x7a
 80016c6:	f001 fe83 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f001 fe80 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x8B);
 80016d0:	208b      	movs	r0, #139	; 0x8b
 80016d2:	f001 fe7d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f001 fe7a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x99);
 80016dc:	2099      	movs	r0, #153	; 0x99
 80016de:	f001 fe77 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f001 fe74 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA8);
 80016e8:	20a8      	movs	r0, #168	; 0xa8
 80016ea:	f001 fe71 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f001 fe6e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xB9);
 80016f4:	20b9      	movs	r0, #185	; 0xb9
 80016f6:	f001 fe6b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f001 fe68 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001700:	20c4      	movs	r0, #196	; 0xc4
 8001702:	f001 fe65 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001706:	2000      	movs	r0, #0
 8001708:	f001 fe62 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xCA);
 800170c:	20ca      	movs	r0, #202	; 0xca
 800170e:	f001 fe5f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001712:	2000      	movs	r0, #0
 8001714:	f001 fe5c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD2);
 8001718:	20d2      	movs	r0, #210	; 0xd2
 800171a:	f001 fe59 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800171e:	2000      	movs	r0, #0
 8001720:	f001 fe56 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD8);
 8001724:	20d8      	movs	r0, #216	; 0xd8
 8001726:	f001 fe53 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800172a:	2000      	movs	r0, #0
 800172c:	f001 fe50 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xE0);
 8001730:	20e0      	movs	r0, #224	; 0xe0
 8001732:	f001 fe4d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001736:	2000      	movs	r0, #0
 8001738:	f001 fe4a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800173c:	20f3      	movs	r0, #243	; 0xf3
 800173e:	f001 fe47 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001742:	2000      	movs	r0, #0
 8001744:	f001 fe44 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE2);
 8001748:	20e2      	movs	r0, #226	; 0xe2
 800174a:	f001 fe55 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x05);
 800174e:	2005      	movs	r0, #5
 8001750:	f001 fe3e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001754:	2000      	movs	r0, #0
 8001756:	f001 fe3b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0B);
 800175a:	200b      	movs	r0, #11
 800175c:	f001 fe38 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001760:	2000      	movs	r0, #0
 8001762:	f001 fe35 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1B);
 8001766:	201b      	movs	r0, #27
 8001768:	f001 fe32 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800176c:	2000      	movs	r0, #0
 800176e:	f001 fe2f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x34);
 8001772:	2034      	movs	r0, #52	; 0x34
 8001774:	f001 fe2c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001778:	2000      	movs	r0, #0
 800177a:	f001 fe29 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x44);
 800177e:	2044      	movs	r0, #68	; 0x44
 8001780:	f001 fe26 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001784:	2000      	movs	r0, #0
 8001786:	f001 fe23 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x4F);
 800178a:	204f      	movs	r0, #79	; 0x4f
 800178c:	f001 fe20 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001790:	2000      	movs	r0, #0
 8001792:	f001 fe1d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x61);
 8001796:	2061      	movs	r0, #97	; 0x61
 8001798:	f001 fe1a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800179c:	2000      	movs	r0, #0
 800179e:	f001 fe17 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x79);
 80017a2:	2079      	movs	r0, #121	; 0x79
 80017a4:	f001 fe14 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f001 fe11 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x88);
 80017ae:	2088      	movs	r0, #136	; 0x88
 80017b0:	f001 fe0e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f001 fe0b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x97);
 80017ba:	2097      	movs	r0, #151	; 0x97
 80017bc:	f001 fe08 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f001 fe05 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA6);
 80017c6:	20a6      	movs	r0, #166	; 0xa6
 80017c8:	f001 fe02 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 fdff 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xB7);
 80017d2:	20b7      	movs	r0, #183	; 0xb7
 80017d4:	f001 fdfc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017d8:	2000      	movs	r0, #0
 80017da:	f001 fdf9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xC2);
 80017de:	20c2      	movs	r0, #194	; 0xc2
 80017e0:	f001 fdf6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f001 fdf3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xC7);
 80017ea:	20c7      	movs	r0, #199	; 0xc7
 80017ec:	f001 fdf0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f001 fded 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD1);
 80017f6:	20d1      	movs	r0, #209	; 0xd1
 80017f8:	f001 fdea 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f001 fde7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD6);
 8001802:	20d6      	movs	r0, #214	; 0xd6
 8001804:	f001 fde4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f001 fde1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xDD);
 800180e:	20dd      	movs	r0, #221	; 0xdd
 8001810:	f001 fdde 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001814:	2000      	movs	r0, #0
 8001816:	f001 fddb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800181a:	20f3      	movs	r0, #243	; 0xf3
 800181c:	f001 fdd8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001820:	2000      	movs	r0, #0
 8001822:	f001 fdd5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xE3);
 8001826:	20e3      	movs	r0, #227	; 0xe3
 8001828:	f001 fde6 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x05);
 800182c:	2005      	movs	r0, #5
 800182e:	f001 fdcf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001832:	2000      	movs	r0, #0
 8001834:	f001 fdcc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA);
 8001838:	200a      	movs	r0, #10
 800183a:	f001 fdc9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800183e:	2000      	movs	r0, #0
 8001840:	f001 fdc6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1C);
 8001844:	201c      	movs	r0, #28
 8001846:	f001 fdc3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800184a:	2000      	movs	r0, #0
 800184c:	f001 fdc0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x33);
 8001850:	2033      	movs	r0, #51	; 0x33
 8001852:	f001 fdbd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001856:	2000      	movs	r0, #0
 8001858:	f001 fdba 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x44);
 800185c:	2044      	movs	r0, #68	; 0x44
 800185e:	f001 fdb7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001862:	2000      	movs	r0, #0
 8001864:	f001 fdb4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x50);
 8001868:	2050      	movs	r0, #80	; 0x50
 800186a:	f001 fdb1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800186e:	2000      	movs	r0, #0
 8001870:	f001 fdae 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x62);
 8001874:	2062      	movs	r0, #98	; 0x62
 8001876:	f001 fdab 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800187a:	2000      	movs	r0, #0
 800187c:	f001 fda8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x78);
 8001880:	2078      	movs	r0, #120	; 0x78
 8001882:	f001 fda5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001886:	2000      	movs	r0, #0
 8001888:	f001 fda2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x88);
 800188c:	2088      	movs	r0, #136	; 0x88
 800188e:	f001 fd9f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001892:	2000      	movs	r0, #0
 8001894:	f001 fd9c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x97);
 8001898:	2097      	movs	r0, #151	; 0x97
 800189a:	f001 fd99 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800189e:	2000      	movs	r0, #0
 80018a0:	f001 fd96 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA6);
 80018a4:	20a6      	movs	r0, #166	; 0xa6
 80018a6:	f001 fd93 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f001 fd90 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xB7);
 80018b0:	20b7      	movs	r0, #183	; 0xb7
 80018b2:	f001 fd8d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f001 fd8a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xC2);
 80018bc:	20c2      	movs	r0, #194	; 0xc2
 80018be:	f001 fd87 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f001 fd84 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xC7);
 80018c8:	20c7      	movs	r0, #199	; 0xc7
 80018ca:	f001 fd81 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f001 fd7e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD1);
 80018d4:	20d1      	movs	r0, #209	; 0xd1
 80018d6:	f001 fd7b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018da:	2000      	movs	r0, #0
 80018dc:	f001 fd78 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD5);
 80018e0:	20d5      	movs	r0, #213	; 0xd5
 80018e2:	f001 fd75 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f001 fd72 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xDD);
 80018ec:	20dd      	movs	r0, #221	; 0xdd
 80018ee:	f001 fd6f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f001 fd6c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80018f8:	20f3      	movs	r0, #243	; 0xf3
 80018fa:	f001 fd69 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018fe:	2000      	movs	r0, #0
 8001900:	f001 fd66 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE4);
 8001904:	20e4      	movs	r0, #228	; 0xe4
 8001906:	f001 fd77 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);
 800190a:	2001      	movs	r0, #1
 800190c:	f001 fd60 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001910:	2000      	movs	r0, #0
 8001912:	f001 fd5d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8001916:	2001      	movs	r0, #1
 8001918:	f001 fd5a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800191c:	2000      	movs	r0, #0
 800191e:	f001 fd57 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x02);
 8001922:	2002      	movs	r0, #2
 8001924:	f001 fd54 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001928:	2000      	movs	r0, #0
 800192a:	f001 fd51 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2A);
 800192e:	202a      	movs	r0, #42	; 0x2a
 8001930:	f001 fd4e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001934:	2000      	movs	r0, #0
 8001936:	f001 fd4b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3C);
 800193a:	203c      	movs	r0, #60	; 0x3c
 800193c:	f001 fd48 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001940:	2000      	movs	r0, #0
 8001942:	f001 fd45 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x4B);
 8001946:	204b      	movs	r0, #75	; 0x4b
 8001948:	f001 fd42 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800194c:	2000      	movs	r0, #0
 800194e:	f001 fd3f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001952:	205d      	movs	r0, #93	; 0x5d
 8001954:	f001 fd3c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001958:	2000      	movs	r0, #0
 800195a:	f001 fd39 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x74);
 800195e:	2074      	movs	r0, #116	; 0x74
 8001960:	f001 fd36 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001964:	2000      	movs	r0, #0
 8001966:	f001 fd33 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x84);
 800196a:	2084      	movs	r0, #132	; 0x84
 800196c:	f001 fd30 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001970:	2000      	movs	r0, #0
 8001972:	f001 fd2d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x93);
 8001976:	2093      	movs	r0, #147	; 0x93
 8001978:	f001 fd2a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800197c:	2000      	movs	r0, #0
 800197e:	f001 fd27 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001982:	20a2      	movs	r0, #162	; 0xa2
 8001984:	f001 fd24 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001988:	2000      	movs	r0, #0
 800198a:	f001 fd21 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xB3);
 800198e:	20b3      	movs	r0, #179	; 0xb3
 8001990:	f001 fd1e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001994:	2000      	movs	r0, #0
 8001996:	f001 fd1b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xBE);
 800199a:	20be      	movs	r0, #190	; 0xbe
 800199c:	f001 fd18 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f001 fd15 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xC4);
 80019a6:	20c4      	movs	r0, #196	; 0xc4
 80019a8:	f001 fd12 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f001 fd0f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xCD);
 80019b2:	20cd      	movs	r0, #205	; 0xcd
 80019b4:	f001 fd0c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f001 fd09 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD3);
 80019be:	20d3      	movs	r0, #211	; 0xd3
 80019c0:	f001 fd06 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f001 fd03 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xDD);
 80019ca:	20dd      	movs	r0, #221	; 0xdd
 80019cc:	f001 fd00 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f001 fcfd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80019d6:	20f3      	movs	r0, #243	; 0xf3
 80019d8:	f001 fcfa 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019dc:	2000      	movs	r0, #0
 80019de:	f001 fcf7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xE5);
 80019e2:	20e5      	movs	r0, #229	; 0xe5
 80019e4:	f001 fd08 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f001 fcf1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f001 fcee 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f001 fceb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f001 fce8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x02);
 8001a00:	2002      	movs	r0, #2
 8001a02:	f001 fce5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f001 fce2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001a0c:	2029      	movs	r0, #41	; 0x29
 8001a0e:	f001 fcdf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f001 fcdc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001a18:	203c      	movs	r0, #60	; 0x3c
 8001a1a:	f001 fcd9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f001 fcd6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x4B);
 8001a24:	204b      	movs	r0, #75	; 0x4b
 8001a26:	f001 fcd3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f001 fcd0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001a30:	205d      	movs	r0, #93	; 0x5d
 8001a32:	f001 fccd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f001 fcca 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x74);
 8001a3c:	2074      	movs	r0, #116	; 0x74
 8001a3e:	f001 fcc7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f001 fcc4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x84);
 8001a48:	2084      	movs	r0, #132	; 0x84
 8001a4a:	f001 fcc1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f001 fcbe 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x93);
 8001a54:	2093      	movs	r0, #147	; 0x93
 8001a56:	f001 fcbb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f001 fcb8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001a60:	20a2      	movs	r0, #162	; 0xa2
 8001a62:	f001 fcb5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f001 fcb2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xB3);
 8001a6c:	20b3      	movs	r0, #179	; 0xb3
 8001a6e:	f001 fcaf 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f001 fcac 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xBE);
 8001a78:	20be      	movs	r0, #190	; 0xbe
 8001a7a:	f001 fca9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f001 fca6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8001a84:	20c4      	movs	r0, #196	; 0xc4
 8001a86:	f001 fca3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f001 fca0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xCD);
 8001a90:	20cd      	movs	r0, #205	; 0xcd
 8001a92:	f001 fc9d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f001 fc9a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xD3);
 8001a9c:	20d3      	movs	r0, #211	; 0xd3
 8001a9e:	f001 fc97 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f001 fc94 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8001aa8:	20dc      	movs	r0, #220	; 0xdc
 8001aaa:	f001 fc91 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f001 fc8e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001ab4:	20f3      	movs	r0, #243	; 0xf3
 8001ab6:	f001 fc8b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f001 fc88 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8001ac0:	20e6      	movs	r0, #230	; 0xe6
 8001ac2:	f001 fc99 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x11);
 8001ac6:	2011      	movs	r0, #17
 8001ac8:	f001 fc82 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f001 fc7f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x34);
 8001ad2:	2034      	movs	r0, #52	; 0x34
 8001ad4:	f001 fc7c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f001 fc79 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x56);
 8001ade:	2056      	movs	r0, #86	; 0x56
 8001ae0:	f001 fc76 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f001 fc73 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x76);
 8001aea:	2076      	movs	r0, #118	; 0x76
 8001aec:	f001 fc70 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f001 fc6d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x77);
 8001af6:	2077      	movs	r0, #119	; 0x77
 8001af8:	f001 fc6a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f001 fc67 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001b02:	2066      	movs	r0, #102	; 0x66
 8001b04:	f001 fc64 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f001 fc61 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001b0e:	2088      	movs	r0, #136	; 0x88
 8001b10:	f001 fc5e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f001 fc5b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001b1a:	2099      	movs	r0, #153	; 0x99
 8001b1c:	f001 fc58 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b20:	2000      	movs	r0, #0
 8001b22:	f001 fc55 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8001b26:	20bb      	movs	r0, #187	; 0xbb
 8001b28:	f001 fc52 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f001 fc4f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001b32:	2099      	movs	r0, #153	; 0x99
 8001b34:	f001 fc4c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f001 fc49 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001b3e:	2066      	movs	r0, #102	; 0x66
 8001b40:	f001 fc46 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f001 fc43 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001b4a:	2055      	movs	r0, #85	; 0x55
 8001b4c:	f001 fc40 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f001 fc3d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001b56:	2055      	movs	r0, #85	; 0x55
 8001b58:	f001 fc3a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f001 fc37 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x45);
 8001b62:	2045      	movs	r0, #69	; 0x45
 8001b64:	f001 fc34 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f001 fc31 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x43);
 8001b6e:	2043      	movs	r0, #67	; 0x43
 8001b70:	f001 fc2e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f001 fc2b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001b7a:	2044      	movs	r0, #68	; 0x44
 8001b7c:	f001 fc28 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f001 fc25 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE7);
 8001b86:	20e7      	movs	r0, #231	; 0xe7
 8001b88:	f001 fc36 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8001b8c:	2032      	movs	r0, #50	; 0x32
 8001b8e:	f001 fc1f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f001 fc1c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001b98:	2055      	movs	r0, #85	; 0x55
 8001b9a:	f001 fc19 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f001 fc16 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x76);
 8001ba4:	2076      	movs	r0, #118	; 0x76
 8001ba6:	f001 fc13 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f001 fc10 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001bb0:	2066      	movs	r0, #102	; 0x66
 8001bb2:	f001 fc0d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f001 fc0a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x67);
 8001bbc:	2067      	movs	r0, #103	; 0x67
 8001bbe:	f001 fc07 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f001 fc04 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x67);
 8001bc8:	2067      	movs	r0, #103	; 0x67
 8001bca:	f001 fc01 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f001 fbfe 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x87);
 8001bd4:	2087      	movs	r0, #135	; 0x87
 8001bd6:	f001 fbfb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f001 fbf8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001be0:	2099      	movs	r0, #153	; 0x99
 8001be2:	f001 fbf5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f001 fbf2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8001bec:	20bb      	movs	r0, #187	; 0xbb
 8001bee:	f001 fbef 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f001 fbec 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001bf8:	2099      	movs	r0, #153	; 0x99
 8001bfa:	f001 fbe9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f001 fbe6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x77);
 8001c04:	2077      	movs	r0, #119	; 0x77
 8001c06:	f001 fbe3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f001 fbe0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001c10:	2044      	movs	r0, #68	; 0x44
 8001c12:	f001 fbdd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f001 fbda 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x56);
 8001c1c:	2056      	movs	r0, #86	; 0x56
 8001c1e:	f001 fbd7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f001 fbd4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x23);
 8001c28:	2023      	movs	r0, #35	; 0x23
 8001c2a:	f001 fbd1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f001 fbce 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x33);
 8001c34:	2033      	movs	r0, #51	; 0x33
 8001c36:	f001 fbcb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f001 fbc8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x45);
 8001c40:	2045      	movs	r0, #69	; 0x45
 8001c42:	f001 fbc5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f001 fbc2 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8001c4c:	20e8      	movs	r0, #232	; 0xe8
 8001c4e:	f001 fbd3 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f001 fbbc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f001 fbb9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001c5e:	2099      	movs	r0, #153	; 0x99
 8001c60:	f001 fbb6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f001 fbb3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x87);
 8001c6a:	2087      	movs	r0, #135	; 0x87
 8001c6c:	f001 fbb0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f001 fbad 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001c76:	2088      	movs	r0, #136	; 0x88
 8001c78:	f001 fbaa 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f001 fba7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x77);
 8001c82:	2077      	movs	r0, #119	; 0x77
 8001c84:	f001 fba4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f001 fba1 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001c8e:	2066      	movs	r0, #102	; 0x66
 8001c90:	f001 fb9e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f001 fb9b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001c9a:	2088      	movs	r0, #136	; 0x88
 8001c9c:	f001 fb98 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f001 fb95 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xAA);
 8001ca6:	20aa      	movs	r0, #170	; 0xaa
 8001ca8:	f001 fb92 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f001 fb8f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8001cb2:	20bb      	movs	r0, #187	; 0xbb
 8001cb4:	f001 fb8c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f001 fb89 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001cbe:	2099      	movs	r0, #153	; 0x99
 8001cc0:	f001 fb86 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f001 fb83 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001cca:	2066      	movs	r0, #102	; 0x66
 8001ccc:	f001 fb80 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f001 fb7d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001cd6:	2055      	movs	r0, #85	; 0x55
 8001cd8:	f001 fb7a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f001 fb77 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001ce2:	2055      	movs	r0, #85	; 0x55
 8001ce4:	f001 fb74 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f001 fb71 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001cee:	2044      	movs	r0, #68	; 0x44
 8001cf0:	f001 fb6e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f001 fb6b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001cfa:	2044      	movs	r0, #68	; 0x44
 8001cfc:	f001 fb68 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f001 fb65 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001d06:	2055      	movs	r0, #85	; 0x55
 8001d08:	f001 fb62 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f001 fb5f 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE9);
 8001d12:	20e9      	movs	r0, #233	; 0xe9
 8001d14:	f001 fb70 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8001d18:	20aa      	movs	r0, #170	; 0xaa
 8001d1a:	f001 fb59 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f001 fb56 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f001 fb53 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f001 fb50 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x00);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f001 fb61 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8001d36:	20aa      	movs	r0, #170	; 0xaa
 8001d38:	f001 fb4a 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xCF);
 8001d3c:	20cf      	movs	r0, #207	; 0xcf
 8001d3e:	f001 fb5b 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f001 fb44 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f001 fb41 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f001 fb3e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f001 fb3b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f001 fb38 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f001 fb35 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f001 fb32 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f001 fb2f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f001 fb2c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f001 fb29 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f001 fb26 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f001 fb23 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f001 fb20 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f001 fb1d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f001 fb1a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f001 fb17 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f001 fb14 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001da8:	20f0      	movs	r0, #240	; 0xf0
 8001daa:	f001 fb25 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f001 fb0e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x50);
 8001db4:	2050      	movs	r0, #80	; 0x50
 8001db6:	f001 fb0b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f001 fb08 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f001 fb05 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f001 fb02 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF3);
 8001dcc:	20f3      	movs	r0, #243	; 0xf3
 8001dce:	f001 fb13 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f001 fafc 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF9);
 8001dd8:	20f9      	movs	r0, #249	; 0xf9
 8001dda:	f001 fb0d 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x06);
 8001dde:	2006      	movs	r0, #6
 8001de0:	f001 faf6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001de4:	2010      	movs	r0, #16
 8001de6:	f001 faf3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001dea:	2029      	movs	r0, #41	; 0x29
 8001dec:	f001 faf0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f001 faed 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8001df6:	203a      	movs	r0, #58	; 0x3a
 8001df8:	f001 fafe 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 8001dfc:	2055      	movs	r0, #85	; 0x55
 8001dfe:	f001 fae7 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x11);
 8001e02:	2011      	movs	r0, #17
 8001e04:	f001 faf8 	bl	80033f8 <lcd_wr_regno>
    HAL_Delay(100);
 8001e08:	2064      	movs	r0, #100	; 0x64
 8001e0a:	f003 fa13 	bl	8005234 <HAL_Delay>
    lcd_wr_regno(0x29);
 8001e0e:	2029      	movs	r0, #41	; 0x29
 8001e10:	f001 faf2 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_regno(0x35);
 8001e14:	2035      	movs	r0, #53	; 0x35
 8001e16:	f001 faef 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f001 fad8 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x51);
 8001e20:	2051      	movs	r0, #81	; 0x51
 8001e22:	f001 fae9 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8001e26:	20ff      	movs	r0, #255	; 0xff
 8001e28:	f001 fad2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0x53);
 8001e2c:	2053      	movs	r0, #83	; 0x53
 8001e2e:	f001 fae3 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x2C);
 8001e32:	202c      	movs	r0, #44	; 0x2c
 8001e34:	f001 facc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0x55);
 8001e38:	2055      	movs	r0, #85	; 0x55
 8001e3a:	f001 fadd 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x82);
 8001e3e:	2082      	movs	r0, #130	; 0x82
 8001e40:	f001 fac6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0x2c);
 8001e44:	202c      	movs	r0, #44	; 0x2c
 8001e46:	f001 fad7 	bl	80033f8 <lcd_wr_regno>
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <lcd_ex_st7796_reginit>:
 * @brief  ST7796 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7796_reginit(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8001e52:	2011      	movs	r0, #17
 8001e54:	f001 fad0 	bl	80033f8 <lcd_wr_regno>

    HAL_Delay(120);
 8001e58:	2078      	movs	r0, #120	; 0x78
 8001e5a:	f003 f9eb 	bl	8005234 <HAL_Delay>

    lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
 8001e5e:	2036      	movs	r0, #54	; 0x36
 8001e60:	f001 faca 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8001e64:	2048      	movs	r0, #72	; 0x48
 8001e66:	f001 fab3 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8001e6a:	203a      	movs	r0, #58	; 0x3a
 8001e6c:	f001 fac4 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8001e70:	2055      	movs	r0, #85	; 0x55
 8001e72:	f001 faad 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001e76:	20f0      	movs	r0, #240	; 0xf0
 8001e78:	f001 fabe 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xC3);
 8001e7c:	20c3      	movs	r0, #195	; 0xc3
 8001e7e:	f001 faa7 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001e82:	20f0      	movs	r0, #240	; 0xf0
 8001e84:	f001 fab8 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x96);
 8001e88:	2096      	movs	r0, #150	; 0x96
 8001e8a:	f001 faa1 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8001e8e:	20b4      	movs	r0, #180	; 0xb4
 8001e90:	f001 fab2 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001e94:	2001      	movs	r0, #1
 8001e96:	f001 fa9b 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB6); /* Display Function Control */
 8001e9a:	20b6      	movs	r0, #182	; 0xb6
 8001e9c:	f001 faac 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	f001 fa95 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001ea6:	20a2      	movs	r0, #162	; 0xa2
 8001ea8:	f001 fa92 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8001eac:	20b7      	movs	r0, #183	; 0xb7
 8001eae:	f001 faa3 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xC6);
 8001eb2:	20c6      	movs	r0, #198	; 0xc6
 8001eb4:	f001 fa8c 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB9);
 8001eb8:	20b9      	movs	r0, #185	; 0xb9
 8001eba:	f001 fa9d 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	f001 fa86 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xE0);
 8001ec4:	20e0      	movs	r0, #224	; 0xe0
 8001ec6:	f001 fa83 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8001eca:	20c0      	movs	r0, #192	; 0xc0
 8001ecc:	f001 fa94 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8001ed0:	2080      	movs	r0, #128	; 0x80
 8001ed2:	f001 fa7d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x16);
 8001ed6:	2016      	movs	r0, #22
 8001ed8:	f001 fa7a 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 8001edc:	20c1      	movs	r0, #193	; 0xc1
 8001ede:	f001 fa8b 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x19);
 8001ee2:	2019      	movs	r0, #25
 8001ee4:	f001 fa74 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001ee8:	20c2      	movs	r0, #194	; 0xc2
 8001eea:	f001 fa85 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xA7);
 8001eee:	20a7      	movs	r0, #167	; 0xa7
 8001ef0:	f001 fa6e 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 8001ef4:	20c5      	movs	r0, #197	; 0xc5
 8001ef6:	f001 fa7f 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8001efa:	2016      	movs	r0, #22
 8001efc:	f001 fa68 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8001f00:	20e8      	movs	r0, #232	; 0xe8
 8001f02:	f001 fa79 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x40);
 8001f06:	2040      	movs	r0, #64	; 0x40
 8001f08:	f001 fa62 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x8A);
 8001f0c:	208a      	movs	r0, #138	; 0x8a
 8001f0e:	f001 fa5f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f001 fa5c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f001 fa59 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001f1e:	2029      	movs	r0, #41	; 0x29
 8001f20:	f001 fa56 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x19);
 8001f24:	2019      	movs	r0, #25
 8001f26:	f001 fa53 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xA5);
 8001f2a:	20a5      	movs	r0, #165	; 0xa5
 8001f2c:	f001 fa50 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x33);
 8001f30:	2033      	movs	r0, #51	; 0x33
 8001f32:	f001 fa4d 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8001f36:	20e0      	movs	r0, #224	; 0xe0
 8001f38:	f001 fa5e 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8001f3c:	20f0      	movs	r0, #240	; 0xf0
 8001f3e:	f001 fa47 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x07);
 8001f42:	2007      	movs	r0, #7
 8001f44:	f001 fa44 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8001f48:	200d      	movs	r0, #13
 8001f4a:	f001 fa41 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x04);
 8001f4e:	2004      	movs	r0, #4
 8001f50:	f001 fa3e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x05);
 8001f54:	2005      	movs	r0, #5
 8001f56:	f001 fa3b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001f5a:	2014      	movs	r0, #20
 8001f5c:	f001 fa38 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x36);
 8001f60:	2036      	movs	r0, #54	; 0x36
 8001f62:	f001 fa35 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x54);
 8001f66:	2054      	movs	r0, #84	; 0x54
 8001f68:	f001 fa32 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x4C);
 8001f6c:	204c      	movs	r0, #76	; 0x4c
 8001f6e:	f001 fa2f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x38);
 8001f72:	2038      	movs	r0, #56	; 0x38
 8001f74:	f001 fa2c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x13);
 8001f78:	2013      	movs	r0, #19
 8001f7a:	f001 fa29 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001f7e:	2014      	movs	r0, #20
 8001f80:	f001 fa26 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2E);
 8001f84:	202e      	movs	r0, #46	; 0x2e
 8001f86:	f001 fa23 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x34);
 8001f8a:	2034      	movs	r0, #52	; 0x34
 8001f8c:	f001 fa20 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 8001f90:	20e1      	movs	r0, #225	; 0xe1
 8001f92:	f001 fa31 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8001f96:	20f0      	movs	r0, #240	; 0xf0
 8001f98:	f001 fa1a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001f9c:	2010      	movs	r0, #16
 8001f9e:	f001 fa17 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001fa2:	2014      	movs	r0, #20
 8001fa4:	f001 fa14 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0E);
 8001fa8:	200e      	movs	r0, #14
 8001faa:	f001 fa11 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8001fae:	200c      	movs	r0, #12
 8001fb0:	f001 fa0e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x08);
 8001fb4:	2008      	movs	r0, #8
 8001fb6:	f001 fa0b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x35);
 8001fba:	2035      	movs	r0, #53	; 0x35
 8001fbc:	f001 fa08 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001fc0:	2044      	movs	r0, #68	; 0x44
 8001fc2:	f001 fa05 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x4C);
 8001fc6:	204c      	movs	r0, #76	; 0x4c
 8001fc8:	f001 fa02 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x26);
 8001fcc:	2026      	movs	r0, #38	; 0x26
 8001fce:	f001 f9ff 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001fd2:	2010      	movs	r0, #16
 8001fd4:	f001 f9fc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x12);
 8001fd8:	2012      	movs	r0, #18
 8001fda:	f001 f9f9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001fde:	202c      	movs	r0, #44	; 0x2c
 8001fe0:	f001 f9f6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x32);
 8001fe4:	2032      	movs	r0, #50	; 0x32
 8001fe6:	f001 f9f3 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001fea:	20f0      	movs	r0, #240	; 0xf0
 8001fec:	f001 fa04 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8001ff0:	203c      	movs	r0, #60	; 0x3c
 8001ff2:	f001 f9ed 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001ff6:	20f0      	movs	r0, #240	; 0xf0
 8001ff8:	f001 f9fe 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x69);
 8001ffc:	2069      	movs	r0, #105	; 0x69
 8001ffe:	f001 f9e7 	bl	80033d0 <lcd_wr_data>

    HAL_Delay(120);
 8002002:	2078      	movs	r0, #120	; 0x78
 8002004:	f003 f916 	bl	8005234 <HAL_Delay>

    lcd_wr_regno(0x21);
 8002008:	2021      	movs	r0, #33	; 0x21
 800200a:	f001 f9f5 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_regno(0x29);
 800200e:	2029      	movs	r0, #41	; 0x29
 8002010:	f001 f9f2 	bl	80033f8 <lcd_wr_regno>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <lcd_ex_nt35510_reginit>:
 * @brief  NT35510 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35510_reginit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 800201c:	2155      	movs	r1, #85	; 0x55
 800201e:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002022:	f001 f9fd 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8002026:	21aa      	movs	r1, #170	; 0xaa
 8002028:	f24f 0001 	movw	r0, #61441	; 0xf001
 800202c:	f001 f9f8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8002030:	2152      	movs	r1, #82	; 0x52
 8002032:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002036:	f001 f9f3 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 800203a:	2108      	movs	r1, #8
 800203c:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002040:	f001 f9ee 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 8002044:	2101      	movs	r1, #1
 8002046:	f24f 0004 	movw	r0, #61444	; 0xf004
 800204a:	f001 f9e9 	bl	8003420 <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 800204e:	210d      	movs	r1, #13
 8002050:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002054:	f001 f9e4 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 8002058:	210d      	movs	r1, #13
 800205a:	f24b 0001 	movw	r0, #45057	; 0xb001
 800205e:	f001 f9df 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 8002062:	210d      	movs	r1, #13
 8002064:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002068:	f001 f9da 	bl	8003420 <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 800206c:	2134      	movs	r1, #52	; 0x34
 800206e:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002072:	f001 f9d5 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 8002076:	2134      	movs	r1, #52	; 0x34
 8002078:	f24b 6001 	movw	r0, #46593	; 0xb601
 800207c:	f001 f9d0 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 8002080:	2134      	movs	r1, #52	; 0x34
 8002082:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002086:	f001 f9cb 	bl	8003420 <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 800208a:	210d      	movs	r1, #13
 800208c:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002090:	f001 f9c6 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 8002094:	210d      	movs	r1, #13
 8002096:	f24b 1001 	movw	r0, #45313	; 0xb101
 800209a:	f001 f9c1 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 800209e:	210d      	movs	r1, #13
 80020a0:	f24b 1002 	movw	r0, #45314	; 0xb102
 80020a4:	f001 f9bc 	bl	8003420 <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 80020a8:	2134      	movs	r1, #52	; 0x34
 80020aa:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80020ae:	f001 f9b7 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 80020b2:	2134      	movs	r1, #52	; 0x34
 80020b4:	f24b 7001 	movw	r0, #46849	; 0xb701
 80020b8:	f001 f9b2 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 80020bc:	2134      	movs	r1, #52	; 0x34
 80020be:	f24b 7002 	movw	r0, #46850	; 0xb702
 80020c2:	f001 f9ad 	bl	8003420 <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 80020c6:	2100      	movs	r1, #0
 80020c8:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80020cc:	f001 f9a8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 80020d0:	2100      	movs	r1, #0
 80020d2:	f24b 2001 	movw	r0, #45569	; 0xb201
 80020d6:	f001 f9a3 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 80020da:	2100      	movs	r1, #0
 80020dc:	f24b 2002 	movw	r0, #45570	; 0xb202
 80020e0:	f001 f99e 	bl	8003420 <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 80020e4:	2124      	movs	r1, #36	; 0x24
 80020e6:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80020ea:	f001 f999 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 80020ee:	2124      	movs	r1, #36	; 0x24
 80020f0:	f64b 0001 	movw	r0, #47105	; 0xb801
 80020f4:	f001 f994 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 80020f8:	2124      	movs	r1, #36	; 0x24
 80020fa:	f64b 0002 	movw	r0, #47106	; 0xb802
 80020fe:	f001 f98f 	bl	8003420 <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 8002102:	2101      	movs	r1, #1
 8002104:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8002108:	f001 f98a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 800210c:	210f      	movs	r1, #15
 800210e:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8002112:	f001 f985 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 8002116:	210f      	movs	r1, #15
 8002118:	f24b 3001 	movw	r0, #45825	; 0xb301
 800211c:	f001 f980 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 8002120:	210f      	movs	r1, #15
 8002122:	f24b 3002 	movw	r0, #45826	; 0xb302
 8002126:	f001 f97b 	bl	8003420 <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 800212a:	2134      	movs	r1, #52	; 0x34
 800212c:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8002130:	f001 f976 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 8002134:	2134      	movs	r1, #52	; 0x34
 8002136:	f64b 1001 	movw	r0, #47361	; 0xb901
 800213a:	f001 f971 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 800213e:	2134      	movs	r1, #52	; 0x34
 8002140:	f64b 1002 	movw	r0, #47362	; 0xb902
 8002144:	f001 f96c 	bl	8003420 <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 8002148:	2108      	movs	r1, #8
 800214a:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800214e:	f001 f967 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 8002152:	2108      	movs	r1, #8
 8002154:	f24b 5001 	movw	r0, #46337	; 0xb501
 8002158:	f001 f962 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 800215c:	2108      	movs	r1, #8
 800215e:	f24b 5002 	movw	r0, #46338	; 0xb502
 8002162:	f001 f95d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 8002166:	2103      	movs	r1, #3
 8002168:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 800216c:	f001 f958 	bl	8003420 <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 8002170:	2124      	movs	r1, #36	; 0x24
 8002172:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8002176:	f001 f953 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 800217a:	2124      	movs	r1, #36	; 0x24
 800217c:	f64b 2001 	movw	r0, #47617	; 0xba01
 8002180:	f001 f94e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 8002184:	2124      	movs	r1, #36	; 0x24
 8002186:	f64b 2002 	movw	r0, #47618	; 0xba02
 800218a:	f001 f949 	bl	8003420 <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 800218e:	2100      	movs	r1, #0
 8002190:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002194:	f001 f944 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 8002198:	2178      	movs	r1, #120	; 0x78
 800219a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800219e:	f001 f93f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 80021a2:	2100      	movs	r1, #0
 80021a4:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80021a8:	f001 f93a 	bl	8003420 <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 80021ac:	2100      	movs	r1, #0
 80021ae:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80021b2:	f001 f935 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 80021b6:	2178      	movs	r1, #120	; 0x78
 80021b8:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80021bc:	f001 f930 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 80021c0:	2100      	movs	r1, #0
 80021c2:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80021c6:	f001 f92b 	bl	8003420 <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 80021ca:	2100      	movs	r1, #0
 80021cc:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80021d0:	f001 f926 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 80021d4:	2164      	movs	r1, #100	; 0x64
 80021d6:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80021da:	f001 f921 	bl	8003420 <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 80021de:	2100      	movs	r1, #0
 80021e0:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80021e4:	f001 f91c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 80021e8:	2133      	movs	r1, #51	; 0x33
 80021ea:	f24d 1001 	movw	r0, #53505	; 0xd101
 80021ee:	f001 f917 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 80021f2:	2100      	movs	r1, #0
 80021f4:	f24d 1002 	movw	r0, #53506	; 0xd102
 80021f8:	f001 f912 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 80021fc:	2134      	movs	r1, #52	; 0x34
 80021fe:	f24d 1003 	movw	r0, #53507	; 0xd103
 8002202:	f001 f90d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 8002206:	2100      	movs	r1, #0
 8002208:	f24d 1004 	movw	r0, #53508	; 0xd104
 800220c:	f001 f908 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 8002210:	213a      	movs	r1, #58	; 0x3a
 8002212:	f24d 1005 	movw	r0, #53509	; 0xd105
 8002216:	f001 f903 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 800221a:	2100      	movs	r1, #0
 800221c:	f24d 1006 	movw	r0, #53510	; 0xd106
 8002220:	f001 f8fe 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 8002224:	214a      	movs	r1, #74	; 0x4a
 8002226:	f24d 1007 	movw	r0, #53511	; 0xd107
 800222a:	f001 f8f9 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 800222e:	2100      	movs	r1, #0
 8002230:	f24d 1008 	movw	r0, #53512	; 0xd108
 8002234:	f001 f8f4 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 8002238:	215c      	movs	r1, #92	; 0x5c
 800223a:	f24d 1009 	movw	r0, #53513	; 0xd109
 800223e:	f001 f8ef 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 8002242:	2100      	movs	r1, #0
 8002244:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8002248:	f001 f8ea 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 800224c:	2181      	movs	r1, #129	; 0x81
 800224e:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8002252:	f001 f8e5 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 8002256:	2100      	movs	r1, #0
 8002258:	f24d 100c 	movw	r0, #53516	; 0xd10c
 800225c:	f001 f8e0 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 8002260:	21a6      	movs	r1, #166	; 0xa6
 8002262:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8002266:	f001 f8db 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 800226a:	2100      	movs	r1, #0
 800226c:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8002270:	f001 f8d6 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 8002274:	21e5      	movs	r1, #229	; 0xe5
 8002276:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800227a:	f001 f8d1 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 800227e:	2101      	movs	r1, #1
 8002280:	f24d 1010 	movw	r0, #53520	; 0xd110
 8002284:	f001 f8cc 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 8002288:	2113      	movs	r1, #19
 800228a:	f24d 1011 	movw	r0, #53521	; 0xd111
 800228e:	f001 f8c7 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 8002292:	2101      	movs	r1, #1
 8002294:	f24d 1012 	movw	r0, #53522	; 0xd112
 8002298:	f001 f8c2 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 800229c:	2154      	movs	r1, #84	; 0x54
 800229e:	f24d 1013 	movw	r0, #53523	; 0xd113
 80022a2:	f001 f8bd 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 80022a6:	2101      	movs	r1, #1
 80022a8:	f24d 1014 	movw	r0, #53524	; 0xd114
 80022ac:	f001 f8b8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 80022b0:	2182      	movs	r1, #130	; 0x82
 80022b2:	f24d 1015 	movw	r0, #53525	; 0xd115
 80022b6:	f001 f8b3 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 80022ba:	2101      	movs	r1, #1
 80022bc:	f24d 1016 	movw	r0, #53526	; 0xd116
 80022c0:	f001 f8ae 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 80022c4:	21ca      	movs	r1, #202	; 0xca
 80022c6:	f24d 1017 	movw	r0, #53527	; 0xd117
 80022ca:	f001 f8a9 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 80022ce:	2102      	movs	r1, #2
 80022d0:	f24d 1018 	movw	r0, #53528	; 0xd118
 80022d4:	f001 f8a4 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 80022d8:	2100      	movs	r1, #0
 80022da:	f24d 1019 	movw	r0, #53529	; 0xd119
 80022de:	f001 f89f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 80022e2:	2102      	movs	r1, #2
 80022e4:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80022e8:	f001 f89a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 80022ec:	2101      	movs	r1, #1
 80022ee:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80022f2:	f001 f895 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 80022f6:	2102      	movs	r1, #2
 80022f8:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80022fc:	f001 f890 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 8002300:	2134      	movs	r1, #52	; 0x34
 8002302:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8002306:	f001 f88b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 800230a:	2102      	movs	r1, #2
 800230c:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8002310:	f001 f886 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 8002314:	2167      	movs	r1, #103	; 0x67
 8002316:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800231a:	f001 f881 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 800231e:	2102      	movs	r1, #2
 8002320:	f24d 1020 	movw	r0, #53536	; 0xd120
 8002324:	f001 f87c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 8002328:	2184      	movs	r1, #132	; 0x84
 800232a:	f24d 1021 	movw	r0, #53537	; 0xd121
 800232e:	f001 f877 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 8002332:	2102      	movs	r1, #2
 8002334:	f24d 1022 	movw	r0, #53538	; 0xd122
 8002338:	f001 f872 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 800233c:	21a4      	movs	r1, #164	; 0xa4
 800233e:	f24d 1023 	movw	r0, #53539	; 0xd123
 8002342:	f001 f86d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 8002346:	2102      	movs	r1, #2
 8002348:	f24d 1024 	movw	r0, #53540	; 0xd124
 800234c:	f001 f868 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 8002350:	21b7      	movs	r1, #183	; 0xb7
 8002352:	f24d 1025 	movw	r0, #53541	; 0xd125
 8002356:	f001 f863 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 800235a:	2102      	movs	r1, #2
 800235c:	f24d 1026 	movw	r0, #53542	; 0xd126
 8002360:	f001 f85e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 8002364:	21cf      	movs	r1, #207	; 0xcf
 8002366:	f24d 1027 	movw	r0, #53543	; 0xd127
 800236a:	f001 f859 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 800236e:	2102      	movs	r1, #2
 8002370:	f24d 1028 	movw	r0, #53544	; 0xd128
 8002374:	f001 f854 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 8002378:	21de      	movs	r1, #222	; 0xde
 800237a:	f24d 1029 	movw	r0, #53545	; 0xd129
 800237e:	f001 f84f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 8002382:	2102      	movs	r1, #2
 8002384:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8002388:	f001 f84a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 800238c:	21f2      	movs	r1, #242	; 0xf2
 800238e:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8002392:	f001 f845 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 8002396:	2102      	movs	r1, #2
 8002398:	f24d 102c 	movw	r0, #53548	; 0xd12c
 800239c:	f001 f840 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 80023a0:	21fe      	movs	r1, #254	; 0xfe
 80023a2:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80023a6:	f001 f83b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 80023aa:	2103      	movs	r1, #3
 80023ac:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80023b0:	f001 f836 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 80023b4:	2110      	movs	r1, #16
 80023b6:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80023ba:	f001 f831 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 80023be:	2103      	movs	r1, #3
 80023c0:	f24d 1030 	movw	r0, #53552	; 0xd130
 80023c4:	f001 f82c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 80023c8:	2133      	movs	r1, #51	; 0x33
 80023ca:	f24d 1031 	movw	r0, #53553	; 0xd131
 80023ce:	f001 f827 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 80023d2:	2103      	movs	r1, #3
 80023d4:	f24d 1032 	movw	r0, #53554	; 0xd132
 80023d8:	f001 f822 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 80023dc:	216d      	movs	r1, #109	; 0x6d
 80023de:	f24d 1033 	movw	r0, #53555	; 0xd133
 80023e2:	f001 f81d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 80023e6:	2100      	movs	r1, #0
 80023e8:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80023ec:	f001 f818 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 80023f0:	2133      	movs	r1, #51	; 0x33
 80023f2:	f24d 2001 	movw	r0, #53761	; 0xd201
 80023f6:	f001 f813 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 80023fa:	2100      	movs	r1, #0
 80023fc:	f24d 2002 	movw	r0, #53762	; 0xd202
 8002400:	f001 f80e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 8002404:	2134      	movs	r1, #52	; 0x34
 8002406:	f24d 2003 	movw	r0, #53763	; 0xd203
 800240a:	f001 f809 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 800240e:	2100      	movs	r1, #0
 8002410:	f24d 2004 	movw	r0, #53764	; 0xd204
 8002414:	f001 f804 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 8002418:	213a      	movs	r1, #58	; 0x3a
 800241a:	f24d 2005 	movw	r0, #53765	; 0xd205
 800241e:	f000 ffff 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 8002422:	2100      	movs	r1, #0
 8002424:	f24d 2006 	movw	r0, #53766	; 0xd206
 8002428:	f000 fffa 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 800242c:	214a      	movs	r1, #74	; 0x4a
 800242e:	f24d 2007 	movw	r0, #53767	; 0xd207
 8002432:	f000 fff5 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 8002436:	2100      	movs	r1, #0
 8002438:	f24d 2008 	movw	r0, #53768	; 0xd208
 800243c:	f000 fff0 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 8002440:	215c      	movs	r1, #92	; 0x5c
 8002442:	f24d 2009 	movw	r0, #53769	; 0xd209
 8002446:	f000 ffeb 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 800244a:	2100      	movs	r1, #0
 800244c:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8002450:	f000 ffe6 	bl	8003420 <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 8002454:	2181      	movs	r1, #129	; 0x81
 8002456:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800245a:	f000 ffe1 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 800245e:	2100      	movs	r1, #0
 8002460:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8002464:	f000 ffdc 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 8002468:	21a6      	movs	r1, #166	; 0xa6
 800246a:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800246e:	f000 ffd7 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 8002472:	2100      	movs	r1, #0
 8002474:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8002478:	f000 ffd2 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 800247c:	21e5      	movs	r1, #229	; 0xe5
 800247e:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8002482:	f000 ffcd 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 8002486:	2101      	movs	r1, #1
 8002488:	f24d 2010 	movw	r0, #53776	; 0xd210
 800248c:	f000 ffc8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 8002490:	2113      	movs	r1, #19
 8002492:	f24d 2011 	movw	r0, #53777	; 0xd211
 8002496:	f000 ffc3 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 800249a:	2101      	movs	r1, #1
 800249c:	f24d 2012 	movw	r0, #53778	; 0xd212
 80024a0:	f000 ffbe 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 80024a4:	2154      	movs	r1, #84	; 0x54
 80024a6:	f24d 2013 	movw	r0, #53779	; 0xd213
 80024aa:	f000 ffb9 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 80024ae:	2101      	movs	r1, #1
 80024b0:	f24d 2014 	movw	r0, #53780	; 0xd214
 80024b4:	f000 ffb4 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 80024b8:	2182      	movs	r1, #130	; 0x82
 80024ba:	f24d 2015 	movw	r0, #53781	; 0xd215
 80024be:	f000 ffaf 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 80024c2:	2101      	movs	r1, #1
 80024c4:	f24d 2016 	movw	r0, #53782	; 0xd216
 80024c8:	f000 ffaa 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 80024cc:	21ca      	movs	r1, #202	; 0xca
 80024ce:	f24d 2017 	movw	r0, #53783	; 0xd217
 80024d2:	f000 ffa5 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 80024d6:	2102      	movs	r1, #2
 80024d8:	f24d 2018 	movw	r0, #53784	; 0xd218
 80024dc:	f000 ffa0 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 80024e0:	2100      	movs	r1, #0
 80024e2:	f24d 2019 	movw	r0, #53785	; 0xd219
 80024e6:	f000 ff9b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 80024ea:	2102      	movs	r1, #2
 80024ec:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80024f0:	f000 ff96 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 80024f4:	2101      	movs	r1, #1
 80024f6:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80024fa:	f000 ff91 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 80024fe:	2102      	movs	r1, #2
 8002500:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8002504:	f000 ff8c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 8002508:	2134      	movs	r1, #52	; 0x34
 800250a:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800250e:	f000 ff87 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 8002512:	2102      	movs	r1, #2
 8002514:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8002518:	f000 ff82 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 800251c:	2167      	movs	r1, #103	; 0x67
 800251e:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8002522:	f000 ff7d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 8002526:	2102      	movs	r1, #2
 8002528:	f24d 2020 	movw	r0, #53792	; 0xd220
 800252c:	f000 ff78 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 8002530:	2184      	movs	r1, #132	; 0x84
 8002532:	f24d 2021 	movw	r0, #53793	; 0xd221
 8002536:	f000 ff73 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 800253a:	2102      	movs	r1, #2
 800253c:	f24d 2022 	movw	r0, #53794	; 0xd222
 8002540:	f000 ff6e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 8002544:	21a4      	movs	r1, #164	; 0xa4
 8002546:	f24d 2023 	movw	r0, #53795	; 0xd223
 800254a:	f000 ff69 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 800254e:	2102      	movs	r1, #2
 8002550:	f24d 2024 	movw	r0, #53796	; 0xd224
 8002554:	f000 ff64 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 8002558:	21b7      	movs	r1, #183	; 0xb7
 800255a:	f24d 2025 	movw	r0, #53797	; 0xd225
 800255e:	f000 ff5f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 8002562:	2102      	movs	r1, #2
 8002564:	f24d 2026 	movw	r0, #53798	; 0xd226
 8002568:	f000 ff5a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 800256c:	21cf      	movs	r1, #207	; 0xcf
 800256e:	f24d 2027 	movw	r0, #53799	; 0xd227
 8002572:	f000 ff55 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 8002576:	2102      	movs	r1, #2
 8002578:	f24d 2028 	movw	r0, #53800	; 0xd228
 800257c:	f000 ff50 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 8002580:	21de      	movs	r1, #222	; 0xde
 8002582:	f24d 2029 	movw	r0, #53801	; 0xd229
 8002586:	f000 ff4b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 800258a:	2102      	movs	r1, #2
 800258c:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8002590:	f000 ff46 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 8002594:	21f2      	movs	r1, #242	; 0xf2
 8002596:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800259a:	f000 ff41 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 800259e:	2102      	movs	r1, #2
 80025a0:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80025a4:	f000 ff3c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 80025a8:	21fe      	movs	r1, #254	; 0xfe
 80025aa:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80025ae:	f000 ff37 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 80025b2:	2103      	movs	r1, #3
 80025b4:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80025b8:	f000 ff32 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 80025bc:	2110      	movs	r1, #16
 80025be:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80025c2:	f000 ff2d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 80025c6:	2103      	movs	r1, #3
 80025c8:	f24d 2030 	movw	r0, #53808	; 0xd230
 80025cc:	f000 ff28 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 80025d0:	2133      	movs	r1, #51	; 0x33
 80025d2:	f24d 2031 	movw	r0, #53809	; 0xd231
 80025d6:	f000 ff23 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 80025da:	2103      	movs	r1, #3
 80025dc:	f24d 2032 	movw	r0, #53810	; 0xd232
 80025e0:	f000 ff1e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 80025e4:	216d      	movs	r1, #109	; 0x6d
 80025e6:	f24d 2033 	movw	r0, #53811	; 0xd233
 80025ea:	f000 ff19 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 80025ee:	2100      	movs	r1, #0
 80025f0:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80025f4:	f000 ff14 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 80025f8:	2133      	movs	r1, #51	; 0x33
 80025fa:	f24d 3001 	movw	r0, #54017	; 0xd301
 80025fe:	f000 ff0f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 8002602:	2100      	movs	r1, #0
 8002604:	f24d 3002 	movw	r0, #54018	; 0xd302
 8002608:	f000 ff0a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 800260c:	2134      	movs	r1, #52	; 0x34
 800260e:	f24d 3003 	movw	r0, #54019	; 0xd303
 8002612:	f000 ff05 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 8002616:	2100      	movs	r1, #0
 8002618:	f24d 3004 	movw	r0, #54020	; 0xd304
 800261c:	f000 ff00 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 8002620:	213a      	movs	r1, #58	; 0x3a
 8002622:	f24d 3005 	movw	r0, #54021	; 0xd305
 8002626:	f000 fefb 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 800262a:	2100      	movs	r1, #0
 800262c:	f24d 3006 	movw	r0, #54022	; 0xd306
 8002630:	f000 fef6 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 8002634:	214a      	movs	r1, #74	; 0x4a
 8002636:	f24d 3007 	movw	r0, #54023	; 0xd307
 800263a:	f000 fef1 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 800263e:	2100      	movs	r1, #0
 8002640:	f24d 3008 	movw	r0, #54024	; 0xd308
 8002644:	f000 feec 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 8002648:	215c      	movs	r1, #92	; 0x5c
 800264a:	f24d 3009 	movw	r0, #54025	; 0xd309
 800264e:	f000 fee7 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 8002652:	2100      	movs	r1, #0
 8002654:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8002658:	f000 fee2 	bl	8003420 <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 800265c:	2181      	movs	r1, #129	; 0x81
 800265e:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8002662:	f000 fedd 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 8002666:	2100      	movs	r1, #0
 8002668:	f24d 300c 	movw	r0, #54028	; 0xd30c
 800266c:	f000 fed8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 8002670:	21a6      	movs	r1, #166	; 0xa6
 8002672:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8002676:	f000 fed3 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 800267a:	2100      	movs	r1, #0
 800267c:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8002680:	f000 fece 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 8002684:	21e5      	movs	r1, #229	; 0xe5
 8002686:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800268a:	f000 fec9 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 800268e:	2101      	movs	r1, #1
 8002690:	f24d 3010 	movw	r0, #54032	; 0xd310
 8002694:	f000 fec4 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 8002698:	2113      	movs	r1, #19
 800269a:	f24d 3011 	movw	r0, #54033	; 0xd311
 800269e:	f000 febf 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 80026a2:	2101      	movs	r1, #1
 80026a4:	f24d 3012 	movw	r0, #54034	; 0xd312
 80026a8:	f000 feba 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 80026ac:	2154      	movs	r1, #84	; 0x54
 80026ae:	f24d 3013 	movw	r0, #54035	; 0xd313
 80026b2:	f000 feb5 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 80026b6:	2101      	movs	r1, #1
 80026b8:	f24d 3014 	movw	r0, #54036	; 0xd314
 80026bc:	f000 feb0 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 80026c0:	2182      	movs	r1, #130	; 0x82
 80026c2:	f24d 3015 	movw	r0, #54037	; 0xd315
 80026c6:	f000 feab 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 80026ca:	2101      	movs	r1, #1
 80026cc:	f24d 3016 	movw	r0, #54038	; 0xd316
 80026d0:	f000 fea6 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 80026d4:	21ca      	movs	r1, #202	; 0xca
 80026d6:	f24d 3017 	movw	r0, #54039	; 0xd317
 80026da:	f000 fea1 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 80026de:	2102      	movs	r1, #2
 80026e0:	f24d 3018 	movw	r0, #54040	; 0xd318
 80026e4:	f000 fe9c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 80026e8:	2100      	movs	r1, #0
 80026ea:	f24d 3019 	movw	r0, #54041	; 0xd319
 80026ee:	f000 fe97 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 80026f2:	2102      	movs	r1, #2
 80026f4:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80026f8:	f000 fe92 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 80026fc:	2101      	movs	r1, #1
 80026fe:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8002702:	f000 fe8d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 8002706:	2102      	movs	r1, #2
 8002708:	f24d 301c 	movw	r0, #54044	; 0xd31c
 800270c:	f000 fe88 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 8002710:	2134      	movs	r1, #52	; 0x34
 8002712:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8002716:	f000 fe83 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 800271a:	2102      	movs	r1, #2
 800271c:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8002720:	f000 fe7e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 8002724:	2167      	movs	r1, #103	; 0x67
 8002726:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800272a:	f000 fe79 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 800272e:	2102      	movs	r1, #2
 8002730:	f24d 3020 	movw	r0, #54048	; 0xd320
 8002734:	f000 fe74 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 8002738:	2184      	movs	r1, #132	; 0x84
 800273a:	f24d 3021 	movw	r0, #54049	; 0xd321
 800273e:	f000 fe6f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 8002742:	2102      	movs	r1, #2
 8002744:	f24d 3022 	movw	r0, #54050	; 0xd322
 8002748:	f000 fe6a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 800274c:	21a4      	movs	r1, #164	; 0xa4
 800274e:	f24d 3023 	movw	r0, #54051	; 0xd323
 8002752:	f000 fe65 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 8002756:	2102      	movs	r1, #2
 8002758:	f24d 3024 	movw	r0, #54052	; 0xd324
 800275c:	f000 fe60 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 8002760:	21b7      	movs	r1, #183	; 0xb7
 8002762:	f24d 3025 	movw	r0, #54053	; 0xd325
 8002766:	f000 fe5b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 800276a:	2102      	movs	r1, #2
 800276c:	f24d 3026 	movw	r0, #54054	; 0xd326
 8002770:	f000 fe56 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 8002774:	21cf      	movs	r1, #207	; 0xcf
 8002776:	f24d 3027 	movw	r0, #54055	; 0xd327
 800277a:	f000 fe51 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 800277e:	2102      	movs	r1, #2
 8002780:	f24d 3028 	movw	r0, #54056	; 0xd328
 8002784:	f000 fe4c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 8002788:	21de      	movs	r1, #222	; 0xde
 800278a:	f24d 3029 	movw	r0, #54057	; 0xd329
 800278e:	f000 fe47 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 8002792:	2102      	movs	r1, #2
 8002794:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8002798:	f000 fe42 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 800279c:	21f2      	movs	r1, #242	; 0xf2
 800279e:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80027a2:	f000 fe3d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 80027a6:	2102      	movs	r1, #2
 80027a8:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80027ac:	f000 fe38 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 80027b0:	21fe      	movs	r1, #254	; 0xfe
 80027b2:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80027b6:	f000 fe33 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 80027ba:	2103      	movs	r1, #3
 80027bc:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80027c0:	f000 fe2e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 80027c4:	2110      	movs	r1, #16
 80027c6:	f24d 302f 	movw	r0, #54063	; 0xd32f
 80027ca:	f000 fe29 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 80027ce:	2103      	movs	r1, #3
 80027d0:	f24d 3030 	movw	r0, #54064	; 0xd330
 80027d4:	f000 fe24 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 80027d8:	2133      	movs	r1, #51	; 0x33
 80027da:	f24d 3031 	movw	r0, #54065	; 0xd331
 80027de:	f000 fe1f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 80027e2:	2103      	movs	r1, #3
 80027e4:	f24d 3032 	movw	r0, #54066	; 0xd332
 80027e8:	f000 fe1a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 80027ec:	216d      	movs	r1, #109	; 0x6d
 80027ee:	f24d 3033 	movw	r0, #54067	; 0xd333
 80027f2:	f000 fe15 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 80027f6:	2100      	movs	r1, #0
 80027f8:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80027fc:	f000 fe10 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 8002800:	2133      	movs	r1, #51	; 0x33
 8002802:	f24d 4001 	movw	r0, #54273	; 0xd401
 8002806:	f000 fe0b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 800280a:	2100      	movs	r1, #0
 800280c:	f24d 4002 	movw	r0, #54274	; 0xd402
 8002810:	f000 fe06 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 8002814:	2134      	movs	r1, #52	; 0x34
 8002816:	f24d 4003 	movw	r0, #54275	; 0xd403
 800281a:	f000 fe01 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 800281e:	2100      	movs	r1, #0
 8002820:	f24d 4004 	movw	r0, #54276	; 0xd404
 8002824:	f000 fdfc 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 8002828:	213a      	movs	r1, #58	; 0x3a
 800282a:	f24d 4005 	movw	r0, #54277	; 0xd405
 800282e:	f000 fdf7 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 8002832:	2100      	movs	r1, #0
 8002834:	f24d 4006 	movw	r0, #54278	; 0xd406
 8002838:	f000 fdf2 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 800283c:	214a      	movs	r1, #74	; 0x4a
 800283e:	f24d 4007 	movw	r0, #54279	; 0xd407
 8002842:	f000 fded 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 8002846:	2100      	movs	r1, #0
 8002848:	f24d 4008 	movw	r0, #54280	; 0xd408
 800284c:	f000 fde8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 8002850:	215c      	movs	r1, #92	; 0x5c
 8002852:	f24d 4009 	movw	r0, #54281	; 0xd409
 8002856:	f000 fde3 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 800285a:	2100      	movs	r1, #0
 800285c:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8002860:	f000 fdde 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 8002864:	2181      	movs	r1, #129	; 0x81
 8002866:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800286a:	f000 fdd9 	bl	8003420 <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 800286e:	2100      	movs	r1, #0
 8002870:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8002874:	f000 fdd4 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 8002878:	21a6      	movs	r1, #166	; 0xa6
 800287a:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800287e:	f000 fdcf 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 8002882:	2100      	movs	r1, #0
 8002884:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8002888:	f000 fdca 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 800288c:	21e5      	movs	r1, #229	; 0xe5
 800288e:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8002892:	f000 fdc5 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 8002896:	2101      	movs	r1, #1
 8002898:	f24d 4010 	movw	r0, #54288	; 0xd410
 800289c:	f000 fdc0 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 80028a0:	2113      	movs	r1, #19
 80028a2:	f24d 4011 	movw	r0, #54289	; 0xd411
 80028a6:	f000 fdbb 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 80028aa:	2101      	movs	r1, #1
 80028ac:	f24d 4012 	movw	r0, #54290	; 0xd412
 80028b0:	f000 fdb6 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 80028b4:	2154      	movs	r1, #84	; 0x54
 80028b6:	f24d 4013 	movw	r0, #54291	; 0xd413
 80028ba:	f000 fdb1 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 80028be:	2101      	movs	r1, #1
 80028c0:	f24d 4014 	movw	r0, #54292	; 0xd414
 80028c4:	f000 fdac 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 80028c8:	2182      	movs	r1, #130	; 0x82
 80028ca:	f24d 4015 	movw	r0, #54293	; 0xd415
 80028ce:	f000 fda7 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 80028d2:	2101      	movs	r1, #1
 80028d4:	f24d 4016 	movw	r0, #54294	; 0xd416
 80028d8:	f000 fda2 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 80028dc:	21ca      	movs	r1, #202	; 0xca
 80028de:	f24d 4017 	movw	r0, #54295	; 0xd417
 80028e2:	f000 fd9d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 80028e6:	2102      	movs	r1, #2
 80028e8:	f24d 4018 	movw	r0, #54296	; 0xd418
 80028ec:	f000 fd98 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 80028f0:	2100      	movs	r1, #0
 80028f2:	f24d 4019 	movw	r0, #54297	; 0xd419
 80028f6:	f000 fd93 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 80028fa:	2102      	movs	r1, #2
 80028fc:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8002900:	f000 fd8e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 8002904:	2101      	movs	r1, #1
 8002906:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800290a:	f000 fd89 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 800290e:	2102      	movs	r1, #2
 8002910:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8002914:	f000 fd84 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 8002918:	2134      	movs	r1, #52	; 0x34
 800291a:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800291e:	f000 fd7f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 8002922:	2102      	movs	r1, #2
 8002924:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8002928:	f000 fd7a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 800292c:	2167      	movs	r1, #103	; 0x67
 800292e:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8002932:	f000 fd75 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 8002936:	2102      	movs	r1, #2
 8002938:	f24d 4020 	movw	r0, #54304	; 0xd420
 800293c:	f000 fd70 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 8002940:	2184      	movs	r1, #132	; 0x84
 8002942:	f24d 4021 	movw	r0, #54305	; 0xd421
 8002946:	f000 fd6b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 800294a:	2102      	movs	r1, #2
 800294c:	f24d 4022 	movw	r0, #54306	; 0xd422
 8002950:	f000 fd66 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 8002954:	21a4      	movs	r1, #164	; 0xa4
 8002956:	f24d 4023 	movw	r0, #54307	; 0xd423
 800295a:	f000 fd61 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 800295e:	2102      	movs	r1, #2
 8002960:	f24d 4024 	movw	r0, #54308	; 0xd424
 8002964:	f000 fd5c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 8002968:	21b7      	movs	r1, #183	; 0xb7
 800296a:	f24d 4025 	movw	r0, #54309	; 0xd425
 800296e:	f000 fd57 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 8002972:	2102      	movs	r1, #2
 8002974:	f24d 4026 	movw	r0, #54310	; 0xd426
 8002978:	f000 fd52 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 800297c:	21cf      	movs	r1, #207	; 0xcf
 800297e:	f24d 4027 	movw	r0, #54311	; 0xd427
 8002982:	f000 fd4d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 8002986:	2102      	movs	r1, #2
 8002988:	f24d 4028 	movw	r0, #54312	; 0xd428
 800298c:	f000 fd48 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 8002990:	21de      	movs	r1, #222	; 0xde
 8002992:	f24d 4029 	movw	r0, #54313	; 0xd429
 8002996:	f000 fd43 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 800299a:	2102      	movs	r1, #2
 800299c:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80029a0:	f000 fd3e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 80029a4:	21f2      	movs	r1, #242	; 0xf2
 80029a6:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80029aa:	f000 fd39 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 80029ae:	2102      	movs	r1, #2
 80029b0:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80029b4:	f000 fd34 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 80029b8:	21fe      	movs	r1, #254	; 0xfe
 80029ba:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80029be:	f000 fd2f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 80029c2:	2103      	movs	r1, #3
 80029c4:	f24d 402e 	movw	r0, #54318	; 0xd42e
 80029c8:	f000 fd2a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 80029cc:	2110      	movs	r1, #16
 80029ce:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80029d2:	f000 fd25 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 80029d6:	2103      	movs	r1, #3
 80029d8:	f24d 4030 	movw	r0, #54320	; 0xd430
 80029dc:	f000 fd20 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 80029e0:	2133      	movs	r1, #51	; 0x33
 80029e2:	f24d 4031 	movw	r0, #54321	; 0xd431
 80029e6:	f000 fd1b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 80029ea:	2103      	movs	r1, #3
 80029ec:	f24d 4032 	movw	r0, #54322	; 0xd432
 80029f0:	f000 fd16 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 80029f4:	216d      	movs	r1, #109	; 0x6d
 80029f6:	f24d 4033 	movw	r0, #54323	; 0xd433
 80029fa:	f000 fd11 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 80029fe:	2100      	movs	r1, #0
 8002a00:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8002a04:	f000 fd0c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 8002a08:	2133      	movs	r1, #51	; 0x33
 8002a0a:	f24d 5001 	movw	r0, #54529	; 0xd501
 8002a0e:	f000 fd07 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 8002a12:	2100      	movs	r1, #0
 8002a14:	f24d 5002 	movw	r0, #54530	; 0xd502
 8002a18:	f000 fd02 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 8002a1c:	2134      	movs	r1, #52	; 0x34
 8002a1e:	f24d 5003 	movw	r0, #54531	; 0xd503
 8002a22:	f000 fcfd 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 8002a26:	2100      	movs	r1, #0
 8002a28:	f24d 5004 	movw	r0, #54532	; 0xd504
 8002a2c:	f000 fcf8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 8002a30:	213a      	movs	r1, #58	; 0x3a
 8002a32:	f24d 5005 	movw	r0, #54533	; 0xd505
 8002a36:	f000 fcf3 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	f24d 5006 	movw	r0, #54534	; 0xd506
 8002a40:	f000 fcee 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 8002a44:	214a      	movs	r1, #74	; 0x4a
 8002a46:	f24d 5007 	movw	r0, #54535	; 0xd507
 8002a4a:	f000 fce9 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f24d 5008 	movw	r0, #54536	; 0xd508
 8002a54:	f000 fce4 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 8002a58:	215c      	movs	r1, #92	; 0x5c
 8002a5a:	f24d 5009 	movw	r0, #54537	; 0xd509
 8002a5e:	f000 fcdf 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 8002a62:	2100      	movs	r1, #0
 8002a64:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8002a68:	f000 fcda 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 8002a6c:	2181      	movs	r1, #129	; 0x81
 8002a6e:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8002a72:	f000 fcd5 	bl	8003420 <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 8002a76:	2100      	movs	r1, #0
 8002a78:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8002a7c:	f000 fcd0 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 8002a80:	21a6      	movs	r1, #166	; 0xa6
 8002a82:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8002a86:	f000 fccb 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8002a90:	f000 fcc6 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 8002a94:	21e5      	movs	r1, #229	; 0xe5
 8002a96:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8002a9a:	f000 fcc1 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	f24d 5010 	movw	r0, #54544	; 0xd510
 8002aa4:	f000 fcbc 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 8002aa8:	2113      	movs	r1, #19
 8002aaa:	f24d 5011 	movw	r0, #54545	; 0xd511
 8002aae:	f000 fcb7 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	f24d 5012 	movw	r0, #54546	; 0xd512
 8002ab8:	f000 fcb2 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 8002abc:	2154      	movs	r1, #84	; 0x54
 8002abe:	f24d 5013 	movw	r0, #54547	; 0xd513
 8002ac2:	f000 fcad 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	f24d 5014 	movw	r0, #54548	; 0xd514
 8002acc:	f000 fca8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 8002ad0:	2182      	movs	r1, #130	; 0x82
 8002ad2:	f24d 5015 	movw	r0, #54549	; 0xd515
 8002ad6:	f000 fca3 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 8002ada:	2101      	movs	r1, #1
 8002adc:	f24d 5016 	movw	r0, #54550	; 0xd516
 8002ae0:	f000 fc9e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 8002ae4:	21ca      	movs	r1, #202	; 0xca
 8002ae6:	f24d 5017 	movw	r0, #54551	; 0xd517
 8002aea:	f000 fc99 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 8002aee:	2102      	movs	r1, #2
 8002af0:	f24d 5018 	movw	r0, #54552	; 0xd518
 8002af4:	f000 fc94 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 8002af8:	2100      	movs	r1, #0
 8002afa:	f24d 5019 	movw	r0, #54553	; 0xd519
 8002afe:	f000 fc8f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 8002b02:	2102      	movs	r1, #2
 8002b04:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8002b08:	f000 fc8a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8002b12:	f000 fc85 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 8002b16:	2102      	movs	r1, #2
 8002b18:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8002b1c:	f000 fc80 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 8002b20:	2134      	movs	r1, #52	; 0x34
 8002b22:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8002b26:	f000 fc7b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8002b30:	f000 fc76 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 8002b34:	2167      	movs	r1, #103	; 0x67
 8002b36:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8002b3a:	f000 fc71 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 8002b3e:	2102      	movs	r1, #2
 8002b40:	f24d 5020 	movw	r0, #54560	; 0xd520
 8002b44:	f000 fc6c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 8002b48:	2184      	movs	r1, #132	; 0x84
 8002b4a:	f24d 5021 	movw	r0, #54561	; 0xd521
 8002b4e:	f000 fc67 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 8002b52:	2102      	movs	r1, #2
 8002b54:	f24d 5022 	movw	r0, #54562	; 0xd522
 8002b58:	f000 fc62 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 8002b5c:	21a4      	movs	r1, #164	; 0xa4
 8002b5e:	f24d 5023 	movw	r0, #54563	; 0xd523
 8002b62:	f000 fc5d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 8002b66:	2102      	movs	r1, #2
 8002b68:	f24d 5024 	movw	r0, #54564	; 0xd524
 8002b6c:	f000 fc58 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 8002b70:	21b7      	movs	r1, #183	; 0xb7
 8002b72:	f24d 5025 	movw	r0, #54565	; 0xd525
 8002b76:	f000 fc53 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	f24d 5026 	movw	r0, #54566	; 0xd526
 8002b80:	f000 fc4e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 8002b84:	21cf      	movs	r1, #207	; 0xcf
 8002b86:	f24d 5027 	movw	r0, #54567	; 0xd527
 8002b8a:	f000 fc49 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 8002b8e:	2102      	movs	r1, #2
 8002b90:	f24d 5028 	movw	r0, #54568	; 0xd528
 8002b94:	f000 fc44 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 8002b98:	21de      	movs	r1, #222	; 0xde
 8002b9a:	f24d 5029 	movw	r0, #54569	; 0xd529
 8002b9e:	f000 fc3f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8002ba8:	f000 fc3a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 8002bac:	21f2      	movs	r1, #242	; 0xf2
 8002bae:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8002bb2:	f000 fc35 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8002bbc:	f000 fc30 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 8002bc0:	21fe      	movs	r1, #254	; 0xfe
 8002bc2:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8002bc6:	f000 fc2b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 8002bca:	2103      	movs	r1, #3
 8002bcc:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8002bd0:	f000 fc26 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 8002bd4:	2110      	movs	r1, #16
 8002bd6:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8002bda:	f000 fc21 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 8002bde:	2103      	movs	r1, #3
 8002be0:	f24d 5030 	movw	r0, #54576	; 0xd530
 8002be4:	f000 fc1c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 8002be8:	2133      	movs	r1, #51	; 0x33
 8002bea:	f24d 5031 	movw	r0, #54577	; 0xd531
 8002bee:	f000 fc17 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	f24d 5032 	movw	r0, #54578	; 0xd532
 8002bf8:	f000 fc12 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 8002bfc:	216d      	movs	r1, #109	; 0x6d
 8002bfe:	f24d 5033 	movw	r0, #54579	; 0xd533
 8002c02:	f000 fc0d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 8002c06:	2100      	movs	r1, #0
 8002c08:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8002c0c:	f000 fc08 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 8002c10:	2133      	movs	r1, #51	; 0x33
 8002c12:	f24d 6001 	movw	r0, #54785	; 0xd601
 8002c16:	f000 fc03 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f24d 6002 	movw	r0, #54786	; 0xd602
 8002c20:	f000 fbfe 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 8002c24:	2134      	movs	r1, #52	; 0x34
 8002c26:	f24d 6003 	movw	r0, #54787	; 0xd603
 8002c2a:	f000 fbf9 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 8002c2e:	2100      	movs	r1, #0
 8002c30:	f24d 6004 	movw	r0, #54788	; 0xd604
 8002c34:	f000 fbf4 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 8002c38:	213a      	movs	r1, #58	; 0x3a
 8002c3a:	f24d 6005 	movw	r0, #54789	; 0xd605
 8002c3e:	f000 fbef 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 8002c42:	2100      	movs	r1, #0
 8002c44:	f24d 6006 	movw	r0, #54790	; 0xd606
 8002c48:	f000 fbea 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 8002c4c:	214a      	movs	r1, #74	; 0x4a
 8002c4e:	f24d 6007 	movw	r0, #54791	; 0xd607
 8002c52:	f000 fbe5 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 8002c56:	2100      	movs	r1, #0
 8002c58:	f24d 6008 	movw	r0, #54792	; 0xd608
 8002c5c:	f000 fbe0 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 8002c60:	215c      	movs	r1, #92	; 0x5c
 8002c62:	f24d 6009 	movw	r0, #54793	; 0xd609
 8002c66:	f000 fbdb 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8002c70:	f000 fbd6 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 8002c74:	2181      	movs	r1, #129	; 0x81
 8002c76:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8002c7a:	f000 fbd1 	bl	8003420 <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8002c84:	f000 fbcc 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 8002c88:	21a6      	movs	r1, #166	; 0xa6
 8002c8a:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8002c8e:	f000 fbc7 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 8002c92:	2100      	movs	r1, #0
 8002c94:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8002c98:	f000 fbc2 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 8002c9c:	21e5      	movs	r1, #229	; 0xe5
 8002c9e:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8002ca2:	f000 fbbd 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	f24d 6010 	movw	r0, #54800	; 0xd610
 8002cac:	f000 fbb8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 8002cb0:	2113      	movs	r1, #19
 8002cb2:	f24d 6011 	movw	r0, #54801	; 0xd611
 8002cb6:	f000 fbb3 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8002cba:	2101      	movs	r1, #1
 8002cbc:	f24d 6012 	movw	r0, #54802	; 0xd612
 8002cc0:	f000 fbae 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 8002cc4:	2154      	movs	r1, #84	; 0x54
 8002cc6:	f24d 6013 	movw	r0, #54803	; 0xd613
 8002cca:	f000 fba9 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	f24d 6014 	movw	r0, #54804	; 0xd614
 8002cd4:	f000 fba4 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 8002cd8:	2182      	movs	r1, #130	; 0x82
 8002cda:	f24d 6015 	movw	r0, #54805	; 0xd615
 8002cde:	f000 fb9f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	f24d 6016 	movw	r0, #54806	; 0xd616
 8002ce8:	f000 fb9a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 8002cec:	21ca      	movs	r1, #202	; 0xca
 8002cee:	f24d 6017 	movw	r0, #54807	; 0xd617
 8002cf2:	f000 fb95 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	f24d 6018 	movw	r0, #54808	; 0xd618
 8002cfc:	f000 fb90 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 8002d00:	2100      	movs	r1, #0
 8002d02:	f24d 6019 	movw	r0, #54809	; 0xd619
 8002d06:	f000 fb8b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8002d10:	f000 fb86 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 8002d14:	2101      	movs	r1, #1
 8002d16:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8002d1a:	f000 fb81 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 8002d1e:	2102      	movs	r1, #2
 8002d20:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8002d24:	f000 fb7c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 8002d28:	2134      	movs	r1, #52	; 0x34
 8002d2a:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8002d2e:	f000 fb77 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 8002d32:	2102      	movs	r1, #2
 8002d34:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8002d38:	f000 fb72 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 8002d3c:	2167      	movs	r1, #103	; 0x67
 8002d3e:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8002d42:	f000 fb6d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 8002d46:	2102      	movs	r1, #2
 8002d48:	f24d 6020 	movw	r0, #54816	; 0xd620
 8002d4c:	f000 fb68 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 8002d50:	2184      	movs	r1, #132	; 0x84
 8002d52:	f24d 6021 	movw	r0, #54817	; 0xd621
 8002d56:	f000 fb63 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	f24d 6022 	movw	r0, #54818	; 0xd622
 8002d60:	f000 fb5e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 8002d64:	21a4      	movs	r1, #164	; 0xa4
 8002d66:	f24d 6023 	movw	r0, #54819	; 0xd623
 8002d6a:	f000 fb59 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 8002d6e:	2102      	movs	r1, #2
 8002d70:	f24d 6024 	movw	r0, #54820	; 0xd624
 8002d74:	f000 fb54 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 8002d78:	21b7      	movs	r1, #183	; 0xb7
 8002d7a:	f24d 6025 	movw	r0, #54821	; 0xd625
 8002d7e:	f000 fb4f 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 8002d82:	2102      	movs	r1, #2
 8002d84:	f24d 6026 	movw	r0, #54822	; 0xd626
 8002d88:	f000 fb4a 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 8002d8c:	21cf      	movs	r1, #207	; 0xcf
 8002d8e:	f24d 6027 	movw	r0, #54823	; 0xd627
 8002d92:	f000 fb45 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 8002d96:	2102      	movs	r1, #2
 8002d98:	f24d 6028 	movw	r0, #54824	; 0xd628
 8002d9c:	f000 fb40 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 8002da0:	21de      	movs	r1, #222	; 0xde
 8002da2:	f24d 6029 	movw	r0, #54825	; 0xd629
 8002da6:	f000 fb3b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8002daa:	2102      	movs	r1, #2
 8002dac:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8002db0:	f000 fb36 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 8002db4:	21f2      	movs	r1, #242	; 0xf2
 8002db6:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8002dba:	f000 fb31 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8002dc4:	f000 fb2c 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 8002dc8:	21fe      	movs	r1, #254	; 0xfe
 8002dca:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8002dce:	f000 fb27 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8002dd8:	f000 fb22 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 8002ddc:	2110      	movs	r1, #16
 8002dde:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8002de2:	f000 fb1d 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 8002de6:	2103      	movs	r1, #3
 8002de8:	f24d 6030 	movw	r0, #54832	; 0xd630
 8002dec:	f000 fb18 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 8002df0:	2133      	movs	r1, #51	; 0x33
 8002df2:	f24d 6031 	movw	r0, #54833	; 0xd631
 8002df6:	f000 fb13 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 8002dfa:	2103      	movs	r1, #3
 8002dfc:	f24d 6032 	movw	r0, #54834	; 0xd632
 8002e00:	f000 fb0e 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 8002e04:	216d      	movs	r1, #109	; 0x6d
 8002e06:	f24d 6033 	movw	r0, #54835	; 0xd633
 8002e0a:	f000 fb09 	bl	8003420 <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 8002e0e:	2155      	movs	r1, #85	; 0x55
 8002e10:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002e14:	f000 fb04 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8002e18:	21aa      	movs	r1, #170	; 0xaa
 8002e1a:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002e1e:	f000 faff 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8002e22:	2152      	movs	r1, #82	; 0x52
 8002e24:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002e28:	f000 fafa 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002e32:	f000 faf5 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 8002e36:	2100      	movs	r1, #0
 8002e38:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002e3c:	f000 faf0 	bl	8003420 <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 8002e40:	21cc      	movs	r1, #204	; 0xcc
 8002e42:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002e46:	f000 faeb 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002e50:	f000 fae6 	bl	8003420 <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 8002e54:	2105      	movs	r1, #5
 8002e56:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002e5a:	f000 fae1 	bl	8003420 <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 8002e5e:	2170      	movs	r1, #112	; 0x70
 8002e60:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002e64:	f000 fadc 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 8002e68:	2170      	movs	r1, #112	; 0x70
 8002e6a:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002e6e:	f000 fad7 	bl	8003420 <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 8002e72:	2101      	movs	r1, #1
 8002e74:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002e78:	f000 fad2 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 8002e7c:	2103      	movs	r1, #3
 8002e7e:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002e82:	f000 facd 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 8002e86:	2103      	movs	r1, #3
 8002e88:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002e8c:	f000 fac8 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 8002e90:	2103      	movs	r1, #3
 8002e92:	f64b 0003 	movw	r0, #47107	; 0xb803
 8002e96:	f000 fac3 	bl	8003420 <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002ea0:	f000 fabe 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8002eaa:	f000 fab9 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002eb4:	f000 fab4 	bl	8003420 <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 8002eb8:	21d0      	movs	r1, #208	; 0xd0
 8002eba:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8002ebe:	f000 faaf 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	f64c 1001 	movw	r0, #51457	; 0xc901
 8002ec8:	f000 faaa 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 8002ecc:	2150      	movs	r1, #80	; 0x50
 8002ece:	f64c 1002 	movw	r0, #51458	; 0xc902
 8002ed2:	f000 faa5 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 8002ed6:	2150      	movs	r1, #80	; 0x50
 8002ed8:	f64c 1003 	movw	r0, #51459	; 0xc903
 8002edc:	f000 faa0 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 8002ee0:	2150      	movs	r1, #80	; 0x50
 8002ee2:	f64c 1004 	movw	r0, #51460	; 0xc904
 8002ee6:	f000 fa9b 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 8002eea:	2100      	movs	r1, #0
 8002eec:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8002ef0:	f000 fa96 	bl	8003420 <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8002ef4:	2155      	movs	r1, #85	; 0x55
 8002ef6:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8002efa:	f000 fa91 	bl	8003420 <lcd_write_reg>
    lcd_wr_regno(0x1100);
 8002efe:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8002f02:	f000 fa79 	bl	80033f8 <lcd_wr_regno>
    HAL_Delay(12);
 8002f06:	200c      	movs	r0, #12
 8002f08:	f002 f994 	bl	8005234 <HAL_Delay>
    lcd_wr_regno(0x2900);
 8002f0c:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8002f10:	f000 fa72 	bl	80033f8 <lcd_wr_regno>
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <lcd_ex_ili9806_reginit>:
 * @brief  ILI9806 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9806_reginit(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
 8002f1c:	20ff      	movs	r0, #255	; 0xff
 8002f1e:	f000 fa6b 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8002f22:	20ff      	movs	r0, #255	; 0xff
 8002f24:	f000 fa54 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x98);
 8002f28:	2098      	movs	r0, #152	; 0x98
 8002f2a:	f000 fa51 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x06);
 8002f2e:	2006      	movs	r0, #6
 8002f30:	f000 fa4e 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xBC); /* GIP 1 */
 8002f34:	20bc      	movs	r0, #188	; 0xbc
 8002f36:	f000 fa5f 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f000 fa48 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8002f40:	200f      	movs	r0, #15
 8002f42:	f000 fa45 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x61);
 8002f46:	2061      	movs	r0, #97	; 0x61
 8002f48:	f000 fa42 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002f4c:	20ff      	movs	r0, #255	; 0xff
 8002f4e:	f000 fa3f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f000 fa3c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f000 fa39 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0B);
 8002f5e:	200b      	movs	r0, #11
 8002f60:	f000 fa36 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x10);
 8002f64:	2010      	movs	r0, #16
 8002f66:	f000 fa33 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x37);
 8002f6a:	2037      	movs	r0, #55	; 0x37
 8002f6c:	f000 fa30 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x63);
 8002f70:	2063      	movs	r0, #99	; 0x63
 8002f72:	f000 fa2d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002f76:	20ff      	movs	r0, #255	; 0xff
 8002f78:	f000 fa2a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002f7c:	20ff      	movs	r0, #255	; 0xff
 8002f7e:	f000 fa27 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002f82:	2001      	movs	r0, #1
 8002f84:	f000 fa24 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f000 fa21 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f000 fa1e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f000 fa1b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002f9a:	20ff      	movs	r0, #255	; 0xff
 8002f9c:	f000 fa18 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x52);
 8002fa0:	2052      	movs	r0, #82	; 0x52
 8002fa2:	f000 fa15 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f000 fa12 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f000 fa0f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x40);
 8002fb2:	2040      	movs	r0, #64	; 0x40
 8002fb4:	f000 fa0c 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xBD); /* GIP 2 */
 8002fb8:	20bd      	movs	r0, #189	; 0xbd
 8002fba:	f000 fa1d 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f000 fa06 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x23);
 8002fc4:	2023      	movs	r0, #35	; 0x23
 8002fc6:	f000 fa03 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x45);
 8002fca:	2045      	movs	r0, #69	; 0x45
 8002fcc:	f000 fa00 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x67);
 8002fd0:	2067      	movs	r0, #103	; 0x67
 8002fd2:	f000 f9fd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f000 f9fa 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x23);
 8002fdc:	2023      	movs	r0, #35	; 0x23
 8002fde:	f000 f9f7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x45);
 8002fe2:	2045      	movs	r0, #69	; 0x45
 8002fe4:	f000 f9f4 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x67);
 8002fe8:	2067      	movs	r0, #103	; 0x67
 8002fea:	f000 f9f1 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* GIP 3 */
 8002fee:	20be      	movs	r0, #190	; 0xbe
 8002ff0:	f000 fa02 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 f9eb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f000 f9e8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xAB);
 8003000:	20ab      	movs	r0, #171	; 0xab
 8003002:	f000 f9e5 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x60);
 8003006:	2060      	movs	r0, #96	; 0x60
 8003008:	f000 f9e2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x22);
 800300c:	2022      	movs	r0, #34	; 0x22
 800300e:	f000 f9df 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x22);
 8003012:	2022      	movs	r0, #34	; 0x22
 8003014:	f000 f9dc 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x22);
 8003018:	2022      	movs	r0, #34	; 0x22
 800301a:	f000 f9d9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x22);
 800301e:	2022      	movs	r0, #34	; 0x22
 8003020:	f000 f9d6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x22);
 8003024:	2022      	movs	r0, #34	; 0x22
 8003026:	f000 f9d3 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xC7); /* VCOM Control */
 800302a:	20c7      	movs	r0, #199	; 0xc7
 800302c:	f000 f9e4 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x36);
 8003030:	2036      	movs	r0, #54	; 0x36
 8003032:	f000 f9cd 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
 8003036:	20ed      	movs	r0, #237	; 0xed
 8003038:	f000 f9de 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x7F);
 800303c:	207f      	movs	r0, #127	; 0x7f
 800303e:	f000 f9c7 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8003042:	200f      	movs	r0, #15
 8003044:	f000 f9c4 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
 8003048:	20c0      	movs	r0, #192	; 0xc0
 800304a:	f000 f9d5 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 800304e:	200f      	movs	r0, #15
 8003050:	f000 f9be 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0B);
 8003054:	200b      	movs	r0, #11
 8003056:	f000 f9bb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* VGH 15V,VGLO-10V */
 800305a:	200a      	movs	r0, #10
 800305c:	f000 f9b8 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
 8003060:	20fc      	movs	r0, #252	; 0xfc
 8003062:	f000 f9c9 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x08);
 8003066:	2008      	movs	r0, #8
 8003068:	f000 f9b2 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0XDF);
 800306c:	20df      	movs	r0, #223	; 0xdf
 800306e:	f000 f9c3 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f000 f9ac 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003078:	2000      	movs	r0, #0
 800307a:	f000 f9a9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f000 f9a6 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003084:	2000      	movs	r0, #0
 8003086:	f000 f9a3 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f000 f9a0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x20);
 8003090:	2020      	movs	r0, #32
 8003092:	f000 f99d 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
 8003096:	20f3      	movs	r0, #243	; 0xf3
 8003098:	f000 f9ae 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x74);
 800309c:	2074      	movs	r0, #116	; 0x74
 800309e:	f000 f997 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Inversion Type */
 80030a2:	20b4      	movs	r0, #180	; 0xb4
 80030a4:	f000 f9a8 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02 */
 80030a8:	2000      	movs	r0, #0
 80030aa:	f000 f991 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 80030ae:	2000      	movs	r0, #0
 80030b0:	f000 f98e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 80030b4:	2000      	movs	r0, #0
 80030b6:	f000 f98b 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF7); /* Resolution Control */
 80030ba:	20f7      	movs	r0, #247	; 0xf7
 80030bc:	f000 f99c 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x82);  /* 480*800 */
 80030c0:	2082      	movs	r0, #130	; 0x82
 80030c2:	f000 f985 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB1); /* FRAME RATE Setting */
 80030c6:	20b1      	movs	r0, #177	; 0xb1
 80030c8:	f000 f996 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f000 f97f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x13);
 80030d2:	2013      	movs	r0, #19
 80030d4:	f000 f97c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x13);
 80030d8:	2013      	movs	r0, #19
 80030da:	f000 f979 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
 80030de:	20f2      	movs	r0, #242	; 0xf2
 80030e0:	f000 f98a 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x80);
 80030e4:	2080      	movs	r0, #128	; 0x80
 80030e6:	f000 f973 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x04);
 80030ea:	2004      	movs	r0, #4
 80030ec:	f000 f970 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x40);
 80030f0:	2040      	movs	r0, #64	; 0x40
 80030f2:	f000 f96d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x28);
 80030f6:	2028      	movs	r0, #40	; 0x28
 80030f8:	f000 f96a 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
 80030fc:	20c1      	movs	r0, #193	; 0xc1
 80030fe:	f000 f97b 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x17);
 8003102:	2017      	movs	r0, #23
 8003104:	f000 f964 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMP */
 8003108:	2088      	movs	r0, #136	; 0x88
 800310a:	f000 f961 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMN */
 800310e:	2088      	movs	r0, #136	; 0x88
 8003110:	f000 f95e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x20);
 8003114:	2020      	movs	r0, #32
 8003116:	f000 f95b 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Positive Gamma Control */
 800311a:	20e0      	movs	r0, #224	; 0xe0
 800311c:	f000 f96c 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8003120:	2000      	movs	r0, #0
 8003122:	f000 f955 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P2 */
 8003126:	200a      	movs	r0, #10
 8003128:	f000 f952 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x12);  /* P3 */
 800312c:	2012      	movs	r0, #18
 800312e:	f000 f94f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x10);  /* P4 */
 8003132:	2010      	movs	r0, #16
 8003134:	f000 f94c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 8003138:	200e      	movs	r0, #14
 800313a:	f000 f949 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x20);  /* P6 */
 800313e:	2020      	movs	r0, #32
 8003140:	f000 f946 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xCC);  /* P7 */
 8003144:	20cc      	movs	r0, #204	; 0xcc
 8003146:	f000 f943 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x07);  /* P8 */
 800314a:	2007      	movs	r0, #7
 800314c:	f000 f940 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 8003150:	2006      	movs	r0, #6
 8003152:	f000 f93d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P10 */
 8003156:	200b      	movs	r0, #11
 8003158:	f000 f93a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P11 */
 800315c:	200e      	movs	r0, #14
 800315e:	f000 f937 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P12 */
 8003162:	200f      	movs	r0, #15
 8003164:	f000 f934 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P13 */
 8003168:	200d      	movs	r0, #13
 800316a:	f000 f931 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 800316e:	2015      	movs	r0, #21
 8003170:	f000 f92e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x10);  /* P15 */
 8003174:	2010      	movs	r0, #16
 8003176:	f000 f92b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 800317a:	2000      	movs	r0, #0
 800317c:	f000 f928 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xE1); /* Negative Gamma Correction */
 8003180:	20e1      	movs	r0, #225	; 0xe1
 8003182:	f000 f939 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8003186:	2000      	movs	r0, #0
 8003188:	f000 f922 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P2 */
 800318c:	200b      	movs	r0, #11
 800318e:	f000 f91f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x13);  /* P3 */
 8003192:	2013      	movs	r0, #19
 8003194:	f000 f91c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P4 */
 8003198:	200d      	movs	r0, #13
 800319a:	f000 f919 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 800319e:	200e      	movs	r0, #14
 80031a0:	f000 f916 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1B);  /* P6 */
 80031a4:	201b      	movs	r0, #27
 80031a6:	f000 f913 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x71);  /* P7 */
 80031aa:	2071      	movs	r0, #113	; 0x71
 80031ac:	f000 f910 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P8 */
 80031b0:	2006      	movs	r0, #6
 80031b2:	f000 f90d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 80031b6:	2006      	movs	r0, #6
 80031b8:	f000 f90a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P10 */
 80031bc:	200a      	movs	r0, #10
 80031be:	f000 f907 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P11 */
 80031c2:	200f      	movs	r0, #15
 80031c4:	f000 f904 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P12 */
 80031c8:	200e      	movs	r0, #14
 80031ca:	f000 f901 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P13 */
 80031ce:	200f      	movs	r0, #15
 80031d0:	f000 f8fe 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 80031d4:	2015      	movs	r0, #21
 80031d6:	f000 f8fb 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x0C);  /* P15 */
 80031da:	200c      	movs	r0, #12
 80031dc:	f000 f8f8 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 80031e0:	2000      	movs	r0, #0
 80031e2:	f000 f8f5 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x2a);
 80031e6:	202a      	movs	r0, #42	; 0x2a
 80031e8:	f000 f906 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f000 f8ef 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 80031f2:	2000      	movs	r0, #0
 80031f4:	f000 f8ec 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);
 80031f8:	2001      	movs	r0, #1
 80031fa:	f000 f8e9 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xdf);
 80031fe:	20df      	movs	r0, #223	; 0xdf
 8003200:	f000 f8e6 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x2b);
 8003204:	202b      	movs	r0, #43	; 0x2b
 8003206:	f000 f8f7 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800320a:	2000      	movs	r0, #0
 800320c:	f000 f8e0 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003210:	2000      	movs	r0, #0
 8003212:	f000 f8dd 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x03);
 8003216:	2003      	movs	r0, #3
 8003218:	f000 f8da 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x1f);
 800321c:	201f      	movs	r0, #31
 800321e:	f000 f8d7 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x3A); /* Pixel Format */
 8003222:	203a      	movs	r0, #58	; 0x3a
 8003224:	f000 f8e8 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8003228:	2055      	movs	r0, #85	; 0x55
 800322a:	f000 f8d1 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x36); /* Memory Access Control */
 800322e:	2036      	movs	r0, #54	; 0x36
 8003230:	f000 f8e2 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02-180 */
 8003234:	2000      	movs	r0, #0
 8003236:	f000 f8cb 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x11);
 800323a:	2011      	movs	r0, #17
 800323c:	f000 f8dc 	bl	80033f8 <lcd_wr_regno>
    HAL_Delay(120);
 8003240:	2078      	movs	r0, #120	; 0x78
 8003242:	f001 fff7 	bl	8005234 <HAL_Delay>
    lcd_wr_regno(0x29);
 8003246:	2029      	movs	r0, #41	; 0x29
 8003248:	f000 f8d6 	bl	80033f8 <lcd_wr_regno>
    HAL_Delay(20);
 800324c:	2014      	movs	r0, #20
 800324e:	f001 fff1 	bl	8005234 <HAL_Delay>
    lcd_wr_regno(0x2C);
 8003252:	202c      	movs	r0, #44	; 0x2c
 8003254:	f000 f8d0 	bl	80033f8 <lcd_wr_regno>
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}

0800325c <lcd_ex_ssd1963_reginit>:
 * @brief  SSD1963 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ssd1963_reginit(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 8003260:	20e2      	movs	r0, #226	; 0xe2
 8003262:	f000 f8c9 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* parameter 1 */
 8003266:	201d      	movs	r0, #29
 8003268:	f000 f8b2 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x02);  /* parameter 2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 800326c:	2002      	movs	r0, #2
 800326e:	f000 f8af 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x04);  /* parameter 3 Validate M and N values */
 8003272:	2004      	movs	r0, #4
 8003274:	f000 f8ac 	bl	80033d0 <lcd_wr_data>
    HAL_Delay(1);
 8003278:	2001      	movs	r0, #1
 800327a:	f001 ffdb 	bl	8005234 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 800327e:	20e0      	movs	r0, #224	; 0xe0
 8003280:	f000 f8ba 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 8003284:	2001      	movs	r0, #1
 8003286:	f000 f8a3 	bl	80033d0 <lcd_wr_data>
    HAL_Delay(10);
 800328a:	200a      	movs	r0, #10
 800328c:	f001 ffd2 	bl	8005234 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 8003290:	20e0      	movs	r0, #224	; 0xe0
 8003292:	f000 f8b1 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 8003296:	2003      	movs	r0, #3
 8003298:	f000 f89a 	bl	80033d0 <lcd_wr_data>
    HAL_Delay(12);
 800329c:	200c      	movs	r0, #12
 800329e:	f001 ffc9 	bl	8005234 <HAL_Delay>
    lcd_wr_regno(0x01); /* soft reset */
 80032a2:	2001      	movs	r0, #1
 80032a4:	f000 f8a8 	bl	80033f8 <lcd_wr_regno>
    HAL_Delay(10);
 80032a8:	200a      	movs	r0, #10
 80032aa:	f001 ffc3 	bl	8005234 <HAL_Delay>

    lcd_wr_regno(0xE6); /* Set the pixel frequency,33Mhz */
 80032ae:	20e6      	movs	r0, #230	; 0xe6
 80032b0:	f000 f8a2 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x2F);
 80032b4:	202f      	movs	r0, #47	; 0x2f
 80032b6:	f000 f88b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFF);
 80032ba:	20ff      	movs	r0, #255	; 0xff
 80032bc:	f000 f888 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFF);
 80032c0:	20ff      	movs	r0, #255	; 0xff
 80032c2:	f000 f885 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB0); /* Setting LCD mode */
 80032c6:	20b0      	movs	r0, #176	; 0xb0
 80032c8:	f000 f896 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24 bit mode */
 80032cc:	2020      	movs	r0, #32
 80032ce:	f000 f87f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT pattern */
 80032d2:	2000      	movs	r0, #0
 80032d4:	f000 f87c 	bl	80033d0 <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* Set the LCD horizontal pixels */
 80032d8:	2003      	movs	r0, #3
 80032da:	f000 f879 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 80032de:	f240 301f 	movw	r0, #799	; 0x31f
 80032e2:	f000 f875 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* Set the LCD vertical pixels */
 80032e6:	2001      	movs	r0, #1
 80032e8:	f000 f872 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 80032ec:	f240 10df 	movw	r0, #479	; 0x1df
 80032f0:	f000 f86e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB sequence */
 80032f4:	2000      	movs	r0, #0
 80032f6:	f000 f86b 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 80032fa:	20b4      	movs	r0, #180	; 0xb4
 80032fc:	f000 f87c 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 8003300:	2004      	movs	r0, #4
 8003302:	f000 f865 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 8003306:	f240 401f 	movw	r0, #1055	; 0x41f
 800330a:	f000 f861 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 800330e:	2000      	movs	r0, #0
 8003310:	f000 f85e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 8003314:	202e      	movs	r0, #46	; 0x2e
 8003316:	f000 f85b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 800331a:	2000      	movs	r0, #0
 800331c:	f000 f858 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003320:	2000      	movs	r0, #0
 8003322:	f000 f855 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003326:	2000      	movs	r0, #0
 8003328:	f000 f852 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800332c:	2000      	movs	r0, #0
 800332e:	f000 f84f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 8003332:	20b6      	movs	r0, #182	; 0xb6
 8003334:	f000 f860 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 8003338:	2002      	movs	r0, #2
 800333a:	f000 f849 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 800333e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8003342:	f000 f845 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 8003346:	2000      	movs	r0, #0
 8003348:	f000 f842 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 800334c:	2017      	movs	r0, #23
 800334e:	f000 f83f 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 8003352:	2015      	movs	r0, #21
 8003354:	f000 f83c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003358:	2000      	movs	r0, #0
 800335a:	f000 f839 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f000 f836 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xF0); /* Set the interface between SSD1963 and CPU to 16bit */
 8003364:	20f0      	movs	r0, #240	; 0xf0
 8003366:	f000 f847 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 800336a:	2003      	movs	r0, #3
 800336c:	f000 f830 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0x29); /* Enable display */
 8003370:	2029      	movs	r0, #41	; 0x29
 8003372:	f000 f841 	bl	80033f8 <lcd_wr_regno>
    /* Setting the PWM output backlight is adjustable through the duty cycle */
    lcd_wr_regno(0xD0); /* Set the automatic white balance DBC */
 8003376:	20d0      	movs	r0, #208	; 0xd0
 8003378:	f000 f83e 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 800337c:	2000      	movs	r0, #0
 800337e:	f000 f827 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* Configure PWM output */
 8003382:	20be      	movs	r0, #190	; 0xbe
 8003384:	f000 f838 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1 Set the PWM frequency */
 8003388:	2005      	movs	r0, #5
 800338a:	f000 f821 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2 Set the PWM duty cycle */
 800338e:	20fe      	movs	r0, #254	; 0xfe
 8003390:	f000 f81e 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3 set C */
 8003394:	2001      	movs	r0, #1
 8003396:	f000 f81b 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4 set D */
 800339a:	2000      	movs	r0, #0
 800339c:	f000 f818 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5 set E */
 80033a0:	2000      	movs	r0, #0
 80033a2:	f000 f815 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6 set F */
 80033a6:	2000      	movs	r0, #0
 80033a8:	f000 f812 	bl	80033d0 <lcd_wr_data>

    lcd_wr_regno(0xB8); /* Set the GPIO configuration */
 80033ac:	20b8      	movs	r0, #184	; 0xb8
 80033ae:	f000 f823 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* Two IO ports are set as output */
 80033b2:	2003      	movs	r0, #3
 80033b4:	f000 f80c 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO uses normal IO functionality */
 80033b8:	2001      	movs	r0, #1
 80033ba:	f000 f809 	bl	80033d0 <lcd_wr_data>
    lcd_wr_regno(0xBA);
 80033be:	20ba      	movs	r0, #186	; 0xba
 80033c0:	f000 f81a 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0X01);  /* GPIO[1:0]=01, controls LCD orientation */
 80033c4:	2001      	movs	r0, #1
 80033c6:	f000 f803 	bl	80033d0 <lcd_wr_data>
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <lcd_wr_data>:
 * @brief   LCD write data
 * @param   data: data to be written
 * @retval  None
 */
void lcd_wr_data(volatile uint16_t data)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
    data = data;
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <lcd_wr_data+0x24>)
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	b292      	uxth	r2, r2
 80033e6:	805a      	strh	r2, [r3, #2]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	600ffffe 	.word	0x600ffffe

080033f8 <lcd_wr_regno>:
 * @brief   LCD write register number/address function
 * @param   regno: register number/address
 * @retval  None
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	80fb      	strh	r3, [r7, #6]
    regno = regno;
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	b29b      	uxth	r3, r3
 8003406:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <lcd_wr_regno+0x24>)
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	b292      	uxth	r2, r2
 800340e:	801a      	strh	r2, [r3, #0]

}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	600ffffe 	.word	0x600ffffe

08003420 <lcd_write_reg>:
 * @param   regno: register number/address
 * @param   data: data to be written
 * @retval  None
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	460a      	mov	r2, r1
 800342a:	80fb      	strh	r3, [r7, #6]
 800342c:	4613      	mov	r3, r2
 800342e:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 8003430:	4a05      	ldr	r2, [pc, #20]	; (8003448 <lcd_write_reg+0x28>)
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = data;    /* Write in data */
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <lcd_write_reg+0x28>)
 8003438:	88bb      	ldrh	r3, [r7, #4]
 800343a:	8053      	strh	r3, [r2, #2]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	600ffffe 	.word	0x600ffffe

0800344c <lcd_rd_data>:
 * @brief   LCD read register function
 * @param   None.
 * @retval  The data read
 */
static uint16_t lcd_rd_data(void)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
    volatile uint16_t ram;
    ram = LCD->LCD_RAM;
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <lcd_rd_data+0x20>)
 8003454:	885b      	ldrh	r3, [r3, #2]
 8003456:	b29b      	uxth	r3, r3
 8003458:	80fb      	strh	r3, [r7, #6]
    return ram;
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	b29b      	uxth	r3, r3
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	600ffffe 	.word	0x600ffffe

08003470 <lcd_write_ram_prepare>:
 * @brief   LCD ready to write GRAM
 * @param   None.
 * @retval  None.
 */
void lcd_write_ram_prepare(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <lcd_write_ram_prepare+0x18>)
 8003476:	4a05      	ldr	r2, [pc, #20]	; (800348c <lcd_write_ram_prepare+0x1c>)
 8003478:	8912      	ldrh	r2, [r2, #8]
 800347a:	801a      	strh	r2, [r3, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	600ffffe 	.word	0x600ffffe
 800348c:	2000008c 	.word	0x2000008c

08003490 <lcd_set_cursor>:
 * @brief   Sets the cursor position
 * @param   x,y: coordinate
 * @retval  None.
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	460a      	mov	r2, r1
 800349a:	80fb      	strh	r3, [r7, #6]
 800349c:	4613      	mov	r3, r2
 800349e:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 80034a0:	4b65      	ldr	r3, [pc, #404]	; (8003638 <lcd_set_cursor+0x1a8>)
 80034a2:	889b      	ldrh	r3, [r3, #4]
 80034a4:	f641 1263 	movw	r2, #6499	; 0x1963
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d167      	bne.n	800357c <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* In portrait mode, the x-coordinate needs to be transformed */
 80034ac:	4b62      	ldr	r3, [pc, #392]	; (8003638 <lcd_set_cursor+0x1a8>)
 80034ae:	799b      	ldrb	r3, [r3, #6]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d11e      	bne.n	80034f2 <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 80034b4:	4b60      	ldr	r3, [pc, #384]	; (8003638 <lcd_set_cursor+0x1a8>)
 80034b6:	881a      	ldrh	r2, [r3, #0]
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 80034c2:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <lcd_set_cursor+0x1a8>)
 80034c4:	895b      	ldrh	r3, [r3, #10]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ff96 	bl	80033f8 <lcd_wr_regno>
            lcd_wr_data(0);
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7ff ff7f 	bl	80033d0 <lcd_wr_data>
            lcd_wr_data(0);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f7ff ff7c 	bl	80033d0 <lcd_wr_data>
            lcd_wr_data(x >> 8);
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	b29b      	uxth	r3, r3
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff76 	bl	80033d0 <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff70 	bl	80033d0 <lcd_wr_data>
 80034f0:	e021      	b.n	8003536 <lcd_set_cursor+0xa6>
        }
        else                    /* landscape mode */
        {
            lcd_wr_regno(lcddev.setxcmd);
 80034f2:	4b51      	ldr	r3, [pc, #324]	; (8003638 <lcd_set_cursor+0x1a8>)
 80034f4:	895b      	ldrh	r3, [r3, #10]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff7e 	bl	80033f8 <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	b29b      	uxth	r3, r3
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff ff64 	bl	80033d0 <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	b29b      	uxth	r3, r3
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff ff5e 	bl	80033d0 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 8003514:	4b48      	ldr	r3, [pc, #288]	; (8003638 <lcd_set_cursor+0x1a8>)
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	3b01      	subs	r3, #1
 800351a:	121b      	asrs	r3, r3, #8
 800351c:	b29b      	uxth	r3, r3
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff56 	bl	80033d0 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8003524:	4b44      	ldr	r3, [pc, #272]	; (8003638 <lcd_set_cursor+0x1a8>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	3b01      	subs	r3, #1
 800352a:	b29b      	uxth	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff4d 	bl	80033d0 <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 8003536:	4b40      	ldr	r3, [pc, #256]	; (8003638 <lcd_set_cursor+0x1a8>)
 8003538:	899b      	ldrh	r3, [r3, #12]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff5c 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8003540:	88bb      	ldrh	r3, [r7, #4]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	b29b      	uxth	r3, r3
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff42 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 800354c:	88bb      	ldrh	r3, [r7, #4]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	b29b      	uxth	r3, r3
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff3c 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8003558:	4b37      	ldr	r3, [pc, #220]	; (8003638 <lcd_set_cursor+0x1a8>)
 800355a:	885b      	ldrh	r3, [r3, #2]
 800355c:	3b01      	subs	r3, #1
 800355e:	121b      	asrs	r3, r3, #8
 8003560:	b29b      	uxth	r3, r3
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff34 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8003568:	4b33      	ldr	r3, [pc, #204]	; (8003638 <lcd_set_cursor+0x1a8>)
 800356a:	885b      	ldrh	r3, [r3, #2]
 800356c:	3b01      	subs	r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff2b 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 800357a:	e058      	b.n	800362e <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0X5510)
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <lcd_set_cursor+0x1a8>)
 800357e:	889b      	ldrh	r3, [r3, #4]
 8003580:	f245 5210 	movw	r2, #21776	; 0x5510
 8003584:	4293      	cmp	r3, r2
 8003586:	d130      	bne.n	80035ea <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 8003588:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <lcd_set_cursor+0x1a8>)
 800358a:	895b      	ldrh	r3, [r3, #10]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff33 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	b29b      	uxth	r3, r3
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff19 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 800359e:	4b26      	ldr	r3, [pc, #152]	; (8003638 <lcd_set_cursor+0x1a8>)
 80035a0:	895b      	ldrh	r3, [r3, #10]
 80035a2:	3301      	adds	r3, #1
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff26 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(x & 0XFF);
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff ff0c 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80035b8:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <lcd_set_cursor+0x1a8>)
 80035ba:	899b      	ldrh	r3, [r3, #12]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff1b 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 80035c2:	88bb      	ldrh	r3, [r7, #4]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff01 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <lcd_set_cursor+0x1a8>)
 80035d0:	899b      	ldrh	r3, [r3, #12]
 80035d2:	3301      	adds	r3, #1
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff0e 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(y & 0XFF);
 80035dc:	88bb      	ldrh	r3, [r7, #4]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fef4 	bl	80033d0 <lcd_wr_data>
}
 80035e8:	e021      	b.n	800362e <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <lcd_set_cursor+0x1a8>)
 80035ec:	895b      	ldrh	r3, [r3, #10]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff ff02 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fee8 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	b29b      	uxth	r3, r3
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fee2 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <lcd_set_cursor+0x1a8>)
 800360e:	899b      	ldrh	r3, [r3, #12]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fef1 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8003616:	88bb      	ldrh	r3, [r7, #4]
 8003618:	0a1b      	lsrs	r3, r3, #8
 800361a:	b29b      	uxth	r3, r3
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fed7 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 8003622:	88bb      	ldrh	r3, [r7, #4]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	b29b      	uxth	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fed1 	bl	80033d0 <lcd_wr_data>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000008c 	.word	0x2000008c

0800363c <lcd_scan_dir>:
 * @brief   Set the automatic scanning direction of LCD
 * @param   dir: 0 to 7, representing 8 directions (see lcd.h for definitions)
 * @retval  None.
 */
void lcd_scan_dir(uint8_t dir)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;

    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 800364e:	4b9c      	ldr	r3, [pc, #624]	; (80038c0 <lcd_scan_dir+0x284>)
 8003650:	799b      	ldrb	r3, [r3, #6]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <lcd_scan_dir+0x26>
 8003656:	4b9a      	ldr	r3, [pc, #616]	; (80038c0 <lcd_scan_dir+0x284>)
 8003658:	889b      	ldrh	r3, [r3, #4]
 800365a:	f641 1263 	movw	r2, #6499	; 0x1963
 800365e:	4293      	cmp	r3, r2
 8003660:	d109      	bne.n	8003676 <lcd_scan_dir+0x3a>
 8003662:	4b97      	ldr	r3, [pc, #604]	; (80038c0 <lcd_scan_dir+0x284>)
 8003664:	799b      	ldrb	r3, [r3, #6]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d134      	bne.n	80036d4 <lcd_scan_dir+0x98>
 800366a:	4b95      	ldr	r3, [pc, #596]	; (80038c0 <lcd_scan_dir+0x284>)
 800366c:	889b      	ldrh	r3, [r3, #4]
 800366e:	f641 1263 	movw	r2, #6499	; 0x1963
 8003672:	4293      	cmp	r3, r2
 8003674:	d12e      	bne.n	80036d4 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* Change of direction */
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	2b07      	cmp	r3, #7
 800367a:	d82b      	bhi.n	80036d4 <lcd_scan_dir+0x98>
 800367c:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <lcd_scan_dir+0x48>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	080036a5 	.word	0x080036a5
 8003688:	080036ab 	.word	0x080036ab
 800368c:	080036b1 	.word	0x080036b1
 8003690:	080036b7 	.word	0x080036b7
 8003694:	080036bd 	.word	0x080036bd
 8003698:	080036c3 	.word	0x080036c3
 800369c:	080036c9 	.word	0x080036c9
 80036a0:	080036cf 	.word	0x080036cf
        {
            case L2R_U2D:
                dir = D2U_L2R;
 80036a4:	2306      	movs	r3, #6
 80036a6:	71fb      	strb	r3, [r7, #7]
                break;
 80036a8:	e014      	b.n	80036d4 <lcd_scan_dir+0x98>

            case L2R_D2U:
                dir = D2U_R2L;
 80036aa:	2307      	movs	r3, #7
 80036ac:	71fb      	strb	r3, [r7, #7]
                break;
 80036ae:	e011      	b.n	80036d4 <lcd_scan_dir+0x98>

            case R2L_U2D:
                dir = U2D_L2R;
 80036b0:	2304      	movs	r3, #4
 80036b2:	71fb      	strb	r3, [r7, #7]
                break;
 80036b4:	e00e      	b.n	80036d4 <lcd_scan_dir+0x98>

            case R2L_D2U:
                dir = U2D_R2L;
 80036b6:	2305      	movs	r3, #5
 80036b8:	71fb      	strb	r3, [r7, #7]
                break;
 80036ba:	e00b      	b.n	80036d4 <lcd_scan_dir+0x98>

            case U2D_L2R:
                dir = L2R_D2U;
 80036bc:	2301      	movs	r3, #1
 80036be:	71fb      	strb	r3, [r7, #7]
                break;
 80036c0:	e008      	b.n	80036d4 <lcd_scan_dir+0x98>

            case U2D_R2L:
                dir = L2R_U2D;
 80036c2:	2300      	movs	r3, #0
 80036c4:	71fb      	strb	r3, [r7, #7]
                break;
 80036c6:	e005      	b.n	80036d4 <lcd_scan_dir+0x98>

            case D2U_L2R:
                dir = R2L_D2U;
 80036c8:	2303      	movs	r3, #3
 80036ca:	71fb      	strb	r3, [r7, #7]
                break;
 80036cc:	e002      	b.n	80036d4 <lcd_scan_dir+0x98>

            case D2U_R2L:
                dir = R2L_U2D;
 80036ce:	2302      	movs	r3, #2
 80036d0:	71fb      	strb	r3, [r7, #7]
                break;
 80036d2:	bf00      	nop
        }
    }

    /* Set the value of 0X36/0X3600 register bit 5,6,7 according to the scan mode */
    switch (dir)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	2b07      	cmp	r3, #7
 80036d8:	d835      	bhi.n	8003746 <lcd_scan_dir+0x10a>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <lcd_scan_dir+0xa4>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	08003747 	.word	0x08003747
 80036e4:	08003701 	.word	0x08003701
 80036e8:	0800370b 	.word	0x0800370b
 80036ec:	08003715 	.word	0x08003715
 80036f0:	0800371f 	.word	0x0800371f
 80036f4:	08003729 	.word	0x08003729
 80036f8:	08003733 	.word	0x08003733
 80036fc:	0800373d 	.word	0x0800373d
        case L2R_U2D:/* From left to right, from top to bottom */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* From left to right, from bottom to top */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003706:	81fb      	strh	r3, [r7, #14]
            break;
 8003708:	e01d      	b.n	8003746 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* From right to left, from top to bottom */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800370a:	89fb      	ldrh	r3, [r7, #14]
 800370c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003710:	81fb      	strh	r3, [r7, #14]
            break;
 8003712:	e018      	b.n	8003746 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* From right to left, from bottom to top */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8003714:	89fb      	ldrh	r3, [r7, #14]
 8003716:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800371a:	81fb      	strh	r3, [r7, #14]
            break;
 800371c:	e013      	b.n	8003746 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* From top to bottom, left to right */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800371e:	89fb      	ldrh	r3, [r7, #14]
 8003720:	f043 0320 	orr.w	r3, r3, #32
 8003724:	81fb      	strh	r3, [r7, #14]
            break;
 8003726:	e00e      	b.n	8003746 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* From top to bottom, right to left */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8003728:	89fb      	ldrh	r3, [r7, #14]
 800372a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800372e:	81fb      	strh	r3, [r7, #14]
            break;
 8003730:	e009      	b.n	8003746 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* From bottom to top, left to right */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8003732:	89fb      	ldrh	r3, [r7, #14]
 8003734:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003738:	81fb      	strh	r3, [r7, #14]
            break;
 800373a:	e004      	b.n	8003746 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* From bottom to top, right to left */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800373c:	89fb      	ldrh	r3, [r7, #14]
 800373e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003742:	81fb      	strh	r3, [r7, #14]
            break;
 8003744:	bf00      	nop
    }

    if (lcddev.id == 0X5510)
 8003746:	4b5e      	ldr	r3, [pc, #376]	; (80038c0 <lcd_scan_dir+0x284>)
 8003748:	889b      	ldrh	r3, [r3, #4]
 800374a:	f245 5210 	movw	r2, #21776	; 0x5510
 800374e:	4293      	cmp	r3, r2
 8003750:	d103      	bne.n	800375a <lcd_scan_dir+0x11e>
    {
        dirreg = 0X3600;    /* For 5510, there is a difference between the registers of the other driver ics */
 8003752:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8003756:	81bb      	strh	r3, [r7, #12]
 8003758:	e001      	b.n	800375e <lcd_scan_dir+0x122>
    }
    else
    {
    	dirreg = 0X36;  /* For most driver ics, it is controlled by the 0X36 register */
 800375a:	2336      	movs	r3, #54	; 0x36
 800375c:	81bb      	strh	r3, [r7, #12]
    }

    /* 9341 & 7789 & 7796 to set the BGR bit */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 800375e:	4b58      	ldr	r3, [pc, #352]	; (80038c0 <lcd_scan_dir+0x284>)
 8003760:	889b      	ldrh	r3, [r3, #4]
 8003762:	f249 3241 	movw	r2, #37697	; 0x9341
 8003766:	4293      	cmp	r3, r2
 8003768:	d00b      	beq.n	8003782 <lcd_scan_dir+0x146>
 800376a:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <lcd_scan_dir+0x284>)
 800376c:	889b      	ldrh	r3, [r3, #4]
 800376e:	f247 7289 	movw	r2, #30601	; 0x7789
 8003772:	4293      	cmp	r3, r2
 8003774:	d005      	beq.n	8003782 <lcd_scan_dir+0x146>
 8003776:	4b52      	ldr	r3, [pc, #328]	; (80038c0 <lcd_scan_dir+0x284>)
 8003778:	889b      	ldrh	r3, [r3, #4]
 800377a:	f247 7296 	movw	r2, #30614	; 0x7796
 800377e:	4293      	cmp	r3, r2
 8003780:	d103      	bne.n	800378a <lcd_scan_dir+0x14e>
    {
        regval |= 0X08;
 8003782:	89fb      	ldrh	r3, [r7, #14]
 8003784:	f043 0308 	orr.w	r3, r3, #8
 8003788:	81fb      	strh	r3, [r7, #14]
    }

    lcd_write_reg(dirreg, regval);
 800378a:	89fa      	ldrh	r2, [r7, #14]
 800378c:	89bb      	ldrh	r3, [r7, #12]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fe45 	bl	8003420 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963 no coordinate manipulation */
 8003796:	4b4a      	ldr	r3, [pc, #296]	; (80038c0 <lcd_scan_dir+0x284>)
 8003798:	889b      	ldrh	r3, [r3, #4]
 800379a:	f641 1263 	movw	r2, #6499	; 0x1963
 800379e:	4293      	cmp	r3, r2
 80037a0:	d025      	beq.n	80037ee <lcd_scan_dir+0x1b2>
    {
        if (regval & 0X20)
 80037a2:	89fb      	ldrh	r3, [r7, #14]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d010      	beq.n	80037ce <lcd_scan_dir+0x192>
        {
            if (lcddev.width < lcddev.height)   /* Swap X and Y */
 80037ac:	4b44      	ldr	r3, [pc, #272]	; (80038c0 <lcd_scan_dir+0x284>)
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <lcd_scan_dir+0x284>)
 80037b2:	885b      	ldrh	r3, [r3, #2]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d21a      	bcs.n	80037ee <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 80037b8:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <lcd_scan_dir+0x284>)
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 80037be:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <lcd_scan_dir+0x284>)
 80037c0:	885a      	ldrh	r2, [r3, #2]
 80037c2:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <lcd_scan_dir+0x284>)
 80037c4:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80037c6:	4a3e      	ldr	r2, [pc, #248]	; (80038c0 <lcd_scan_dir+0x284>)
 80037c8:	897b      	ldrh	r3, [r7, #10]
 80037ca:	8053      	strh	r3, [r2, #2]
 80037cc:	e00f      	b.n	80037ee <lcd_scan_dir+0x1b2>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* Swap X and Y */
 80037ce:	4b3c      	ldr	r3, [pc, #240]	; (80038c0 <lcd_scan_dir+0x284>)
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	4b3b      	ldr	r3, [pc, #236]	; (80038c0 <lcd_scan_dir+0x284>)
 80037d4:	885b      	ldrh	r3, [r3, #2]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d909      	bls.n	80037ee <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <lcd_scan_dir+0x284>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 80037e0:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <lcd_scan_dir+0x284>)
 80037e2:	885a      	ldrh	r2, [r3, #2]
 80037e4:	4b36      	ldr	r3, [pc, #216]	; (80038c0 <lcd_scan_dir+0x284>)
 80037e6:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80037e8:	4a35      	ldr	r2, [pc, #212]	; (80038c0 <lcd_scan_dir+0x284>)
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* Set the size of the display area (window) */
    if (lcddev.id == 0X5510)
 80037ee:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <lcd_scan_dir+0x284>)
 80037f0:	889b      	ldrh	r3, [r3, #4]
 80037f2:	f245 5210 	movw	r2, #21776	; 0x5510
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d164      	bne.n	80038c4 <lcd_scan_dir+0x288>
    {
        lcd_wr_regno(lcddev.setxcmd);
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <lcd_scan_dir+0x284>)
 80037fc:	895b      	ldrh	r3, [r3, #10]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fdfa 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(0);
 8003804:	2000      	movs	r0, #0
 8003806:	f7ff fde3 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <lcd_scan_dir+0x284>)
 800380c:	895b      	ldrh	r3, [r3, #10]
 800380e:	3301      	adds	r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fdf0 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(0);
 8003818:	2000      	movs	r0, #0
 800381a:	f7ff fdd9 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 2);
 800381e:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <lcd_scan_dir+0x284>)
 8003820:	895b      	ldrh	r3, [r3, #10]
 8003822:	3302      	adds	r3, #2
 8003824:	b29b      	uxth	r3, r3
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fde6 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) >> 8);
 800382c:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <lcd_scan_dir+0x284>)
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	3b01      	subs	r3, #1
 8003832:	121b      	asrs	r3, r3, #8
 8003834:	b29b      	uxth	r3, r3
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff fdca 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 3);
 800383c:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <lcd_scan_dir+0x284>)
 800383e:	895b      	ldrh	r3, [r3, #10]
 8003840:	3303      	adds	r3, #3
 8003842:	b29b      	uxth	r3, r3
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fdd7 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <lcd_scan_dir+0x284>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	3b01      	subs	r3, #1
 8003850:	b29b      	uxth	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	b29b      	uxth	r3, r3
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fdba 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 800385c:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <lcd_scan_dir+0x284>)
 800385e:	899b      	ldrh	r3, [r3, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fdc9 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(0);
 8003866:	2000      	movs	r0, #0
 8003868:	f7ff fdb2 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <lcd_scan_dir+0x284>)
 800386e:	899b      	ldrh	r3, [r3, #12]
 8003870:	3301      	adds	r3, #1
 8003872:	b29b      	uxth	r3, r3
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fdbf 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(0);
 800387a:	2000      	movs	r0, #0
 800387c:	f7ff fda8 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 2);
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <lcd_scan_dir+0x284>)
 8003882:	899b      	ldrh	r3, [r3, #12]
 8003884:	3302      	adds	r3, #2
 8003886:	b29b      	uxth	r3, r3
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fdb5 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) >> 8);
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <lcd_scan_dir+0x284>)
 8003890:	885b      	ldrh	r3, [r3, #2]
 8003892:	3b01      	subs	r3, #1
 8003894:	121b      	asrs	r3, r3, #8
 8003896:	b29b      	uxth	r3, r3
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fd99 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 3);
 800389e:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <lcd_scan_dir+0x284>)
 80038a0:	899b      	ldrh	r3, [r3, #12]
 80038a2:	3303      	adds	r3, #3
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fda6 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <lcd_scan_dir+0x284>)
 80038ae:	885b      	ldrh	r3, [r3, #2]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fd89 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 80038be:	e039      	b.n	8003934 <lcd_scan_dir+0x2f8>
 80038c0:	2000008c 	.word	0x2000008c
        lcd_wr_regno(lcddev.setxcmd);
 80038c4:	4b1d      	ldr	r3, [pc, #116]	; (800393c <lcd_scan_dir+0x300>)
 80038c6:	895b      	ldrh	r3, [r3, #10]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fd95 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(0);
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7ff fd7e 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data(0);
 80038d4:	2000      	movs	r0, #0
 80038d6:	f7ff fd7b 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) >> 8);
 80038da:	4b18      	ldr	r3, [pc, #96]	; (800393c <lcd_scan_dir+0x300>)
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	3b01      	subs	r3, #1
 80038e0:	121b      	asrs	r3, r3, #8
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fd73 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <lcd_scan_dir+0x300>)
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fd6a 	bl	80033d0 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <lcd_scan_dir+0x300>)
 80038fe:	899b      	ldrh	r3, [r3, #12]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fd79 	bl	80033f8 <lcd_wr_regno>
        lcd_wr_data(0);
 8003906:	2000      	movs	r0, #0
 8003908:	f7ff fd62 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data(0);
 800390c:	2000      	movs	r0, #0
 800390e:	f7ff fd5f 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <lcd_scan_dir+0x300>)
 8003914:	885b      	ldrh	r3, [r3, #2]
 8003916:	3b01      	subs	r3, #1
 8003918:	121b      	asrs	r3, r3, #8
 800391a:	b29b      	uxth	r3, r3
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fd57 	bl	80033d0 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <lcd_scan_dir+0x300>)
 8003924:	885b      	ldrh	r3, [r3, #2]
 8003926:	3b01      	subs	r3, #1
 8003928:	b29b      	uxth	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	b29b      	uxth	r3, r3
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fd4e 	bl	80033d0 <lcd_wr_data>
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000008c 	.word	0x2000008c

08003940 <lcd_draw_point>:
 * @param   x,y  : coordinate
 * @param   color: Point color
 * @retval  None.
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	603a      	str	r2, [r7, #0]
 800394a:	80fb      	strh	r3, [r7, #6]
 800394c:	460b      	mov	r3, r1
 800394e:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* Sets the cursor position */
 8003950:	88ba      	ldrh	r2, [r7, #4]
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fd9a 	bl	8003490 <lcd_set_cursor>
    lcd_write_ram_prepare();    /* Start writing GRAM */
 800395c:	f7ff fd88 	bl	8003470 <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <lcd_draw_point+0x30>)
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	b292      	uxth	r2, r2
 8003966:	805a      	strh	r2, [r3, #2]
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	600ffffe 	.word	0x600ffffe
 8003974:	00000000 	.word	0x00000000

08003978 <lcd_ssd_backlight_set>:
 * @brief   SSD1963 backlight brightness setting function
 * @param   pwm  : Backlight level,0~100. The larger the brighter.
 * @retval  None.
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
    lcd_wr_regno(0xBE);         /* Configure PWM output */
 8003982:	20be      	movs	r0, #190	; 0xbe
 8003984:	f7ff fd38 	bl	80033f8 <lcd_wr_regno>
    lcd_wr_data(0x05);          /* 1 Set the PWM frequency */
 8003988:	2005      	movs	r0, #5
 800398a:	f7ff fd21 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(pwm * 2.55);    /* 2 Set the PWM duty cycle */
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fc fe95 	bl	80006c0 <__aeabi_i2d>
 8003996:	a310      	add	r3, pc, #64	; (adr r3, 80039d8 <lcd_ssd_backlight_set+0x60>)
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f7fc fc14 	bl	80001c8 <__aeabi_dmul>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7fc fef4 	bl	8000794 <__aeabi_d2uiz>
 80039ac:	4603      	mov	r3, r0
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fd0d 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x01);          /* 3 Setting C */
 80039b6:	2001      	movs	r0, #1
 80039b8:	f7ff fd0a 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0xFF);          /* 4 Setting D */
 80039bc:	20ff      	movs	r0, #255	; 0xff
 80039be:	f7ff fd07 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 5 Setting E */
 80039c2:	2000      	movs	r0, #0
 80039c4:	f7ff fd04 	bl	80033d0 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 6 Setting F */
 80039c8:	2000      	movs	r0, #0
 80039ca:	f7ff fd01 	bl	80033d0 <lcd_wr_data>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	66666666 	.word	0x66666666
 80039dc:	40046666 	.word	0x40046666

080039e0 <lcd_display_dir>:
 * @brief   Set the LCD display orientation
 * @param   dir  : 0, portrait; 1. Landscape
 * @retval  None.
 */
void lcd_display_dir(uint8_t dir)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* Portrait/landscape */
 80039ea:	4a68      	ldr	r2, [pc, #416]	; (8003b8c <lcd_display_dir+0x1ac>)
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* Portrait */
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d165      	bne.n	8003ac2 <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <lcd_display_dir+0x1ac>)
 80039f8:	22f0      	movs	r2, #240	; 0xf0
 80039fa:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 80039fc:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <lcd_display_dir+0x1ac>)
 80039fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a02:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a06:	889b      	ldrh	r3, [r3, #4]
 8003a08:	f245 5210 	movw	r2, #21776	; 0x5510
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d114      	bne.n	8003a3a <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8003a10:	4b5e      	ldr	r3, [pc, #376]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a12:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003a16:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8003a18:	4b5c      	ldr	r3, [pc, #368]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a1a:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003a1e:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8003a20:	4b5a      	ldr	r3, [pc, #360]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a22:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003a26:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8003a28:	4b58      	ldr	r3, [pc, #352]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003a2e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003a30:	4b56      	ldr	r3, [pc, #344]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a32:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003a36:	805a      	strh	r2, [r3, #2]
 8003a38:	e020      	b.n	8003a7c <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8003a3a:	4b54      	ldr	r3, [pc, #336]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a3c:	889b      	ldrh	r3, [r3, #4]
 8003a3e:	f641 1263 	movw	r2, #6499	; 0x1963
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8003a46:	4b51      	ldr	r3, [pc, #324]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a48:	222c      	movs	r2, #44	; 0x2c
 8003a4a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* Set the write x-coordinate instruction */
 8003a4c:	4b4f      	ldr	r3, [pc, #316]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a4e:	222b      	movs	r2, #43	; 0x2b
 8003a50:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* Set the write y-coordinate instruction */
 8003a52:	4b4e      	ldr	r3, [pc, #312]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a54:	222a      	movs	r2, #42	; 0x2a
 8003a56:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* Set width 480 */
 8003a58:	4b4c      	ldr	r3, [pc, #304]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003a5e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* Set height 800 */
 8003a60:	4b4a      	ldr	r3, [pc, #296]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a62:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003a66:	805a      	strh	r2, [r3, #2]
 8003a68:	e008      	b.n	8003a7c <lcd_display_dir+0x9c>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 8003a6a:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a6c:	222c      	movs	r2, #44	; 0x2c
 8003a6e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8003a70:	4b46      	ldr	r3, [pc, #280]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a72:	222a      	movs	r2, #42	; 0x2a
 8003a74:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8003a76:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a78:	222b      	movs	r2, #43	; 0x2b
 8003a7a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8003a7c:	4b43      	ldr	r3, [pc, #268]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a7e:	889b      	ldrh	r3, [r3, #4]
 8003a80:	f245 3210 	movw	r2, #21264	; 0x5310
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d005      	beq.n	8003a94 <lcd_display_dir+0xb4>
 8003a88:	4b40      	ldr	r3, [pc, #256]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a8a:	889b      	ldrh	r3, [r3, #4]
 8003a8c:	f247 7296 	movw	r2, #30614	; 0x7796
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d107      	bne.n	8003aa4 <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8003a94:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a9a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8003a9c:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003a9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003aa2:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* 9806 means 480*800 resolution */
 8003aa4:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003aa6:	889b      	ldrh	r3, [r3, #4]
 8003aa8:	f649 0206 	movw	r2, #38918	; 0x9806
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d165      	bne.n	8003b7c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003ab2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ab6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003ab8:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003aba:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003abe:	805a      	strh	r2, [r3, #2]
 8003ac0:	e05c      	b.n	8003b7c <lcd_display_dir+0x19c>
        }
    }
    else                            /* landscape */
    {
        lcddev.width = 320;         /* Default width */
 8003ac2:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003ac4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003ac8:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Default height */
 8003aca:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003acc:	22f0      	movs	r2, #240	; 0xf0
 8003ace:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003ad2:	889b      	ldrh	r3, [r3, #4]
 8003ad4:	f245 5210 	movw	r2, #21776	; 0x5510
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d114      	bne.n	8003b06 <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8003adc:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003ade:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003ae2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8003ae4:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003ae6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003aea:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003aee:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003af2:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003af6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003afa:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8003afc:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003afe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b02:	805a      	strh	r2, [r3, #2]
 8003b04:	e026      	b.n	8003b54 <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8003b06:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	f641 1263 	movw	r2, #6499	; 0x1963
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d005      	beq.n	8003b1e <lcd_display_dir+0x13e>
 8003b12:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b14:	889b      	ldrh	r3, [r3, #4]
 8003b16:	f649 0206 	movw	r2, #38918	; 0x9806
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d111      	bne.n	8003b42 <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b20:	222c      	movs	r2, #44	; 0x2c
 8003b22:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* Set the write x-coordinate instruction */
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b26:	222a      	movs	r2, #42	; 0x2a
 8003b28:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* Set the write y-coordinate instruction */
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b2c:	222b      	movs	r2, #43	; 0x2b
 8003b2e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* Set width 800 */
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b32:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003b36:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* Set height 480 */
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b3e:	805a      	strh	r2, [r3, #2]
 8003b40:	e008      	b.n	8003b54 <lcd_display_dir+0x174>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b44:	222c      	movs	r2, #44	; 0x2c
 8003b46:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b4a:	222a      	movs	r2, #42	; 0x2a
 8003b4c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b50:	222b      	movs	r2, #43	; 0x2b
 8003b52:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b56:	889b      	ldrh	r3, [r3, #4]
 8003b58:	f245 3210 	movw	r2, #21264	; 0x5310
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d005      	beq.n	8003b6c <lcd_display_dir+0x18c>
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b62:	889b      	ldrh	r3, [r3, #4]
 8003b64:	f247 7296 	movw	r2, #30614	; 0x7796
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d107      	bne.n	8003b7c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003b72:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <lcd_display_dir+0x1ac>)
 8003b76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003b7a:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Default scan direction */
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f7ff fd5d 	bl	800363c <lcd_scan_dir>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	2000008c 	.word	0x2000008c

08003b90 <lcd_init>:
 * @note    This initialization function can initialize various types of LCD
 * @param   None.
 * @retval  None.
 */
void lcd_init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
	FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	611a      	str	r2, [r3, #16]
 8003ba4:	615a      	str	r2, [r3, #20]
 8003ba6:	619a      	str	r2, [r3, #24]

	HAL_Delay(50);        /* After initializing the FSMC, a certain amount of time must be waited before the initialization can start */
 8003ba8:	2032      	movs	r0, #50	; 0x32
 8003baa:	f001 fb43 	bl	8005234 <HAL_Delay>

    /* Try a read of 9341 ID */
    lcd_wr_regno(0XD3);
 8003bae:	20d3      	movs	r0, #211	; 0xd3
 8003bb0:	f7ff fc22 	bl	80033f8 <lcd_wr_regno>
    lcddev.id = lcd_rd_data();  /* dummy read */
 8003bb4:	f7ff fc4a 	bl	800344c <lcd_rd_data>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4bb0      	ldr	r3, [pc, #704]	; (8003e80 <lcd_init+0x2f0>)
 8003bbe:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8003bc0:	f7ff fc44 	bl	800344c <lcd_rd_data>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4bad      	ldr	r3, [pc, #692]	; (8003e80 <lcd_init+0x2f0>)
 8003bca:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read 0X93 */
 8003bcc:	f7ff fc3e 	bl	800344c <lcd_rd_data>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4baa      	ldr	r3, [pc, #680]	; (8003e80 <lcd_init+0x2f0>)
 8003bd6:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8003bd8:	4ba9      	ldr	r3, [pc, #676]	; (8003e80 <lcd_init+0x2f0>)
 8003bda:	889b      	ldrh	r3, [r3, #4]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	4ba7      	ldr	r3, [pc, #668]	; (8003e80 <lcd_init+0x2f0>)
 8003be2:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* Read 0X41 */
 8003be4:	f7ff fc32 	bl	800344c <lcd_rd_data>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	4ba4      	ldr	r3, [pc, #656]	; (8003e80 <lcd_init+0x2f0>)
 8003bee:	889b      	ldrh	r3, [r3, #4]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	4ba2      	ldr	r3, [pc, #648]	; (8003e80 <lcd_init+0x2f0>)
 8003bf6:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* Not 9341, try to see if it's ST7789 */
 8003bf8:	4ba1      	ldr	r3, [pc, #644]	; (8003e80 <lcd_init+0x2f0>)
 8003bfa:	889b      	ldrh	r3, [r3, #4]
 8003bfc:	f249 3241 	movw	r2, #37697	; 0x9341
 8003c00:	4293      	cmp	r3, r2
 8003c02:	f000 8122 	beq.w	8003e4a <lcd_init+0x2ba>
    {
        lcd_wr_regno(0X04);
 8003c06:	2004      	movs	r0, #4
 8003c08:	f7ff fbf6 	bl	80033f8 <lcd_wr_regno>
        lcddev.id = lcd_rd_data();      /* dummy read */
 8003c0c:	f7ff fc1e 	bl	800344c <lcd_rd_data>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b9a      	ldr	r3, [pc, #616]	; (8003e80 <lcd_init+0x2f0>)
 8003c16:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read to 0X85 */
 8003c18:	f7ff fc18 	bl	800344c <lcd_rd_data>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4b97      	ldr	r3, [pc, #604]	; (8003e80 <lcd_init+0x2f0>)
 8003c22:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read 0X85 */
 8003c24:	f7ff fc12 	bl	800344c <lcd_rd_data>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b94      	ldr	r3, [pc, #592]	; (8003e80 <lcd_init+0x2f0>)
 8003c2e:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8003c30:	4b93      	ldr	r3, [pc, #588]	; (8003e80 <lcd_init+0x2f0>)
 8003c32:	889b      	ldrh	r3, [r3, #4]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	4b91      	ldr	r3, [pc, #580]	; (8003e80 <lcd_init+0x2f0>)
 8003c3a:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* Read 0X52 */
 8003c3c:	f7ff fc06 	bl	800344c <lcd_rd_data>
 8003c40:	4603      	mov	r3, r0
 8003c42:	461a      	mov	r2, r3
 8003c44:	4b8e      	ldr	r3, [pc, #568]	; (8003e80 <lcd_init+0x2f0>)
 8003c46:	889b      	ldrh	r3, [r3, #4]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	4b8c      	ldr	r3, [pc, #560]	; (8003e80 <lcd_init+0x2f0>)
 8003c4e:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        /* Convert the ID of 8552 to 7789 */
 8003c50:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <lcd_init+0x2f0>)
 8003c52:	889b      	ldrh	r3, [r3, #4]
 8003c54:	f248 5252 	movw	r2, #34130	; 0x8552
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <lcd_init+0xd4>
        {
            lcddev.id = 0x7789;
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <lcd_init+0x2f0>)
 8003c5e:	f247 7289 	movw	r2, #30601	; 0x7789
 8003c62:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Also not ST7789, try not NT35310 */
 8003c64:	4b86      	ldr	r3, [pc, #536]	; (8003e80 <lcd_init+0x2f0>)
 8003c66:	889b      	ldrh	r3, [r3, #4]
 8003c68:	f247 7289 	movw	r2, #30601	; 0x7789
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	f000 80ec 	beq.w	8003e4a <lcd_init+0x2ba>
        {
            lcd_wr_regno(0xD4);
 8003c72:	20d4      	movs	r0, #212	; 0xd4
 8003c74:	f7ff fbc0 	bl	80033f8 <lcd_wr_regno>
            lcddev.id = lcd_rd_data();  /* dummy read */
 8003c78:	f7ff fbe8 	bl	800344c <lcd_rd_data>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b7f      	ldr	r3, [pc, #508]	; (8003e80 <lcd_init+0x2f0>)
 8003c82:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x01 */
 8003c84:	f7ff fbe2 	bl	800344c <lcd_rd_data>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b7c      	ldr	r3, [pc, #496]	; (8003e80 <lcd_init+0x2f0>)
 8003c8e:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x53 */
 8003c90:	f7ff fbdc 	bl	800344c <lcd_rd_data>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b79      	ldr	r3, [pc, #484]	; (8003e80 <lcd_init+0x2f0>)
 8003c9a:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8003c9c:	4b78      	ldr	r3, [pc, #480]	; (8003e80 <lcd_init+0x2f0>)
 8003c9e:	889b      	ldrh	r3, [r3, #4]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	4b76      	ldr	r3, [pc, #472]	; (8003e80 <lcd_init+0x2f0>)
 8003ca6:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8003ca8:	f7ff fbd0 	bl	800344c <lcd_rd_data>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b73      	ldr	r3, [pc, #460]	; (8003e80 <lcd_init+0x2f0>)
 8003cb2:	889b      	ldrh	r3, [r3, #4]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	4b71      	ldr	r3, [pc, #452]	; (8003e80 <lcd_init+0x2f0>)
 8003cba:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Also not NT35310, try to see if it is ST7796 */
 8003cbc:	4b70      	ldr	r3, [pc, #448]	; (8003e80 <lcd_init+0x2f0>)
 8003cbe:	889b      	ldrh	r3, [r3, #4]
 8003cc0:	f245 3210 	movw	r2, #21264	; 0x5310
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	f000 80c0 	beq.w	8003e4a <lcd_init+0x2ba>
            {
                lcd_wr_regno(0XD3);
 8003cca:	20d3      	movs	r0, #211	; 0xd3
 8003ccc:	f7ff fb94 	bl	80033f8 <lcd_wr_regno>
                lcddev.id = lcd_rd_data();  /* dummy read */
 8003cd0:	f7ff fbbc 	bl	800344c <lcd_rd_data>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b69      	ldr	r3, [pc, #420]	; (8003e80 <lcd_init+0x2f0>)
 8003cda:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8003cdc:	f7ff fbb6 	bl	800344c <lcd_rd_data>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <lcd_init+0x2f0>)
 8003ce6:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read 0X77 */
 8003ce8:	f7ff fbb0 	bl	800344c <lcd_rd_data>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b63      	ldr	r3, [pc, #396]	; (8003e80 <lcd_init+0x2f0>)
 8003cf2:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8003cf4:	4b62      	ldr	r3, [pc, #392]	; (8003e80 <lcd_init+0x2f0>)
 8003cf6:	889b      	ldrh	r3, [r3, #4]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4b60      	ldr	r3, [pc, #384]	; (8003e80 <lcd_init+0x2f0>)
 8003cfe:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* Read 0X96 */
 8003d00:	f7ff fba4 	bl	800344c <lcd_rd_data>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	4b5d      	ldr	r3, [pc, #372]	; (8003e80 <lcd_init+0x2f0>)
 8003d0a:	889b      	ldrh	r3, [r3, #4]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	4b5b      	ldr	r3, [pc, #364]	; (8003e80 <lcd_init+0x2f0>)
 8003d12:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0x7796)    /* Also not ST7796, try to see if it is NT35510 */
 8003d14:	4b5a      	ldr	r3, [pc, #360]	; (8003e80 <lcd_init+0x2f0>)
 8003d16:	889b      	ldrh	r3, [r3, #4]
 8003d18:	f247 7296 	movw	r2, #30614	; 0x7796
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	f000 8094 	beq.w	8003e4a <lcd_init+0x2ba>
                {
                    /* Send key (provided by manufacturer) */
                    lcd_write_reg(0xF000, 0x0055);
 8003d22:	2155      	movs	r1, #85	; 0x55
 8003d24:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003d28:	f7ff fb7a 	bl	8003420 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8003d2c:	21aa      	movs	r1, #170	; 0xaa
 8003d2e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003d32:	f7ff fb75 	bl	8003420 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 8003d36:	2152      	movs	r1, #82	; 0x52
 8003d38:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003d3c:	f7ff fb70 	bl	8003420 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 8003d40:	2108      	movs	r1, #8
 8003d42:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003d46:	f7ff fb6b 	bl	8003420 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003d50:	f7ff fb66 	bl	8003420 <lcd_write_reg>

                    lcd_wr_regno(0xC500);       /* Read the lower eight bits of the ID */
 8003d54:	f44f 4045 	mov.w	r0, #50432	; 0xc500
 8003d58:	f7ff fb4e 	bl	80033f8 <lcd_wr_regno>
                    lcddev.id = lcd_rd_data();  /* Read back 0x55 */
 8003d5c:	f7ff fb76 	bl	800344c <lcd_rd_data>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b46      	ldr	r3, [pc, #280]	; (8003e80 <lcd_init+0x2f0>)
 8003d66:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8003d68:	4b45      	ldr	r3, [pc, #276]	; (8003e80 <lcd_init+0x2f0>)
 8003d6a:	889b      	ldrh	r3, [r3, #4]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <lcd_init+0x2f0>)
 8003d72:	809a      	strh	r2, [r3, #4]

                    lcd_wr_regno(0xC501);       /* Read the high eight bits of the ID */
 8003d74:	f24c 5001 	movw	r0, #50433	; 0xc501
 8003d78:	f7ff fb3e 	bl	80033f8 <lcd_wr_regno>
                    lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8003d7c:	f7ff fb66 	bl	800344c <lcd_rd_data>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <lcd_init+0x2f0>)
 8003d86:	889b      	ldrh	r3, [r3, #4]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	4b3c      	ldr	r3, [pc, #240]	; (8003e80 <lcd_init+0x2f0>)
 8003d8e:	809a      	strh	r2, [r3, #4]

                    HAL_Delay(5);                /* Wait 5ms, because instruction 0XC501 is a software reset instruction for 1963, wait 5ms for 1963 reset to complete */
 8003d90:	2005      	movs	r0, #5
 8003d92:	f001 fa4f 	bl	8005234 <HAL_Delay>

                    if (lcddev.id != 0x5510)    /* Also not NT5510, try to see if it is ILI9806 */
 8003d96:	4b3a      	ldr	r3, [pc, #232]	; (8003e80 <lcd_init+0x2f0>)
 8003d98:	889b      	ldrh	r3, [r3, #4]
 8003d9a:	f245 5210 	movw	r2, #21776	; 0x5510
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d053      	beq.n	8003e4a <lcd_init+0x2ba>
                    {
                        lcd_wr_regno(0XD3);
 8003da2:	20d3      	movs	r0, #211	; 0xd3
 8003da4:	f7ff fb28 	bl	80033f8 <lcd_wr_regno>
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8003da8:	f7ff fb50 	bl	800344c <lcd_rd_data>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <lcd_init+0x2f0>)
 8003db2:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X00 */
 8003db4:	f7ff fb4a 	bl	800344c <lcd_rd_data>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <lcd_init+0x2f0>)
 8003dbe:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X98 */
 8003dc0:	f7ff fb44 	bl	800344c <lcd_rd_data>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b2d      	ldr	r3, [pc, #180]	; (8003e80 <lcd_init+0x2f0>)
 8003dca:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8003dcc:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <lcd_init+0x2f0>)
 8003dce:	889b      	ldrh	r3, [r3, #4]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <lcd_init+0x2f0>)
 8003dd6:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* Read back 0X06 */
 8003dd8:	f7ff fb38 	bl	800344c <lcd_rd_data>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <lcd_init+0x2f0>)
 8003de2:	889b      	ldrh	r3, [r3, #4]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <lcd_init+0x2f0>)
 8003dea:	809a      	strh	r2, [r3, #4]

                        if (lcddev.id != 0x9806)    /* Not ILI9806 either, try to see if it's SSD1963 */
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <lcd_init+0x2f0>)
 8003dee:	889b      	ldrh	r3, [r3, #4]
 8003df0:	f649 0206 	movw	r2, #38918	; 0x9806
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d028      	beq.n	8003e4a <lcd_init+0x2ba>
                        {
                            lcd_wr_regno(0xA1);
 8003df8:	20a1      	movs	r0, #161	; 0xa1
 8003dfa:	f7ff fafd 	bl	80033f8 <lcd_wr_regno>
                            lcddev.id = lcd_rd_data();
 8003dfe:	f7ff fb25 	bl	800344c <lcd_rd_data>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <lcd_init+0x2f0>)
 8003e08:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* Read back 0x57 */
 8003e0a:	f7ff fb1f 	bl	800344c <lcd_rd_data>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <lcd_init+0x2f0>)
 8003e14:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <lcd_init+0x2f0>)
 8003e18:	889b      	ldrh	r3, [r3, #4]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <lcd_init+0x2f0>)
 8003e20:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* Read back 0x61 */
 8003e22:	f7ff fb13 	bl	800344c <lcd_rd_data>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <lcd_init+0x2f0>)
 8003e2c:	889b      	ldrh	r3, [r3, #4]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <lcd_init+0x2f0>)
 8003e34:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* The ID read back by SSD1963 is 5761H, which we force to be 1963 for convenience */
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <lcd_init+0x2f0>)
 8003e38:	889b      	ldrh	r3, [r3, #4]
 8003e3a:	f245 7261 	movw	r2, #22369	; 0x5761
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d103      	bne.n	8003e4a <lcd_init+0x2ba>
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <lcd_init+0x2f0>)
 8003e44:	f641 1263 	movw	r2, #6499	; 0x1963
 8003e48:	809a      	strh	r2, [r3, #4]
                }
            }
        }
    }

    if (lcddev.id == 0X7789)
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <lcd_init+0x2f0>)
 8003e4c:	889b      	ldrh	r3, [r3, #4]
 8003e4e:	f247 7289 	movw	r2, #30601	; 0x7789
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d102      	bne.n	8003e5c <lcd_init+0x2cc>
    {
        lcd_ex_st7789_reginit();    /* Perform ST7789 initialization */
 8003e56:	f7fc fe91 	bl	8000b7c <lcd_ex_st7789_reginit>
 8003e5a:	e039      	b.n	8003ed0 <lcd_init+0x340>
    }
    else if (lcddev.id == 0X9341)
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <lcd_init+0x2f0>)
 8003e5e:	889b      	ldrh	r3, [r3, #4]
 8003e60:	f249 3241 	movw	r2, #37697	; 0x9341
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d102      	bne.n	8003e6e <lcd_init+0x2de>
    {
        lcd_ex_ili9341_reginit();   /* Perform ILI9341 initialization */
 8003e68:	f7fc ff5e 	bl	8000d28 <lcd_ex_ili9341_reginit>
 8003e6c:	e030      	b.n	8003ed0 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x5310)
 8003e6e:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <lcd_init+0x2f0>)
 8003e70:	889b      	ldrh	r3, [r3, #4]
 8003e72:	f245 3210 	movw	r2, #21264	; 0x5310
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d104      	bne.n	8003e84 <lcd_init+0x2f4>
    {
        lcd_ex_nt35310_reginit();   /* Perform NT35310 initialization */
 8003e7a:	f7fd f86d 	bl	8000f58 <lcd_ex_nt35310_reginit>
 8003e7e:	e027      	b.n	8003ed0 <lcd_init+0x340>
 8003e80:	2000008c 	.word	0x2000008c
    }
    else if (lcddev.id == 0x7796)
 8003e84:	4b44      	ldr	r3, [pc, #272]	; (8003f98 <lcd_init+0x408>)
 8003e86:	889b      	ldrh	r3, [r3, #4]
 8003e88:	f247 7296 	movw	r2, #30614	; 0x7796
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d102      	bne.n	8003e96 <lcd_init+0x306>
    {
        lcd_ex_st7796_reginit();    /* Perform ST7796 initialization */
 8003e90:	f7fd ffdd 	bl	8001e4e <lcd_ex_st7796_reginit>
 8003e94:	e01c      	b.n	8003ed0 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x5510)
 8003e96:	4b40      	ldr	r3, [pc, #256]	; (8003f98 <lcd_init+0x408>)
 8003e98:	889b      	ldrh	r3, [r3, #4]
 8003e9a:	f245 5210 	movw	r2, #21776	; 0x5510
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d102      	bne.n	8003ea8 <lcd_init+0x318>
    {
        lcd_ex_nt35510_reginit();   /* Perform NT35510 initialization */
 8003ea2:	f7fe f8b9 	bl	8002018 <lcd_ex_nt35510_reginit>
 8003ea6:	e013      	b.n	8003ed0 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x9806)
 8003ea8:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <lcd_init+0x408>)
 8003eaa:	889b      	ldrh	r3, [r3, #4]
 8003eac:	f649 0206 	movw	r2, #38918	; 0x9806
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d102      	bne.n	8003eba <lcd_init+0x32a>
    {
        lcd_ex_ili9806_reginit();   /* Perform ILI9806 initialization */
 8003eb4:	f7ff f830 	bl	8002f18 <lcd_ex_ili9806_reginit>
 8003eb8:	e00a      	b.n	8003ed0 <lcd_init+0x340>
    }
    else if (lcddev.id == 0x1963)
 8003eba:	4b37      	ldr	r3, [pc, #220]	; (8003f98 <lcd_init+0x408>)
 8003ebc:	889b      	ldrh	r3, [r3, #4]
 8003ebe:	f641 1263 	movw	r2, #6499	; 0x1963
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d104      	bne.n	8003ed0 <lcd_init+0x340>
    {
        lcd_ex_ssd1963_reginit();   /* Perform SSD1963 initialization */
 8003ec6:	f7ff f9c9 	bl	800325c <lcd_ex_ssd1963_reginit>
        lcd_ssd_backlight_set(100); /* The backlight is set to its brightest */
 8003eca:	2064      	movs	r0, #100	; 0x64
 8003ecc:	f7ff fd54 	bl	8003978 <lcd_ssd_backlight_set>
    }

    if (lcddev.id == 0x7789)
 8003ed0:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <lcd_init+0x408>)
 8003ed2:	889b      	ldrh	r3, [r3, #4]
 8003ed4:	f247 7289 	movw	r2, #30601	; 0x7789
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10d      	bne.n	8003ef8 <lcd_init+0x368>
    {
    	ExtTiming.AddressSetupTime = 3;
 8003edc:	2303      	movs	r3, #3
 8003ede:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 3;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <lcd_init+0x40c>)
 8003ee6:	6858      	ldr	r0, [r3, #4]
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <lcd_init+0x40c>)
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <lcd_init+0x40c>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	1d39      	adds	r1, r7, #4
 8003ef2:	f003 ffc7 	bl	8007e84 <FSMC_NORSRAM_Extended_Timing_Init>
 8003ef6:	e03e      	b.n	8003f76 <lcd_init+0x3e6>
    }
    else if ((lcddev.id == 0x5310) ||
 8003ef8:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <lcd_init+0x408>)
 8003efa:	889b      	ldrh	r3, [r3, #4]
 8003efc:	f245 3210 	movw	r2, #21264	; 0x5310
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d017      	beq.n	8003f34 <lcd_init+0x3a4>
             (lcddev.id == 0x7796) ||
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <lcd_init+0x408>)
 8003f06:	889b      	ldrh	r3, [r3, #4]
    else if ((lcddev.id == 0x5310) ||
 8003f08:	f247 7296 	movw	r2, #30614	; 0x7796
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d011      	beq.n	8003f34 <lcd_init+0x3a4>
             (lcddev.id == 0x5510) ||
 8003f10:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <lcd_init+0x408>)
 8003f12:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x7796) ||
 8003f14:	f245 5210 	movw	r2, #21776	; 0x5510
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <lcd_init+0x3a4>
             (lcddev.id == 0x9806) ||
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <lcd_init+0x408>)
 8003f1e:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x5510) ||
 8003f20:	f649 0206 	movw	r2, #38918	; 0x9806
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d005      	beq.n	8003f34 <lcd_init+0x3a4>
             (lcddev.id == 0x1963))
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <lcd_init+0x408>)
 8003f2a:	889b      	ldrh	r3, [r3, #4]
             (lcddev.id == 0x9806) ||
 8003f2c:	f641 1263 	movw	r2, #6499	; 0x1963
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d10d      	bne.n	8003f50 <lcd_init+0x3c0>
    {
    	ExtTiming.AddressSetupTime = 2;
 8003f34:	2302      	movs	r3, #2
 8003f36:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 2;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 8003f3c:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <lcd_init+0x40c>)
 8003f3e:	6858      	ldr	r0, [r3, #4]
 8003f40:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <lcd_init+0x40c>)
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <lcd_init+0x40c>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	1d39      	adds	r1, r7, #4
 8003f4a:	f003 ff9b 	bl	8007e84 <FSMC_NORSRAM_Extended_Timing_Init>
 8003f4e:	e012      	b.n	8003f76 <lcd_init+0x3e6>
    }
    else if (lcddev.id == 0x9341)
 8003f50:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <lcd_init+0x408>)
 8003f52:	889b      	ldrh	r3, [r3, #4]
 8003f54:	f249 3241 	movw	r2, #37697	; 0x9341
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10c      	bne.n	8003f76 <lcd_init+0x3e6>
    {
    	ExtTiming.AddressSetupTime = 1;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	607b      	str	r3, [r7, #4]
    	ExtTiming.DataSetupTime = 1;
 8003f60:	2301      	movs	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(hsram1.Extended, &ExtTiming, hsram1.Init.NSBank, hsram1.Init.ExtendedMode);
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <lcd_init+0x40c>)
 8003f66:	6858      	ldr	r0, [r3, #4]
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <lcd_init+0x40c>)
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <lcd_init+0x40c>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	1d39      	adds	r1, r7, #4
 8003f72:	f003 ff87 	bl	8007e84 <FSMC_NORSRAM_Extended_Timing_Init>
    }

    lcd_display_dir(0); /* Portrait is the default */
 8003f76:	2000      	movs	r0, #0
 8003f78:	f7ff fd32 	bl	80039e0 <lcd_display_dir>
    LCD_BL(1);          /* Light up the backlight */
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	2120      	movs	r1, #32
 8003f80:	4807      	ldr	r0, [pc, #28]	; (8003fa0 <lcd_init+0x410>)
 8003f82:	f002 f9b5 	bl	80062f0 <HAL_GPIO_WritePin>
    lcd_clear(WHITE);
 8003f86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f8a:	f000 f80b 	bl	8003fa4 <lcd_clear>
}
 8003f8e:	bf00      	nop
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000008c 	.word	0x2000008c
 8003f9c:	200000f8 	.word	0x200000f8
 8003fa0:	40020400 	.word	0x40020400

08003fa4 <lcd_clear>:
 * @brief   Screen clearing function
 * @param   color : To clear the screen color
 * @retval  None.
 */
void lcd_clear(uint16_t color)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]

    totalpoint = lcddev.width * lcddev.height;    /* Get the total points */
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <lcd_clear+0x54>)
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <lcd_clear+0x54>)
 8003fbe:	885b      	ldrh	r3, [r3, #2]
 8003fc0:	fb02 f303 	mul.w	r3, r2, r3
 8003fc4:	60bb      	str	r3, [r7, #8]
    lcd_set_cursor(0x00, 0x0000);   /* Sets the cursor position */
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f7ff fa61 	bl	8003490 <lcd_set_cursor>
    lcd_write_ram_prepare();        /* Start writing GRAM */
 8003fce:	f7ff fa4f 	bl	8003470 <lcd_write_ram_prepare>

    for (index = 0; index < totalpoint; index++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e005      	b.n	8003fe4 <lcd_clear+0x40>
    {
        LCD->LCD_RAM = color;
 8003fd8:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <lcd_clear+0x58>)
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d3f5      	bcc.n	8003fd8 <lcd_clear+0x34>
   }
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2000008c 	.word	0x2000008c
 8003ffc:	600ffffe 	.word	0x600ffffe

08004000 <lcd_show_char>:
 * @param   mode  : Overlay mode (1); Non-superposition (0);
 * @param   color : The color of the character;
 * @retval  None.
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	4604      	mov	r4, r0
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	461a      	mov	r2, r3
 800400e:	4623      	mov	r3, r4
 8004010:	80fb      	strh	r3, [r7, #6]
 8004012:	4603      	mov	r3, r0
 8004014:	80bb      	strh	r3, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	70fb      	strb	r3, [r7, #3]
 800401a:	4613      	mov	r3, r2
 800401c:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 800401e:	88bb      	ldrh	r3, [r7, #4]
 8004020:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]

    csize = ((size >> 3) + (((size & 0x7) != 0) ? 1 : 0)) * (size >> 1); /* Get the number of bytes of a font character corresponding to the dot matrix set */
 800402a:	78bb      	ldrb	r3, [r7, #2]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	78bb      	ldrb	r3, [r7, #2]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4413      	add	r3, r2
 8004044:	b2da      	uxtb	r2, r3
 8004046:	78bb      	ldrb	r3, [r7, #2]
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	b2db      	uxtb	r3, r3
 800404c:	fb12 f303 	smulbb	r3, r2, r3
 8004050:	737b      	strb	r3, [r7, #13]
    chr -= ' ';    /* Get the offset value (ASCII fonts start modulo Spaces, so - "is the font for the corresponding character) */
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	3b20      	subs	r3, #32
 8004056:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8004058:	78bb      	ldrb	r3, [r7, #2]
 800405a:	3b0c      	subs	r3, #12
 800405c:	2b14      	cmp	r3, #20
 800405e:	f200 809a 	bhi.w	8004196 <lcd_show_char+0x196>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <lcd_show_char+0x68>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	080040bd 	.word	0x080040bd
 800406c:	08004197 	.word	0x08004197
 8004070:	08004197 	.word	0x08004197
 8004074:	08004197 	.word	0x08004197
 8004078:	080040cf 	.word	0x080040cf
 800407c:	08004197 	.word	0x08004197
 8004080:	08004197 	.word	0x08004197
 8004084:	08004197 	.word	0x08004197
 8004088:	08004197 	.word	0x08004197
 800408c:	08004197 	.word	0x08004197
 8004090:	08004197 	.word	0x08004197
 8004094:	08004197 	.word	0x08004197
 8004098:	080040db 	.word	0x080040db
 800409c:	08004197 	.word	0x08004197
 80040a0:	08004197 	.word	0x08004197
 80040a4:	08004197 	.word	0x08004197
 80040a8:	08004197 	.word	0x08004197
 80040ac:	08004197 	.word	0x08004197
 80040b0:	08004197 	.word	0x08004197
 80040b4:	08004197 	.word	0x08004197
 80040b8:	080040ed 	.word	0x080040ed
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[(uint8_t)chr];  /* Call 1206 font */
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4a37      	ldr	r2, [pc, #220]	; (80041a4 <lcd_show_char+0x1a4>)
 80040c8:	4413      	add	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
            break;
 80040cc:	e014      	b.n	80040f8 <lcd_show_char+0xf8>

        case 16:
            pfont = (uint8_t *)asc2_1608[(uint8_t)chr];  /* Call 1608 font */
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	4a35      	ldr	r2, [pc, #212]	; (80041a8 <lcd_show_char+0x1a8>)
 80040d4:	4413      	add	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
            break;
 80040d8:	e00e      	b.n	80040f8 <lcd_show_char+0xf8>

        case 24:
            pfont = (uint8_t *)asc2_2412[(uint8_t)chr];  /* Call 2412 font */
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4a31      	ldr	r2, [pc, #196]	; (80041ac <lcd_show_char+0x1ac>)
 80040e6:	4413      	add	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
            break;
 80040ea:	e005      	b.n	80040f8 <lcd_show_char+0xf8>

        case 32:
            pfont = (uint8_t *)asc2_3216[(uint8_t)chr];  /* Call 3216 font */
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	019b      	lsls	r3, r3, #6
 80040f0:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <lcd_show_char+0x1b0>)
 80040f2:	4413      	add	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
            break;
 80040f6:	bf00      	nop

        default:
            return ;
    }

    y0 = y;
 80040f8:	88bb      	ldrh	r3, [r7, #4]
 80040fa:	81fb      	strh	r3, [r7, #14]
    for (t = 0; t < csize; t++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	757b      	strb	r3, [r7, #21]
 8004100:	e044      	b.n	800418c <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* Retrieves the dot matrix data of the character */
 8004102:	7d7b      	ldrb	r3, [r7, #21]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 800410c:	2300      	movs	r3, #0
 800410e:	75bb      	strb	r3, [r7, #22]
 8004110:	e034      	b.n	800417c <lcd_show_char+0x17c>
        {
            if ((temp & 0x80) != 0)        /* Valid points, need to be displayed */
 8004112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da06      	bge.n	8004128 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* Let me draw the dot, let me show the dot */
 800411a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800411c:	88b9      	ldrh	r1, [r7, #4]
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fc0d 	bl	8003940 <lcd_draw_point>
 8004126:	e00a      	b.n	800413e <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* Invalid point, not shown */
 8004128:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* Drawing the background color is equivalent to not showing the point (note that the background color is controlled by a global variable). */
 8004130:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <lcd_show_char+0x1b4>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	88b9      	ldrh	r1, [r7, #4]
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fc01 	bl	8003940 <lcd_draw_point>
            }

            temp <<= 1; /* Shift in order to get the state of the next bit */
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	75fb      	strb	r3, [r7, #23]
            y++;
 8004144:	88bb      	ldrh	r3, [r7, #4]
 8004146:	3301      	adds	r3, #1
 8004148:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* Hyper region */
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <lcd_show_char+0x1b8>)
 800414c:	885b      	ldrh	r3, [r3, #2]
 800414e:	88ba      	ldrh	r2, [r7, #4]
 8004150:	429a      	cmp	r2, r3
 8004152:	d222      	bcs.n	800419a <lcd_show_char+0x19a>

            if ((y - y0) == size)
 8004154:	88ba      	ldrh	r2, [r7, #4]
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	1ad2      	subs	r2, r2, r3
 800415a:	78bb      	ldrb	r3, [r7, #2]
 800415c:	429a      	cmp	r2, r3
 800415e:	d10a      	bne.n	8004176 <lcd_show_char+0x176>
            {
                y = y0;          /* y coordinate reset */
 8004160:	89fb      	ldrh	r3, [r7, #14]
 8004162:	80bb      	strh	r3, [r7, #4]
                x++;             /* The x-coordinate is increasing */
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	3301      	adds	r3, #1
 8004168:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <lcd_show_char+0x1b8>)
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	429a      	cmp	r2, r3
 8004172:	d307      	bcc.n	8004184 <lcd_show_char+0x184>
                {
                    return;     /* The x-coordinate hyperregion */
 8004174:	e012      	b.n	800419c <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 8004176:	7dbb      	ldrb	r3, [r7, #22]
 8004178:	3301      	adds	r3, #1
 800417a:	75bb      	strb	r3, [r7, #22]
 800417c:	7dbb      	ldrb	r3, [r7, #22]
 800417e:	2b07      	cmp	r3, #7
 8004180:	d9c7      	bls.n	8004112 <lcd_show_char+0x112>
 8004182:	e000      	b.n	8004186 <lcd_show_char+0x186>
                }

                break;
 8004184:	bf00      	nop
    for (t = 0; t < csize; t++)
 8004186:	7d7b      	ldrb	r3, [r7, #21]
 8004188:	3301      	adds	r3, #1
 800418a:	757b      	strb	r3, [r7, #21]
 800418c:	7d7a      	ldrb	r2, [r7, #21]
 800418e:	7b7b      	ldrb	r3, [r7, #13]
 8004190:	429a      	cmp	r2, r3
 8004192:	d3b6      	bcc.n	8004102 <lcd_show_char+0x102>
 8004194:	e002      	b.n	800419c <lcd_show_char+0x19c>
            return ;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* Hyper region */
 800419a:	bf00      	nop
            }
        }
    }
}
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd90      	pop	{r4, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	080089a0 	.word	0x080089a0
 80041a8:	08008e14 	.word	0x08008e14
 80041ac:	08009404 	.word	0x08009404
 80041b0:	0800a160 	.word	0x0800a160
 80041b4:	20000004 	.word	0x20000004
 80041b8:	2000008c 	.word	0x2000008c

080041bc <lcd_pow>:
 * @param   m   : The base number
 * @param   n   : Exponent
 * @retval  None.
 */
static uint32_t lcd_pow(uint8_t m, uint8_t n)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	460a      	mov	r2, r1
 80041c6:	71fb      	strb	r3, [r7, #7]
 80041c8:	4613      	mov	r3, r2
 80041ca:	71bb      	strb	r3, [r7, #6]
    uint32_t result = 1;
 80041cc:	2301      	movs	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]

    while (n--)result *= m;
 80041d0:	e004      	b.n	80041dc <lcd_pow+0x20>
 80041d2:	79fa      	ldrb	r2, [r7, #7]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	79bb      	ldrb	r3, [r7, #6]
 80041de:	1e5a      	subs	r2, r3, #1
 80041e0:	71ba      	strb	r2, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f5      	bne.n	80041d2 <lcd_pow+0x16>

    return result;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <lcd_show_xnum>:
 *           [0]  :0, non-overlay display; 1, overlay display.
 * @param   color : The color of the number;
 * @retval  None.
 */
void lcd_show_xnum(uint16_t x, uint16_t y, uint32_t num, uint8_t len, uint8_t size, uint8_t mode, uint16_t color)
{
 80041f4:	b5b0      	push	{r4, r5, r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60ba      	str	r2, [r7, #8]
 80041fc:	461a      	mov	r2, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	81fb      	strh	r3, [r7, #14]
 8004202:	460b      	mov	r3, r1
 8004204:	81bb      	strh	r3, [r7, #12]
 8004206:	4613      	mov	r3, r2
 8004208:	71fb      	strb	r3, [r7, #7]
    uint8_t t, temp;
    uint8_t enshow = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	75bb      	strb	r3, [r7, #22]

    for (t = 0; t < len; t++)   /* Cycle by the total number of display bits */
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
 8004212:	e085      	b.n	8004320 <lcd_show_xnum+0x12c>
    {
        temp = (num / lcd_pow(10, len - t - 1)) % 10;    /* Gets the number of the corresponding bit */
 8004214:	79fa      	ldrb	r2, [r7, #7]
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b2db      	uxtb	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	200a      	movs	r0, #10
 8004224:	f7ff ffca 	bl	80041bc <lcd_pow>
 8004228:	4602      	mov	r2, r0
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004230:	4b40      	ldr	r3, [pc, #256]	; (8004334 <lcd_show_xnum+0x140>)
 8004232:	fba3 2301 	umull	r2, r3, r3, r1
 8004236:	08da      	lsrs	r2, r3, #3
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	1aca      	subs	r2, r1, r3
 8004242:	4613      	mov	r3, r2
 8004244:	757b      	strb	r3, [r7, #21]

        if (enshow == 0 && t < (len - 1))   /* Display is not enabled, and there is still bit to display */
 8004246:	7dbb      	ldrb	r3, [r7, #22]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d147      	bne.n	80042dc <lcd_show_xnum+0xe8>
 800424c:	7dfa      	ldrb	r2, [r7, #23]
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	3b01      	subs	r3, #1
 8004252:	429a      	cmp	r2, r3
 8004254:	da42      	bge.n	80042dc <lcd_show_xnum+0xe8>
        {
            if (temp == 0)
 8004256:	7d7b      	ldrb	r3, [r7, #21]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d13d      	bne.n	80042d8 <lcd_show_xnum+0xe4>
            {
                if (mode & 0X80)   /* The high bits need to be filled with zeros */
 800425c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8004260:	2b00      	cmp	r3, #0
 8004262:	da1c      	bge.n	800429e <lcd_show_xnum+0xaa>
                {
                    lcd_show_char(x + (size / 2)*t, y, '0', size, mode & 0X01, color);  /* put a 0 in there */
 8004264:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	b29a      	uxth	r2, r3
 800426e:	7dfb      	ldrb	r3, [r7, #23]
 8004270:	b29b      	uxth	r3, r3
 8004272:	fb12 f303 	smulbb	r3, r2, r3
 8004276:	b29a      	uxth	r2, r3
 8004278:	89fb      	ldrh	r3, [r7, #14]
 800427a:	4413      	add	r3, r2
 800427c:	b298      	uxth	r0, r3
 800427e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800428c:	89b9      	ldrh	r1, [r7, #12]
 800428e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004290:	9201      	str	r2, [sp, #4]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	4623      	mov	r3, r4
 8004296:	2230      	movs	r2, #48	; 0x30
 8004298:	f7ff feb2 	bl	8004000 <lcd_show_char>
                else
                {
                    lcd_show_char(x + (size / 2)*t, y, ' ', size, mode & 0X01, color);  /* Use Spaces for space */
                }

                continue;
 800429c:	e03d      	b.n	800431a <lcd_show_xnum+0x126>
                    lcd_show_char(x + (size / 2)*t, y, ' ', size, mode & 0X01, color);  /* Use Spaces for space */
 800429e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	fb12 f303 	smulbb	r3, r2, r3
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	89fb      	ldrh	r3, [r7, #14]
 80042b4:	4413      	add	r3, r2
 80042b6:	b298      	uxth	r0, r3
 80042b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80042c6:	89b9      	ldrh	r1, [r7, #12]
 80042c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80042ca:	9201      	str	r2, [sp, #4]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	4623      	mov	r3, r4
 80042d0:	2220      	movs	r2, #32
 80042d2:	f7ff fe95 	bl	8004000 <lcd_show_char>
                continue;
 80042d6:	e020      	b.n	800431a <lcd_show_xnum+0x126>
            }
            else
            {
                enshow = 1; /* Enable display */
 80042d8:	2301      	movs	r3, #1
 80042da:	75bb      	strb	r3, [r7, #22]
            }

        }

        lcd_show_char(x + (size / 2)*t, y, temp + '0', size, mode & 0X01, color);
 80042dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	fb12 f303 	smulbb	r3, r2, r3
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	4413      	add	r3, r2
 80042f4:	b298      	uxth	r0, r3
 80042f6:	7d7b      	ldrb	r3, [r7, #21]
 80042f8:	3330      	adds	r3, #48	; 0x30
 80042fa:	b2dc      	uxtb	r4, r3
 80042fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f897 5028 	ldrb.w	r5, [r7, #40]	; 0x28
 800430a:	89b9      	ldrh	r1, [r7, #12]
 800430c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800430e:	9201      	str	r2, [sp, #4]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	462b      	mov	r3, r5
 8004314:	4622      	mov	r2, r4
 8004316:	f7ff fe73 	bl	8004000 <lcd_show_char>
    for (t = 0; t < len; t++)   /* Cycle by the total number of display bits */
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	3301      	adds	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
 8004320:	7dfa      	ldrb	r2, [r7, #23]
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	429a      	cmp	r2, r3
 8004326:	f4ff af75 	bcc.w	8004214 <lcd_show_xnum+0x20>
    }
}
 800432a:	bf00      	nop
 800432c:	bf00      	nop
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bdb0      	pop	{r4, r5, r7, pc}
 8004334:	cccccccd 	.word	0xcccccccd

08004338 <lcd_show_string>:
 * @param   p            : The first address of the string
 * @param   color        : The color of the string;
 * @retval  None
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b087      	sub	sp, #28
 800433c:	af02      	add	r7, sp, #8
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	461a      	mov	r2, r3
 8004346:	4623      	mov	r3, r4
 8004348:	80fb      	strh	r3, [r7, #6]
 800434a:	4603      	mov	r3, r0
 800434c:	80bb      	strh	r3, [r7, #4]
 800434e:	460b      	mov	r3, r1
 8004350:	807b      	strh	r3, [r7, #2]
 8004352:	4613      	mov	r3, r2
 8004354:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	73fb      	strb	r3, [r7, #15]
    width += x;
 800435a:	887a      	ldrh	r2, [r7, #2]
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	4413      	add	r3, r2
 8004360:	807b      	strh	r3, [r7, #2]
    height += y;
 8004362:	883a      	ldrh	r2, [r7, #0]
 8004364:	88bb      	ldrh	r3, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 800436a:	e027      	b.n	80043bc <lcd_show_string+0x84>
    {
        if (x >= width)
 800436c:	88fa      	ldrh	r2, [r7, #6]
 800436e:	887b      	ldrh	r3, [r7, #2]
 8004370:	429a      	cmp	r2, r3
 8004372:	d307      	bcc.n	8004384 <lcd_show_string+0x4c>
        {
            x = x0;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	80fb      	strh	r3, [r7, #6]
            y += size;
 8004378:	f897 3020 	ldrb.w	r3, [r7, #32]
 800437c:	b29a      	uxth	r2, r3
 800437e:	88bb      	ldrh	r3, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* quit */
 8004384:	88ba      	ldrh	r2, [r7, #4]
 8004386:	883b      	ldrh	r3, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d220      	bcs.n	80043ce <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	f897 4020 	ldrb.w	r4, [r7, #32]
 8004394:	88b9      	ldrh	r1, [r7, #4]
 8004396:	88f8      	ldrh	r0, [r7, #6]
 8004398:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	2300      	movs	r3, #0
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	4623      	mov	r3, r4
 80043a2:	f7ff fe2d 	bl	8004000 <lcd_show_char>
        x += size / 2;
 80043a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	4413      	add	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
        p++;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b7e      	cmp	r3, #126	; 0x7e
 80043c2:	d805      	bhi.n	80043d0 <lcd_show_string+0x98>
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b1f      	cmp	r3, #31
 80043ca:	d8cf      	bhi.n	800436c <lcd_show_string+0x34>
    }
}
 80043cc:	e000      	b.n	80043d0 <lcd_show_string+0x98>
        if (y >= height)break;  /* quit */
 80043ce:	bf00      	nop
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd90      	pop	{r4, r7, pc}

080043d8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80043de:	463b      	mov	r3, r7
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <MX_ADC3_Init+0x98>)
 80043ec:	4a21      	ldr	r2, [pc, #132]	; (8004474 <MX_ADC3_Init+0x9c>)
 80043ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <MX_ADC3_Init+0x98>)
 80043f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80043f8:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <MX_ADC3_Init+0x98>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80043fe:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <MX_ADC3_Init+0x98>)
 8004400:	2200      	movs	r2, #0
 8004402:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <MX_ADC3_Init+0x98>)
 8004406:	2200      	movs	r2, #0
 8004408:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <MX_ADC3_Init+0x98>)
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <MX_ADC3_Init+0x98>)
 8004414:	2200      	movs	r2, #0
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <MX_ADC3_Init+0x98>)
 800441a:	4a17      	ldr	r2, [pc, #92]	; (8004478 <MX_ADC3_Init+0xa0>)
 800441c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <MX_ADC3_Init+0x98>)
 8004420:	2200      	movs	r2, #0
 8004422:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <MX_ADC3_Init+0x98>)
 8004426:	2201      	movs	r2, #1
 8004428:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <MX_ADC3_Init+0x98>)
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <MX_ADC3_Init+0x98>)
 8004434:	2201      	movs	r2, #1
 8004436:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004438:	480d      	ldr	r0, [pc, #52]	; (8004470 <MX_ADC3_Init+0x98>)
 800443a:	f000 ff1f 	bl	800527c <HAL_ADC_Init>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8004444:	f000 fc56 	bl	8004cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004448:	2301      	movs	r3, #1
 800444a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800444c:	2301      	movs	r3, #1
 800444e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004450:	2307      	movs	r3, #7
 8004452:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004454:	463b      	mov	r3, r7
 8004456:	4619      	mov	r1, r3
 8004458:	4805      	ldr	r0, [pc, #20]	; (8004470 <MX_ADC3_Init+0x98>)
 800445a:	f001 f8bd 	bl	80055d8 <HAL_ADC_ConfigChannel>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8004464:	f000 fc46 	bl	8004cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	2000009c 	.word	0x2000009c
 8004474:	40012200 	.word	0x40012200
 8004478:	0f000001 	.word	0x0f000001

0800447c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <HAL_ADC_MspInit+0x7c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d127      	bne.n	80044ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	4b16      	ldr	r3, [pc, #88]	; (80044fc <HAL_ADC_MspInit+0x80>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	4a15      	ldr	r2, [pc, #84]	; (80044fc <HAL_ADC_MspInit+0x80>)
 80044a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ac:	6453      	str	r3, [r2, #68]	; 0x44
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <HAL_ADC_MspInit+0x80>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <HAL_ADC_MspInit+0x80>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a0e      	ldr	r2, [pc, #56]	; (80044fc <HAL_ADC_MspInit+0x80>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <HAL_ADC_MspInit+0x80>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80044d6:	2302      	movs	r3, #2
 80044d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044da:	2303      	movs	r3, #3
 80044dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e2:	f107 0314 	add.w	r3, r7, #20
 80044e6:	4619      	mov	r1, r3
 80044e8:	4805      	ldr	r0, [pc, #20]	; (8004500 <HAL_ADC_MspInit+0x84>)
 80044ea:	f001 fd4d 	bl	8005f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80044ee:	bf00      	nop
 80044f0:	3728      	adds	r7, #40	; 0x28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40012200 	.word	0x40012200
 80044fc:	40023800 	.word	0x40023800
 8004500:	40020000 	.word	0x40020000

08004504 <adc_get_result>:
 * @brief   Gets the ADC converted result
 * @param   None
 * @retval  None
 */
uint32_t adc_get_result(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc3);                            /* Turn on the ADC */
 8004508:	4806      	ldr	r0, [pc, #24]	; (8004524 <adc_get_result+0x20>)
 800450a:	f000 fefb 	bl	8005304 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, 10);            /* Round robin transformation */
 800450e:	210a      	movs	r1, #10
 8004510:	4804      	ldr	r0, [pc, #16]	; (8004524 <adc_get_result+0x20>)
 8004512:	f000 ffc9 	bl	80054a8 <HAL_ADC_PollForConversion>
    return (uint16_t)HAL_ADC_GetValue(&hadc3);        /* Returns the result of the last ADC3 rule group transformation */
 8004516:	4803      	ldr	r0, [pc, #12]	; (8004524 <adc_get_result+0x20>)
 8004518:	f001 f851 	bl	80055be <HAL_ADC_GetValue>
 800451c:	4603      	mov	r3, r0
 800451e:	b29b      	uxth	r3, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	2000009c 	.word	0x2000009c

08004528 <adc_get_result_average>:
 * @brief   Takes the transformation value of the channel ch, takes it times, and averages it
 * @param   times : Get the number of times
 * @retval  channel ch the average of times conversion results
 */
uint32_t adc_get_result_average(uint8_t times)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_val = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
    uint8_t t;

    for (t = 0; t < times; t++)     /* Get The times data */
 8004536:	2300      	movs	r3, #0
 8004538:	72fb      	strb	r3, [r7, #11]
 800453a:	e00b      	b.n	8004554 <adc_get_result_average+0x2c>
    {
        temp_val += adc_get_result();
 800453c:	f7ff ffe2 	bl	8004504 <adc_get_result>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4413      	add	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
        HAL_Delay(5);               /* delay 5ms */
 8004548:	2005      	movs	r0, #5
 800454a:	f000 fe73 	bl	8005234 <HAL_Delay>
    for (t = 0; t < times; t++)     /* Get The times data */
 800454e:	7afb      	ldrb	r3, [r7, #11]
 8004550:	3301      	adds	r3, #1
 8004552:	72fb      	strb	r3, [r7, #11]
 8004554:	7afa      	ldrb	r2, [r7, #11]
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	429a      	cmp	r2, r3
 800455a:	d3ef      	bcc.n	800453c <adc_get_result_average+0x14>
    }

    return temp_val / times;        /* Returning the average */
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004572:	463b      	mov	r3, r7
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800457a:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <MX_DAC_Init+0x54>)
 800457c:	4a11      	ldr	r2, [pc, #68]	; (80045c4 <MX_DAC_Init+0x58>)
 800457e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8004580:	480f      	ldr	r0, [pc, #60]	; (80045c0 <MX_DAC_Init+0x54>)
 8004582:	f001 fb58 	bl	8005c36 <HAL_DAC_Init>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800458c:	f000 fbb2 	bl	8004cf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004590:	2300      	movs	r3, #0
 8004592:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8004594:	2302      	movs	r3, #2
 8004596:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004598:	463b      	mov	r3, r7
 800459a:	2200      	movs	r2, #0
 800459c:	4619      	mov	r1, r3
 800459e:	4808      	ldr	r0, [pc, #32]	; (80045c0 <MX_DAC_Init+0x54>)
 80045a0:	f001 fc06 	bl	8005db0 <HAL_DAC_ConfigChannel>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80045aa:	f000 fba3 	bl	8004cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);  /* Open DAC channel 1 */
 80045ae:	2100      	movs	r1, #0
 80045b0:	4803      	ldr	r0, [pc, #12]	; (80045c0 <MX_DAC_Init+0x54>)
 80045b2:	f001 fb62 	bl	8005c7a <HAL_DAC_Start>
  /* USER CODE END DAC_Init 2 */

}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	200000e4 	.word	0x200000e4
 80045c4:	40007400 	.word	0x40007400

080045c8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a17      	ldr	r2, [pc, #92]	; (8004644 <HAL_DAC_MspInit+0x7c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d127      	bne.n	800463a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_DAC_MspInit+0x80>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <HAL_DAC_MspInit+0x80>)
 80045f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045f8:	6413      	str	r3, [r2, #64]	; 0x40
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_DAC_MspInit+0x80>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <HAL_DAC_MspInit+0x80>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	4a0e      	ldr	r2, [pc, #56]	; (8004648 <HAL_DAC_MspInit+0x80>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6313      	str	r3, [r2, #48]	; 0x30
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_DAC_MspInit+0x80>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004622:	2310      	movs	r3, #16
 8004624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004626:	2303      	movs	r3, #3
 8004628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	4619      	mov	r1, r3
 8004634:	4805      	ldr	r0, [pc, #20]	; (800464c <HAL_DAC_MspInit+0x84>)
 8004636:	f001 fca7 	bl	8005f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800463a:	bf00      	nop
 800463c:	3728      	adds	r7, #40	; 0x28
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40007400 	.word	0x40007400
 8004648:	40023800 	.word	0x40023800
 800464c:	40020000 	.word	0x40020000

08004650 <dac_set_voltage>:
 * @brief   Sets channel 1/2 output voltage
 * @param   vol  : 0-3300, representing 0-3.3V
 * @retval  None
 */
void dac_set_voltage(uint16_t vol)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	80fb      	strh	r3, [r7, #6]
    uint16_t value;

    value = (vol * 4095) / 3300;
 800465a:	88fa      	ldrh	r2, [r7, #6]
 800465c:	4613      	mov	r3, r2
 800465e:	031b      	lsls	r3, r3, #12
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	4a0b      	ldr	r2, [pc, #44]	; (8004690 <dac_set_voltage+0x40>)
 8004664:	fb82 1203 	smull	r1, r2, r2, r3
 8004668:	441a      	add	r2, r3
 800466a:	12d2      	asrs	r2, r2, #11
 800466c:	17db      	asrs	r3, r3, #31
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	81fb      	strh	r3, [r7, #14]
    value &= 0xFFF;
 8004672:	89fb      	ldrh	r3, [r7, #14]
 8004674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004678:	81fb      	strh	r3, [r7, #14]

    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value); /* The 12-bit right-aligned data format sets the DAC value */
 800467a:	89fb      	ldrh	r3, [r7, #14]
 800467c:	2200      	movs	r2, #0
 800467e:	2100      	movs	r1, #0
 8004680:	4804      	ldr	r0, [pc, #16]	; (8004694 <dac_set_voltage+0x44>)
 8004682:	f001 fb51 	bl	8005d28 <HAL_DAC_SetValue>
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	9ee009ef 	.word	0x9ee009ef
 8004694:	200000e4 	.word	0x200000e4

08004698 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08e      	sub	sp, #56	; 0x38
 800469c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800469e:	f107 031c 	add.w	r3, r7, #28
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	611a      	str	r2, [r3, #16]
 80046ae:	615a      	str	r2, [r3, #20]
 80046b0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80046b2:	463b      	mov	r3, r7
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	611a      	str	r2, [r3, #16]
 80046c0:	615a      	str	r2, [r3, #20]
 80046c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80046c4:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <MX_FSMC_Init+0xec>)
 80046c6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80046ca:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80046cc:	4b2d      	ldr	r3, [pc, #180]	; (8004784 <MX_FSMC_Init+0xec>)
 80046ce:	4a2e      	ldr	r2, [pc, #184]	; (8004788 <MX_FSMC_Init+0xf0>)
 80046d0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80046d2:	4b2c      	ldr	r3, [pc, #176]	; (8004784 <MX_FSMC_Init+0xec>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80046d8:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <MX_FSMC_Init+0xec>)
 80046da:	2200      	movs	r2, #0
 80046dc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80046de:	4b29      	ldr	r3, [pc, #164]	; (8004784 <MX_FSMC_Init+0xec>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <MX_FSMC_Init+0xec>)
 80046e6:	2210      	movs	r2, #16
 80046e8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80046ea:	4b26      	ldr	r3, [pc, #152]	; (8004784 <MX_FSMC_Init+0xec>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <MX_FSMC_Init+0xec>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <MX_FSMC_Init+0xec>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80046fc:	4b21      	ldr	r3, [pc, #132]	; (8004784 <MX_FSMC_Init+0xec>)
 80046fe:	2200      	movs	r2, #0
 8004700:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <MX_FSMC_Init+0xec>)
 8004704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004708:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800470a:	4b1e      	ldr	r3, [pc, #120]	; (8004784 <MX_FSMC_Init+0xec>)
 800470c:	2200      	movs	r2, #0
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004710:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <MX_FSMC_Init+0xec>)
 8004712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004718:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <MX_FSMC_Init+0xec>)
 800471a:	2200      	movs	r2, #0
 800471c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800471e:	4b19      	ldr	r3, [pc, #100]	; (8004784 <MX_FSMC_Init+0xec>)
 8004720:	2200      	movs	r2, #0
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004724:	4b17      	ldr	r3, [pc, #92]	; (8004784 <MX_FSMC_Init+0xec>)
 8004726:	2200      	movs	r2, #0
 8004728:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800472a:	230f      	movs	r3, #15
 800472c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800472e:	230f      	movs	r3, #15
 8004730:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8004732:	233c      	movs	r3, #60	; 0x3c
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800473a:	2310      	movs	r3, #16
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800473e:	2311      	movs	r3, #17
 8004740:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004742:	2300      	movs	r3, #0
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 8004746:	2309      	movs	r3, #9
 8004748:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800474a:	230f      	movs	r3, #15
 800474c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800474e:	2309      	movs	r3, #9
 8004750:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8004752:	230f      	movs	r3, #15
 8004754:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004756:	2310      	movs	r3, #16
 8004758:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800475a:	2311      	movs	r3, #17
 800475c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800475e:	2300      	movs	r3, #0
 8004760:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8004762:	463a      	mov	r2, r7
 8004764:	f107 031c 	add.w	r3, r7, #28
 8004768:	4619      	mov	r1, r3
 800476a:	4806      	ldr	r0, [pc, #24]	; (8004784 <MX_FSMC_Init+0xec>)
 800476c:	f002 fa4c 	bl	8006c08 <HAL_SRAM_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8004776:	f000 fabd 	bl	8004cf4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800477a:	bf00      	nop
 800477c:	3738      	adds	r7, #56	; 0x38
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	200000f8 	.word	0x200000f8
 8004788:	a0000104 	.word	0xa0000104

0800478c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004792:	1d3b      	adds	r3, r7, #4
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80047a0:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <HAL_FSMC_MspInit+0x88>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d131      	bne.n	800480c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <HAL_FSMC_MspInit+0x88>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_FSMC_MspInit+0x8c>)
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_FSMC_MspInit+0x8c>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6393      	str	r3, [r2, #56]	; 0x38
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_FSMC_MspInit+0x8c>)
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80047ca:	f64f 7388 	movw	r3, #65416	; 0xff88
 80047ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d0:	2302      	movs	r3, #2
 80047d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d8:	2303      	movs	r3, #3
 80047da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80047dc:	230c      	movs	r3, #12
 80047de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047e0:	1d3b      	adds	r3, r7, #4
 80047e2:	4619      	mov	r1, r3
 80047e4:	480d      	ldr	r0, [pc, #52]	; (800481c <HAL_FSMC_MspInit+0x90>)
 80047e6:	f001 fbcf 	bl	8005f88 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80047ea:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80047ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f0:	2302      	movs	r3, #2
 80047f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f8:	2303      	movs	r3, #3
 80047fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80047fc:	230c      	movs	r3, #12
 80047fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004800:	1d3b      	adds	r3, r7, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4806      	ldr	r0, [pc, #24]	; (8004820 <HAL_FSMC_MspInit+0x94>)
 8004806:	f001 fbbf 	bl	8005f88 <HAL_GPIO_Init>
 800480a:	e000      	b.n	800480e <HAL_FSMC_MspInit+0x82>
    return;
 800480c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000148 	.word	0x20000148
 8004818:	40023800 	.word	0x40023800
 800481c:	40021000 	.word	0x40021000
 8004820:	40020c00 	.word	0x40020c00

08004824 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800482c:	f7ff ffae 	bl	800478c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08c      	sub	sp, #48	; 0x30
 800483c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483e:	f107 031c 	add.w	r3, r7, #28
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	609a      	str	r2, [r3, #8]
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	4b44      	ldr	r3, [pc, #272]	; (8004964 <MX_GPIO_Init+0x12c>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	4a43      	ldr	r2, [pc, #268]	; (8004964 <MX_GPIO_Init+0x12c>)
 8004858:	f043 0310 	orr.w	r3, r3, #16
 800485c:	6313      	str	r3, [r2, #48]	; 0x30
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <MX_GPIO_Init+0x12c>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <MX_GPIO_Init+0x12c>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	4a3c      	ldr	r2, [pc, #240]	; (8004964 <MX_GPIO_Init+0x12c>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	6313      	str	r3, [r2, #48]	; 0x30
 800487a:	4b3a      	ldr	r3, [pc, #232]	; (8004964 <MX_GPIO_Init+0x12c>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	4b36      	ldr	r3, [pc, #216]	; (8004964 <MX_GPIO_Init+0x12c>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a35      	ldr	r2, [pc, #212]	; (8004964 <MX_GPIO_Init+0x12c>)
 8004890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
 8004896:	4b33      	ldr	r3, [pc, #204]	; (8004964 <MX_GPIO_Init+0x12c>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <MX_GPIO_Init+0x12c>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	4a2e      	ldr	r2, [pc, #184]	; (8004964 <MX_GPIO_Init+0x12c>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	6313      	str	r3, [r2, #48]	; 0x30
 80048b2:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <MX_GPIO_Init+0x12c>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	4b28      	ldr	r3, [pc, #160]	; (8004964 <MX_GPIO_Init+0x12c>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	4a27      	ldr	r2, [pc, #156]	; (8004964 <MX_GPIO_Init+0x12c>)
 80048c8:	f043 0308 	orr.w	r3, r3, #8
 80048cc:	6313      	str	r3, [r2, #48]	; 0x30
 80048ce:	4b25      	ldr	r3, [pc, #148]	; (8004964 <MX_GPIO_Init+0x12c>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	4b21      	ldr	r3, [pc, #132]	; (8004964 <MX_GPIO_Init+0x12c>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	4a20      	ldr	r2, [pc, #128]	; (8004964 <MX_GPIO_Init+0x12c>)
 80048e4:	f043 0302 	orr.w	r3, r3, #2
 80048e8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ea:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <MX_GPIO_Init+0x12c>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 80048f6:	2201      	movs	r2, #1
 80048f8:	2160      	movs	r1, #96	; 0x60
 80048fa:	481b      	ldr	r0, [pc, #108]	; (8004968 <MX_GPIO_Init+0x130>)
 80048fc:	f001 fcf8 	bl	80062f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8004900:	2201      	movs	r2, #1
 8004902:	2120      	movs	r1, #32
 8004904:	4819      	ldr	r0, [pc, #100]	; (800496c <MX_GPIO_Init+0x134>)
 8004906:	f001 fcf3 	bl	80062f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800490a:	2360      	movs	r3, #96	; 0x60
 800490c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800490e:	2301      	movs	r3, #1
 8004910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004912:	2301      	movs	r3, #1
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004916:	2302      	movs	r3, #2
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800491a:	f107 031c 	add.w	r3, r7, #28
 800491e:	4619      	mov	r1, r3
 8004920:	4811      	ldr	r0, [pc, #68]	; (8004968 <MX_GPIO_Init+0x130>)
 8004922:	f001 fb31 	bl	8005f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WK_UP_Pin|KEY0_Pin;
 8004926:	f248 0301 	movw	r3, #32769	; 0x8001
 800492a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800492c:	2300      	movs	r3, #0
 800492e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004930:	2302      	movs	r3, #2
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004934:	f107 031c 	add.w	r3, r7, #28
 8004938:	4619      	mov	r1, r3
 800493a:	480d      	ldr	r0, [pc, #52]	; (8004970 <MX_GPIO_Init+0x138>)
 800493c:	f001 fb24 	bl	8005f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8004940:	2320      	movs	r3, #32
 8004942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004944:	2301      	movs	r3, #1
 8004946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004948:	2301      	movs	r3, #1
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800494c:	2302      	movs	r3, #2
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8004950:	f107 031c 	add.w	r3, r7, #28
 8004954:	4619      	mov	r1, r3
 8004956:	4805      	ldr	r0, [pc, #20]	; (800496c <MX_GPIO_Init+0x134>)
 8004958:	f001 fb16 	bl	8005f88 <HAL_GPIO_Init>

}
 800495c:	bf00      	nop
 800495e:	3730      	adds	r7, #48	; 0x30
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	40021000 	.word	0x40021000
 800496c:	40020400 	.word	0x40020400
 8004970:	40020000 	.word	0x40020000

08004974 <stm32f407vg_show_mesg>:
 * @brief   Displays information about the experiment
 * @param   None
 * @retval  None
 */
void stm32f407vg_show_mesg(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
	/* The serial port outputs the experimental information */
	printf("\n");
 8004978:	200a      	movs	r0, #10
 800497a:	f003 fb7d 	bl	8008078 <putchar>
	printf("********************************\r\n");
 800497e:	480a      	ldr	r0, [pc, #40]	; (80049a8 <stm32f407vg_show_mesg+0x34>)
 8004980:	f003 fbd6 	bl	8008130 <puts>
	printf("STM32F407\r\n");
 8004984:	4809      	ldr	r0, [pc, #36]	; (80049ac <stm32f407vg_show_mesg+0x38>)
 8004986:	f003 fbd3 	bl	8008130 <puts>
	printf("DAC Output Test\r\n");
 800498a:	4809      	ldr	r0, [pc, #36]	; (80049b0 <stm32f407vg_show_mesg+0x3c>)
 800498c:	f003 fbd0 	bl	8008130 <puts>
	printf("ATOM@ALIENTEK\r\n");
 8004990:	4808      	ldr	r0, [pc, #32]	; (80049b4 <stm32f407vg_show_mesg+0x40>)
 8004992:	f003 fbcd 	bl	8008130 <puts>
	printf("********************************\r\n");
 8004996:	4804      	ldr	r0, [pc, #16]	; (80049a8 <stm32f407vg_show_mesg+0x34>)
 8004998:	f003 fbca 	bl	8008130 <puts>
	printf("\r\n");
 800499c:	4806      	ldr	r0, [pc, #24]	; (80049b8 <stm32f407vg_show_mesg+0x44>)
 800499e:	f003 fbc7 	bl	8008130 <puts>
}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	080088dc 	.word	0x080088dc
 80049ac:	08008900 	.word	0x08008900
 80049b0:	0800890c 	.word	0x0800890c
 80049b4:	08008920 	.word	0x08008920
 80049b8:	08008930 	.word	0x08008930

080049bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint8_t t = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  uint8_t key;
  uint16_t dac_value;
  uint16_t dac_voltage = 100;
 80049c6:	2364      	movs	r3, #100	; 0x64
 80049c8:	81bb      	strh	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049ca:	f000 fbc1 	bl	8005150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049ce:	f000 f927 	bl	8004c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049d2:	f7ff ff31 	bl	8004838 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80049d6:	f000 fab7 	bl	8004f48 <MX_USART1_UART_Init>
  MX_FSMC_Init();
 80049da:	f7ff fe5d 	bl	8004698 <MX_FSMC_Init>
  MX_ADC3_Init();
 80049de:	f7ff fcfb 	bl	80043d8 <MX_ADC3_Init>
  MX_DAC_Init();
 80049e2:	f7ff fdc3 	bl	800456c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();                                         /* Initialize LCD */
 80049e6:	f7ff f8d3 	bl	8003b90 <lcd_init>
  stm32f407vg_show_mesg();
 80049ea:	f7ff ffc3 	bl	8004974 <stm32f407vg_show_mesg>
  lcd_show_string(30, 50, 200, 16, 16, "STM32", RED);
 80049ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80049f2:	9302      	str	r3, [sp, #8]
 80049f4:	4b80      	ldr	r3, [pc, #512]	; (8004bf8 <main+0x23c>)
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	2310      	movs	r3, #16
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2310      	movs	r3, #16
 80049fe:	22c8      	movs	r2, #200	; 0xc8
 8004a00:	2132      	movs	r1, #50	; 0x32
 8004a02:	201e      	movs	r0, #30
 8004a04:	f7ff fc98 	bl	8004338 <lcd_show_string>
  lcd_show_string(30, 70, 200, 16, 16, "DAC TEST", RED);
 8004a08:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a0c:	9302      	str	r3, [sp, #8]
 8004a0e:	4b7b      	ldr	r3, [pc, #492]	; (8004bfc <main+0x240>)
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	2310      	movs	r3, #16
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	2310      	movs	r3, #16
 8004a18:	22c8      	movs	r2, #200	; 0xc8
 8004a1a:	2146      	movs	r1, #70	; 0x46
 8004a1c:	201e      	movs	r0, #30
 8004a1e:	f7ff fc8b 	bl	8004338 <lcd_show_string>
  lcd_show_string(30, 90, 200, 16, 16, "ATOM@ALIENTEK", RED);
 8004a22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	4b75      	ldr	r3, [pc, #468]	; (8004c00 <main+0x244>)
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	2310      	movs	r3, #16
 8004a32:	22c8      	movs	r2, #200	; 0xc8
 8004a34:	215a      	movs	r1, #90	; 0x5a
 8004a36:	201e      	movs	r0, #30
 8004a38:	f7ff fc7e 	bl	8004338 <lcd_show_string>

  lcd_show_string(30, 110, 200, 16, 16, "WK_UP:+ KEY0:-", RED);
 8004a3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004a40:	9302      	str	r3, [sp, #8]
 8004a42:	4b70      	ldr	r3, [pc, #448]	; (8004c04 <main+0x248>)
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	2310      	movs	r3, #16
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	2310      	movs	r3, #16
 8004a4c:	22c8      	movs	r2, #200	; 0xc8
 8004a4e:	216e      	movs	r1, #110	; 0x6e
 8004a50:	201e      	movs	r0, #30
 8004a52:	f7ff fc71 	bl	8004338 <lcd_show_string>

  lcd_show_string(30, 130, 200, 16, 16, "DAC_CH1 VAL:", BLUE);
 8004a56:	231f      	movs	r3, #31
 8004a58:	9302      	str	r3, [sp, #8]
 8004a5a:	4b6b      	ldr	r3, [pc, #428]	; (8004c08 <main+0x24c>)
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	2310      	movs	r3, #16
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	2310      	movs	r3, #16
 8004a64:	22c8      	movs	r2, #200	; 0xc8
 8004a66:	2182      	movs	r1, #130	; 0x82
 8004a68:	201e      	movs	r0, #30
 8004a6a:	f7ff fc65 	bl	8004338 <lcd_show_string>
  lcd_show_string(30, 150, 200, 16, 16, "DAC_CH1_VOL:0.000V", BLUE);
 8004a6e:	231f      	movs	r3, #31
 8004a70:	9302      	str	r3, [sp, #8]
 8004a72:	4b66      	ldr	r3, [pc, #408]	; (8004c0c <main+0x250>)
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	2310      	movs	r3, #16
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	22c8      	movs	r2, #200	; 0xc8
 8004a7e:	2196      	movs	r1, #150	; 0x96
 8004a80:	201e      	movs	r0, #30
 8004a82:	f7ff fc59 	bl	8004338 <lcd_show_string>
  lcd_show_string(30, 170, 200, 16, 16, "ADC3_CH1_VOL:0.000V", BLUE);
 8004a86:	231f      	movs	r3, #31
 8004a88:	9302      	str	r3, [sp, #8]
 8004a8a:	4b61      	ldr	r3, [pc, #388]	; (8004c10 <main+0x254>)
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	2310      	movs	r3, #16
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2310      	movs	r3, #16
 8004a94:	22c8      	movs	r2, #200	; 0xc8
 8004a96:	21aa      	movs	r1, #170	; 0xaa
 8004a98:	201e      	movs	r0, #30
 8004a9a:	f7ff fc4d 	bl	8004338 <lcd_show_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  t++;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
	  key = key_scan(0);         /* Scan key */
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f7fc f813 	bl	8000ad0 <key_scan>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	72fb      	strb	r3, [r7, #11]

	  if (key == WKUP_PRES)      /* When the WK_UP button is pressed, the DAC output is increased by 100 */
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d10c      	bne.n	8004ace <main+0x112>
	  {
	  	 if (dac_voltage < 3300)
 8004ab4:	89bb      	ldrh	r3, [r7, #12]
 8004ab6:	f640 42e3 	movw	r2, #3299	; 0xce3
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d814      	bhi.n	8004ae8 <main+0x12c>
	  	 {
	  	  	 dac_voltage += 100;
 8004abe:	89bb      	ldrh	r3, [r7, #12]
 8004ac0:	3364      	adds	r3, #100	; 0x64
 8004ac2:	81bb      	strh	r3, [r7, #12]
	  	  	 dac_set_voltage(dac_voltage);
 8004ac4:	89bb      	ldrh	r3, [r7, #12]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fdc2 	bl	8004650 <dac_set_voltage>
 8004acc:	e00c      	b.n	8004ae8 <main+0x12c>
	  	 }
	  }
	  else if (key == KEY0_PRES) /* KEY0 key press reduces DAC output by 100 */
 8004ace:	7afb      	ldrb	r3, [r7, #11]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d109      	bne.n	8004ae8 <main+0x12c>
	  {
	  	 if (dac_voltage > 100)
 8004ad4:	89bb      	ldrh	r3, [r7, #12]
 8004ad6:	2b64      	cmp	r3, #100	; 0x64
 8004ad8:	d906      	bls.n	8004ae8 <main+0x12c>
	  	 {
	  	  	 dac_voltage -= 100;
 8004ada:	89bb      	ldrh	r3, [r7, #12]
 8004adc:	3b64      	subs	r3, #100	; 0x64
 8004ade:	81bb      	strh	r3, [r7, #12]
	  	  	 dac_set_voltage(dac_voltage);
 8004ae0:	89bb      	ldrh	r3, [r7, #12]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fdb4 	bl	8004650 <dac_set_voltage>
	  	 }
	  }

	  if ((t == 10) || (key == WKUP_PRES) || (key == KEY0_PRES))
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b0a      	cmp	r3, #10
 8004aec:	d005      	beq.n	8004afa <main+0x13e>
 8004aee:	7afb      	ldrb	r3, [r7, #11]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d002      	beq.n	8004afa <main+0x13e>
 8004af4:	7afb      	ldrb	r3, [r7, #11]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d179      	bne.n	8004bee <main+0x232>
	  {
	  	 dac_value = HAL_DAC_GetValue(&hdac, DAC_CHANNEL_1);   /* Get the digital quantity of the DAC output voltage */
 8004afa:	2100      	movs	r1, #0
 8004afc:	4845      	ldr	r0, [pc, #276]	; (8004c14 <main+0x258>)
 8004afe:	f001 f93d 	bl	8005d7c <HAL_DAC_GetValue>
 8004b02:	4603      	mov	r3, r0
 8004b04:	813b      	strh	r3, [r7, #8]
	  	 lcd_show_xnum(126, 130, dac_value, 4, 16, 0, BLUE);    /* Display the digital amount of DAC output voltage */
 8004b06:	893a      	ldrh	r2, [r7, #8]
 8004b08:	231f      	movs	r3, #31
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	2310      	movs	r3, #16
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2304      	movs	r3, #4
 8004b16:	2182      	movs	r1, #130	; 0x82
 8004b18:	207e      	movs	r0, #126	; 0x7e
 8004b1a:	f7ff fb6b 	bl	80041f4 <lcd_show_xnum>

	  	 lcd_show_xnum(126, 150, dac_voltage / 1000, 1, 16, 0, BLUE);
 8004b1e:	89bb      	ldrh	r3, [r7, #12]
 8004b20:	4a3d      	ldr	r2, [pc, #244]	; (8004c18 <main+0x25c>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	231f      	movs	r3, #31
 8004b2e:	9302      	str	r3, [sp, #8]
 8004b30:	2300      	movs	r3, #0
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	2310      	movs	r3, #16
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	2301      	movs	r3, #1
 8004b3a:	2196      	movs	r1, #150	; 0x96
 8004b3c:	207e      	movs	r0, #126	; 0x7e
 8004b3e:	f7ff fb59 	bl	80041f4 <lcd_show_xnum>
	  	 lcd_show_xnum(142, 150, (int)dac_voltage % 1000, 3, 16, 0x80, BLUE);
 8004b42:	89bb      	ldrh	r3, [r7, #12]
 8004b44:	4a34      	ldr	r2, [pc, #208]	; (8004c18 <main+0x25c>)
 8004b46:	fba2 1203 	umull	r1, r2, r2, r3
 8004b4a:	0992      	lsrs	r2, r2, #6
 8004b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b50:	fb01 f202 	mul.w	r2, r1, r2
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	231f      	movs	r3, #31
 8004b5c:	9302      	str	r3, [sp, #8]
 8004b5e:	2380      	movs	r3, #128	; 0x80
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	2310      	movs	r3, #16
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	2303      	movs	r3, #3
 8004b68:	2196      	movs	r1, #150	; 0x96
 8004b6a:	208e      	movs	r0, #142	; 0x8e
 8004b6c:	f7ff fb42 	bl	80041f4 <lcd_show_xnum>

	  	 adc_value = adc_get_result_average(10);                  /* Get the digital amount of the voltage collected by the ADC */
 8004b70:	200a      	movs	r0, #10
 8004b72:	f7ff fcd9 	bl	8004528 <adc_get_result_average>
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
	  	 adc_voltage = (adc_value * 3300) / 4096;                 /* Calculate the actual voltage value (1000 times larger) */
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	da01      	bge.n	8004b8c <main+0x1d0>
 8004b88:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004b8c:	131b      	asrs	r3, r3, #12
 8004b8e:	80bb      	strh	r3, [r7, #4]
	  	 lcd_show_xnum(134, 170, adc_voltage / 1000, 1, 16, 0, BLUE);
 8004b90:	88bb      	ldrh	r3, [r7, #4]
 8004b92:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <main+0x25c>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	099b      	lsrs	r3, r3, #6
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	231f      	movs	r3, #31
 8004ba0:	9302      	str	r3, [sp, #8]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	2310      	movs	r3, #16
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	2301      	movs	r3, #1
 8004bac:	21aa      	movs	r1, #170	; 0xaa
 8004bae:	2086      	movs	r0, #134	; 0x86
 8004bb0:	f7ff fb20 	bl	80041f4 <lcd_show_xnum>
	  	 lcd_show_xnum(150, 170, (int)adc_voltage % 1000, 3, 16, 0x80, BLUE);
 8004bb4:	88bb      	ldrh	r3, [r7, #4]
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <main+0x25c>)
 8004bb8:	fba2 1203 	umull	r1, r2, r2, r3
 8004bbc:	0992      	lsrs	r2, r2, #6
 8004bbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bc2:	fb01 f202 	mul.w	r2, r1, r2
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	231f      	movs	r3, #31
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	2303      	movs	r3, #3
 8004bda:	21aa      	movs	r1, #170	; 0xaa
 8004bdc:	2096      	movs	r0, #150	; 0x96
 8004bde:	f7ff fb09 	bl	80041f4 <lcd_show_xnum>

	  	 LED0_TOGGLE();    /* flashing LED0 indicates that the system is running */
 8004be2:	2120      	movs	r1, #32
 8004be4:	480d      	ldr	r0, [pc, #52]	; (8004c1c <main+0x260>)
 8004be6:	f001 fb9c 	bl	8006322 <HAL_GPIO_TogglePin>
	  	 t = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
	  }

	  HAL_Delay(10);     /* delay 1000ms */
 8004bee:	200a      	movs	r0, #10
 8004bf0:	f000 fb20 	bl	8005234 <HAL_Delay>
	  t++;
 8004bf4:	e753      	b.n	8004a9e <main+0xe2>
 8004bf6:	bf00      	nop
 8004bf8:	08008934 	.word	0x08008934
 8004bfc:	0800893c 	.word	0x0800893c
 8004c00:	08008948 	.word	0x08008948
 8004c04:	08008958 	.word	0x08008958
 8004c08:	08008968 	.word	0x08008968
 8004c0c:	08008978 	.word	0x08008978
 8004c10:	0800898c 	.word	0x0800898c
 8004c14:	200000e4 	.word	0x200000e4
 8004c18:	10624dd3 	.word	0x10624dd3
 8004c1c:	40021000 	.word	0x40021000

08004c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b094      	sub	sp, #80	; 0x50
 8004c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c26:	f107 0320 	add.w	r3, r7, #32
 8004c2a:	2230      	movs	r2, #48	; 0x30
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f003 fb5e 	bl	80082f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	605a      	str	r2, [r3, #4]
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	60da      	str	r2, [r3, #12]
 8004c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	4b28      	ldr	r3, [pc, #160]	; (8004cec <SystemClock_Config+0xcc>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	4a27      	ldr	r2, [pc, #156]	; (8004cec <SystemClock_Config+0xcc>)
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c52:	6413      	str	r3, [r2, #64]	; 0x40
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <SystemClock_Config+0xcc>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c60:	2300      	movs	r3, #0
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <SystemClock_Config+0xd0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a21      	ldr	r2, [pc, #132]	; (8004cf0 <SystemClock_Config+0xd0>)
 8004c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <SystemClock_Config+0xd0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c80:	2301      	movs	r3, #1
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c84:	2310      	movs	r3, #16
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004c90:	2308      	movs	r3, #8
 8004c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004c94:	23a8      	movs	r3, #168	; 0xa8
 8004c96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ca0:	f107 0320 	add.w	r3, r7, #32
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f001 fb57 	bl	8006358 <HAL_RCC_OscConfig>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004cb0:	f000 f820 	bl	8004cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cb4:	230f      	movs	r3, #15
 8004cb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004cc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004cc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ccc:	f107 030c 	add.w	r3, r7, #12
 8004cd0:	2105      	movs	r1, #5
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 fdb8 	bl	8006848 <HAL_RCC_ClockConfig>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004cde:	f000 f809 	bl	8004cf4 <Error_Handler>
  }
}
 8004ce2:	bf00      	nop
 8004ce4:	3750      	adds	r7, #80	; 0x50
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40007000 	.word	0x40007000

08004cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf8:	b672      	cpsid	i
}
 8004cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cfc:	e7fe      	b.n	8004cfc <Error_Handler+0x8>
	...

08004d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <HAL_MspInit+0x4c>)
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <HAL_MspInit+0x4c>)
 8004d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d14:	6453      	str	r3, [r2, #68]	; 0x44
 8004d16:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_MspInit+0x4c>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <HAL_MspInit+0x4c>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <HAL_MspInit+0x4c>)
 8004d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d30:	6413      	str	r3, [r2, #64]	; 0x40
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_MspInit+0x4c>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8004d3e:	2005      	movs	r0, #5
 8004d40:	f000 ff38 	bl	8005bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40023800 	.word	0x40023800

08004d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d54:	e7fe      	b.n	8004d54 <NMI_Handler+0x4>

08004d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d5a:	e7fe      	b.n	8004d5a <HardFault_Handler+0x4>

08004d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d60:	e7fe      	b.n	8004d60 <MemManage_Handler+0x4>

08004d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d62:	b480      	push	{r7}
 8004d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d66:	e7fe      	b.n	8004d66 <BusFault_Handler+0x4>

08004d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d6c:	e7fe      	b.n	8004d6c <UsageFault_Handler+0x4>

08004d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d72:	bf00      	nop
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d8e:	bf00      	nop
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d9c:	f000 fa2a 	bl	80051f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004da0:	bf00      	nop
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004da8:	4802      	ldr	r0, [pc, #8]	; (8004db4 <USART1_IRQHandler+0x10>)
 8004daa:	f002 f875 	bl	8006e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004dae:	bf00      	nop
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000220 	.word	0x20000220

08004db8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e00a      	b.n	8004de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dca:	f3af 8000 	nop.w
 8004dce:	4601      	mov	r1, r0
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	60ba      	str	r2, [r7, #8]
 8004dd6:	b2ca      	uxtb	r2, r1
 8004dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	dbf0      	blt.n	8004dca <_read+0x12>
  }

  return len;
 8004de8:	687b      	ldr	r3, [r7, #4]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e009      	b.n	8004e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	60ba      	str	r2, [r7, #8]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 f889 	bl	8004f24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	3301      	adds	r3, #1
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	dbf1      	blt.n	8004e04 <_write+0x12>
  }
  return len;
 8004e20:	687b      	ldr	r3, [r7, #4]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <_close>:

int _close(int file)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e52:	605a      	str	r2, [r3, #4]
  return 0;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <_isatty>:

int _isatty(int file)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e6a:	2301      	movs	r3, #1
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e9c:	4a14      	ldr	r2, [pc, #80]	; (8004ef0 <_sbrk+0x5c>)
 8004e9e:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <_sbrk+0x60>)
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ea8:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <_sbrk+0x64>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004eb0:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <_sbrk+0x64>)
 8004eb2:	4a12      	ldr	r2, [pc, #72]	; (8004efc <_sbrk+0x68>)
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <_sbrk+0x64>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d207      	bcs.n	8004ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ec4:	f003 fa62 	bl	800838c <__errno>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	220c      	movs	r2, #12
 8004ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ece:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed2:	e009      	b.n	8004ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ed4:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <_sbrk+0x64>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004eda:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <_sbrk+0x64>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	4a05      	ldr	r2, [pc, #20]	; (8004ef8 <_sbrk+0x64>)
 8004ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20020000 	.word	0x20020000
 8004ef4:	00000400 	.word	0x00000400
 8004ef8:	2000014c 	.word	0x2000014c
 8004efc:	200003b8 	.word	0x200003b8

08004f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <SystemInit+0x20>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <SystemInit+0x20>)
 8004f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00

08004f24 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004f2c:	1d39      	adds	r1, r7, #4
 8004f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f32:	2201      	movs	r2, #1
 8004f34:	4803      	ldr	r0, [pc, #12]	; (8004f44 <__io_putchar+0x20>)
 8004f36:	f001 feff 	bl	8006d38 <HAL_UART_Transmit>
	return ch;
 8004f3a:	687b      	ldr	r3, [r7, #4]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000220 	.word	0x20000220

08004f48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f4e:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <MX_USART1_UART_Init+0x58>)
 8004f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f60:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f6e:	220c      	movs	r2, #12
 8004f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f78:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f7e:	4807      	ldr	r0, [pc, #28]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f80:	f001 fe8a 	bl	8006c98 <HAL_UART_Init>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004f8a:	f7ff feb3 	bl	8004cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* This function enables the receive interrupt: flag UART_IT_RXNE and sets
   * the receive buffer and the maximum amount of data the receive buffer can receive */
   HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4904      	ldr	r1, [pc, #16]	; (8004fa4 <MX_USART1_UART_Init+0x5c>)
 8004f92:	4802      	ldr	r0, [pc, #8]	; (8004f9c <MX_USART1_UART_Init+0x54>)
 8004f94:	f001 ff5b 	bl	8006e4e <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8004f98:	bf00      	nop
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	20000220 	.word	0x20000220
 8004fa0:	40011000 	.word	0x40011000
 8004fa4:	2000021c 	.word	0x2000021c

08004fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <HAL_UART_MspInit+0x94>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d134      	bne.n	8005034 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <HAL_UART_MspInit+0x98>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <HAL_UART_MspInit+0x98>)
 8004fd4:	f043 0310 	orr.w	r3, r3, #16
 8004fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fda:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_UART_MspInit+0x98>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <HAL_UART_MspInit+0x98>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	4a14      	ldr	r2, [pc, #80]	; (8005040 <HAL_UART_MspInit+0x98>)
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff6:	4b12      	ldr	r3, [pc, #72]	; (8005040 <HAL_UART_MspInit+0x98>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005002:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005008:	2302      	movs	r3, #2
 800500a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005010:	2303      	movs	r3, #3
 8005012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005014:	2307      	movs	r3, #7
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	4619      	mov	r1, r3
 800501e:	4809      	ldr	r0, [pc, #36]	; (8005044 <HAL_UART_MspInit+0x9c>)
 8005020:	f000 ffb2 	bl	8005f88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 2);
 8005024:	2202      	movs	r2, #2
 8005026:	2102      	movs	r1, #2
 8005028:	2025      	movs	r0, #37	; 0x25
 800502a:	f000 fdce 	bl	8005bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800502e:	2025      	movs	r0, #37	; 0x25
 8005030:	f000 fde7 	bl	8005c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005034:	bf00      	nop
 8005036:	3728      	adds	r7, #40	; 0x28
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40011000 	.word	0x40011000
 8005040:	40023800 	.word	0x40023800
 8005044:	40020000 	.word	0x40020000

08005048 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)                      /* if it is serial port USART1 */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a24      	ldr	r2, [pc, #144]	; (80050e8 <HAL_UART_RxCpltCallback+0xa0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d142      	bne.n	80050e0 <HAL_UART_RxCpltCallback+0x98>
    {
        if ((g_usart_rx_sta & 0x8000) == 0)             /* receipt not completed */
 800505a:	4b24      	ldr	r3, [pc, #144]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b21b      	sxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	db38      	blt.n	80050d6 <HAL_UART_RxCpltCallback+0x8e>
        {
            if (g_usart_rx_sta & 0x4000)                /* 0x0d has been received (the Enter key). */
 8005064:	4b21      	ldr	r3, [pc, #132]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d011      	beq.n	8005094 <HAL_UART_RxCpltCallback+0x4c>
            {
                if (g_rx_buffer[0] != 0x0a)             /* this is not 0x0a (that is, not a newline key) */
 8005070:	4b1f      	ldr	r3, [pc, #124]	; (80050f0 <HAL_UART_RxCpltCallback+0xa8>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b0a      	cmp	r3, #10
 8005076:	d003      	beq.n	8005080 <HAL_UART_RxCpltCallback+0x38>
                {
                    g_usart_rx_sta = 0;                 /* receive error,restart */
 8005078:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 800507a:	2200      	movs	r2, #0
 800507c:	801a      	strh	r2, [r3, #0]
 800507e:	e02a      	b.n	80050d6 <HAL_UART_RxCpltCallback+0x8e>
                }
                else                                    /* it gets 0x0a (the newline key) */
                {
                    g_usart_rx_sta |= 0x8000;           /* the reception is complete */
 8005080:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508c:	b29a      	uxth	r2, r3
 800508e:	4b17      	ldr	r3, [pc, #92]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e020      	b.n	80050d6 <HAL_UART_RxCpltCallback+0x8e>
                }
            }
            else                                        /* 0X0d has not been reached yet (the Enter key) */
            {
                if (g_rx_buffer[0] == 0x0d)
 8005094:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <HAL_UART_RxCpltCallback+0xa8>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b0d      	cmp	r3, #13
 800509a:	d107      	bne.n	80050ac <HAL_UART_RxCpltCallback+0x64>
                    g_usart_rx_sta |= 0x4000;
 800509c:	4b13      	ldr	r3, [pc, #76]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	4b11      	ldr	r3, [pc, #68]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	e014      	b.n	80050d6 <HAL_UART_RxCpltCallback+0x8e>
                else
                {
                    g_usart_rx_buf[g_usart_rx_sta & 0X3FFF] = g_rx_buffer[0];
 80050ac:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80050b4:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <HAL_UART_RxCpltCallback+0xa8>)
 80050b6:	7811      	ldrb	r1, [r2, #0]
 80050b8:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <HAL_UART_RxCpltCallback+0xac>)
 80050ba:	54d1      	strb	r1, [r2, r3]
                    g_usart_rx_sta++;
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 80050c6:	801a      	strh	r2, [r3, #0]

                    if (g_usart_rx_sta > (USART_REC_LEN - 1))
 80050c8:	4b08      	ldr	r3, [pc, #32]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	2bc7      	cmp	r3, #199	; 0xc7
 80050ce:	d902      	bls.n	80050d6 <HAL_UART_RxCpltCallback+0x8e>
                    {
                        g_usart_rx_sta = 0;             /* receive data error, start receive again */
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_UART_RxCpltCallback+0xa4>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 80050d6:	2201      	movs	r2, #1
 80050d8:	4905      	ldr	r1, [pc, #20]	; (80050f0 <HAL_UART_RxCpltCallback+0xa8>)
 80050da:	4807      	ldr	r0, [pc, #28]	; (80050f8 <HAL_UART_RxCpltCallback+0xb0>)
 80050dc:	f001 feb7 	bl	8006e4e <HAL_UART_Receive_IT>
    }
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40011000 	.word	0x40011000
 80050ec:	20000218 	.word	0x20000218
 80050f0:	2000021c 	.word	0x2000021c
 80050f4:	20000150 	.word	0x20000150
 80050f8:	20000220 	.word	0x20000220

080050fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005134 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005100:	f7ff fefe 	bl	8004f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005104:	480c      	ldr	r0, [pc, #48]	; (8005138 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005106:	490d      	ldr	r1, [pc, #52]	; (800513c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005108:	4a0d      	ldr	r2, [pc, #52]	; (8005140 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800510a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800510c:	e002      	b.n	8005114 <LoopCopyDataInit>

0800510e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800510e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005112:	3304      	adds	r3, #4

08005114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005118:	d3f9      	bcc.n	800510e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800511c:	4c0a      	ldr	r4, [pc, #40]	; (8005148 <LoopFillZerobss+0x22>)
  movs r3, #0
 800511e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005120:	e001      	b.n	8005126 <LoopFillZerobss>

08005122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005124:	3204      	adds	r2, #4

08005126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005128:	d3fb      	bcc.n	8005122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800512a:	f003 f935 	bl	8008398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800512e:	f7ff fc45 	bl	80049bc <main>
  bx  lr    
 8005132:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800513c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8005140:	0800b948 	.word	0x0800b948
  ldr r2, =_sbss
 8005144:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005148:	200003b8 	.word	0x200003b8

0800514c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800514c:	e7fe      	b.n	800514c <ADC_IRQHandler>
	...

08005150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005154:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <HAL_Init+0x40>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <HAL_Init+0x40>)
 800515a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800515e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_Init+0x40>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <HAL_Init+0x40>)
 8005166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800516a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800516c:	4b08      	ldr	r3, [pc, #32]	; (8005190 <HAL_Init+0x40>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a07      	ldr	r2, [pc, #28]	; (8005190 <HAL_Init+0x40>)
 8005172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005178:	2003      	movs	r0, #3
 800517a:	f000 fd1b 	bl	8005bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800517e:	2000      	movs	r0, #0
 8005180:	f000 f808 	bl	8005194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005184:	f7ff fdbc 	bl	8004d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40023c00 	.word	0x40023c00

08005194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800519c:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <HAL_InitTick+0x54>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b12      	ldr	r3, [pc, #72]	; (80051ec <HAL_InitTick+0x58>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	4619      	mov	r1, r3
 80051a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fd33 	bl	8005c1e <HAL_SYSTICK_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e00e      	b.n	80051e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b0f      	cmp	r3, #15
 80051c6:	d80a      	bhi.n	80051de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051c8:	2200      	movs	r2, #0
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	f000 fcfb 	bl	8005bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051d4:	4a06      	ldr	r2, [pc, #24]	; (80051f0 <HAL_InitTick+0x5c>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e000      	b.n	80051e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000008 	.word	0x20000008
 80051ec:	20000010 	.word	0x20000010
 80051f0:	2000000c 	.word	0x2000000c

080051f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <HAL_IncTick+0x20>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <HAL_IncTick+0x24>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4413      	add	r3, r2
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <HAL_IncTick+0x24>)
 8005206:	6013      	str	r3, [r2, #0]
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000010 	.word	0x20000010
 8005218:	20000268 	.word	0x20000268

0800521c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  return uwTick;
 8005220:	4b03      	ldr	r3, [pc, #12]	; (8005230 <HAL_GetTick+0x14>)
 8005222:	681b      	ldr	r3, [r3, #0]
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	20000268 	.word	0x20000268

08005234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800523c:	f7ff ffee 	bl	800521c <HAL_GetTick>
 8005240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d005      	beq.n	800525a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <HAL_Delay+0x44>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800525a:	bf00      	nop
 800525c:	f7ff ffde 	bl	800521c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	429a      	cmp	r2, r3
 800526a:	d8f7      	bhi.n	800525c <HAL_Delay+0x28>
  {
  }
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000010 	.word	0x20000010

0800527c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e033      	b.n	80052fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff f8ee 	bl	800447c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d118      	bne.n	80052ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052c2:	f023 0302 	bic.w	r3, r3, #2
 80052c6:	f043 0202 	orr.w	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 faa4 	bl	800581c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f023 0303 	bic.w	r3, r3, #3
 80052e2:	f043 0201 	orr.w	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
 80052ea:	e001      	b.n	80052f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_ADC_Start+0x1a>
 800531a:	2302      	movs	r3, #2
 800531c:	e0b2      	b.n	8005484 <HAL_ADC_Start+0x180>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d018      	beq.n	8005366 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005344:	4b52      	ldr	r3, [pc, #328]	; (8005490 <HAL_ADC_Start+0x18c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a52      	ldr	r2, [pc, #328]	; (8005494 <HAL_ADC_Start+0x190>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	0c9a      	lsrs	r2, r3, #18
 8005350:	4613      	mov	r3, r2
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	4413      	add	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005358:	e002      	b.n	8005360 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	3b01      	subs	r3, #1
 800535e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f9      	bne.n	800535a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d17a      	bne.n	800546a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800539e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	d106      	bne.n	80053c2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b8:	f023 0206 	bic.w	r2, r3, #6
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	645a      	str	r2, [r3, #68]	; 0x44
 80053c0:	e002      	b.n	80053c8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053d0:	4b31      	ldr	r3, [pc, #196]	; (8005498 <HAL_ADC_Start+0x194>)
 80053d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80053dc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d12a      	bne.n	8005440 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2b      	ldr	r2, [pc, #172]	; (800549c <HAL_ADC_Start+0x198>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d015      	beq.n	8005420 <HAL_ADC_Start+0x11c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <HAL_ADC_Start+0x19c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d105      	bne.n	800540a <HAL_ADC_Start+0x106>
 80053fe:	4b26      	ldr	r3, [pc, #152]	; (8005498 <HAL_ADC_Start+0x194>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a25      	ldr	r2, [pc, #148]	; (80054a4 <HAL_ADC_Start+0x1a0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d136      	bne.n	8005482 <HAL_ADC_Start+0x17e>
 8005414:	4b20      	ldr	r3, [pc, #128]	; (8005498 <HAL_ADC_Start+0x194>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	d130      	bne.n	8005482 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d129      	bne.n	8005482 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800543c:	609a      	str	r2, [r3, #8]
 800543e:	e020      	b.n	8005482 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a15      	ldr	r2, [pc, #84]	; (800549c <HAL_ADC_Start+0x198>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d11b      	bne.n	8005482 <HAL_ADC_Start+0x17e>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d114      	bne.n	8005482 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	e00b      	b.n	8005482 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f043 0210 	orr.w	r2, r3, #16
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547a:	f043 0201 	orr.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000008 	.word	0x20000008
 8005494:	431bde83 	.word	0x431bde83
 8005498:	40012300 	.word	0x40012300
 800549c:	40012000 	.word	0x40012000
 80054a0:	40012100 	.word	0x40012100
 80054a4:	40012200 	.word	0x40012200

080054a8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c4:	d113      	bne.n	80054ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d4:	d10b      	bne.n	80054ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e063      	b.n	80055b6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80054ee:	f7ff fe95 	bl	800521c <HAL_GetTick>
 80054f2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054f4:	e021      	b.n	800553a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d01d      	beq.n	800553a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <HAL_ADC_PollForConversion+0x6c>
 8005504:	f7ff fe8a 	bl	800521c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d212      	bcs.n	800553a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d00b      	beq.n	800553a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f043 0204 	orr.w	r2, r3, #4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e03d      	b.n	80055b6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b02      	cmp	r3, #2
 8005546:	d1d6      	bne.n	80054f6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0212 	mvn.w	r2, #18
 8005550:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d123      	bne.n	80055b4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005570:	2b00      	cmp	r3, #0
 8005572:	d11f      	bne.n	80055b4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800557e:	2b00      	cmp	r3, #0
 8005580:	d006      	beq.n	8005590 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800558c:	2b00      	cmp	r3, #0
 800558e:	d111      	bne.n	80055b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d105      	bne.n	80055b4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x1c>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e105      	b.n	8005800 <HAL_ADC_ConfigChannel+0x228>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b09      	cmp	r3, #9
 8005602:	d925      	bls.n	8005650 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68d9      	ldr	r1, [r3, #12]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	3b1e      	subs	r3, #30
 800561a:	2207      	movs	r2, #7
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43da      	mvns	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	400a      	ands	r2, r1
 8005628:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68d9      	ldr	r1, [r3, #12]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	4618      	mov	r0, r3
 800563c:	4603      	mov	r3, r0
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4403      	add	r3, r0
 8005642:	3b1e      	subs	r3, #30
 8005644:	409a      	lsls	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	e022      	b.n	8005696 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6919      	ldr	r1, [r3, #16]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	2207      	movs	r2, #7
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43da      	mvns	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	400a      	ands	r2, r1
 8005672:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6919      	ldr	r1, [r3, #16]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	4618      	mov	r0, r3
 8005686:	4603      	mov	r3, r0
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4403      	add	r3, r0
 800568c:	409a      	lsls	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b06      	cmp	r3, #6
 800569c:	d824      	bhi.n	80056e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	3b05      	subs	r3, #5
 80056b0:	221f      	movs	r2, #31
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43da      	mvns	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	400a      	ands	r2, r1
 80056be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4618      	mov	r0, r3
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	3b05      	subs	r3, #5
 80056da:	fa00 f203 	lsl.w	r2, r0, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	635a      	str	r2, [r3, #52]	; 0x34
 80056e6:	e04c      	b.n	8005782 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b0c      	cmp	r3, #12
 80056ee:	d824      	bhi.n	800573a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	3b23      	subs	r3, #35	; 0x23
 8005702:	221f      	movs	r2, #31
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	43da      	mvns	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	400a      	ands	r2, r1
 8005710:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	4618      	mov	r0, r3
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	3b23      	subs	r3, #35	; 0x23
 800572c:	fa00 f203 	lsl.w	r2, r0, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
 8005738:	e023      	b.n	8005782 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	3b41      	subs	r3, #65	; 0x41
 800574c:	221f      	movs	r2, #31
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43da      	mvns	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	400a      	ands	r2, r1
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	4618      	mov	r0, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	3b41      	subs	r3, #65	; 0x41
 8005776:	fa00 f203 	lsl.w	r2, r0, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005782:	4b22      	ldr	r3, [pc, #136]	; (800580c <HAL_ADC_ConfigChannel+0x234>)
 8005784:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a21      	ldr	r2, [pc, #132]	; (8005810 <HAL_ADC_ConfigChannel+0x238>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d109      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x1cc>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b12      	cmp	r3, #18
 8005796:	d105      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a19      	ldr	r2, [pc, #100]	; (8005810 <HAL_ADC_ConfigChannel+0x238>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d123      	bne.n	80057f6 <HAL_ADC_ConfigChannel+0x21e>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b10      	cmp	r3, #16
 80057b4:	d003      	beq.n	80057be <HAL_ADC_ConfigChannel+0x1e6>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b11      	cmp	r3, #17
 80057bc:	d11b      	bne.n	80057f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d111      	bne.n	80057f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057d2:	4b10      	ldr	r3, [pc, #64]	; (8005814 <HAL_ADC_ConfigChannel+0x23c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a10      	ldr	r2, [pc, #64]	; (8005818 <HAL_ADC_ConfigChannel+0x240>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	0c9a      	lsrs	r2, r3, #18
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80057e8:	e002      	b.n	80057f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f9      	bne.n	80057ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	40012300 	.word	0x40012300
 8005810:	40012000 	.word	0x40012000
 8005814:	20000008 	.word	0x20000008
 8005818:	431bde83 	.word	0x431bde83

0800581c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005824:	4b79      	ldr	r3, [pc, #484]	; (8005a0c <ADC_Init+0x1f0>)
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	021a      	lsls	r2, r3, #8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005874:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6899      	ldr	r1, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	4a58      	ldr	r2, [pc, #352]	; (8005a10 <ADC_Init+0x1f4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d022      	beq.n	80058fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6899      	ldr	r1, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6899      	ldr	r1, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
 80058f8:	e00f      	b.n	800591a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005908:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005918:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0202 	bic.w	r2, r2, #2
 8005928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6899      	ldr	r1, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7e1b      	ldrb	r3, [r3, #24]
 8005934:	005a      	lsls	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005956:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005966:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	3b01      	subs	r3, #1
 8005974:	035a      	lsls	r2, r3, #13
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	e007      	b.n	8005990 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800598e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800599e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	051a      	lsls	r2, r3, #20
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6899      	ldr	r1, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059d2:	025a      	lsls	r2, r3, #9
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6899      	ldr	r1, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	029a      	lsls	r2, r3, #10
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	609a      	str	r2, [r3, #8]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40012300 	.word	0x40012300
 8005a10:	0f000001 	.word	0x0f000001

08005a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a24:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <__NVIC_SetPriorityGrouping+0x44>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a30:	4013      	ands	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a46:	4a04      	ldr	r2, [pc, #16]	; (8005a58 <__NVIC_SetPriorityGrouping+0x44>)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	60d3      	str	r3, [r2, #12]
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	e000ed00 	.word	0xe000ed00

08005a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a60:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <__NVIC_GetPriorityGrouping+0x18>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	0a1b      	lsrs	r3, r3, #8
 8005a66:	f003 0307 	and.w	r3, r3, #7
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	e000ed00 	.word	0xe000ed00

08005a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	db0b      	blt.n	8005aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	f003 021f 	and.w	r2, r3, #31
 8005a90:	4907      	ldr	r1, [pc, #28]	; (8005ab0 <__NVIC_EnableIRQ+0x38>)
 8005a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	2001      	movs	r0, #1
 8005a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	e000e100 	.word	0xe000e100

08005ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	6039      	str	r1, [r7, #0]
 8005abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	db0a      	blt.n	8005ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	490c      	ldr	r1, [pc, #48]	; (8005b00 <__NVIC_SetPriority+0x4c>)
 8005ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad2:	0112      	lsls	r2, r2, #4
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005adc:	e00a      	b.n	8005af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	4908      	ldr	r1, [pc, #32]	; (8005b04 <__NVIC_SetPriority+0x50>)
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	3b04      	subs	r3, #4
 8005aec:	0112      	lsls	r2, r2, #4
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	440b      	add	r3, r1
 8005af2:	761a      	strb	r2, [r3, #24]
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	e000e100 	.word	0xe000e100
 8005b04:	e000ed00 	.word	0xe000ed00

08005b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b089      	sub	sp, #36	; 0x24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f1c3 0307 	rsb	r3, r3, #7
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	bf28      	it	cs
 8005b26:	2304      	movcs	r3, #4
 8005b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	2b06      	cmp	r3, #6
 8005b30:	d902      	bls.n	8005b38 <NVIC_EncodePriority+0x30>
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	3b03      	subs	r3, #3
 8005b36:	e000      	b.n	8005b3a <NVIC_EncodePriority+0x32>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43da      	mvns	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b50:	f04f 31ff 	mov.w	r1, #4294967295
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5a:	43d9      	mvns	r1, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b60:	4313      	orrs	r3, r2
         );
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3724      	adds	r7, #36	; 0x24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b80:	d301      	bcc.n	8005b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b82:	2301      	movs	r3, #1
 8005b84:	e00f      	b.n	8005ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b86:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <SysTick_Config+0x40>)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b8e:	210f      	movs	r1, #15
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	f7ff ff8e 	bl	8005ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <SysTick_Config+0x40>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <SysTick_Config+0x40>)
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	e000e010 	.word	0xe000e010

08005bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff ff29 	bl	8005a14 <__NVIC_SetPriorityGrouping>
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b086      	sub	sp, #24
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
 8005bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bdc:	f7ff ff3e 	bl	8005a5c <__NVIC_GetPriorityGrouping>
 8005be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	f7ff ff8e 	bl	8005b08 <NVIC_EncodePriority>
 8005bec:	4602      	mov	r2, r0
 8005bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ff5d 	bl	8005ab4 <__NVIC_SetPriority>
}
 8005bfa:	bf00      	nop
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	4603      	mov	r3, r0
 8005c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff ff31 	bl	8005a78 <__NVIC_EnableIRQ>
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7ff ffa2 	bl	8005b70 <SysTick_Config>
 8005c2c:	4603      	mov	r3, r0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e014      	b.n	8005c72 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	791b      	ldrb	r3, [r3, #4]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7fe fcb5 	bl	80045c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e046      	b.n	8005d1c <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	795b      	ldrb	r3, [r3, #5]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_DAC_Start+0x20>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e040      	b.n	8005d1c <HAL_DAC_Start+0xa2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6819      	ldr	r1, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	409a      	lsls	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10f      	bne.n	8005ce4 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005cce:	2b3c      	cmp	r3, #60	; 0x3c
 8005cd0:	d11d      	bne.n	8005d0e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	e014      	b.n	8005d0e <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	213c      	movs	r1, #60	; 0x3c
 8005cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d107      	bne.n	8005d0e <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0202 	orr.w	r2, r2, #2
 8005d0c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e015      	b.n	8005d70 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d105      	bne.n	8005d5c <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4413      	add	r3, r2
 8005d56:	3308      	adds	r3, #8
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	e004      	b.n	8005d66 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4413      	add	r3, r2
 8005d62:	3314      	adds	r3, #20
 8005d64:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(const DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
  assert_param(hdac != NULL);

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e003      	b.n	8005da2 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b089      	sub	sp, #36	; 0x24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_DAC_ConfigChannel+0x1c>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e042      	b.n	8005e56 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	795b      	ldrb	r3, [r3, #5]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_DAC_ConfigChannel+0x2c>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e03c      	b.n	8005e56 <HAL_DAC_ConfigChannel+0xa6>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2202      	movs	r2, #2
 8005de6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4013      	ands	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6819      	ldr	r1, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	22c0      	movs	r2, #192	; 0xc0
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	400a      	ands	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3724      	adds	r7, #36	; 0x24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e70:	f7ff f9d4 	bl	800521c <HAL_GetTick>
 8005e74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d008      	beq.n	8005e94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2280      	movs	r2, #128	; 0x80
 8005e86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e052      	b.n	8005f3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0216 	bic.w	r2, r2, #22
 8005ea2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <HAL_DMA_Abort+0x62>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0208 	bic.w	r2, r2, #8
 8005ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0201 	bic.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ee4:	e013      	b.n	8005f0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ee6:	f7ff f999 	bl	800521c <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b05      	cmp	r3, #5
 8005ef2:	d90c      	bls.n	8005f0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2203      	movs	r2, #3
 8005efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e015      	b.n	8005f3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e4      	bne.n	8005ee6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f20:	223f      	movs	r2, #63	; 0x3f
 8005f22:	409a      	lsls	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d004      	beq.n	8005f60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e00c      	b.n	8005f7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2205      	movs	r2, #5
 8005f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
 8005fa2:	e16b      	b.n	800627c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	f040 815a 	bne.w	8006276 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d005      	beq.n	8005fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d130      	bne.n	800603c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	43db      	mvns	r3, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4313      	orrs	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006010:	2201      	movs	r2, #1
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	091b      	lsrs	r3, r3, #4
 8006026:	f003 0201 	and.w	r2, r3, #1
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	2b03      	cmp	r3, #3
 8006046:	d017      	beq.n	8006078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	2203      	movs	r2, #3
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	43db      	mvns	r3, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	4013      	ands	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4313      	orrs	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d123      	bne.n	80060cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	08da      	lsrs	r2, r3, #3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3208      	adds	r2, #8
 800608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	220f      	movs	r2, #15
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	43db      	mvns	r3, r3
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	4013      	ands	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	08da      	lsrs	r2, r3, #3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3208      	adds	r2, #8
 80060c6:	69b9      	ldr	r1, [r7, #24]
 80060c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	2203      	movs	r2, #3
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	43db      	mvns	r3, r3
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4013      	ands	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 0203 	and.w	r2, r3, #3
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80b4 	beq.w	8006276 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
 8006112:	4b60      	ldr	r3, [pc, #384]	; (8006294 <HAL_GPIO_Init+0x30c>)
 8006114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006116:	4a5f      	ldr	r2, [pc, #380]	; (8006294 <HAL_GPIO_Init+0x30c>)
 8006118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800611c:	6453      	str	r3, [r2, #68]	; 0x44
 800611e:	4b5d      	ldr	r3, [pc, #372]	; (8006294 <HAL_GPIO_Init+0x30c>)
 8006120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800612a:	4a5b      	ldr	r2, [pc, #364]	; (8006298 <HAL_GPIO_Init+0x310>)
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	089b      	lsrs	r3, r3, #2
 8006130:	3302      	adds	r3, #2
 8006132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	220f      	movs	r2, #15
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a52      	ldr	r2, [pc, #328]	; (800629c <HAL_GPIO_Init+0x314>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d02b      	beq.n	80061ae <HAL_GPIO_Init+0x226>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a51      	ldr	r2, [pc, #324]	; (80062a0 <HAL_GPIO_Init+0x318>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d025      	beq.n	80061aa <HAL_GPIO_Init+0x222>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a50      	ldr	r2, [pc, #320]	; (80062a4 <HAL_GPIO_Init+0x31c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01f      	beq.n	80061a6 <HAL_GPIO_Init+0x21e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a4f      	ldr	r2, [pc, #316]	; (80062a8 <HAL_GPIO_Init+0x320>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d019      	beq.n	80061a2 <HAL_GPIO_Init+0x21a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a4e      	ldr	r2, [pc, #312]	; (80062ac <HAL_GPIO_Init+0x324>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_GPIO_Init+0x216>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a4d      	ldr	r2, [pc, #308]	; (80062b0 <HAL_GPIO_Init+0x328>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00d      	beq.n	800619a <HAL_GPIO_Init+0x212>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a4c      	ldr	r2, [pc, #304]	; (80062b4 <HAL_GPIO_Init+0x32c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d007      	beq.n	8006196 <HAL_GPIO_Init+0x20e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a4b      	ldr	r2, [pc, #300]	; (80062b8 <HAL_GPIO_Init+0x330>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d101      	bne.n	8006192 <HAL_GPIO_Init+0x20a>
 800618e:	2307      	movs	r3, #7
 8006190:	e00e      	b.n	80061b0 <HAL_GPIO_Init+0x228>
 8006192:	2308      	movs	r3, #8
 8006194:	e00c      	b.n	80061b0 <HAL_GPIO_Init+0x228>
 8006196:	2306      	movs	r3, #6
 8006198:	e00a      	b.n	80061b0 <HAL_GPIO_Init+0x228>
 800619a:	2305      	movs	r3, #5
 800619c:	e008      	b.n	80061b0 <HAL_GPIO_Init+0x228>
 800619e:	2304      	movs	r3, #4
 80061a0:	e006      	b.n	80061b0 <HAL_GPIO_Init+0x228>
 80061a2:	2303      	movs	r3, #3
 80061a4:	e004      	b.n	80061b0 <HAL_GPIO_Init+0x228>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e002      	b.n	80061b0 <HAL_GPIO_Init+0x228>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <HAL_GPIO_Init+0x228>
 80061ae:	2300      	movs	r3, #0
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	f002 0203 	and.w	r2, r2, #3
 80061b6:	0092      	lsls	r2, r2, #2
 80061b8:	4093      	lsls	r3, r2
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061c0:	4935      	ldr	r1, [pc, #212]	; (8006298 <HAL_GPIO_Init+0x310>)
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	089b      	lsrs	r3, r3, #2
 80061c6:	3302      	adds	r3, #2
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061ce:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <HAL_GPIO_Init+0x334>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4013      	ands	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061f2:	4a32      	ldr	r2, [pc, #200]	; (80062bc <HAL_GPIO_Init+0x334>)
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061f8:	4b30      	ldr	r3, [pc, #192]	; (80062bc <HAL_GPIO_Init+0x334>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	43db      	mvns	r3, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4013      	ands	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800621c:	4a27      	ldr	r2, [pc, #156]	; (80062bc <HAL_GPIO_Init+0x334>)
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006222:	4b26      	ldr	r3, [pc, #152]	; (80062bc <HAL_GPIO_Init+0x334>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	43db      	mvns	r3, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4013      	ands	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006246:	4a1d      	ldr	r2, [pc, #116]	; (80062bc <HAL_GPIO_Init+0x334>)
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <HAL_GPIO_Init+0x334>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	43db      	mvns	r3, r3
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	4013      	ands	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006270:	4a12      	ldr	r2, [pc, #72]	; (80062bc <HAL_GPIO_Init+0x334>)
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3301      	adds	r3, #1
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b0f      	cmp	r3, #15
 8006280:	f67f ae90 	bls.w	8005fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	3724      	adds	r7, #36	; 0x24
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40023800 	.word	0x40023800
 8006298:	40013800 	.word	0x40013800
 800629c:	40020000 	.word	0x40020000
 80062a0:	40020400 	.word	0x40020400
 80062a4:	40020800 	.word	0x40020800
 80062a8:	40020c00 	.word	0x40020c00
 80062ac:	40021000 	.word	0x40021000
 80062b0:	40021400 	.word	0x40021400
 80062b4:	40021800 	.word	0x40021800
 80062b8:	40021c00 	.word	0x40021c00
 80062bc:	40013c00 	.word	0x40013c00

080062c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	887b      	ldrh	r3, [r7, #2]
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
 80062dc:	e001      	b.n	80062e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	807b      	strh	r3, [r7, #2]
 80062fc:	4613      	mov	r3, r2
 80062fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006300:	787b      	ldrb	r3, [r7, #1]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006306:	887a      	ldrh	r2, [r7, #2]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800630c:	e003      	b.n	8006316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800630e:	887b      	ldrh	r3, [r7, #2]
 8006310:	041a      	lsls	r2, r3, #16
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	619a      	str	r2, [r3, #24]
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	460b      	mov	r3, r1
 800632c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006334:	887a      	ldrh	r2, [r7, #2]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4013      	ands	r3, r2
 800633a:	041a      	lsls	r2, r3, #16
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	43d9      	mvns	r1, r3
 8006340:	887b      	ldrh	r3, [r7, #2]
 8006342:	400b      	ands	r3, r1
 8006344:	431a      	orrs	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	619a      	str	r2, [r3, #24]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
	...

08006358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e267      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d075      	beq.n	8006462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006376:	4b88      	ldr	r3, [pc, #544]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b04      	cmp	r3, #4
 8006380:	d00c      	beq.n	800639c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006382:	4b85      	ldr	r3, [pc, #532]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800638a:	2b08      	cmp	r3, #8
 800638c:	d112      	bne.n	80063b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800638e:	4b82      	ldr	r3, [pc, #520]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800639a:	d10b      	bne.n	80063b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800639c:	4b7e      	ldr	r3, [pc, #504]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d05b      	beq.n	8006460 <HAL_RCC_OscConfig+0x108>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d157      	bne.n	8006460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e242      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063bc:	d106      	bne.n	80063cc <HAL_RCC_OscConfig+0x74>
 80063be:	4b76      	ldr	r3, [pc, #472]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a75      	ldr	r2, [pc, #468]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e01d      	b.n	8006408 <HAL_RCC_OscConfig+0xb0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x98>
 80063d6:	4b70      	ldr	r3, [pc, #448]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6f      	ldr	r2, [pc, #444]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	4b6d      	ldr	r3, [pc, #436]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a6c      	ldr	r2, [pc, #432]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e00b      	b.n	8006408 <HAL_RCC_OscConfig+0xb0>
 80063f0:	4b69      	ldr	r3, [pc, #420]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a68      	ldr	r2, [pc, #416]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b66      	ldr	r3, [pc, #408]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a65      	ldr	r2, [pc, #404]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d013      	beq.n	8006438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fe ff04 	bl	800521c <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006418:	f7fe ff00 	bl	800521c <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e207      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642a:	4b5b      	ldr	r3, [pc, #364]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0xc0>
 8006436:	e014      	b.n	8006462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006438:	f7fe fef0 	bl	800521c <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006440:	f7fe feec 	bl	800521c <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	; 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e1f3      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006452:	4b51      	ldr	r3, [pc, #324]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <HAL_RCC_OscConfig+0xe8>
 800645e:	e000      	b.n	8006462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d063      	beq.n	8006536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800646e:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 030c 	and.w	r3, r3, #12
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800647a:	4b47      	ldr	r3, [pc, #284]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006482:	2b08      	cmp	r3, #8
 8006484:	d11c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006486:	4b44      	ldr	r3, [pc, #272]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d116      	bne.n	80064c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006492:	4b41      	ldr	r3, [pc, #260]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_RCC_OscConfig+0x152>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d001      	beq.n	80064aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e1c7      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064aa:	4b3b      	ldr	r3, [pc, #236]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4937      	ldr	r1, [pc, #220]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064be:	e03a      	b.n	8006536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d020      	beq.n	800650a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c8:	4b34      	ldr	r3, [pc, #208]	; (800659c <HAL_RCC_OscConfig+0x244>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ce:	f7fe fea5 	bl	800521c <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d6:	f7fe fea1 	bl	800521c <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e1a8      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e8:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f4:	4b28      	ldr	r3, [pc, #160]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4925      	ldr	r1, [pc, #148]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006504:	4313      	orrs	r3, r2
 8006506:	600b      	str	r3, [r1, #0]
 8006508:	e015      	b.n	8006536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800650a:	4b24      	ldr	r3, [pc, #144]	; (800659c <HAL_RCC_OscConfig+0x244>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fe fe84 	bl	800521c <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006518:	f7fe fe80 	bl	800521c <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e187      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d036      	beq.n	80065b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d016      	beq.n	8006578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <HAL_RCC_OscConfig+0x248>)
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006550:	f7fe fe64 	bl	800521c <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006558:	f7fe fe60 	bl	800521c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e167      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800656c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0x200>
 8006576:	e01b      	b.n	80065b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_RCC_OscConfig+0x248>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800657e:	f7fe fe4d 	bl	800521c <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006584:	e00e      	b.n	80065a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006586:	f7fe fe49 	bl	800521c <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d907      	bls.n	80065a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e150      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 8006598:	40023800 	.word	0x40023800
 800659c:	42470000 	.word	0x42470000
 80065a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a4:	4b88      	ldr	r3, [pc, #544]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ea      	bne.n	8006586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8097 	beq.w	80066ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065c2:	4b81      	ldr	r3, [pc, #516]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	4b7d      	ldr	r3, [pc, #500]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4a7c      	ldr	r2, [pc, #496]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6413      	str	r3, [r2, #64]	; 0x40
 80065de:	4b7a      	ldr	r3, [pc, #488]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ee:	4b77      	ldr	r3, [pc, #476]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d118      	bne.n	800662c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065fa:	4b74      	ldr	r3, [pc, #464]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a73      	ldr	r2, [pc, #460]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 8006600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006606:	f7fe fe09 	bl	800521c <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800660e:	f7fe fe05 	bl	800521c <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e10c      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006620:	4b6a      	ldr	r3, [pc, #424]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d106      	bne.n	8006642 <HAL_RCC_OscConfig+0x2ea>
 8006634:	4b64      	ldr	r3, [pc, #400]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4a63      	ldr	r2, [pc, #396]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6713      	str	r3, [r2, #112]	; 0x70
 8006640:	e01c      	b.n	800667c <HAL_RCC_OscConfig+0x324>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b05      	cmp	r3, #5
 8006648:	d10c      	bne.n	8006664 <HAL_RCC_OscConfig+0x30c>
 800664a:	4b5f      	ldr	r3, [pc, #380]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	4a5e      	ldr	r2, [pc, #376]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006650:	f043 0304 	orr.w	r3, r3, #4
 8006654:	6713      	str	r3, [r2, #112]	; 0x70
 8006656:	4b5c      	ldr	r3, [pc, #368]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	4a5b      	ldr	r2, [pc, #364]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	6713      	str	r3, [r2, #112]	; 0x70
 8006662:	e00b      	b.n	800667c <HAL_RCC_OscConfig+0x324>
 8006664:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	4a57      	ldr	r2, [pc, #348]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
 8006670:	4b55      	ldr	r3, [pc, #340]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	4a54      	ldr	r2, [pc, #336]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006676:	f023 0304 	bic.w	r3, r3, #4
 800667a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006684:	f7fe fdca 	bl	800521c <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668a:	e00a      	b.n	80066a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800668c:	f7fe fdc6 	bl	800521c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f241 3288 	movw	r2, #5000	; 0x1388
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0cb      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a2:	4b49      	ldr	r3, [pc, #292]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ee      	beq.n	800668c <HAL_RCC_OscConfig+0x334>
 80066ae:	e014      	b.n	80066da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b0:	f7fe fdb4 	bl	800521c <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b6:	e00a      	b.n	80066ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b8:	f7fe fdb0 	bl	800521c <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0b5      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ce:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1ee      	bne.n	80066b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d105      	bne.n	80066ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e0:	4b39      	ldr	r3, [pc, #228]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	4a38      	ldr	r2, [pc, #224]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80a1 	beq.w	8006838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066f6:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 030c 	and.w	r3, r3, #12
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d05c      	beq.n	80067bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d141      	bne.n	800678e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670a:	4b31      	ldr	r3, [pc, #196]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006710:	f7fe fd84 	bl	800521c <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006718:	f7fe fd80 	bl	800521c <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e087      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672a:	4b27      	ldr	r3, [pc, #156]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	019b      	lsls	r3, r3, #6
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	3b01      	subs	r3, #1
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	061b      	lsls	r3, r3, #24
 800675a:	491b      	ldr	r1, [pc, #108]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800675c:	4313      	orrs	r3, r2
 800675e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006760:	4b1b      	ldr	r3, [pc, #108]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006766:	f7fe fd59 	bl	800521c <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800676e:	f7fe fd55 	bl	800521c <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e05c      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x416>
 800678c:	e054      	b.n	8006838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006794:	f7fe fd42 	bl	800521c <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679c:	f7fe fd3e 	bl	800521c <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e045      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x444>
 80067ba:	e03d      	b.n	8006838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e038      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40007000 	.word	0x40007000
 80067d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067d4:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <HAL_RCC_OscConfig+0x4ec>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d028      	beq.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d121      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d11a      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006804:	4013      	ands	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800680a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800680c:	4293      	cmp	r3, r2
 800680e:	d111      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	3b01      	subs	r3, #1
 800681e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006820:	429a      	cmp	r2, r3
 8006822:	d107      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40023800 	.word	0x40023800

08006848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e0cc      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800685c:	4b68      	ldr	r3, [pc, #416]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d90c      	bls.n	8006884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686a:	4b65      	ldr	r3, [pc, #404]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006872:	4b63      	ldr	r3, [pc, #396]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d001      	beq.n	8006884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e0b8      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d020      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800689c:	4b59      	ldr	r3, [pc, #356]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4a58      	ldr	r2, [pc, #352]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068b4:	4b53      	ldr	r3, [pc, #332]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	4a52      	ldr	r2, [pc, #328]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c0:	4b50      	ldr	r3, [pc, #320]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	494d      	ldr	r1, [pc, #308]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d044      	beq.n	8006968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d107      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e6:	4b47      	ldr	r3, [pc, #284]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d119      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e07f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d003      	beq.n	8006906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006902:	2b03      	cmp	r3, #3
 8006904:	d107      	bne.n	8006916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006906:	4b3f      	ldr	r3, [pc, #252]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e06f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e067      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006926:	4b37      	ldr	r3, [pc, #220]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f023 0203 	bic.w	r2, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4934      	ldr	r1, [pc, #208]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006938:	f7fe fc70 	bl	800521c <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693e:	e00a      	b.n	8006956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006940:	f7fe fc6c 	bl	800521c <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f241 3288 	movw	r2, #5000	; 0x1388
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e04f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006956:	4b2b      	ldr	r3, [pc, #172]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 020c 	and.w	r2, r3, #12
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	429a      	cmp	r2, r3
 8006966:	d1eb      	bne.n	8006940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006968:	4b25      	ldr	r3, [pc, #148]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d20c      	bcs.n	8006990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006976:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800697e:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e032      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800699c:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4916      	ldr	r1, [pc, #88]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ba:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	490e      	ldr	r1, [pc, #56]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069ce:	f000 f821 	bl	8006a14 <HAL_RCC_GetSysClockFreq>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	490a      	ldr	r1, [pc, #40]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 80069e0:	5ccb      	ldrb	r3, [r1, r3]
 80069e2:	fa22 f303 	lsr.w	r3, r2, r3
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069ea:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <HAL_RCC_ClockConfig+0x1c8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fbd0 	bl	8005194 <HAL_InitTick>

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40023c00 	.word	0x40023c00
 8006a04:	40023800 	.word	0x40023800
 8006a08:	0800b920 	.word	0x0800b920
 8006a0c:	20000008 	.word	0x20000008
 8006a10:	2000000c 	.word	0x2000000c

08006a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a18:	b090      	sub	sp, #64	; 0x40
 8006a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a24:	2300      	movs	r3, #0
 8006a26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a2c:	4b59      	ldr	r3, [pc, #356]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d00d      	beq.n	8006a54 <HAL_RCC_GetSysClockFreq+0x40>
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	f200 80a1 	bhi.w	8006b80 <HAL_RCC_GetSysClockFreq+0x16c>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_RCC_GetSysClockFreq+0x34>
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d003      	beq.n	8006a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a46:	e09b      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a48:	4b53      	ldr	r3, [pc, #332]	; (8006b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006a4c:	e09b      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a4e:	4b53      	ldr	r3, [pc, #332]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a52:	e098      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a54:	4b4f      	ldr	r3, [pc, #316]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a5e:	4b4d      	ldr	r3, [pc, #308]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d028      	beq.n	8006abc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a6a:	4b4a      	ldr	r3, [pc, #296]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	099b      	lsrs	r3, r3, #6
 8006a70:	2200      	movs	r2, #0
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	627a      	str	r2, [r7, #36]	; 0x24
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4b47      	ldr	r3, [pc, #284]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a80:	fb03 f201 	mul.w	r2, r3, r1
 8006a84:	2300      	movs	r3, #0
 8006a86:	fb00 f303 	mul.w	r3, r0, r3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	4a43      	ldr	r2, [pc, #268]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a8e:	fba0 1202 	umull	r1, r2, r0, r2
 8006a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a94:	460a      	mov	r2, r1
 8006a96:	62ba      	str	r2, [r7, #40]	; 0x28
 8006a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a9a:	4413      	add	r3, r2
 8006a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	61bb      	str	r3, [r7, #24]
 8006aa4:	61fa      	str	r2, [r7, #28]
 8006aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006aae:	f7f9 fe91 	bl	80007d4 <__aeabi_uldivmod>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aba:	e053      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006abc:	4b35      	ldr	r3, [pc, #212]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	099b      	lsrs	r3, r3, #6
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	617a      	str	r2, [r7, #20]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ace:	f04f 0b00 	mov.w	fp, #0
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	465b      	mov	r3, fp
 8006ad6:	f04f 0000 	mov.w	r0, #0
 8006ada:	f04f 0100 	mov.w	r1, #0
 8006ade:	0159      	lsls	r1, r3, #5
 8006ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ae4:	0150      	lsls	r0, r2, #5
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	ebb2 080a 	subs.w	r8, r2, sl
 8006aee:	eb63 090b 	sbc.w	r9, r3, fp
 8006af2:	f04f 0200 	mov.w	r2, #0
 8006af6:	f04f 0300 	mov.w	r3, #0
 8006afa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006afe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b06:	ebb2 0408 	subs.w	r4, r2, r8
 8006b0a:	eb63 0509 	sbc.w	r5, r3, r9
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	00eb      	lsls	r3, r5, #3
 8006b18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b1c:	00e2      	lsls	r2, r4, #3
 8006b1e:	4614      	mov	r4, r2
 8006b20:	461d      	mov	r5, r3
 8006b22:	eb14 030a 	adds.w	r3, r4, sl
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	eb45 030b 	adc.w	r3, r5, fp
 8006b2c:	607b      	str	r3, [r7, #4]
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	028b      	lsls	r3, r1, #10
 8006b3e:	4621      	mov	r1, r4
 8006b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b44:	4621      	mov	r1, r4
 8006b46:	028a      	lsls	r2, r1, #10
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	2200      	movs	r2, #0
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	60fa      	str	r2, [r7, #12]
 8006b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b58:	f7f9 fe3c 	bl	80007d4 <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4613      	mov	r3, r2
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	3301      	adds	r3, #1
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b7e:	e002      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3740      	adds	r7, #64	; 0x40
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b92:	bf00      	nop
 8006b94:	40023800 	.word	0x40023800
 8006b98:	00f42400 	.word	0x00f42400
 8006b9c:	017d7840 	.word	0x017d7840

08006ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ba4:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000008 	.word	0x20000008

08006bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bbc:	f7ff fff0 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	0a9b      	lsrs	r3, r3, #10
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	4903      	ldr	r1, [pc, #12]	; (8006bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bce:	5ccb      	ldrb	r3, [r1, r3]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	40023800 	.word	0x40023800
 8006bdc:	0800b930 	.word	0x0800b930

08006be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006be4:	f7ff ffdc 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8006be8:	4602      	mov	r2, r0
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	0b5b      	lsrs	r3, r3, #13
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	4903      	ldr	r1, [pc, #12]	; (8006c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bf6:	5ccb      	ldrb	r3, [r1, r3]
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40023800 	.word	0x40023800
 8006c04:	0800b930 	.word	0x0800b930

08006c08 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e038      	b.n	8006c90 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7fd fdf6 	bl	8004824 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f001 f87e 	bl	8007d44 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	461a      	mov	r2, r3
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	f001 f8e0 	bl	8007e18 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6858      	ldr	r0, [r3, #4]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	f001 f90d 	bl	8007e84 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	6892      	ldr	r2, [r2, #8]
 8006c72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	6892      	ldr	r2, [r2, #8]
 8006c7e:	f041 0101 	orr.w	r1, r1, #1
 8006c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e042      	b.n	8006d30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fe f972 	bl	8004fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2224      	movs	r2, #36	; 0x24
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fdbd 	bl	800785c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695a      	ldr	r2, [r3, #20]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	; 0x28
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	4613      	mov	r3, r2
 8006d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d175      	bne.n	8006e44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <HAL_UART_Transmit+0x2c>
 8006d5e:	88fb      	ldrh	r3, [r7, #6]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e06e      	b.n	8006e46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2221      	movs	r2, #33	; 0x21
 8006d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d76:	f7fe fa51 	bl	800521c <HAL_GetTick>
 8006d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	88fa      	ldrh	r2, [r7, #6]
 8006d86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d90:	d108      	bne.n	8006da4 <HAL_UART_Transmit+0x6c>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d104      	bne.n	8006da4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	e003      	b.n	8006dac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dac:	e02e      	b.n	8006e0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2200      	movs	r2, #0
 8006db6:	2180      	movs	r1, #128	; 0x80
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fb1f 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e03a      	b.n	8006e46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006de4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	3302      	adds	r3, #2
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	e007      	b.n	8006dfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1cb      	bne.n	8006dae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2140      	movs	r1, #64	; 0x40
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 faeb 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e006      	b.n	8006e46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	e000      	b.n	8006e46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e44:	2302      	movs	r3, #2
  }
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3720      	adds	r7, #32
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d112      	bne.n	8006e8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <HAL_UART_Receive_IT+0x26>
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e00b      	b.n	8006e90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	461a      	mov	r2, r3
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 fb12 	bl	80074ae <UART_Start_Receive_IT>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	e000      	b.n	8006e90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e8e:	2302      	movs	r3, #2
  }
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b0ba      	sub	sp, #232	; 0xe8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10f      	bne.n	8006efe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_UART_IRQHandler+0x66>
 8006eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fbf2 	bl	80076e0 <UART_Receive_IT>
      return;
 8006efc:	e25b      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 80de 	beq.w	80070c4 <HAL_UART_IRQHandler+0x22c>
 8006f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d106      	bne.n	8006f22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80d1 	beq.w	80070c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <HAL_UART_IRQHandler+0xae>
 8006f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d005      	beq.n	8006f46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3e:	f043 0201 	orr.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00b      	beq.n	8006f6a <HAL_UART_IRQHandler+0xd2>
 8006f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	f043 0202 	orr.w	r2, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <HAL_UART_IRQHandler+0xf6>
 8006f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	f043 0204 	orr.w	r2, r3, #4
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d011      	beq.n	8006fbe <HAL_UART_IRQHandler+0x126>
 8006f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	f043 0208 	orr.w	r2, r3, #8
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 81f2 	beq.w	80073ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d008      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x14e>
 8006fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fb7d 	bl	80076e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff0:	2b40      	cmp	r3, #64	; 0x40
 8006ff2:	bf0c      	ite	eq
 8006ff4:	2301      	moveq	r3, #1
 8006ff6:	2300      	movne	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <HAL_UART_IRQHandler+0x17a>
 800700a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d04f      	beq.n	80070b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa85 	bl	8007522 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b40      	cmp	r3, #64	; 0x40
 8007024:	d141      	bne.n	80070aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3314      	adds	r3, #20
 800702c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800703c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3314      	adds	r3, #20
 800704e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007052:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800705e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800706a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1d9      	bne.n	8007026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d013      	beq.n	80070a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707e:	4a7e      	ldr	r2, [pc, #504]	; (8007278 <HAL_UART_IRQHandler+0x3e0>)
 8007080:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe ff5b 	bl	8005f42 <HAL_DMA_Abort_IT>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d016      	beq.n	80070c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800709c:	4610      	mov	r0, r2
 800709e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a0:	e00e      	b.n	80070c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f994 	bl	80073d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a8:	e00a      	b.n	80070c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f990 	bl	80073d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b0:	e006      	b.n	80070c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f98c 	bl	80073d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80070be:	e175      	b.n	80073ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c0:	bf00      	nop
    return;
 80070c2:	e173      	b.n	80073ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f040 814f 	bne.w	800736c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d2:	f003 0310 	and.w	r3, r3, #16
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8148 	beq.w	800736c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e0:	f003 0310 	and.w	r3, r3, #16
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 8141 	beq.w	800736c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ea:	2300      	movs	r3, #0
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	60bb      	str	r3, [r7, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	60bb      	str	r3, [r7, #8]
 80070fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	f040 80b6 	bne.w	800727c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800711c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 8145 	beq.w	80073b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800712a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800712e:	429a      	cmp	r2, r3
 8007130:	f080 813e 	bcs.w	80073b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800713a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007146:	f000 8088 	beq.w	800725a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800717a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007182:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800718e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1d9      	bne.n	800714a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3314      	adds	r3, #20
 800719c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071a8:	f023 0301 	bic.w	r3, r3, #1
 80071ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3314      	adds	r3, #20
 80071b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e1      	bne.n	8007196 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3314      	adds	r3, #20
 80071d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3314      	adds	r3, #20
 80071f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e3      	bne.n	80071d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007222:	e853 3f00 	ldrex	r3, [r3]
 8007226:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800722a:	f023 0310 	bic.w	r3, r3, #16
 800722e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800723c:	65ba      	str	r2, [r7, #88]	; 0x58
 800723e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007242:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800724a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e3      	bne.n	8007218 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fe04 	bl	8005e62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007268:	b29b      	uxth	r3, r3
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	b29b      	uxth	r3, r3
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f8b7 	bl	80073e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007276:	e09b      	b.n	80073b0 <HAL_UART_IRQHandler+0x518>
 8007278:	080075e9 	.word	0x080075e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007284:	b29b      	uxth	r3, r3
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 808e 	beq.w	80073b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8089 	beq.w	80073b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	330c      	adds	r3, #12
 80072a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	330c      	adds	r3, #12
 80072c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80072c6:	647a      	str	r2, [r7, #68]	; 0x44
 80072c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e3      	bne.n	80072a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3314      	adds	r3, #20
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	623b      	str	r3, [r7, #32]
   return(result);
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3314      	adds	r3, #20
 80072fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072fe:	633a      	str	r2, [r7, #48]	; 0x30
 8007300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e3      	bne.n	80072da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0310 	bic.w	r3, r3, #16
 8007336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	330c      	adds	r3, #12
 8007340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007344:	61fa      	str	r2, [r7, #28]
 8007346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	69b9      	ldr	r1, [r7, #24]
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	617b      	str	r3, [r7, #20]
   return(result);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e3      	bne.n	8007320 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800735e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f83d 	bl	80073e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800736a:	e023      	b.n	80073b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800736c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <HAL_UART_IRQHandler+0x4f4>
 8007378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f943 	bl	8007610 <UART_Transmit_IT>
    return;
 800738a:	e014      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800738c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00e      	beq.n	80073b6 <HAL_UART_IRQHandler+0x51e>
 8007398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f983 	bl	80076b0 <UART_EndTransmit_IT>
    return;
 80073aa:	e004      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80073ac:	bf00      	nop
 80073ae:	e002      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073b0:	bf00      	nop
 80073b2:	e000      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073b4:	bf00      	nop
  }
}
 80073b6:	37e8      	adds	r7, #232	; 0xe8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	4613      	mov	r3, r2
 800740a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800740c:	e03b      	b.n	8007486 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d037      	beq.n	8007486 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007416:	f7fd ff01 	bl	800521c <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	6a3a      	ldr	r2, [r7, #32]
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <UART_WaitOnFlagUntilTimeout+0x30>
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e03a      	b.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d023      	beq.n	8007486 <UART_WaitOnFlagUntilTimeout+0x8a>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b80      	cmp	r3, #128	; 0x80
 8007442:	d020      	beq.n	8007486 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d01d      	beq.n	8007486 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0308 	and.w	r3, r3, #8
 8007454:	2b08      	cmp	r3, #8
 8007456:	d116      	bne.n	8007486 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f857 	bl	8007522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2208      	movs	r2, #8
 8007478:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e00f      	b.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4013      	ands	r3, r2
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	429a      	cmp	r2, r3
 8007494:	bf0c      	ite	eq
 8007496:	2301      	moveq	r3, #1
 8007498:	2300      	movne	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d0b4      	beq.n	800740e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	4613      	mov	r3, r2
 80074ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	88fa      	ldrh	r2, [r7, #6]
 80074c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2222      	movs	r2, #34	; 0x22
 80074d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d007      	beq.n	80074f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0201 	orr.w	r2, r2, #1
 8007502:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0220 	orr.w	r2, r2, #32
 8007512:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007522:	b480      	push	{r7}
 8007524:	b095      	sub	sp, #84	; 0x54
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	330c      	adds	r3, #12
 8007530:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	330c      	adds	r3, #12
 8007548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800754a:	643a      	str	r2, [r7, #64]	; 0x40
 800754c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e5      	bne.n	800752a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3314      	adds	r3, #20
 8007564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	61fb      	str	r3, [r7, #28]
   return(result);
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	f023 0301 	bic.w	r3, r3, #1
 8007574:	64bb      	str	r3, [r7, #72]	; 0x48
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3314      	adds	r3, #20
 800757c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800757e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007580:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e5      	bne.n	800755e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	2b01      	cmp	r3, #1
 8007598:	d119      	bne.n	80075ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f023 0310 	bic.w	r3, r3, #16
 80075b0:	647b      	str	r3, [r7, #68]	; 0x44
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ba:	61ba      	str	r2, [r7, #24]
 80075bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6979      	ldr	r1, [r7, #20]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	613b      	str	r3, [r7, #16]
   return(result);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e5      	bne.n	800759a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80075dc:	bf00      	nop
 80075de:	3754      	adds	r7, #84	; 0x54
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff fee4 	bl	80073d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b21      	cmp	r3, #33	; 0x21
 8007622:	d13e      	bne.n	80076a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762c:	d114      	bne.n	8007658 <UART_Transmit_IT+0x48>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d110      	bne.n	8007658 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800764a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	1c9a      	adds	r2, r3, #2
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	621a      	str	r2, [r3, #32]
 8007656:	e008      	b.n	800766a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6211      	str	r1, [r2, #32]
 8007662:	781a      	ldrb	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29b      	uxth	r3, r3
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	4619      	mov	r1, r3
 8007678:	84d1      	strh	r1, [r2, #38]	; 0x26
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10f      	bne.n	800769e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800768c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800769c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e000      	b.n	80076a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076a2:	2302      	movs	r3, #2
  }
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff fe73 	bl	80073bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08c      	sub	sp, #48	; 0x30
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b22      	cmp	r3, #34	; 0x22
 80076f2:	f040 80ae 	bne.w	8007852 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fe:	d117      	bne.n	8007730 <UART_Receive_IT+0x50>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d113      	bne.n	8007730 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007708:	2300      	movs	r3, #0
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007710:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771e:	b29a      	uxth	r2, r3
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	1c9a      	adds	r2, r3, #2
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	629a      	str	r2, [r3, #40]	; 0x28
 800772e:	e026      	b.n	800777e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007742:	d007      	beq.n	8007754 <UART_Receive_IT+0x74>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <UART_Receive_IT+0x82>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b2da      	uxtb	r2, r3
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e008      	b.n	8007774 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776e:	b2da      	uxtb	r2, r3
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29b      	uxth	r3, r3
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4619      	mov	r1, r3
 800778c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800778e:	2b00      	cmp	r3, #0
 8007790:	d15d      	bne.n	800784e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0220 	bic.w	r2, r2, #32
 80077a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0201 	bic.w	r2, r2, #1
 80077c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d135      	bne.n	8007844 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	330c      	adds	r3, #12
 80077e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	613b      	str	r3, [r7, #16]
   return(result);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f023 0310 	bic.w	r3, r3, #16
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	330c      	adds	r3, #12
 80077fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fe:	623a      	str	r2, [r7, #32]
 8007800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	69f9      	ldr	r1, [r7, #28]
 8007804:	6a3a      	ldr	r2, [r7, #32]
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	61bb      	str	r3, [r7, #24]
   return(result);
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e5      	bne.n	80077de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	2b10      	cmp	r3, #16
 800781e:	d10a      	bne.n	8007836 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff fdd1 	bl	80073e4 <HAL_UARTEx_RxEventCallback>
 8007842:	e002      	b.n	800784a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fd fbff 	bl	8005048 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	e002      	b.n	8007854 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	e000      	b.n	8007854 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007852:	2302      	movs	r3, #2
  }
}
 8007854:	4618      	mov	r0, r3
 8007856:	3730      	adds	r7, #48	; 0x30
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800785c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007860:	b0c0      	sub	sp, #256	; 0x100
 8007862:	af00      	add	r7, sp, #0
 8007864:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007878:	68d9      	ldr	r1, [r3, #12]
 800787a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	ea40 0301 	orr.w	r3, r0, r1
 8007884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	431a      	orrs	r2, r3
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	431a      	orrs	r2, r3
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078b4:	f021 010c 	bic.w	r1, r1, #12
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078c2:	430b      	orrs	r3, r1
 80078c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80078d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d6:	6999      	ldr	r1, [r3, #24]
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	ea40 0301 	orr.w	r3, r0, r1
 80078e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b8f      	ldr	r3, [pc, #572]	; (8007b28 <UART_SetConfig+0x2cc>)
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d005      	beq.n	80078fc <UART_SetConfig+0xa0>
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4b8d      	ldr	r3, [pc, #564]	; (8007b2c <UART_SetConfig+0x2d0>)
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d104      	bne.n	8007906 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078fc:	f7ff f970 	bl	8006be0 <HAL_RCC_GetPCLK2Freq>
 8007900:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007904:	e003      	b.n	800790e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007906:	f7ff f957 	bl	8006bb8 <HAL_RCC_GetPCLK1Freq>
 800790a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800790e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007918:	f040 810c 	bne.w	8007b34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800791c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007920:	2200      	movs	r2, #0
 8007922:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007926:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800792a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800792e:	4622      	mov	r2, r4
 8007930:	462b      	mov	r3, r5
 8007932:	1891      	adds	r1, r2, r2
 8007934:	65b9      	str	r1, [r7, #88]	; 0x58
 8007936:	415b      	adcs	r3, r3
 8007938:	65fb      	str	r3, [r7, #92]	; 0x5c
 800793a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800793e:	4621      	mov	r1, r4
 8007940:	eb12 0801 	adds.w	r8, r2, r1
 8007944:	4629      	mov	r1, r5
 8007946:	eb43 0901 	adc.w	r9, r3, r1
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800795a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800795e:	4690      	mov	r8, r2
 8007960:	4699      	mov	r9, r3
 8007962:	4623      	mov	r3, r4
 8007964:	eb18 0303 	adds.w	r3, r8, r3
 8007968:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800796c:	462b      	mov	r3, r5
 800796e:	eb49 0303 	adc.w	r3, r9, r3
 8007972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007982:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007986:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800798a:	460b      	mov	r3, r1
 800798c:	18db      	adds	r3, r3, r3
 800798e:	653b      	str	r3, [r7, #80]	; 0x50
 8007990:	4613      	mov	r3, r2
 8007992:	eb42 0303 	adc.w	r3, r2, r3
 8007996:	657b      	str	r3, [r7, #84]	; 0x54
 8007998:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800799c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079a0:	f7f8 ff18 	bl	80007d4 <__aeabi_uldivmod>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4b61      	ldr	r3, [pc, #388]	; (8007b30 <UART_SetConfig+0x2d4>)
 80079aa:	fba3 2302 	umull	r2, r3, r3, r2
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	011c      	lsls	r4, r3, #4
 80079b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80079c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80079c4:	4642      	mov	r2, r8
 80079c6:	464b      	mov	r3, r9
 80079c8:	1891      	adds	r1, r2, r2
 80079ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80079cc:	415b      	adcs	r3, r3
 80079ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80079d4:	4641      	mov	r1, r8
 80079d6:	eb12 0a01 	adds.w	sl, r2, r1
 80079da:	4649      	mov	r1, r9
 80079dc:	eb43 0b01 	adc.w	fp, r3, r1
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079f4:	4692      	mov	sl, r2
 80079f6:	469b      	mov	fp, r3
 80079f8:	4643      	mov	r3, r8
 80079fa:	eb1a 0303 	adds.w	r3, sl, r3
 80079fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a02:	464b      	mov	r3, r9
 8007a04:	eb4b 0303 	adc.w	r3, fp, r3
 8007a08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a20:	460b      	mov	r3, r1
 8007a22:	18db      	adds	r3, r3, r3
 8007a24:	643b      	str	r3, [r7, #64]	; 0x40
 8007a26:	4613      	mov	r3, r2
 8007a28:	eb42 0303 	adc.w	r3, r2, r3
 8007a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a36:	f7f8 fecd 	bl	80007d4 <__aeabi_uldivmod>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4b3b      	ldr	r3, [pc, #236]	; (8007b30 <UART_SetConfig+0x2d4>)
 8007a42:	fba3 2301 	umull	r2, r3, r3, r1
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	2264      	movs	r2, #100	; 0x64
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
 8007a4e:	1acb      	subs	r3, r1, r3
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a56:	4b36      	ldr	r3, [pc, #216]	; (8007b30 <UART_SetConfig+0x2d4>)
 8007a58:	fba3 2302 	umull	r2, r3, r3, r2
 8007a5c:	095b      	lsrs	r3, r3, #5
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a64:	441c      	add	r4, r3
 8007a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007a74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007a78:	4642      	mov	r2, r8
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	1891      	adds	r1, r2, r2
 8007a7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a80:	415b      	adcs	r3, r3
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a88:	4641      	mov	r1, r8
 8007a8a:	1851      	adds	r1, r2, r1
 8007a8c:	6339      	str	r1, [r7, #48]	; 0x30
 8007a8e:	4649      	mov	r1, r9
 8007a90:	414b      	adcs	r3, r1
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007aa0:	4659      	mov	r1, fp
 8007aa2:	00cb      	lsls	r3, r1, #3
 8007aa4:	4651      	mov	r1, sl
 8007aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aaa:	4651      	mov	r1, sl
 8007aac:	00ca      	lsls	r2, r1, #3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4642      	mov	r2, r8
 8007ab6:	189b      	adds	r3, r3, r2
 8007ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007abc:	464b      	mov	r3, r9
 8007abe:	460a      	mov	r2, r1
 8007ac0:	eb42 0303 	adc.w	r3, r2, r3
 8007ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ad4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ad8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007adc:	460b      	mov	r3, r1
 8007ade:	18db      	adds	r3, r3, r3
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	eb42 0303 	adc.w	r3, r2, r3
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007af2:	f7f8 fe6f 	bl	80007d4 <__aeabi_uldivmod>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <UART_SetConfig+0x2d4>)
 8007afc:	fba3 1302 	umull	r1, r3, r3, r2
 8007b00:	095b      	lsrs	r3, r3, #5
 8007b02:	2164      	movs	r1, #100	; 0x64
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	3332      	adds	r3, #50	; 0x32
 8007b0e:	4a08      	ldr	r2, [pc, #32]	; (8007b30 <UART_SetConfig+0x2d4>)
 8007b10:	fba2 2303 	umull	r2, r3, r2, r3
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	f003 0207 	and.w	r2, r3, #7
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4422      	add	r2, r4
 8007b22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b24:	e106      	b.n	8007d34 <UART_SetConfig+0x4d8>
 8007b26:	bf00      	nop
 8007b28:	40011000 	.word	0x40011000
 8007b2c:	40011400 	.word	0x40011400
 8007b30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b46:	4642      	mov	r2, r8
 8007b48:	464b      	mov	r3, r9
 8007b4a:	1891      	adds	r1, r2, r2
 8007b4c:	6239      	str	r1, [r7, #32]
 8007b4e:	415b      	adcs	r3, r3
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
 8007b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b56:	4641      	mov	r1, r8
 8007b58:	1854      	adds	r4, r2, r1
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	eb43 0501 	adc.w	r5, r3, r1
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	00eb      	lsls	r3, r5, #3
 8007b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b6e:	00e2      	lsls	r2, r4, #3
 8007b70:	4614      	mov	r4, r2
 8007b72:	461d      	mov	r5, r3
 8007b74:	4643      	mov	r3, r8
 8007b76:	18e3      	adds	r3, r4, r3
 8007b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	eb45 0303 	adc.w	r3, r5, r3
 8007b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	008b      	lsls	r3, r1, #2
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bac:	4621      	mov	r1, r4
 8007bae:	008a      	lsls	r2, r1, #2
 8007bb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007bb4:	f7f8 fe0e 	bl	80007d4 <__aeabi_uldivmod>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4b60      	ldr	r3, [pc, #384]	; (8007d40 <UART_SetConfig+0x4e4>)
 8007bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	011c      	lsls	r4, r3, #4
 8007bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007bd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007bd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007bd8:	4642      	mov	r2, r8
 8007bda:	464b      	mov	r3, r9
 8007bdc:	1891      	adds	r1, r2, r2
 8007bde:	61b9      	str	r1, [r7, #24]
 8007be0:	415b      	adcs	r3, r3
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007be8:	4641      	mov	r1, r8
 8007bea:	1851      	adds	r1, r2, r1
 8007bec:	6139      	str	r1, [r7, #16]
 8007bee:	4649      	mov	r1, r9
 8007bf0:	414b      	adcs	r3, r1
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	f04f 0300 	mov.w	r3, #0
 8007bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c00:	4659      	mov	r1, fp
 8007c02:	00cb      	lsls	r3, r1, #3
 8007c04:	4651      	mov	r1, sl
 8007c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c0a:	4651      	mov	r1, sl
 8007c0c:	00ca      	lsls	r2, r1, #3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	4619      	mov	r1, r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	4642      	mov	r2, r8
 8007c16:	189b      	adds	r3, r3, r2
 8007c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c1c:	464b      	mov	r3, r9
 8007c1e:	460a      	mov	r2, r1
 8007c20:	eb42 0303 	adc.w	r3, r2, r3
 8007c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c34:	f04f 0200 	mov.w	r2, #0
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c40:	4649      	mov	r1, r9
 8007c42:	008b      	lsls	r3, r1, #2
 8007c44:	4641      	mov	r1, r8
 8007c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c4a:	4641      	mov	r1, r8
 8007c4c:	008a      	lsls	r2, r1, #2
 8007c4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c52:	f7f8 fdbf 	bl	80007d4 <__aeabi_uldivmod>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4b38      	ldr	r3, [pc, #224]	; (8007d40 <UART_SetConfig+0x4e4>)
 8007c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	2264      	movs	r2, #100	; 0x64
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	1acb      	subs	r3, r1, r3
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	3332      	adds	r3, #50	; 0x32
 8007c70:	4a33      	ldr	r2, [pc, #204]	; (8007d40 <UART_SetConfig+0x4e4>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c7c:	441c      	add	r4, r3
 8007c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c82:	2200      	movs	r2, #0
 8007c84:	673b      	str	r3, [r7, #112]	; 0x70
 8007c86:	677a      	str	r2, [r7, #116]	; 0x74
 8007c88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	464b      	mov	r3, r9
 8007c90:	1891      	adds	r1, r2, r2
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	415b      	adcs	r3, r3
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	1851      	adds	r1, r2, r1
 8007ca0:	6039      	str	r1, [r7, #0]
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	414b      	adcs	r3, r1
 8007ca6:	607b      	str	r3, [r7, #4]
 8007ca8:	f04f 0200 	mov.w	r2, #0
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cb4:	4659      	mov	r1, fp
 8007cb6:	00cb      	lsls	r3, r1, #3
 8007cb8:	4651      	mov	r1, sl
 8007cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cbe:	4651      	mov	r1, sl
 8007cc0:	00ca      	lsls	r2, r1, #3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4642      	mov	r2, r8
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cce:	464b      	mov	r3, r9
 8007cd0:	460a      	mov	r2, r1
 8007cd2:	eb42 0303 	adc.w	r3, r2, r3
 8007cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ce2:	667a      	str	r2, [r7, #100]	; 0x64
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	008b      	lsls	r3, r1, #2
 8007cf4:	4641      	mov	r1, r8
 8007cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cfa:	4641      	mov	r1, r8
 8007cfc:	008a      	lsls	r2, r1, #2
 8007cfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d02:	f7f8 fd67 	bl	80007d4 <__aeabi_uldivmod>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <UART_SetConfig+0x4e4>)
 8007d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	2164      	movs	r1, #100	; 0x64
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	3332      	adds	r3, #50	; 0x32
 8007d1e:	4a08      	ldr	r2, [pc, #32]	; (8007d40 <UART_SetConfig+0x4e4>)
 8007d20:	fba2 2303 	umull	r2, r3, r2, r3
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	f003 020f 	and.w	r2, r3, #15
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4422      	add	r2, r4
 8007d32:	609a      	str	r2, [r3, #8]
}
 8007d34:	bf00      	nop
 8007d36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d40:	51eb851f 	.word	0x51eb851f

08007d44 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	f023 0101 	bic.w	r1, r3, #1
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d102      	bne.n	8007d74 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007d6e:	2340      	movs	r3, #64	; 0x40
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	e001      	b.n	8007d78 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007d84:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007d8a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007d90:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007d96:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007d9c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007da2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8007da8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007dae:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007db4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <FSMC_NORSRAM_Init+0xd0>)
 8007dd4:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ddc:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007de4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	43db      	mvns	r3, r3
 8007df4:	ea02 0103 	and.w	r1, r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4319      	orrs	r1, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	0008fb7f 	.word	0x0008fb7f

08007e18 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	431a      	orrs	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	051b      	lsls	r3, r3, #20
 8007e56:	431a      	orrs	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	3b02      	subs	r3, #2
 8007e5e:	061b      	lsls	r3, r3, #24
 8007e60:	431a      	orrs	r2, r3
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	3201      	adds	r2, #1
 8007e6c:	4319      	orrs	r1, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e98:	d11d      	bne.n	8007ed6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	6811      	ldr	r1, [r2, #0]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	6852      	ldr	r2, [r2, #4]
 8007eae:	0112      	lsls	r2, r2, #4
 8007eb0:	4311      	orrs	r1, r2
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	6892      	ldr	r2, [r2, #8]
 8007eb6:	0212      	lsls	r2, r2, #8
 8007eb8:	4311      	orrs	r1, r2
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	6992      	ldr	r2, [r2, #24]
 8007ebe:	4311      	orrs	r1, r2
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	68d2      	ldr	r2, [r2, #12]
 8007ec4:	0412      	lsls	r2, r2, #16
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	ea43 0102 	orr.w	r1, r3, r2
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007ed4:	e005      	b.n	8007ee2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	cff00000 	.word	0xcff00000

08007ef4 <std>:
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	4604      	mov	r4, r0
 8007efa:	e9c0 3300 	strd	r3, r3, [r0]
 8007efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f02:	6083      	str	r3, [r0, #8]
 8007f04:	8181      	strh	r1, [r0, #12]
 8007f06:	6643      	str	r3, [r0, #100]	; 0x64
 8007f08:	81c2      	strh	r2, [r0, #14]
 8007f0a:	6183      	str	r3, [r0, #24]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	2208      	movs	r2, #8
 8007f10:	305c      	adds	r0, #92	; 0x5c
 8007f12:	f000 f9ed 	bl	80082f0 <memset>
 8007f16:	4b0d      	ldr	r3, [pc, #52]	; (8007f4c <std+0x58>)
 8007f18:	6263      	str	r3, [r4, #36]	; 0x24
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <std+0x5c>)
 8007f1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <std+0x60>)
 8007f20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f22:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <std+0x64>)
 8007f24:	6323      	str	r3, [r4, #48]	; 0x30
 8007f26:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <std+0x68>)
 8007f28:	6224      	str	r4, [r4, #32]
 8007f2a:	429c      	cmp	r4, r3
 8007f2c:	d006      	beq.n	8007f3c <std+0x48>
 8007f2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007f32:	4294      	cmp	r4, r2
 8007f34:	d002      	beq.n	8007f3c <std+0x48>
 8007f36:	33d0      	adds	r3, #208	; 0xd0
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	d105      	bne.n	8007f48 <std+0x54>
 8007f3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f44:	f000 ba4c 	b.w	80083e0 <__retarget_lock_init_recursive>
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	08008141 	.word	0x08008141
 8007f50:	08008163 	.word	0x08008163
 8007f54:	0800819b 	.word	0x0800819b
 8007f58:	080081bf 	.word	0x080081bf
 8007f5c:	2000026c 	.word	0x2000026c

08007f60 <stdio_exit_handler>:
 8007f60:	4a02      	ldr	r2, [pc, #8]	; (8007f6c <stdio_exit_handler+0xc>)
 8007f62:	4903      	ldr	r1, [pc, #12]	; (8007f70 <stdio_exit_handler+0x10>)
 8007f64:	4803      	ldr	r0, [pc, #12]	; (8007f74 <stdio_exit_handler+0x14>)
 8007f66:	f000 b869 	b.w	800803c <_fwalk_sglue>
 8007f6a:	bf00      	nop
 8007f6c:	20000014 	.word	0x20000014
 8007f70:	080086e5 	.word	0x080086e5
 8007f74:	20000020 	.word	0x20000020

08007f78 <cleanup_stdio>:
 8007f78:	6841      	ldr	r1, [r0, #4]
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <cleanup_stdio+0x34>)
 8007f7c:	4299      	cmp	r1, r3
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	4604      	mov	r4, r0
 8007f82:	d001      	beq.n	8007f88 <cleanup_stdio+0x10>
 8007f84:	f000 fbae 	bl	80086e4 <_fflush_r>
 8007f88:	68a1      	ldr	r1, [r4, #8]
 8007f8a:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <cleanup_stdio+0x38>)
 8007f8c:	4299      	cmp	r1, r3
 8007f8e:	d002      	beq.n	8007f96 <cleanup_stdio+0x1e>
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 fba7 	bl	80086e4 <_fflush_r>
 8007f96:	68e1      	ldr	r1, [r4, #12]
 8007f98:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <cleanup_stdio+0x3c>)
 8007f9a:	4299      	cmp	r1, r3
 8007f9c:	d004      	beq.n	8007fa8 <cleanup_stdio+0x30>
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa4:	f000 bb9e 	b.w	80086e4 <_fflush_r>
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	bf00      	nop
 8007fac:	2000026c 	.word	0x2000026c
 8007fb0:	200002d4 	.word	0x200002d4
 8007fb4:	2000033c 	.word	0x2000033c

08007fb8 <global_stdio_init.part.0>:
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <global_stdio_init.part.0+0x30>)
 8007fbc:	4c0b      	ldr	r4, [pc, #44]	; (8007fec <global_stdio_init.part.0+0x34>)
 8007fbe:	4a0c      	ldr	r2, [pc, #48]	; (8007ff0 <global_stdio_init.part.0+0x38>)
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2104      	movs	r1, #4
 8007fc8:	f7ff ff94 	bl	8007ef4 <std>
 8007fcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	2109      	movs	r1, #9
 8007fd4:	f7ff ff8e 	bl	8007ef4 <std>
 8007fd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fdc:	2202      	movs	r2, #2
 8007fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe2:	2112      	movs	r1, #18
 8007fe4:	f7ff bf86 	b.w	8007ef4 <std>
 8007fe8:	200003a4 	.word	0x200003a4
 8007fec:	2000026c 	.word	0x2000026c
 8007ff0:	08007f61 	.word	0x08007f61

08007ff4 <__sfp_lock_acquire>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	; (8007ffc <__sfp_lock_acquire+0x8>)
 8007ff6:	f000 b9f4 	b.w	80083e2 <__retarget_lock_acquire_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	200003ad 	.word	0x200003ad

08008000 <__sfp_lock_release>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__sfp_lock_release+0x8>)
 8008002:	f000 b9ef 	b.w	80083e4 <__retarget_lock_release_recursive>
 8008006:	bf00      	nop
 8008008:	200003ad 	.word	0x200003ad

0800800c <__sinit>:
 800800c:	b510      	push	{r4, lr}
 800800e:	4604      	mov	r4, r0
 8008010:	f7ff fff0 	bl	8007ff4 <__sfp_lock_acquire>
 8008014:	6a23      	ldr	r3, [r4, #32]
 8008016:	b11b      	cbz	r3, 8008020 <__sinit+0x14>
 8008018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800801c:	f7ff bff0 	b.w	8008000 <__sfp_lock_release>
 8008020:	4b04      	ldr	r3, [pc, #16]	; (8008034 <__sinit+0x28>)
 8008022:	6223      	str	r3, [r4, #32]
 8008024:	4b04      	ldr	r3, [pc, #16]	; (8008038 <__sinit+0x2c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f5      	bne.n	8008018 <__sinit+0xc>
 800802c:	f7ff ffc4 	bl	8007fb8 <global_stdio_init.part.0>
 8008030:	e7f2      	b.n	8008018 <__sinit+0xc>
 8008032:	bf00      	nop
 8008034:	08007f79 	.word	0x08007f79
 8008038:	200003a4 	.word	0x200003a4

0800803c <_fwalk_sglue>:
 800803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008040:	4607      	mov	r7, r0
 8008042:	4688      	mov	r8, r1
 8008044:	4614      	mov	r4, r2
 8008046:	2600      	movs	r6, #0
 8008048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800804c:	f1b9 0901 	subs.w	r9, r9, #1
 8008050:	d505      	bpl.n	800805e <_fwalk_sglue+0x22>
 8008052:	6824      	ldr	r4, [r4, #0]
 8008054:	2c00      	cmp	r4, #0
 8008056:	d1f7      	bne.n	8008048 <_fwalk_sglue+0xc>
 8008058:	4630      	mov	r0, r6
 800805a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805e:	89ab      	ldrh	r3, [r5, #12]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d907      	bls.n	8008074 <_fwalk_sglue+0x38>
 8008064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008068:	3301      	adds	r3, #1
 800806a:	d003      	beq.n	8008074 <_fwalk_sglue+0x38>
 800806c:	4629      	mov	r1, r5
 800806e:	4638      	mov	r0, r7
 8008070:	47c0      	blx	r8
 8008072:	4306      	orrs	r6, r0
 8008074:	3568      	adds	r5, #104	; 0x68
 8008076:	e7e9      	b.n	800804c <_fwalk_sglue+0x10>

08008078 <putchar>:
 8008078:	4b02      	ldr	r3, [pc, #8]	; (8008084 <putchar+0xc>)
 800807a:	4601      	mov	r1, r0
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	6882      	ldr	r2, [r0, #8]
 8008080:	f000 bbba 	b.w	80087f8 <_putc_r>
 8008084:	2000006c 	.word	0x2000006c

08008088 <_puts_r>:
 8008088:	6a03      	ldr	r3, [r0, #32]
 800808a:	b570      	push	{r4, r5, r6, lr}
 800808c:	6884      	ldr	r4, [r0, #8]
 800808e:	4605      	mov	r5, r0
 8008090:	460e      	mov	r6, r1
 8008092:	b90b      	cbnz	r3, 8008098 <_puts_r+0x10>
 8008094:	f7ff ffba 	bl	800800c <__sinit>
 8008098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800809a:	07db      	lsls	r3, r3, #31
 800809c:	d405      	bmi.n	80080aa <_puts_r+0x22>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	0598      	lsls	r0, r3, #22
 80080a2:	d402      	bmi.n	80080aa <_puts_r+0x22>
 80080a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a6:	f000 f99c 	bl	80083e2 <__retarget_lock_acquire_recursive>
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	0719      	lsls	r1, r3, #28
 80080ae:	d513      	bpl.n	80080d8 <_puts_r+0x50>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	b18b      	cbz	r3, 80080d8 <_puts_r+0x50>
 80080b4:	3e01      	subs	r6, #1
 80080b6:	68a3      	ldr	r3, [r4, #8]
 80080b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080bc:	3b01      	subs	r3, #1
 80080be:	60a3      	str	r3, [r4, #8]
 80080c0:	b9e9      	cbnz	r1, 80080fe <_puts_r+0x76>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	da2e      	bge.n	8008124 <_puts_r+0x9c>
 80080c6:	4622      	mov	r2, r4
 80080c8:	210a      	movs	r1, #10
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 f87b 	bl	80081c6 <__swbuf_r>
 80080d0:	3001      	adds	r0, #1
 80080d2:	d007      	beq.n	80080e4 <_puts_r+0x5c>
 80080d4:	250a      	movs	r5, #10
 80080d6:	e007      	b.n	80080e8 <_puts_r+0x60>
 80080d8:	4621      	mov	r1, r4
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 f8b0 	bl	8008240 <__swsetup_r>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d0e7      	beq.n	80080b4 <_puts_r+0x2c>
 80080e4:	f04f 35ff 	mov.w	r5, #4294967295
 80080e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080ea:	07da      	lsls	r2, r3, #31
 80080ec:	d405      	bmi.n	80080fa <_puts_r+0x72>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	059b      	lsls	r3, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_puts_r+0x72>
 80080f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080f6:	f000 f975 	bl	80083e4 <__retarget_lock_release_recursive>
 80080fa:	4628      	mov	r0, r5
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
 80080fe:	2b00      	cmp	r3, #0
 8008100:	da04      	bge.n	800810c <_puts_r+0x84>
 8008102:	69a2      	ldr	r2, [r4, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	dc06      	bgt.n	8008116 <_puts_r+0x8e>
 8008108:	290a      	cmp	r1, #10
 800810a:	d004      	beq.n	8008116 <_puts_r+0x8e>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	6022      	str	r2, [r4, #0]
 8008112:	7019      	strb	r1, [r3, #0]
 8008114:	e7cf      	b.n	80080b6 <_puts_r+0x2e>
 8008116:	4622      	mov	r2, r4
 8008118:	4628      	mov	r0, r5
 800811a:	f000 f854 	bl	80081c6 <__swbuf_r>
 800811e:	3001      	adds	r0, #1
 8008120:	d1c9      	bne.n	80080b6 <_puts_r+0x2e>
 8008122:	e7df      	b.n	80080e4 <_puts_r+0x5c>
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	250a      	movs	r5, #10
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	701d      	strb	r5, [r3, #0]
 800812e:	e7db      	b.n	80080e8 <_puts_r+0x60>

08008130 <puts>:
 8008130:	4b02      	ldr	r3, [pc, #8]	; (800813c <puts+0xc>)
 8008132:	4601      	mov	r1, r0
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	f7ff bfa7 	b.w	8008088 <_puts_r>
 800813a:	bf00      	nop
 800813c:	2000006c 	.word	0x2000006c

08008140 <__sread>:
 8008140:	b510      	push	{r4, lr}
 8008142:	460c      	mov	r4, r1
 8008144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008148:	f000 f8fc 	bl	8008344 <_read_r>
 800814c:	2800      	cmp	r0, #0
 800814e:	bfab      	itete	ge
 8008150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008152:	89a3      	ldrhlt	r3, [r4, #12]
 8008154:	181b      	addge	r3, r3, r0
 8008156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800815a:	bfac      	ite	ge
 800815c:	6563      	strge	r3, [r4, #84]	; 0x54
 800815e:	81a3      	strhlt	r3, [r4, #12]
 8008160:	bd10      	pop	{r4, pc}

08008162 <__swrite>:
 8008162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008166:	461f      	mov	r7, r3
 8008168:	898b      	ldrh	r3, [r1, #12]
 800816a:	05db      	lsls	r3, r3, #23
 800816c:	4605      	mov	r5, r0
 800816e:	460c      	mov	r4, r1
 8008170:	4616      	mov	r6, r2
 8008172:	d505      	bpl.n	8008180 <__swrite+0x1e>
 8008174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008178:	2302      	movs	r3, #2
 800817a:	2200      	movs	r2, #0
 800817c:	f000 f8d0 	bl	8008320 <_lseek_r>
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800818a:	81a3      	strh	r3, [r4, #12]
 800818c:	4632      	mov	r2, r6
 800818e:	463b      	mov	r3, r7
 8008190:	4628      	mov	r0, r5
 8008192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008196:	f000 b8e7 	b.w	8008368 <_write_r>

0800819a <__sseek>:
 800819a:	b510      	push	{r4, lr}
 800819c:	460c      	mov	r4, r1
 800819e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a2:	f000 f8bd 	bl	8008320 <_lseek_r>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	bf15      	itete	ne
 80081ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80081ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081b6:	81a3      	strheq	r3, [r4, #12]
 80081b8:	bf18      	it	ne
 80081ba:	81a3      	strhne	r3, [r4, #12]
 80081bc:	bd10      	pop	{r4, pc}

080081be <__sclose>:
 80081be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c2:	f000 b89d 	b.w	8008300 <_close_r>

080081c6 <__swbuf_r>:
 80081c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c8:	460e      	mov	r6, r1
 80081ca:	4614      	mov	r4, r2
 80081cc:	4605      	mov	r5, r0
 80081ce:	b118      	cbz	r0, 80081d8 <__swbuf_r+0x12>
 80081d0:	6a03      	ldr	r3, [r0, #32]
 80081d2:	b90b      	cbnz	r3, 80081d8 <__swbuf_r+0x12>
 80081d4:	f7ff ff1a 	bl	800800c <__sinit>
 80081d8:	69a3      	ldr	r3, [r4, #24]
 80081da:	60a3      	str	r3, [r4, #8]
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	071a      	lsls	r2, r3, #28
 80081e0:	d525      	bpl.n	800822e <__swbuf_r+0x68>
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	b31b      	cbz	r3, 800822e <__swbuf_r+0x68>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	6922      	ldr	r2, [r4, #16]
 80081ea:	1a98      	subs	r0, r3, r2
 80081ec:	6963      	ldr	r3, [r4, #20]
 80081ee:	b2f6      	uxtb	r6, r6
 80081f0:	4283      	cmp	r3, r0
 80081f2:	4637      	mov	r7, r6
 80081f4:	dc04      	bgt.n	8008200 <__swbuf_r+0x3a>
 80081f6:	4621      	mov	r1, r4
 80081f8:	4628      	mov	r0, r5
 80081fa:	f000 fa73 	bl	80086e4 <_fflush_r>
 80081fe:	b9e0      	cbnz	r0, 800823a <__swbuf_r+0x74>
 8008200:	68a3      	ldr	r3, [r4, #8]
 8008202:	3b01      	subs	r3, #1
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	6022      	str	r2, [r4, #0]
 800820c:	701e      	strb	r6, [r3, #0]
 800820e:	6962      	ldr	r2, [r4, #20]
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	429a      	cmp	r2, r3
 8008214:	d004      	beq.n	8008220 <__swbuf_r+0x5a>
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	07db      	lsls	r3, r3, #31
 800821a:	d506      	bpl.n	800822a <__swbuf_r+0x64>
 800821c:	2e0a      	cmp	r6, #10
 800821e:	d104      	bne.n	800822a <__swbuf_r+0x64>
 8008220:	4621      	mov	r1, r4
 8008222:	4628      	mov	r0, r5
 8008224:	f000 fa5e 	bl	80086e4 <_fflush_r>
 8008228:	b938      	cbnz	r0, 800823a <__swbuf_r+0x74>
 800822a:	4638      	mov	r0, r7
 800822c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800822e:	4621      	mov	r1, r4
 8008230:	4628      	mov	r0, r5
 8008232:	f000 f805 	bl	8008240 <__swsetup_r>
 8008236:	2800      	cmp	r0, #0
 8008238:	d0d5      	beq.n	80081e6 <__swbuf_r+0x20>
 800823a:	f04f 37ff 	mov.w	r7, #4294967295
 800823e:	e7f4      	b.n	800822a <__swbuf_r+0x64>

08008240 <__swsetup_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4b2a      	ldr	r3, [pc, #168]	; (80082ec <__swsetup_r+0xac>)
 8008244:	4605      	mov	r5, r0
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	460c      	mov	r4, r1
 800824a:	b118      	cbz	r0, 8008254 <__swsetup_r+0x14>
 800824c:	6a03      	ldr	r3, [r0, #32]
 800824e:	b90b      	cbnz	r3, 8008254 <__swsetup_r+0x14>
 8008250:	f7ff fedc 	bl	800800c <__sinit>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800825a:	0718      	lsls	r0, r3, #28
 800825c:	d422      	bmi.n	80082a4 <__swsetup_r+0x64>
 800825e:	06d9      	lsls	r1, r3, #27
 8008260:	d407      	bmi.n	8008272 <__swsetup_r+0x32>
 8008262:	2309      	movs	r3, #9
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	f04f 30ff 	mov.w	r0, #4294967295
 8008270:	e034      	b.n	80082dc <__swsetup_r+0x9c>
 8008272:	0758      	lsls	r0, r3, #29
 8008274:	d512      	bpl.n	800829c <__swsetup_r+0x5c>
 8008276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008278:	b141      	cbz	r1, 800828c <__swsetup_r+0x4c>
 800827a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800827e:	4299      	cmp	r1, r3
 8008280:	d002      	beq.n	8008288 <__swsetup_r+0x48>
 8008282:	4628      	mov	r0, r5
 8008284:	f000 f8b0 	bl	80083e8 <_free_r>
 8008288:	2300      	movs	r3, #0
 800828a:	6363      	str	r3, [r4, #52]	; 0x34
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008292:	81a3      	strh	r3, [r4, #12]
 8008294:	2300      	movs	r3, #0
 8008296:	6063      	str	r3, [r4, #4]
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	89a3      	ldrh	r3, [r4, #12]
 800829e:	f043 0308 	orr.w	r3, r3, #8
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	6923      	ldr	r3, [r4, #16]
 80082a6:	b94b      	cbnz	r3, 80082bc <__swsetup_r+0x7c>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082b2:	d003      	beq.n	80082bc <__swsetup_r+0x7c>
 80082b4:	4621      	mov	r1, r4
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 fa62 	bl	8008780 <__smakebuf_r>
 80082bc:	89a0      	ldrh	r0, [r4, #12]
 80082be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082c2:	f010 0301 	ands.w	r3, r0, #1
 80082c6:	d00a      	beq.n	80082de <__swsetup_r+0x9e>
 80082c8:	2300      	movs	r3, #0
 80082ca:	60a3      	str	r3, [r4, #8]
 80082cc:	6963      	ldr	r3, [r4, #20]
 80082ce:	425b      	negs	r3, r3
 80082d0:	61a3      	str	r3, [r4, #24]
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	b943      	cbnz	r3, 80082e8 <__swsetup_r+0xa8>
 80082d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082da:	d1c4      	bne.n	8008266 <__swsetup_r+0x26>
 80082dc:	bd38      	pop	{r3, r4, r5, pc}
 80082de:	0781      	lsls	r1, r0, #30
 80082e0:	bf58      	it	pl
 80082e2:	6963      	ldrpl	r3, [r4, #20]
 80082e4:	60a3      	str	r3, [r4, #8]
 80082e6:	e7f4      	b.n	80082d2 <__swsetup_r+0x92>
 80082e8:	2000      	movs	r0, #0
 80082ea:	e7f7      	b.n	80082dc <__swsetup_r+0x9c>
 80082ec:	2000006c 	.word	0x2000006c

080082f0 <memset>:
 80082f0:	4402      	add	r2, r0
 80082f2:	4603      	mov	r3, r0
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d100      	bne.n	80082fa <memset+0xa>
 80082f8:	4770      	bx	lr
 80082fa:	f803 1b01 	strb.w	r1, [r3], #1
 80082fe:	e7f9      	b.n	80082f4 <memset+0x4>

08008300 <_close_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d06      	ldr	r5, [pc, #24]	; (800831c <_close_r+0x1c>)
 8008304:	2300      	movs	r3, #0
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	f7fc fd8d 	bl	8004e2a <_close>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_close_r+0x1a>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_close_r+0x1a>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	200003a8 	.word	0x200003a8

08008320 <_lseek_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4d07      	ldr	r5, [pc, #28]	; (8008340 <_lseek_r+0x20>)
 8008324:	4604      	mov	r4, r0
 8008326:	4608      	mov	r0, r1
 8008328:	4611      	mov	r1, r2
 800832a:	2200      	movs	r2, #0
 800832c:	602a      	str	r2, [r5, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	f7fc fda2 	bl	8004e78 <_lseek>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_lseek_r+0x1e>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b103      	cbz	r3, 800833e <_lseek_r+0x1e>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	200003a8 	.word	0x200003a8

08008344 <_read_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d07      	ldr	r5, [pc, #28]	; (8008364 <_read_r+0x20>)
 8008348:	4604      	mov	r4, r0
 800834a:	4608      	mov	r0, r1
 800834c:	4611      	mov	r1, r2
 800834e:	2200      	movs	r2, #0
 8008350:	602a      	str	r2, [r5, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	f7fc fd30 	bl	8004db8 <_read>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_read_r+0x1e>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_read_r+0x1e>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	200003a8 	.word	0x200003a8

08008368 <_write_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4d07      	ldr	r5, [pc, #28]	; (8008388 <_write_r+0x20>)
 800836c:	4604      	mov	r4, r0
 800836e:	4608      	mov	r0, r1
 8008370:	4611      	mov	r1, r2
 8008372:	2200      	movs	r2, #0
 8008374:	602a      	str	r2, [r5, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	f7fc fd3b 	bl	8004df2 <_write>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d102      	bne.n	8008386 <_write_r+0x1e>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b103      	cbz	r3, 8008386 <_write_r+0x1e>
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	200003a8 	.word	0x200003a8

0800838c <__errno>:
 800838c:	4b01      	ldr	r3, [pc, #4]	; (8008394 <__errno+0x8>)
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	2000006c 	.word	0x2000006c

08008398 <__libc_init_array>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	4d0d      	ldr	r5, [pc, #52]	; (80083d0 <__libc_init_array+0x38>)
 800839c:	4c0d      	ldr	r4, [pc, #52]	; (80083d4 <__libc_init_array+0x3c>)
 800839e:	1b64      	subs	r4, r4, r5
 80083a0:	10a4      	asrs	r4, r4, #2
 80083a2:	2600      	movs	r6, #0
 80083a4:	42a6      	cmp	r6, r4
 80083a6:	d109      	bne.n	80083bc <__libc_init_array+0x24>
 80083a8:	4d0b      	ldr	r5, [pc, #44]	; (80083d8 <__libc_init_array+0x40>)
 80083aa:	4c0c      	ldr	r4, [pc, #48]	; (80083dc <__libc_init_array+0x44>)
 80083ac:	f000 fa8a 	bl	80088c4 <_init>
 80083b0:	1b64      	subs	r4, r4, r5
 80083b2:	10a4      	asrs	r4, r4, #2
 80083b4:	2600      	movs	r6, #0
 80083b6:	42a6      	cmp	r6, r4
 80083b8:	d105      	bne.n	80083c6 <__libc_init_array+0x2e>
 80083ba:	bd70      	pop	{r4, r5, r6, pc}
 80083bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c0:	4798      	blx	r3
 80083c2:	3601      	adds	r6, #1
 80083c4:	e7ee      	b.n	80083a4 <__libc_init_array+0xc>
 80083c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ca:	4798      	blx	r3
 80083cc:	3601      	adds	r6, #1
 80083ce:	e7f2      	b.n	80083b6 <__libc_init_array+0x1e>
 80083d0:	0800b940 	.word	0x0800b940
 80083d4:	0800b940 	.word	0x0800b940
 80083d8:	0800b940 	.word	0x0800b940
 80083dc:	0800b944 	.word	0x0800b944

080083e0 <__retarget_lock_init_recursive>:
 80083e0:	4770      	bx	lr

080083e2 <__retarget_lock_acquire_recursive>:
 80083e2:	4770      	bx	lr

080083e4 <__retarget_lock_release_recursive>:
 80083e4:	4770      	bx	lr
	...

080083e8 <_free_r>:
 80083e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ea:	2900      	cmp	r1, #0
 80083ec:	d044      	beq.n	8008478 <_free_r+0x90>
 80083ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f2:	9001      	str	r0, [sp, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f1a1 0404 	sub.w	r4, r1, #4
 80083fa:	bfb8      	it	lt
 80083fc:	18e4      	addlt	r4, r4, r3
 80083fe:	f000 f8df 	bl	80085c0 <__malloc_lock>
 8008402:	4a1e      	ldr	r2, [pc, #120]	; (800847c <_free_r+0x94>)
 8008404:	9801      	ldr	r0, [sp, #4]
 8008406:	6813      	ldr	r3, [r2, #0]
 8008408:	b933      	cbnz	r3, 8008418 <_free_r+0x30>
 800840a:	6063      	str	r3, [r4, #4]
 800840c:	6014      	str	r4, [r2, #0]
 800840e:	b003      	add	sp, #12
 8008410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008414:	f000 b8da 	b.w	80085cc <__malloc_unlock>
 8008418:	42a3      	cmp	r3, r4
 800841a:	d908      	bls.n	800842e <_free_r+0x46>
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	1961      	adds	r1, r4, r5
 8008420:	428b      	cmp	r3, r1
 8008422:	bf01      	itttt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	1949      	addeq	r1, r1, r5
 800842a:	6021      	streq	r1, [r4, #0]
 800842c:	e7ed      	b.n	800840a <_free_r+0x22>
 800842e:	461a      	mov	r2, r3
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	b10b      	cbz	r3, 8008438 <_free_r+0x50>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d9fa      	bls.n	800842e <_free_r+0x46>
 8008438:	6811      	ldr	r1, [r2, #0]
 800843a:	1855      	adds	r5, r2, r1
 800843c:	42a5      	cmp	r5, r4
 800843e:	d10b      	bne.n	8008458 <_free_r+0x70>
 8008440:	6824      	ldr	r4, [r4, #0]
 8008442:	4421      	add	r1, r4
 8008444:	1854      	adds	r4, r2, r1
 8008446:	42a3      	cmp	r3, r4
 8008448:	6011      	str	r1, [r2, #0]
 800844a:	d1e0      	bne.n	800840e <_free_r+0x26>
 800844c:	681c      	ldr	r4, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	6053      	str	r3, [r2, #4]
 8008452:	440c      	add	r4, r1
 8008454:	6014      	str	r4, [r2, #0]
 8008456:	e7da      	b.n	800840e <_free_r+0x26>
 8008458:	d902      	bls.n	8008460 <_free_r+0x78>
 800845a:	230c      	movs	r3, #12
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	e7d6      	b.n	800840e <_free_r+0x26>
 8008460:	6825      	ldr	r5, [r4, #0]
 8008462:	1961      	adds	r1, r4, r5
 8008464:	428b      	cmp	r3, r1
 8008466:	bf04      	itt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	bf04      	itt	eq
 8008470:	1949      	addeq	r1, r1, r5
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	6054      	str	r4, [r2, #4]
 8008476:	e7ca      	b.n	800840e <_free_r+0x26>
 8008478:	b003      	add	sp, #12
 800847a:	bd30      	pop	{r4, r5, pc}
 800847c:	200003b0 	.word	0x200003b0

08008480 <sbrk_aligned>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	4e0e      	ldr	r6, [pc, #56]	; (80084bc <sbrk_aligned+0x3c>)
 8008484:	460c      	mov	r4, r1
 8008486:	6831      	ldr	r1, [r6, #0]
 8008488:	4605      	mov	r5, r0
 800848a:	b911      	cbnz	r1, 8008492 <sbrk_aligned+0x12>
 800848c:	f000 fa0a 	bl	80088a4 <_sbrk_r>
 8008490:	6030      	str	r0, [r6, #0]
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f000 fa05 	bl	80088a4 <_sbrk_r>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d00a      	beq.n	80084b4 <sbrk_aligned+0x34>
 800849e:	1cc4      	adds	r4, r0, #3
 80084a0:	f024 0403 	bic.w	r4, r4, #3
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d007      	beq.n	80084b8 <sbrk_aligned+0x38>
 80084a8:	1a21      	subs	r1, r4, r0
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 f9fa 	bl	80088a4 <_sbrk_r>
 80084b0:	3001      	adds	r0, #1
 80084b2:	d101      	bne.n	80084b8 <sbrk_aligned+0x38>
 80084b4:	f04f 34ff 	mov.w	r4, #4294967295
 80084b8:	4620      	mov	r0, r4
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	200003b4 	.word	0x200003b4

080084c0 <_malloc_r>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	1ccd      	adds	r5, r1, #3
 80084c6:	f025 0503 	bic.w	r5, r5, #3
 80084ca:	3508      	adds	r5, #8
 80084cc:	2d0c      	cmp	r5, #12
 80084ce:	bf38      	it	cc
 80084d0:	250c      	movcc	r5, #12
 80084d2:	2d00      	cmp	r5, #0
 80084d4:	4607      	mov	r7, r0
 80084d6:	db01      	blt.n	80084dc <_malloc_r+0x1c>
 80084d8:	42a9      	cmp	r1, r5
 80084da:	d905      	bls.n	80084e8 <_malloc_r+0x28>
 80084dc:	230c      	movs	r3, #12
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	2600      	movs	r6, #0
 80084e2:	4630      	mov	r0, r6
 80084e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80085bc <_malloc_r+0xfc>
 80084ec:	f000 f868 	bl	80085c0 <__malloc_lock>
 80084f0:	f8d8 3000 	ldr.w	r3, [r8]
 80084f4:	461c      	mov	r4, r3
 80084f6:	bb5c      	cbnz	r4, 8008550 <_malloc_r+0x90>
 80084f8:	4629      	mov	r1, r5
 80084fa:	4638      	mov	r0, r7
 80084fc:	f7ff ffc0 	bl	8008480 <sbrk_aligned>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	4604      	mov	r4, r0
 8008504:	d155      	bne.n	80085b2 <_malloc_r+0xf2>
 8008506:	f8d8 4000 	ldr.w	r4, [r8]
 800850a:	4626      	mov	r6, r4
 800850c:	2e00      	cmp	r6, #0
 800850e:	d145      	bne.n	800859c <_malloc_r+0xdc>
 8008510:	2c00      	cmp	r4, #0
 8008512:	d048      	beq.n	80085a6 <_malloc_r+0xe6>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	4631      	mov	r1, r6
 8008518:	4638      	mov	r0, r7
 800851a:	eb04 0903 	add.w	r9, r4, r3
 800851e:	f000 f9c1 	bl	80088a4 <_sbrk_r>
 8008522:	4581      	cmp	r9, r0
 8008524:	d13f      	bne.n	80085a6 <_malloc_r+0xe6>
 8008526:	6821      	ldr	r1, [r4, #0]
 8008528:	1a6d      	subs	r5, r5, r1
 800852a:	4629      	mov	r1, r5
 800852c:	4638      	mov	r0, r7
 800852e:	f7ff ffa7 	bl	8008480 <sbrk_aligned>
 8008532:	3001      	adds	r0, #1
 8008534:	d037      	beq.n	80085a6 <_malloc_r+0xe6>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	442b      	add	r3, r5
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	f8d8 3000 	ldr.w	r3, [r8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d038      	beq.n	80085b6 <_malloc_r+0xf6>
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	42a2      	cmp	r2, r4
 8008548:	d12b      	bne.n	80085a2 <_malloc_r+0xe2>
 800854a:	2200      	movs	r2, #0
 800854c:	605a      	str	r2, [r3, #4]
 800854e:	e00f      	b.n	8008570 <_malloc_r+0xb0>
 8008550:	6822      	ldr	r2, [r4, #0]
 8008552:	1b52      	subs	r2, r2, r5
 8008554:	d41f      	bmi.n	8008596 <_malloc_r+0xd6>
 8008556:	2a0b      	cmp	r2, #11
 8008558:	d917      	bls.n	800858a <_malloc_r+0xca>
 800855a:	1961      	adds	r1, r4, r5
 800855c:	42a3      	cmp	r3, r4
 800855e:	6025      	str	r5, [r4, #0]
 8008560:	bf18      	it	ne
 8008562:	6059      	strne	r1, [r3, #4]
 8008564:	6863      	ldr	r3, [r4, #4]
 8008566:	bf08      	it	eq
 8008568:	f8c8 1000 	streq.w	r1, [r8]
 800856c:	5162      	str	r2, [r4, r5]
 800856e:	604b      	str	r3, [r1, #4]
 8008570:	4638      	mov	r0, r7
 8008572:	f104 060b 	add.w	r6, r4, #11
 8008576:	f000 f829 	bl	80085cc <__malloc_unlock>
 800857a:	f026 0607 	bic.w	r6, r6, #7
 800857e:	1d23      	adds	r3, r4, #4
 8008580:	1af2      	subs	r2, r6, r3
 8008582:	d0ae      	beq.n	80084e2 <_malloc_r+0x22>
 8008584:	1b9b      	subs	r3, r3, r6
 8008586:	50a3      	str	r3, [r4, r2]
 8008588:	e7ab      	b.n	80084e2 <_malloc_r+0x22>
 800858a:	42a3      	cmp	r3, r4
 800858c:	6862      	ldr	r2, [r4, #4]
 800858e:	d1dd      	bne.n	800854c <_malloc_r+0x8c>
 8008590:	f8c8 2000 	str.w	r2, [r8]
 8008594:	e7ec      	b.n	8008570 <_malloc_r+0xb0>
 8008596:	4623      	mov	r3, r4
 8008598:	6864      	ldr	r4, [r4, #4]
 800859a:	e7ac      	b.n	80084f6 <_malloc_r+0x36>
 800859c:	4634      	mov	r4, r6
 800859e:	6876      	ldr	r6, [r6, #4]
 80085a0:	e7b4      	b.n	800850c <_malloc_r+0x4c>
 80085a2:	4613      	mov	r3, r2
 80085a4:	e7cc      	b.n	8008540 <_malloc_r+0x80>
 80085a6:	230c      	movs	r3, #12
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	4638      	mov	r0, r7
 80085ac:	f000 f80e 	bl	80085cc <__malloc_unlock>
 80085b0:	e797      	b.n	80084e2 <_malloc_r+0x22>
 80085b2:	6025      	str	r5, [r4, #0]
 80085b4:	e7dc      	b.n	8008570 <_malloc_r+0xb0>
 80085b6:	605b      	str	r3, [r3, #4]
 80085b8:	deff      	udf	#255	; 0xff
 80085ba:	bf00      	nop
 80085bc:	200003b0 	.word	0x200003b0

080085c0 <__malloc_lock>:
 80085c0:	4801      	ldr	r0, [pc, #4]	; (80085c8 <__malloc_lock+0x8>)
 80085c2:	f7ff bf0e 	b.w	80083e2 <__retarget_lock_acquire_recursive>
 80085c6:	bf00      	nop
 80085c8:	200003ac 	.word	0x200003ac

080085cc <__malloc_unlock>:
 80085cc:	4801      	ldr	r0, [pc, #4]	; (80085d4 <__malloc_unlock+0x8>)
 80085ce:	f7ff bf09 	b.w	80083e4 <__retarget_lock_release_recursive>
 80085d2:	bf00      	nop
 80085d4:	200003ac 	.word	0x200003ac

080085d8 <__sflush_r>:
 80085d8:	898a      	ldrh	r2, [r1, #12]
 80085da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085de:	4605      	mov	r5, r0
 80085e0:	0710      	lsls	r0, r2, #28
 80085e2:	460c      	mov	r4, r1
 80085e4:	d458      	bmi.n	8008698 <__sflush_r+0xc0>
 80085e6:	684b      	ldr	r3, [r1, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	dc05      	bgt.n	80085f8 <__sflush_r+0x20>
 80085ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dc02      	bgt.n	80085f8 <__sflush_r+0x20>
 80085f2:	2000      	movs	r0, #0
 80085f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	d0f9      	beq.n	80085f2 <__sflush_r+0x1a>
 80085fe:	2300      	movs	r3, #0
 8008600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008604:	682f      	ldr	r7, [r5, #0]
 8008606:	6a21      	ldr	r1, [r4, #32]
 8008608:	602b      	str	r3, [r5, #0]
 800860a:	d032      	beq.n	8008672 <__sflush_r+0x9a>
 800860c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	075a      	lsls	r2, r3, #29
 8008612:	d505      	bpl.n	8008620 <__sflush_r+0x48>
 8008614:	6863      	ldr	r3, [r4, #4]
 8008616:	1ac0      	subs	r0, r0, r3
 8008618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800861a:	b10b      	cbz	r3, 8008620 <__sflush_r+0x48>
 800861c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800861e:	1ac0      	subs	r0, r0, r3
 8008620:	2300      	movs	r3, #0
 8008622:	4602      	mov	r2, r0
 8008624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008626:	6a21      	ldr	r1, [r4, #32]
 8008628:	4628      	mov	r0, r5
 800862a:	47b0      	blx	r6
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	d106      	bne.n	8008640 <__sflush_r+0x68>
 8008632:	6829      	ldr	r1, [r5, #0]
 8008634:	291d      	cmp	r1, #29
 8008636:	d82b      	bhi.n	8008690 <__sflush_r+0xb8>
 8008638:	4a29      	ldr	r2, [pc, #164]	; (80086e0 <__sflush_r+0x108>)
 800863a:	410a      	asrs	r2, r1
 800863c:	07d6      	lsls	r6, r2, #31
 800863e:	d427      	bmi.n	8008690 <__sflush_r+0xb8>
 8008640:	2200      	movs	r2, #0
 8008642:	6062      	str	r2, [r4, #4]
 8008644:	04d9      	lsls	r1, r3, #19
 8008646:	6922      	ldr	r2, [r4, #16]
 8008648:	6022      	str	r2, [r4, #0]
 800864a:	d504      	bpl.n	8008656 <__sflush_r+0x7e>
 800864c:	1c42      	adds	r2, r0, #1
 800864e:	d101      	bne.n	8008654 <__sflush_r+0x7c>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	b903      	cbnz	r3, 8008656 <__sflush_r+0x7e>
 8008654:	6560      	str	r0, [r4, #84]	; 0x54
 8008656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008658:	602f      	str	r7, [r5, #0]
 800865a:	2900      	cmp	r1, #0
 800865c:	d0c9      	beq.n	80085f2 <__sflush_r+0x1a>
 800865e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008662:	4299      	cmp	r1, r3
 8008664:	d002      	beq.n	800866c <__sflush_r+0x94>
 8008666:	4628      	mov	r0, r5
 8008668:	f7ff febe 	bl	80083e8 <_free_r>
 800866c:	2000      	movs	r0, #0
 800866e:	6360      	str	r0, [r4, #52]	; 0x34
 8008670:	e7c0      	b.n	80085f4 <__sflush_r+0x1c>
 8008672:	2301      	movs	r3, #1
 8008674:	4628      	mov	r0, r5
 8008676:	47b0      	blx	r6
 8008678:	1c41      	adds	r1, r0, #1
 800867a:	d1c8      	bne.n	800860e <__sflush_r+0x36>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0c5      	beq.n	800860e <__sflush_r+0x36>
 8008682:	2b1d      	cmp	r3, #29
 8008684:	d001      	beq.n	800868a <__sflush_r+0xb2>
 8008686:	2b16      	cmp	r3, #22
 8008688:	d101      	bne.n	800868e <__sflush_r+0xb6>
 800868a:	602f      	str	r7, [r5, #0]
 800868c:	e7b1      	b.n	80085f2 <__sflush_r+0x1a>
 800868e:	89a3      	ldrh	r3, [r4, #12]
 8008690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008694:	81a3      	strh	r3, [r4, #12]
 8008696:	e7ad      	b.n	80085f4 <__sflush_r+0x1c>
 8008698:	690f      	ldr	r7, [r1, #16]
 800869a:	2f00      	cmp	r7, #0
 800869c:	d0a9      	beq.n	80085f2 <__sflush_r+0x1a>
 800869e:	0793      	lsls	r3, r2, #30
 80086a0:	680e      	ldr	r6, [r1, #0]
 80086a2:	bf08      	it	eq
 80086a4:	694b      	ldreq	r3, [r1, #20]
 80086a6:	600f      	str	r7, [r1, #0]
 80086a8:	bf18      	it	ne
 80086aa:	2300      	movne	r3, #0
 80086ac:	eba6 0807 	sub.w	r8, r6, r7
 80086b0:	608b      	str	r3, [r1, #8]
 80086b2:	f1b8 0f00 	cmp.w	r8, #0
 80086b6:	dd9c      	ble.n	80085f2 <__sflush_r+0x1a>
 80086b8:	6a21      	ldr	r1, [r4, #32]
 80086ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086bc:	4643      	mov	r3, r8
 80086be:	463a      	mov	r2, r7
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b0      	blx	r6
 80086c4:	2800      	cmp	r0, #0
 80086c6:	dc06      	bgt.n	80086d6 <__sflush_r+0xfe>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	e78e      	b.n	80085f4 <__sflush_r+0x1c>
 80086d6:	4407      	add	r7, r0
 80086d8:	eba8 0800 	sub.w	r8, r8, r0
 80086dc:	e7e9      	b.n	80086b2 <__sflush_r+0xda>
 80086de:	bf00      	nop
 80086e0:	dfbffffe 	.word	0xdfbffffe

080086e4 <_fflush_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	690b      	ldr	r3, [r1, #16]
 80086e8:	4605      	mov	r5, r0
 80086ea:	460c      	mov	r4, r1
 80086ec:	b913      	cbnz	r3, 80086f4 <_fflush_r+0x10>
 80086ee:	2500      	movs	r5, #0
 80086f0:	4628      	mov	r0, r5
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	b118      	cbz	r0, 80086fe <_fflush_r+0x1a>
 80086f6:	6a03      	ldr	r3, [r0, #32]
 80086f8:	b90b      	cbnz	r3, 80086fe <_fflush_r+0x1a>
 80086fa:	f7ff fc87 	bl	800800c <__sinit>
 80086fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0f3      	beq.n	80086ee <_fflush_r+0xa>
 8008706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008708:	07d0      	lsls	r0, r2, #31
 800870a:	d404      	bmi.n	8008716 <_fflush_r+0x32>
 800870c:	0599      	lsls	r1, r3, #22
 800870e:	d402      	bmi.n	8008716 <_fflush_r+0x32>
 8008710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008712:	f7ff fe66 	bl	80083e2 <__retarget_lock_acquire_recursive>
 8008716:	4628      	mov	r0, r5
 8008718:	4621      	mov	r1, r4
 800871a:	f7ff ff5d 	bl	80085d8 <__sflush_r>
 800871e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008720:	07da      	lsls	r2, r3, #31
 8008722:	4605      	mov	r5, r0
 8008724:	d4e4      	bmi.n	80086f0 <_fflush_r+0xc>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	059b      	lsls	r3, r3, #22
 800872a:	d4e1      	bmi.n	80086f0 <_fflush_r+0xc>
 800872c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800872e:	f7ff fe59 	bl	80083e4 <__retarget_lock_release_recursive>
 8008732:	e7dd      	b.n	80086f0 <_fflush_r+0xc>

08008734 <__swhatbuf_r>:
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	460c      	mov	r4, r1
 8008738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873c:	2900      	cmp	r1, #0
 800873e:	b096      	sub	sp, #88	; 0x58
 8008740:	4615      	mov	r5, r2
 8008742:	461e      	mov	r6, r3
 8008744:	da0d      	bge.n	8008762 <__swhatbuf_r+0x2e>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	f013 0f80 	tst.w	r3, #128	; 0x80
 800874c:	f04f 0100 	mov.w	r1, #0
 8008750:	bf0c      	ite	eq
 8008752:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008756:	2340      	movne	r3, #64	; 0x40
 8008758:	2000      	movs	r0, #0
 800875a:	6031      	str	r1, [r6, #0]
 800875c:	602b      	str	r3, [r5, #0]
 800875e:	b016      	add	sp, #88	; 0x58
 8008760:	bd70      	pop	{r4, r5, r6, pc}
 8008762:	466a      	mov	r2, sp
 8008764:	f000 f87c 	bl	8008860 <_fstat_r>
 8008768:	2800      	cmp	r0, #0
 800876a:	dbec      	blt.n	8008746 <__swhatbuf_r+0x12>
 800876c:	9901      	ldr	r1, [sp, #4]
 800876e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008772:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008776:	4259      	negs	r1, r3
 8008778:	4159      	adcs	r1, r3
 800877a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800877e:	e7eb      	b.n	8008758 <__swhatbuf_r+0x24>

08008780 <__smakebuf_r>:
 8008780:	898b      	ldrh	r3, [r1, #12]
 8008782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008784:	079d      	lsls	r5, r3, #30
 8008786:	4606      	mov	r6, r0
 8008788:	460c      	mov	r4, r1
 800878a:	d507      	bpl.n	800879c <__smakebuf_r+0x1c>
 800878c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	2301      	movs	r3, #1
 8008796:	6163      	str	r3, [r4, #20]
 8008798:	b002      	add	sp, #8
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	ab01      	add	r3, sp, #4
 800879e:	466a      	mov	r2, sp
 80087a0:	f7ff ffc8 	bl	8008734 <__swhatbuf_r>
 80087a4:	9900      	ldr	r1, [sp, #0]
 80087a6:	4605      	mov	r5, r0
 80087a8:	4630      	mov	r0, r6
 80087aa:	f7ff fe89 	bl	80084c0 <_malloc_r>
 80087ae:	b948      	cbnz	r0, 80087c4 <__smakebuf_r+0x44>
 80087b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b4:	059a      	lsls	r2, r3, #22
 80087b6:	d4ef      	bmi.n	8008798 <__smakebuf_r+0x18>
 80087b8:	f023 0303 	bic.w	r3, r3, #3
 80087bc:	f043 0302 	orr.w	r3, r3, #2
 80087c0:	81a3      	strh	r3, [r4, #12]
 80087c2:	e7e3      	b.n	800878c <__smakebuf_r+0xc>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	6020      	str	r0, [r4, #0]
 80087c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087cc:	81a3      	strh	r3, [r4, #12]
 80087ce:	9b00      	ldr	r3, [sp, #0]
 80087d0:	6163      	str	r3, [r4, #20]
 80087d2:	9b01      	ldr	r3, [sp, #4]
 80087d4:	6120      	str	r0, [r4, #16]
 80087d6:	b15b      	cbz	r3, 80087f0 <__smakebuf_r+0x70>
 80087d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087dc:	4630      	mov	r0, r6
 80087de:	f000 f851 	bl	8008884 <_isatty_r>
 80087e2:	b128      	cbz	r0, 80087f0 <__smakebuf_r+0x70>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	f023 0303 	bic.w	r3, r3, #3
 80087ea:	f043 0301 	orr.w	r3, r3, #1
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	431d      	orrs	r5, r3
 80087f4:	81a5      	strh	r5, [r4, #12]
 80087f6:	e7cf      	b.n	8008798 <__smakebuf_r+0x18>

080087f8 <_putc_r>:
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	460d      	mov	r5, r1
 80087fc:	4614      	mov	r4, r2
 80087fe:	4606      	mov	r6, r0
 8008800:	b118      	cbz	r0, 800880a <_putc_r+0x12>
 8008802:	6a03      	ldr	r3, [r0, #32]
 8008804:	b90b      	cbnz	r3, 800880a <_putc_r+0x12>
 8008806:	f7ff fc01 	bl	800800c <__sinit>
 800880a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800880c:	07d8      	lsls	r0, r3, #31
 800880e:	d405      	bmi.n	800881c <_putc_r+0x24>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	0599      	lsls	r1, r3, #22
 8008814:	d402      	bmi.n	800881c <_putc_r+0x24>
 8008816:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008818:	f7ff fde3 	bl	80083e2 <__retarget_lock_acquire_recursive>
 800881c:	68a3      	ldr	r3, [r4, #8]
 800881e:	3b01      	subs	r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	60a3      	str	r3, [r4, #8]
 8008824:	da05      	bge.n	8008832 <_putc_r+0x3a>
 8008826:	69a2      	ldr	r2, [r4, #24]
 8008828:	4293      	cmp	r3, r2
 800882a:	db12      	blt.n	8008852 <_putc_r+0x5a>
 800882c:	b2eb      	uxtb	r3, r5
 800882e:	2b0a      	cmp	r3, #10
 8008830:	d00f      	beq.n	8008852 <_putc_r+0x5a>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	6022      	str	r2, [r4, #0]
 8008838:	701d      	strb	r5, [r3, #0]
 800883a:	b2ed      	uxtb	r5, r5
 800883c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800883e:	07da      	lsls	r2, r3, #31
 8008840:	d405      	bmi.n	800884e <_putc_r+0x56>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	059b      	lsls	r3, r3, #22
 8008846:	d402      	bmi.n	800884e <_putc_r+0x56>
 8008848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800884a:	f7ff fdcb 	bl	80083e4 <__retarget_lock_release_recursive>
 800884e:	4628      	mov	r0, r5
 8008850:	bd70      	pop	{r4, r5, r6, pc}
 8008852:	4629      	mov	r1, r5
 8008854:	4622      	mov	r2, r4
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff fcb5 	bl	80081c6 <__swbuf_r>
 800885c:	4605      	mov	r5, r0
 800885e:	e7ed      	b.n	800883c <_putc_r+0x44>

08008860 <_fstat_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d07      	ldr	r5, [pc, #28]	; (8008880 <_fstat_r+0x20>)
 8008864:	2300      	movs	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	4608      	mov	r0, r1
 800886a:	4611      	mov	r1, r2
 800886c:	602b      	str	r3, [r5, #0]
 800886e:	f7fc fae8 	bl	8004e42 <_fstat>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	d102      	bne.n	800887c <_fstat_r+0x1c>
 8008876:	682b      	ldr	r3, [r5, #0]
 8008878:	b103      	cbz	r3, 800887c <_fstat_r+0x1c>
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	bf00      	nop
 8008880:	200003a8 	.word	0x200003a8

08008884 <_isatty_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d06      	ldr	r5, [pc, #24]	; (80088a0 <_isatty_r+0x1c>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	f7fc fae7 	bl	8004e62 <_isatty>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_isatty_r+0x1a>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_isatty_r+0x1a>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	200003a8 	.word	0x200003a8

080088a4 <_sbrk_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d06      	ldr	r5, [pc, #24]	; (80088c0 <_sbrk_r+0x1c>)
 80088a8:	2300      	movs	r3, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	f7fc faf0 	bl	8004e94 <_sbrk>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_sbrk_r+0x1a>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_sbrk_r+0x1a>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	200003a8 	.word	0x200003a8

080088c4 <_init>:
 80088c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c6:	bf00      	nop
 80088c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ca:	bc08      	pop	{r3}
 80088cc:	469e      	mov	lr, r3
 80088ce:	4770      	bx	lr

080088d0 <_fini>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	bf00      	nop
 80088d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d6:	bc08      	pop	{r3}
 80088d8:	469e      	mov	lr, r3
 80088da:	4770      	bx	lr
